# 3.13.3 Documentation
URL: https://docs.python.org/3/
Section: 0/2
Description: The official Python documentation.

Content:

================================================================================

# Python 3.13.3 documentation

Welcome! This is the official documentation for Python 3.13.3.

Documentation sections:

What's new in Python 3.13?Orall "What's new" documents since Python 2.0

TutorialStart here: a tour of Python's syntax and features

Library referenceStandard library and builtins

Language referenceSyntax and language elements

Python setup and usageHow to install, configure, and use Python

Python HOWTOsIn-depth topic manuals

Installing Python modulesThird-party modules and PyPI.org

Distributing Python modulesPublishing modules for use by other people

Extending and embeddingFor C/C++ programmers

Python's C APIC API reference

FAQsFrequently asked questions (with answers!)

DeprecationsDeprecated functionality

Indices, glossary, and search:

Global module indexAll modules and libraries

General indexAll functions, classes, and terms

GlossaryTerms explained

Search pageSearch this documentation

Complete table of contentsLists all sections and subsections

Project information:

Reporting issues

Contributing to Docs

Download the documentation

History and license of Python

About the documentation

================================================================================

================================================================================

# Python Frequently Asked Questions — Python 3.13.3 documentation
URL: https://docs.python.org/3/faq/index.html
Section: 1/2
Description: General Python FAQ, Programming FAQ, Design and History FAQ, Library and Extension FAQ, Extending/Embedding FAQ, Python on Windows FAQ, Graphic User Interface FAQ, “Why is Python Installed on my Co...

Content:

================================================================================

# Python Frequently Asked Questions¶

- General Python FAQ
- Programming FAQ
- Design and History FAQ
- Library and Extension FAQ
- Extending/Embedding FAQ
- Python on Windows FAQ
- Graphic User Interface FAQ
- “Why is Python Installed on my Computer?” FAQ

================================================================================

================================================================================

# Dealing with Bugs — Python 3.13.3 documentation
URL: https://docs.python.org/bugs.html
Section: 1/2
Description: Python is a mature programming language which has established a reputation for stability. In order to maintain this reputation, the developers would like to know of any deficiencies you find in Pyt...

Content:

================================================================================

# Dealing with Bugs¶

Python is a mature programming language which has established a reputation for stability. In order to maintain this reputation, the developers would like to know of any deficiencies you find in Python.

It can be sometimes faster to fix bugs yourself and contribute patches to Python as it streamlines the process and involves less people. Learn how tocontribute.

================================================================================

## Documentation bugs¶

If you find a bug in this documentation or would like to propose an improvement, please submit a bug report on thetracker. If you have a suggestion on how to fix it, include that as well.

You can also open a discussion item on ourDocumentation Discourse forum.

If you find a bug in the theme (HTML / CSS / JavaScript) of the documentation, please submit a bug report on thepython-doc-theme bug tracker.

If you’re short on time, you can also email documentation bug reports todocs@python.org(behavioral bugs can be sent topython-list@python.org). ‘docs@’ is a mailing list run by volunteers; your request will be noticed, though it may take a while to be processed.

Documentation bugs: A list of documentation bugs that have been submitted to the Python issue tracker.

Issue Tracking: Overview of the process involved in reporting an improvement on the tracker.

Helping with Documentation: Comprehensive guide for individuals that are interested in contributing to Python documentation.

Documentation Translations: A list of GitHub pages for documentation translation and their primary contacts.

A list of documentation bugs that have been submitted to the Python issue tracker.

Overview of the process involved in reporting an improvement on the tracker.

Comprehensive guide for individuals that are interested in contributing to Python documentation.

A list of GitHub pages for documentation translation and their primary contacts.

================================================================================

## Using the Python issue tracker¶

Issue reports for Python itself should be submitted via the GitHub issues tracker (https://github.com/python/cpython/issues). The GitHub issues tracker offers a web form which allows pertinent information to be entered and submitted to the developers.

The first step in filing a report is to determine whether the problem has already been reported. The advantage in doing so, aside from saving the developers’ time, is that you learn what has been done to fix it; it may be that the problem has already been fixed for the next release, or additional information is needed (in which case you are welcome to provide it if you can!). To do this, search the tracker using the search box at the top of the page.

If the problem you’re reporting is not already in the list, log in to GitHub. If you don’t already have a GitHub account, create a new account using the “Sign up” link. It is not possible to submit a bug report anonymously.

Being now logged in, you can submit an issue. Click on the “New issue” button in the top bar to report a new issue.

The submission form has two fields, “Title” and “Comment”.

For the “Title” field, enter averyshort description of the problem; fewer than ten words is good.

In the “Comment” field, describe the problem in detail, including what you expected to happen and what did happen. Be sure to include whether any extension modules were involved, and what hardware and software platform you were using (including version information as appropriate).

Each issue report will be reviewed by a developer who will determine what needs to be done to correct the problem. You will receive an update each time an action is taken on the issue.

How to Report Bugs Effectively: Article which goes into some detail about how to create a useful bug report.
This describes what kind of information is useful and why it is useful.

Bug Writing Guidelines: Information about writing a good bug report.  Some of this is specific to the
Mozilla project, but describes general good practices.

Article which goes into some detail about how to create a useful bug report. This describes what kind of information is useful and why it is useful.

Information about writing a good bug report. Some of this is specific to the Mozilla project, but describes general good practices.

================================================================================

## Getting started contributing to Python yourself¶

Beyond just reporting bugs that you find, you are also welcome to submit patches to fix them. You can find more information on how to get started patching Python in thePython Developer’s Guide. If you have questions, thecore-mentorship mailing listis a friendly place to get answers to any and all questions pertaining to the process of fixing issues in Python.

================================================================================

================================================================================

# 3.6.15 Documentation
URL: https://docs.python.org/3.6/
Section: 1/2

Content:

================================================================================

# Python 3.6.15 documentation

Welcome! This is the documentation for Python 3.6.15.

Parts of the documentation:

What's new in Python 3.6?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Installing Python Modulesinstalling from the Python Package Index & other sources

Distributing Python Modulespublishing modules for installation by others

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

About the documentation

History and License of Python

================================================================================

================================================================================

# 3.11.12 Documentation
URL: https://docs.python.org/3.11/
Section: 1/2

Content:

================================================================================

# Python 3.11.12 documentation

Welcome! This is the official documentation for Python 3.11.12.

Documentation sections:

What's new in Python 3.11?Orall "What's new" documents since Python 2.0

TutorialStart here: a tour of Python's syntax and features

Library referenceStandard library and builtins

Language referenceSyntax and language elements

Python setup and usageHow to install, configure, and use Python

Python HOWTOsIn-depth topic manuals

Installing Python modulesThird-party modules and PyPI.org

Distributing Python modulesPublishing modules for use by other people

Extending and embeddingFor C/C++ programmers

Python's C APIC API reference

FAQsFrequently asked questions (with answers!)

Indices, glossary, and search:

Global module indexAll modules and libraries

General indexAll functions, classes, and terms

GlossaryTerms explained

Search pageSearch this documentation

Complete table of contentsLists all sections and subsections

Project information:

Reporting issues

Contributing to Docs

Download the documentation

History and license of Python

About the documentation

================================================================================

================================================================================

# Copyright — Python 3.13.3 documentation
URL: https://docs.python.org/3/copyright.html
Section: 1/2
Description: Python and this documentation is: Copyright © 2001-2024 Python Software Foundation. All rights reserved. Copyright © 2000 BeOpen.com. All rights reserved. Copyright © 1995-2000 Corporation for Nati...

Content:

================================================================================

# Copyright¶

Python and this documentation is:

Copyright © 2001-2024 Python Software Foundation. All rights reserved.

Copyright © 2000 BeOpen.com. All rights reserved.

Copyright © 1995-2000 Corporation for National Research Initiatives. All rights reserved.

Copyright © 1991-1995 Stichting Mathematisch Centrum. All rights reserved.

SeeHistory and Licensefor complete license and permissions information.

================================================================================

================================================================================

# Extending and Embedding the Python Interpreter — Python 3.13.3 documentation
URL: https://docs.python.org/3/extending/index.html
Section: 1/2
Description: This document describes how to write modules in C or C++ to extend the Python interpreter with new modules. Those modules can not only define new functions but also new object types and their metho...

Content:

================================================================================

# Extending and Embedding the Python Interpreter¶

This document describes how to write modules in C or C++ to extend the Python interpreter with new modules. Those modules can not only define new functions but also new object types and their methods. The document also describes how to embed the Python interpreter in another application, for use as an extension language. Finally, it shows how to compile and link extension modules so that they can be loaded dynamically (at run time) into the interpreter, if the underlying operating system supports this feature.

This document assumes basic knowledge about Python. For an informal introduction to the language, seeThe Python Tutorial.The Python Language Referencegives a more formal definition of the language.The Python Standard Librarydocuments the existing object types, functions and modules (both built-in and written in Python) that give the language its wide application range.

For a detailed description of the whole Python/C API, see the separatePython/C API Reference Manual.

================================================================================

## Recommended third party tools¶

This guide only covers the basic tools for creating extensions provided as part of this version of CPython. Third party tools likeCython,cffi,SWIGandNumbaoffer both simpler and more sophisticated approaches to creating C and C++ extensions for Python.

Python Packaging User Guide: Binary Extensions: The Python Packaging User Guide not only covers several available
tools that simplify the creation of binary extensions, but also
discusses the various reasons why creating an extension module may be
desirable in the first place.

The Python Packaging User Guide not only covers several available tools that simplify the creation of binary extensions, but also discusses the various reasons why creating an extension module may be desirable in the first place.

================================================================================

## Creating extensions without third party tools¶

This section of the guide covers creating C and C++ extensions without assistance from third party tools. It is intended primarily for creators of those tools, rather than being a recommended way to create your own C extensions.

- 1. Extending Python with C or C++1.1. A Simple Example1.2. Intermezzo: Errors and Exceptions1.3. Back to the Example1.4. The Module’s Method Table and Initialization Function1.5. Compilation and Linkage1.6. Calling Python Functions from C1.7. Extracting Parameters in Extension Functions1.8. Keyword Parameters for Extension Functions1.9. Building Arbitrary Values1.10. Reference Counts1.11. Writing Extensions in C++1.12. Providing a C API for an Extension Module
- 2. Defining Extension Types: Tutorial2.1. The Basics2.2. Adding data and methods to the Basic example2.3. Providing finer control over data attributes2.4. Supporting cyclic garbage collection2.5. Subclassing other types
- 3. Defining Extension Types: Assorted Topics3.1. Finalization and De-allocation3.2. Object Presentation3.3. Attribute Management3.4. Object Comparison3.5. Abstract Protocol Support3.6. Weak Reference Support3.7. More Suggestions
- 4. Building C and C++ Extensions4.1. Building C and C++ Extensions with setuptools
- 5. Building C and C++ Extensions on Windows5.1. A Cookbook Approach5.2. Differences Between Unix and Windows5.3. Using DLLs in Practice

- 1.1. A Simple Example
- 1.2. Intermezzo: Errors and Exceptions
- 1.3. Back to the Example
- 1.4. The Module’s Method Table and Initialization Function
- 1.5. Compilation and Linkage
- 1.6. Calling Python Functions from C
- 1.7. Extracting Parameters in Extension Functions
- 1.8. Keyword Parameters for Extension Functions
- 1.9. Building Arbitrary Values
- 1.10. Reference Counts
- 1.11. Writing Extensions in C++
- 1.12. Providing a C API for an Extension Module

- 2.1. The Basics
- 2.2. Adding data and methods to the Basic example
- 2.3. Providing finer control over data attributes
- 2.4. Supporting cyclic garbage collection
- 2.5. Subclassing other types

- 3.1. Finalization and De-allocation
- 3.2. Object Presentation
- 3.3. Attribute Management
- 3.4. Object Comparison
- 3.5. Abstract Protocol Support
- 3.6. Weak Reference Support
- 3.7. More Suggestions

- 4.1. Building C and C++ Extensions with setuptools

- 5.1. A Cookbook Approach
- 5.2. Differences Between Unix and Windows
- 5.3. Using DLLs in Practice

================================================================================

## Embedding the CPython runtime in a larger application¶

Sometimes, rather than creating an extension that runs inside the Python interpreter as the main application, it is desirable to instead embed the CPython runtime inside a larger application. This section covers some of the details involved in doing that successfully.

- 1. Embedding Python in Another Application1.1. Very High Level Embedding1.2. Beyond Very High Level Embedding: An overview1.3. Pure Embedding1.4. Extending Embedded Python1.5. Embedding Python in C++1.6. Compiling and Linking under Unix-like systems

- 1.1. Very High Level Embedding
- 1.2. Beyond Very High Level Embedding: An overview
- 1.3. Pure Embedding
- 1.4. Extending Embedded Python
- 1.5. Embedding Python in C++
- 1.6. Compiling and Linking under Unix-like systems

================================================================================

================================================================================

# Index — Python 3.13.3 documentation
URL: https://docs.python.org/3/genindex.html
Section: 1/2

Content:

================================================================================

### Navigation

- EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
- 3.13.3 Documentation»
- ThemeAutoLightDark|

Index pages by letter:

Symbols|_|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z

Full index on one page(can be huge)

================================================================================

================================================================================

# History and License — Python 3.13.3 documentation
URL: https://docs.python.org/3/license.html
Section: 1/2
Description: History of the software: Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see https://www.cwi.nl) in the Netherlands as a successor of a language ca...

Content:

================================================================================

# History and License¶

================================================================================

## History of the software¶

Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, seehttps://www.cwi.nl) in the Netherlands as a successor of a language called ABC. Guido remains Python’s principal author, although it includes many contributions from others.

In 1995, Guido continued his work on Python at the Corporation for National Research Initiatives (CNRI, seehttps://www.cnri.reston.va.us) in Reston, Virginia where he released several versions of the software.

In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen PythonLabs team. In October of the same year, the PythonLabs team moved to Digital Creations, which became Zope Corporation. In 2001, the Python Software Foundation (PSF, seehttps://www.python.org/psf/) was formed, a non-profit organization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring member of the PSF.

All Python releases are Open Source (seehttps://opensource.orgfor the Open Source Definition). Historically, most, but not all, Python releases have also been GPL-compatible; the table below summarizes the various releases.

Derived from

GPL-compatible? (1)

0.9.0 thru 1.2

1.3 thru 1.5.2

2.2 and above

- GPL-compatible doesn’t mean that we’re distributing Python under the GPL.
All Python licenses, unlike the GPL, let you distribute a modified version
without making your changes open source. The GPL-compatible licenses make
it possible to combine Python with other software that is released under
the GPL; the others don’t.
- According to Richard Stallman, 1.6.1 is not GPL-compatible, because its license
has a choice of law clause. According to CNRI, however, Stallman’s lawyer has
told CNRI’s lawyer that 1.6.1 is “not incompatible” with the GPL.

Thanks to the many outside volunteers who have worked under Guido’s direction to make these releases possible.

================================================================================

## Terms and conditions for accessing or otherwise using Python¶

Python software and documentation are licensed under the Python Software Foundation License Version 2.

Starting with Python 3.8.6, examples, recipes, and other code in the documentation are dual licensed under the PSF License Version 2 and theZero-Clause BSD license.

Some software incorporated into Python is under different licenses. The licenses are listed with code falling under that license. SeeLicenses and Acknowledgements for Incorporated Softwarefor an incomplete list of these licenses.

================================================================================

### PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2¶

```
1. This LICENSE AGREEMENT is between the Python Software Foundation ("PSF"), and
   the Individual or Organization ("Licensee") accessing and otherwise using this
   software ("Python") in source or binary form and its associated documentation.

2. Subject to the terms and conditions of this License Agreement, PSF hereby
   grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
   analyze, test, perform and/or display publicly, prepare derivative works,
   distribute, and otherwise use Python alone or in any derivative
   version, provided, however, that PSF's License Agreement and PSF's notice of
   copyright, i.e., "Copyright © 2001-2024 Python Software Foundation; All Rights
   Reserved" are retained in Python alone or in any derivative version
   prepared by Licensee.

3. In the event Licensee prepares a derivative work that is based on or
   incorporates Python or any part thereof, and wants to make the
   derivative work available to others as provided herein, then Licensee hereby
   agrees to include in any such work a brief summary of the changes made to Python.

4. PSF is making Python available to Licensee on an "AS IS" basis.
   PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF
   EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
   WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
   USE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
   FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
   MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE
   THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.

6. This License Agreement will automatically terminate upon a material breach of
   its terms and conditions.

7. Nothing in this License Agreement shall be deemed to create any relationship
   of agency, partnership, or joint venture between PSF and Licensee.  This License
   Agreement does not grant permission to use PSF trademarks or trade name in a
   trademark sense to endorse or promote products or services of Licensee, or any
   third party.

8. By copying, installing or otherwise using Python, Licensee agrees
   to be bound by the terms and conditions of this License Agreement.
```

================================================================================

### BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0¶

BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1

```
1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an office at
   160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization
   ("Licensee") accessing and otherwise using this software in source or binary
   form and its associated documentation ("the Software").

2. Subject to the terms and conditions of this BeOpen Python License Agreement,
   BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license
   to reproduce, analyze, test, perform and/or display publicly, prepare derivative
   works, distribute, and otherwise use the Software alone or in any derivative
   version, provided, however, that the BeOpen Python License is retained in the
   Software, alone or in any derivative version prepared by Licensee.

3. BeOpen is making the Software available to Licensee on an "AS IS" basis.
   BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF
   EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
   WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
   USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR
   ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,
   MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF
   ADVISED OF THE POSSIBILITY THEREOF.

5. This License Agreement will automatically terminate upon a material breach of
   its terms and conditions.

6. This License Agreement shall be governed by and interpreted in all respects
   by the law of the State of California, excluding conflict of law provisions.
   Nothing in this License Agreement shall be deemed to create any relationship of
   agency, partnership, or joint venture between BeOpen and Licensee.  This License
   Agreement does not grant permission to use BeOpen trademarks or trade names in a
   trademark sense to endorse or promote products or services of Licensee, or any
   third party.  As an exception, the "BeOpen Python" logos available at
   http://www.pythonlabs.com/logos.html may be used according to the permissions
   granted on that web page.

7. By copying, installing or otherwise using the software, Licensee agrees to be
   bound by the terms and conditions of this License Agreement.
```

================================================================================

### CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1¶

```
1. This LICENSE AGREEMENT is between the Corporation for National Research
   Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191
   ("CNRI"), and the Individual or Organization ("Licensee") accessing and
   otherwise using Python 1.6.1 software in source or binary form and its
   associated documentation.

2. Subject to the terms and conditions of this License Agreement, CNRI hereby
   grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
   analyze, test, perform and/or display publicly, prepare derivative works,
   distribute, and otherwise use Python 1.6.1 alone or in any derivative version,
   provided, however, that CNRI's License Agreement and CNRI's notice of copyright,
   i.e., "Copyright © 1995-2001 Corporation for National Research Initiatives; All
   Rights Reserved" are retained in Python 1.6.1 alone or in any derivative version
   prepared by Licensee.  Alternately, in lieu of CNRI's License Agreement,
   Licensee may substitute the following text (omitting the quotes): "Python 1.6.1
   is made available subject to the terms and conditions in CNRI's License
   Agreement.  This Agreement together with Python 1.6.1 may be located on the
   internet using the following unique, persistent identifier (known as a handle):
   1895.22/1013.  This Agreement may also be obtained from a proxy server on the
   internet using the following URL: http://hdl.handle.net/1895.22/1013".

3. In the event Licensee prepares a derivative work that is based on or
   incorporates Python 1.6.1 or any part thereof, and wants to make the derivative
   work available to others as provided herein, then Licensee hereby agrees to
   include in any such work a brief summary of the changes made to Python 1.6.1.

4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS" basis.  CNRI
   MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF EXAMPLE,
   BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY
   OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF
   PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR
   ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
   MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE
   THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.

6. This License Agreement will automatically terminate upon a material breach of
   its terms and conditions.

7. This License Agreement shall be governed by the federal intellectual property
   law of the United States, including without limitation the federal copyright
   law, and, to the extent such U.S. federal law does not apply, by the law of the
   Commonwealth of Virginia, excluding Virginia's conflict of law provisions.
   Notwithstanding the foregoing, with regard to derivative works based on Python
   1.6.1 that incorporate non-separable material that was previously distributed
   under the GNU General Public License (GPL), the law of the Commonwealth of
   Virginia shall govern this License Agreement only as to issues arising under or
   with respect to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in
   this License Agreement shall be deemed to create any relationship of agency,
   partnership, or joint venture between CNRI and Licensee.  This License Agreement
   does not grant permission to use CNRI trademarks or trade name in a trademark
   sense to endorse or promote products or services of Licensee, or any third
   party.

8. By clicking on the "ACCEPT" button where indicated, or by copying, installing
   or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and
   conditions of this License Agreement.
```

================================================================================

### CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2¶

```
Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
Netherlands.  All rights reserved.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting documentation, and that
the name of Stichting Mathematisch Centrum or CWI not be used in advertising or
publicity pertaining to distribution of the software without specific, written
prior permission.

STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT
OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.
```

================================================================================

### ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION¶

```
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
```

================================================================================

## Licenses and Acknowledgements for Incorporated Software¶

This section is an incomplete, but growing list of licenses and acknowledgements for third-party software incorporated in the Python distribution.

================================================================================

### Mersenne Twister¶

The_randomC extension underlying therandommodule includes code based on a download fromhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. The following are the verbatim comments from the original code:

```
A C-program for MT19937, with initialization improved 2002/1/26.
Coded by Takuji Nishimura and Makoto Matsumoto.

Before using, initialize the state by using init_genrand(seed)
or init_by_array(init_key, key_length).

Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 3. The names of its contributors may not be used to endorse or promote
    products derived from this software without specific prior written
    permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Any feedback is very welcome.
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
```

Thesocketmodule uses the functions,getaddrinfo(), andgetnameinfo(), which are coded in separate source files from the WIDE Project,https://www.wide.ad.jp/.

```
getaddrinfo()
```

```
getnameinfo()
```

```
Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. Neither the name of the project nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
```

================================================================================

### Asynchronous socket services¶

Thetest.support.asynchatandtest.support.asyncoremodules contain the following notice:

```
test.support.asynchat
```

```
test.support.asyncore
```

```
Copyright 1996 by Sam Rushing

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of Sam
Rushing not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.

SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
```

================================================================================

### Cookie management¶

Thehttp.cookiesmodule contains the following notice:

```
http.cookies
```

```
Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>

               All Rights Reserved

Permission to use, copy, modify, and distribute this software
and its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Timothy O'Malley  not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.

Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
```

================================================================================

### Execution tracing¶

Thetracemodule contains the following notice:

```
portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
err...  reserved and offered to the public under the terms of the
Python 2.2 license.
Author: Zooko O'Whielacronx
http://zooko.com/
mailto:zooko@zooko.com

Copyright 2000, Mojam Media, Inc., all rights reserved.
Author: Skip Montanaro

Copyright 1999, Bioreason, Inc., all rights reserved.
Author: Andrew Dalke

Copyright 1995-1997, Automatrix, Inc., all rights reserved.
Author: Skip Montanaro

Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.

Permission to use, copy, modify, and distribute this Python software and
its associated documentation for any purpose without fee is hereby
granted, provided that the above copyright notice appears in all copies,
and that both that copyright notice and this permission notice appear in
supporting documentation, and that the name of neither Automatrix,
Bioreason or Mojam Media be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.
```

================================================================================

### UUencode and UUdecode functions¶

Theuucodec contains the following notice:

```
Copyright 1994 by Lance Ellinghouse
Cathedral City, California Republic, United States of America.
                       All Rights Reserved
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Lance Ellinghouse
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.
LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Modified by Jack Jansen, CWI, July 1995:
- Use binascii module to do the actual line-by-line conversion
  between ascii and binary. This results in a 1000-fold speedup. The C
  version is still 5 times faster, though.
- Arguments more compliant with Python standard
```

================================================================================

### XML Remote Procedure Calls¶

Thexmlrpc.clientmodule contains the following notice:

```
xmlrpc.client
```

```
The XML-RPC client interface is

Copyright (c) 1999-2002 by Secret Labs AB
Copyright (c) 1999-2002 by Fredrik Lundh

By obtaining, using, and/or copying this software and/or its
associated documentation, you agree that you have read, understood,
and will comply with the following terms and conditions:

Permission to use, copy, modify, and distribute this software and
its associated documentation for any purpose and without fee is
hereby granted, provided that the above copyright notice appears in
all copies, and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Secret Labs AB or the author not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.

SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
OF THIS SOFTWARE.
```

================================================================================

### test_epoll¶

Thetest.test_epollmodule contains the following notice:

```
test.test_epoll
```

```
Copyright (c) 2001-2006 Twisted Matrix Laboratories.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```

================================================================================

### Select kqueue¶

Theselectmodule contains the following notice for the kqueue interface:

```
Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
```

================================================================================

### SipHash24¶

The filePython/pyhash.ccontains Marek Majkowski’ implementation of Dan Bernstein’s SipHash24 algorithm. It contains the following note:

```
Python/pyhash.c
```

```
<MIT License>
Copyright (c) 2013  Marek Majkowski <marek@popcount.org>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
</MIT License>

Original location:
   https://github.com/majek/csiphash/

Solution inspired by code from:
   Samuel Neves (supercop/crypto_auth/siphash24/little)
   djb (supercop/crypto_auth/siphash24/little2)
   Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)
```

================================================================================

### strtod and dtoa¶

The filePython/dtoa.c, which supplies C functions dtoa and strtod for conversion of C doubles to and from strings, is derived from the file of the same name by David M. Gay, currently available fromhttps://web.archive.org/web/20220517033456/http://www.netlib.org/fp/dtoa.c. The original file, as retrieved on March 16, 2009, contains the following copyright and licensing notice:

```
Python/dtoa.c
```

```
/****************************************************************
 *
 * The author of this software is David M. Gay.
 *
 * Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose without fee is hereby granted, provided that this entire notice
 * is included in all copies of any software which is or includes a copy
 * or modification of this software and in all copies of the supporting
 * documentation for such software.
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
 * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 ***************************************************************/
```

The moduleshashlib,posixandssluse the OpenSSL library for added performance if made available by the operating system. Additionally, the Windows and macOS installers for Python may include a copy of the OpenSSL libraries, so we include a copy of the OpenSSL license here. For the OpenSSL 3.0 release, and later releases derived from that, the Apache License v2 applies:

================================================================================

```
Apache License
                        Version 2.0, January 2004
                     https://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

   "License" shall mean the terms and conditions for use, reproduction,
   and distribution as defined by Sections 1 through 9 of this document.

   "Licensor" shall mean the copyright owner or entity authorized by
   the copyright owner that is granting the License.

   "Legal Entity" shall mean the union of the acting entity and all
   other entities that control, are controlled by, or are under common
   control with that entity. For the purposes of this definition,
   "control" means (i) the power, direct or indirect, to cause the
   direction or management of such entity, whether by contract or
   otherwise, or (ii) ownership of fifty percent (50%) or more of the
   outstanding shares, or (iii) beneficial ownership of such entity.

   "You" (or "Your") shall mean an individual or Legal Entity
   exercising permissions granted by this License.

   "Source" form shall mean the preferred form for making modifications,
   including but not limited to software source code, documentation
   source, and configuration files.

   "Object" form shall mean any form resulting from mechanical
   transformation or translation of a Source form, including but
   not limited to compiled object code, generated documentation,
   and conversions to other media types.

   "Work" shall mean the work of authorship, whether in Source or
   Object form, made available under the License, as indicated by a
   copyright notice that is included in or attached to the work
   (an example is provided in the Appendix below).

   "Derivative Works" shall mean any work, whether in Source or Object
   form, that is based on (or derived from) the Work and for which the
   editorial revisions, annotations, elaborations, or other modifications
   represent, as a whole, an original work of authorship. For the purposes
   of this License, Derivative Works shall not include works that remain
   separable from, or merely link (or bind by name) to the interfaces of,
   the Work and Derivative Works thereof.

   "Contribution" shall mean any work of authorship, including
   the original version of the Work and any modifications or additions
   to that Work or Derivative Works thereof, that is intentionally
   submitted to Licensor for inclusion in the Work by the copyright owner
   or by an individual or Legal Entity authorized to submit on behalf of
   the copyright owner. For the purposes of this definition, "submitted"
   means any form of electronic, verbal, or written communication sent
   to the Licensor or its representatives, including but not limited to
   communication on electronic mailing lists, source code control systems,
   and issue tracking systems that are managed by, or on behalf of, the
   Licensor for the purpose of discussing and improving the Work, but
   excluding communication that is conspicuously marked or otherwise
   designated in writing by the copyright owner as "Not a Contribution."

   "Contributor" shall mean Licensor and any individual or Legal Entity
   on behalf of whom a Contribution has been received by Licensor and
   subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of
   this License, each Contributor hereby grants to You a perpetual,
   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
   copyright license to reproduce, prepare Derivative Works of,
   publicly display, publicly perform, sublicense, and distribute the
   Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of
   this License, each Contributor hereby grants to You a perpetual,
   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
   (except as stated in this section) patent license to make, have made,
   use, offer to sell, sell, import, and otherwise transfer the Work,
   where such license applies only to those patent claims licensable
   by such Contributor that are necessarily infringed by their
   Contribution(s) alone or by combination of their Contribution(s)
   with the Work to which such Contribution(s) was submitted. If You
   institute patent litigation against any entity (including a
   cross-claim or counterclaim in a lawsuit) alleging that the Work
   or a Contribution incorporated within the Work constitutes direct
   or contributory patent infringement, then any patent licenses
   granted to You under this License for that Work shall terminate
   as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the
   Work or Derivative Works thereof in any medium, with or without
   modifications, and in Source or Object form, provided that You
   meet the following conditions:

   (a) You must give any other recipients of the Work or
       Derivative Works a copy of this License; and

   (b) You must cause any modified files to carry prominent notices
       stating that You changed the files; and

   (c) You must retain, in the Source form of any Derivative Works
       that You distribute, all copyright, patent, trademark, and
       attribution notices from the Source form of the Work,
       excluding those notices that do not pertain to any part of
       the Derivative Works; and

   (d) If the Work includes a "NOTICE" text file as part of its
       distribution, then any Derivative Works that You distribute must
       include a readable copy of the attribution notices contained
       within such NOTICE file, excluding those notices that do not
       pertain to any part of the Derivative Works, in at least one
       of the following places: within a NOTICE text file distributed
       as part of the Derivative Works; within the Source form or
       documentation, if provided along with the Derivative Works; or,
       within a display generated by the Derivative Works, if and
       wherever such third-party notices normally appear. The contents
       of the NOTICE file are for informational purposes only and
       do not modify the License. You may add Your own attribution
       notices within Derivative Works that You distribute, alongside
       or as an addendum to the NOTICE text from the Work, provided
       that such additional attribution notices cannot be construed
       as modifying the License.

   You may add Your own copyright statement to Your modifications and
   may provide additional or different license terms and conditions
   for use, reproduction, or distribution of Your modifications, or
   for any such Derivative Works as a whole, provided Your use,
   reproduction, and distribution of the Work otherwise complies with
   the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise,
   any Contribution intentionally submitted for inclusion in the Work
   by You to the Licensor shall be under the terms and conditions of
   this License, without any additional terms or conditions.
   Notwithstanding the above, nothing herein shall supersede or modify
   the terms of any separate license agreement you may have executed
   with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade
   names, trademarks, service marks, or product names of the Licensor,
   except as required for reasonable and customary use in describing the
   origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or
   agreed to in writing, Licensor provides the Work (and each
   Contributor provides its Contributions) on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   implied, including, without limitation, any warranties or conditions
   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
   PARTICULAR PURPOSE. You are solely responsible for determining the
   appropriateness of using or redistributing the Work and assume any
   risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory,
   whether in tort (including negligence), contract, or otherwise,
   unless required by applicable law (such as deliberate and grossly
   negligent acts) or agreed to in writing, shall any Contributor be
   liable to You for damages, including any direct, indirect, special,
   incidental, or consequential damages of any character arising as a
   result of this License or out of the use or inability to use the
   Work (including but not limited to damages for loss of goodwill,
   work stoppage, computer failure or malfunction, or any and all
   other commercial damages or losses), even if such Contributor
   has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing
   the Work or Derivative Works thereof, You may choose to offer,
   and charge a fee for, acceptance of support, warranty, indemnity,
   or other liability obligations and/or rights consistent with this
   License. However, in accepting such obligations, You may act only
   on Your own behalf and on Your sole responsibility, not on behalf
   of any other Contributor, and only if You agree to indemnify,
   defend, and hold each Contributor harmless for any liability
   incurred by, or claims asserted against, such Contributor by reason
   of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS
```

Thepyexpatextension is built using an included copy of the expat sources unless the build is configured--with-system-expat:

```
--with-system-expat
```

================================================================================

```
Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
                               and Clark Cooper

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```

The_ctypesC extension underlying thectypesmodule is built using an included copy of the libffi sources unless the build is configured--with-system-libffi:

```
--with-system-libffi
```

```
Copyright (c) 1996-2008  Red Hat, Inc and others.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
```

Thezlibextension is built using an included copy of the zlib sources if the zlib version found on the system is too old to be used for the build:

```
Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler

This software is provided 'as-is', without any express or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
   claim that you wrote the original software. If you use this software
   in a product, an acknowledgment in the product documentation would be
   appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
   misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.

Jean-loup Gailly        Mark Adler
jloup@gzip.org          madler@alumni.caltech.edu
```

The implementation of the hash table used by thetracemallocis based on the cfuhash project:

```
tracemalloc
```

```
Copyright (c) 2005 Don Owens
All rights reserved.

This code is released under the BSD license:

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above
    copyright notice, this list of conditions and the following
    disclaimer in the documentation and/or other materials provided
    with the distribution.

  * Neither the name of the author nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
```

The_decimalC extension underlying thedecimalmodule is built using an included copy of the libmpdec library unless the build is configured--with-system-libmpdec:

```
--with-system-libmpdec
```

```
Copyright (c) 2008-2020 Stefan Krah. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
```

================================================================================

### W3C C14N test suite¶

The C14N 2.0 test suite in thetestpackage (Lib/test/xmltestdata/c14n-20/) was retrieved from the W3C website athttps://www.w3.org/TR/xml-c14n2-testcases/and is distributed under the 3-clause BSD license:

```
Lib/test/xmltestdata/c14n-20/
```

```
Copyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),
All Rights Reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

* Redistributions of works must retain the original copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the original copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
* Neither the name of the W3C nor the names of its contributors may be
  used to endorse or promote products derived from this work without
  specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
```

MIT License:

```
Copyright (c) 2018-2021 Microsoft Corporation, Daan Leijen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

Parts of theasynciomodule are incorporated fromuvloop 0.16, which is distributed under the MIT license:

```
Copyright (c) 2015-2021 MagicStack Inc.  http://magic.io

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```

================================================================================

### Global Unbounded Sequences (GUS)¶

The filePython/qsbr.cis adapted from FreeBSD’s “Global Unbounded Sequences” safe memory reclamation scheme insubr_smr.c. The file is distributed under the 2-Clause BSD License:

```
Python/qsbr.c
```

```
Copyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice unmodified, this list of conditions, and the following
   disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
```

================================================================================

================================================================================

# Overview — Python v2.6.9 documentation
URL: https://docs.python.org/2.6/
Section: 1/2

Content:

================================================================================

# Python v2.6.9 documentation

Welcome! This is the documentation for Python 2.6.9, last updated Oct 29, 2013.

Parts of the documentation:

What's new in Python 2.6?orall "What's new" documentssince 2.0

Tutorialstart here

Using Pythonhow to use Python on different platforms

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python HOWTOsin-depth documents on specific topics

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

Installing Python Modulesinformation for installers & sys-admins

Distributing Python Modulessharing modules with others

Documenting Pythonguide for documentation authors

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

About the documentation

History and License of Python

================================================================================

================================================================================

# The Python Standard Library — Python 3.13.3 documentation
URL: https://docs.python.org/3/library/index.html
Section: 1/2
Description: While The Python Language Reference describes the exact syntax and semantics of the Python language, this library reference manual describes the standard library that is distributed with Python. It...

Content:

================================================================================

# The Python Standard Library¶

WhileThe Python Language Referencedescribes the exact syntax and semantics of the Python language, this library reference manual describes the standard library that is distributed with Python. It also describes some of the optional components that are commonly included in Python distributions.

Python’s standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents listed below. The library contains built-in modules (written in C) that provide access to system functionality such as file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into platform-neutral APIs.

The Python installers for the Windows platform usually include the entire standard library and often also include many additional components. For Unix-like operating systems Python is normally provided as a collection of packages, so it may be necessary to use the packaging tools provided with the operating system to obtain some or all of the optional components.

In addition to the standard library, there is an active collection of hundreds of thousands of components (from individual programs and modules to packages and entire application development frameworks), available from thePython Package Index.

- IntroductionNotes on availability
- Built-in Functions
- Built-in ConstantsConstants added by thesitemodule
- Built-in TypesTruth Value TestingBoolean Operations —and,or,notComparisonsNumeric Types —int,float,complexBoolean Type -boolIterator TypesSequence Types —list,tuple,rangeText Sequence Type —strBinary Sequence Types —bytes,bytearray,memoryviewSet Types —set,frozensetMapping Types —dictContext Manager TypesType Annotation Types —Generic Alias,UnionOther Built-in TypesSpecial AttributesInteger string conversion length limitation
- Built-in ExceptionsException contextInheriting from built-in exceptionsBase classesConcrete exceptionsWarningsException groupsException hierarchy
- Text Processing Servicesstring— Common string operationsre— Regular expression operationsdifflib— Helpers for computing deltastextwrap— Text wrapping and fillingunicodedata— Unicode Databasestringprep— Internet String Preparationreadline— GNU readline interfacerlcompleter— Completion function for GNU readline
- Binary Data Servicesstruct— Interpret bytes as packed binary datacodecs— Codec registry and base classes
- Data Typesdatetime— Basic date and time typeszoneinfo— IANA time zone supportcalendar— General calendar-related functionscollections— Container datatypescollections.abc— Abstract Base Classes for Containersheapq— Heap queue algorithmbisect— Array bisection algorithmarray— Efficient arrays of numeric valuesweakref— Weak referencestypes— Dynamic type creation and names for built-in typescopy— Shallow and deep copy operationspprint— Data pretty printerreprlib— Alternaterepr()implementationenum— Support for enumerationsgraphlib— Functionality to operate with graph-like structures
- Numeric and Mathematical Modulesnumbers— Numeric abstract base classesmath— Mathematical functionscmath— Mathematical functions for complex numbersdecimal— Decimal fixed-point and floating-point arithmeticfractions— Rational numbersrandom— Generate pseudo-random numbersstatistics— Mathematical statistics functions
- Functional Programming Modulesitertools— Functions creating iterators for efficient loopingfunctools— Higher-order functions and operations on callable objectsoperator— Standard operators as functions
- File and Directory Accesspathlib— Object-oriented filesystem pathsos.path— Common pathname manipulationsstat— Interpretingstat()resultsfilecmp— File and Directory Comparisonstempfile— Generate temporary files and directoriesglob— Unix style pathname pattern expansionfnmatch— Unix filename pattern matchinglinecache— Random access to text linesshutil— High-level file operations
- Data Persistencepickle— Python object serializationcopyreg— Registerpicklesupport functionsshelve— Python object persistencemarshal— Internal Python object serializationdbm— Interfaces to Unix “databases”sqlite3— DB-API 2.0 interface for SQLite databases
- Data Compression and Archivingzlib— Compression compatible withgzipgzip— Support forgzipfilesbz2— Support forbzip2compressionlzma— Compression using the LZMA algorithmzipfile— Work with ZIP archivestarfile— Read and write tar archive files
- File Formatscsv— CSV File Reading and Writingconfigparser— Configuration file parsertomllib— Parse TOML filesnetrc— netrc file processingplistlib— Generate and parse Apple.plistfiles
- Cryptographic Serviceshashlib— Secure hashes and message digestshmac— Keyed-Hashing for Message Authenticationsecrets— Generate secure random numbers for managing secrets
- Generic Operating System Servicesos— Miscellaneous operating system interfacesio— Core tools for working with streamstime— Time access and conversionslogging— Logging facility for Pythonlogging.config— Logging configurationlogging.handlers— Logging handlersplatform—  Access to underlying platform’s identifying dataerrno— Standard errno system symbolsctypes— A foreign function library for Python
- Command Line Interface Librariesargparse— Parser for command-line options, arguments and subcommandsoptparse— Parser for command line optionsgetpass— Portable password inputfileinput— Iterate over lines from multiple input streamscurses— Terminal handling for character-cell displayscurses.textpad— Text input widget for curses programscurses.ascii— Utilities for ASCII characterscurses.panel— A panel stack extension for curses
- Concurrent Executionthreading— Thread-based parallelismmultiprocessing— Process-based parallelismmultiprocessing.shared_memory— Shared memory for direct access across processesTheconcurrentpackageconcurrent.futures— Launching parallel taskssubprocess— Subprocess managementsched— Event schedulerqueue— A synchronized queue classcontextvars— Context Variables_thread— Low-level threading API
- Networking and Interprocess Communicationasyncio— Asynchronous I/Osocket— Low-level networking interfacessl— TLS/SSL wrapper for socket objectsselect— Waiting for I/O completionselectors— High-level I/O multiplexingsignal— Set handlers for asynchronous eventsmmap— Memory-mapped file support
- Internet Data Handlingemail— An email and MIME handling packagejson— JSON encoder and decodermailbox— Manipulate mailboxes in various formatsmimetypes— Map filenames to MIME typesbase64— Base16, Base32, Base64, Base85 Data Encodingsbinascii— Convert between binary and ASCIIquopri— Encode and decode MIME quoted-printable data
- Structured Markup Processing Toolshtml— HyperText Markup Language supporthtml.parser— Simple HTML and XHTML parserhtml.entities— Definitions of HTML general entitiesXML Processing Modulesxml.etree.ElementTree— The ElementTree XML APIxml.dom— The Document Object Model APIxml.dom.minidom— Minimal DOM implementationxml.dom.pulldom— Support for building partial DOM treesxml.sax— Support for SAX2 parsersxml.sax.handler— Base classes for SAX handlersxml.sax.saxutils— SAX Utilitiesxml.sax.xmlreader— Interface for XML parsersxml.parsers.expat— Fast XML parsing using Expat
- Internet Protocols and Supportwebbrowser— Convenient web-browser controllerwsgiref— WSGI Utilities and Reference Implementationurllib— URL handling modulesurllib.request— Extensible library for opening URLsurllib.response— Response classes used by urlliburllib.parse— Parse URLs into componentsurllib.error— Exception classes raised by urllib.requesturllib.robotparser—  Parser for robots.txthttp— HTTP moduleshttp.client— HTTP protocol clientftplib— FTP protocol clientpoplib— POP3 protocol clientimaplib— IMAP4 protocol clientsmtplib— SMTP protocol clientuuid— UUID objects according toRFC 4122socketserver— A framework for network servershttp.server— HTTP servershttp.cookies— HTTP state managementhttp.cookiejar— Cookie handling for HTTP clientsxmlrpc— XMLRPC server and client modulesxmlrpc.client— XML-RPC client accessxmlrpc.server— Basic XML-RPC serversipaddress— IPv4/IPv6 manipulation library
- Multimedia Serviceswave— Read and write WAV filescolorsys— Conversions between color systems
- Internationalizationgettext— Multilingual internationalization serviceslocale— Internationalization services
- Program Frameworksturtle— Turtle graphicscmd— Support for line-oriented command interpretersshlex— Simple lexical analysis
- Graphical User Interfaces with Tktkinter— Python interface to Tcl/Tktkinter.colorchooser— Color choosing dialogtkinter.font— Tkinter font wrapperTkinter Dialogstkinter.messagebox— Tkinter message promptstkinter.scrolledtext— Scrolled Text Widgettkinter.dnd— Drag and drop supporttkinter.ttk— Tk themed widgetsIDLE — Python editor and shell
- Development Toolstyping— Support for type hintspydoc— Documentation generator and online help systemPython Development Modedoctest— Test interactive Python examplesunittest— Unit testing frameworkunittest.mock— mock object libraryunittest.mock— getting startedtest— Regression tests package for Pythontest.support— Utilities for the Python test suitetest.support.socket_helper— Utilities for socket teststest.support.script_helper— Utilities for the Python execution teststest.support.bytecode_helper— Support tools for testing correct bytecode generationtest.support.threading_helper— Utilities for threading teststest.support.os_helper— Utilities for os teststest.support.import_helper— Utilities for import teststest.support.warnings_helper— Utilities for warnings tests
- Debugging and ProfilingAudit events tablebdb— Debugger frameworkfaulthandler— Dump the Python tracebackpdb— The Python DebuggerThe Python Profilerstimeit— Measure execution time of small code snippetstrace— Trace or track Python statement executiontracemalloc— Trace memory allocations
- Software Packaging and Distributionensurepip— Bootstrapping thepipinstallervenv— Creation of virtual environmentszipapp— Manage executable Python zip archives
- Python Runtime Servicessys— System-specific parameters and functionssys.monitoring— Execution event monitoringsysconfig— Provide access to Python’s configuration informationbuiltins— Built-in objects__main__— Top-level code environmentwarnings— Warning controldataclasses— Data Classescontextlib— Utilities forwith-statement contextsabc— Abstract Base Classesatexit— Exit handlerstraceback— Print or retrieve a stack traceback__future__— Future statement definitionsgc— Garbage Collector interfaceinspect— Inspect live objectssite— Site-specific configuration hook
- Custom Python Interpreterscode— Interpreter base classescodeop— Compile Python code
- Importing Moduleszipimport— Import modules from Zip archivespkgutil— Package extension utilitymodulefinder— Find modules used by a scriptrunpy— Locating and executing Python modulesimportlib— The implementation ofimportimportlib.resources– Package resource reading, opening and accessimportlib.resources.abc– Abstract base classes for resourcesimportlib.metadata– Accessing package metadataThe initialization of thesys.pathmodule search path
- Python Language Servicesast— Abstract Syntax Treessymtable— Access to the compiler’s symbol tablestoken— Constants used with Python parse treeskeyword— Testing for Python keywordstokenize— Tokenizer for Python sourcetabnanny— Detection of ambiguous indentationpyclbr— Python module browser supportpy_compile— Compile Python source filescompileall— Byte-compile Python librariesdis— Disassembler for Python bytecodepickletools— Tools for pickle developers
- MS Windows Specific Servicesmsvcrt— Useful routines from the MS VC++ runtimewinreg— Windows registry accesswinsound— Sound-playing interface for Windows
- Unix Specific Servicesposix— The most common POSIX system callspwd— The password databasegrp— The group databasetermios— POSIX style tty controltty— Terminal control functionspty— Pseudo-terminal utilitiesfcntl— Thefcntlandioctlsystem callsresource— Resource usage informationsyslog— Unix syslog library routines
- Modules command-line interface (CLI)
- Superseded Modulesgetopt— C-style parser for command line options
- Removed Modules
- Security Considerations

- Notes on availability

- Constants added by thesitemodule

- Truth Value Testing
- Boolean Operations —and,or,not
- Comparisons
- Numeric Types —int,float,complex
- Boolean Type -bool
- Iterator Types
- Sequence Types —list,tuple,range
- Text Sequence Type —str
- Binary Sequence Types —bytes,bytearray,memoryview
- Set Types —set,frozenset
- Mapping Types —dict
- Context Manager Types
- Type Annotation Types —Generic Alias,Union
- Other Built-in Types
- Special Attributes
- Integer string conversion length limitation

```
memoryview
```

- Exception context
- Inheriting from built-in exceptions
- Base classes
- Concrete exceptions
- Exception groups
- Exception hierarchy

- string— Common string operations
- re— Regular expression operations
- difflib— Helpers for computing deltas
- textwrap— Text wrapping and filling
- unicodedata— Unicode Database
- stringprep— Internet String Preparation
- readline— GNU readline interface
- rlcompleter— Completion function for GNU readline

```
unicodedata
```

```
stringprep
```

```
rlcompleter
```

- struct— Interpret bytes as packed binary data
- codecs— Codec registry and base classes

- datetime— Basic date and time types
- zoneinfo— IANA time zone support
- calendar— General calendar-related functions
- collections— Container datatypes
- collections.abc— Abstract Base Classes for Containers
- heapq— Heap queue algorithm
- bisect— Array bisection algorithm
- array— Efficient arrays of numeric values
- weakref— Weak references
- types— Dynamic type creation and names for built-in types
- copy— Shallow and deep copy operations
- pprint— Data pretty printer
- reprlib— Alternaterepr()implementation
- enum— Support for enumerations
- graphlib— Functionality to operate with graph-like structures

================================================================================

```
collections
```

```
collections.abc
```

- numbers— Numeric abstract base classes
- math— Mathematical functions
- cmath— Mathematical functions for complex numbers
- decimal— Decimal fixed-point and floating-point arithmetic
- fractions— Rational numbers
- random— Generate pseudo-random numbers
- statistics— Mathematical statistics functions

```
statistics
```

- itertools— Functions creating iterators for efficient looping
- functools— Higher-order functions and operations on callable objects
- operator— Standard operators as functions

- pathlib— Object-oriented filesystem paths
- os.path— Common pathname manipulations
- stat— Interpretingstat()results
- filecmp— File and Directory Comparisons
- tempfile— Generate temporary files and directories
- glob— Unix style pathname pattern expansion
- fnmatch— Unix filename pattern matching
- linecache— Random access to text lines
- shutil— High-level file operations

- pickle— Python object serialization
- copyreg— Registerpicklesupport functions
- shelve— Python object persistence
- marshal— Internal Python object serialization
- dbm— Interfaces to Unix “databases”
- sqlite3— DB-API 2.0 interface for SQLite databases

- zlib— Compression compatible withgzip
- gzip— Support forgzipfiles
- bz2— Support forbzip2compression
- lzma— Compression using the LZMA algorithm
- zipfile— Work with ZIP archives
- tarfile— Read and write tar archive files

- csv— CSV File Reading and Writing
- configparser— Configuration file parser
- tomllib— Parse TOML files
- netrc— netrc file processing
- plistlib— Generate and parse Apple.plistfiles

```
configparser
```

- hashlib— Secure hashes and message digests
- hmac— Keyed-Hashing for Message Authentication
- secrets— Generate secure random numbers for managing secrets

- os— Miscellaneous operating system interfaces
- io— Core tools for working with streams
- time— Time access and conversions
- logging— Logging facility for Python
- logging.config— Logging configuration
- logging.handlers— Logging handlers
- platform—  Access to underlying platform’s identifying data
- errno— Standard errno system symbols
- ctypes— A foreign function library for Python

```
logging.config
```

```
logging.handlers
```

- argparse— Parser for command-line options, arguments and subcommands
- optparse— Parser for command line options
- getpass— Portable password input
- fileinput— Iterate over lines from multiple input streams
- curses— Terminal handling for character-cell displays
- curses.textpad— Text input widget for curses programs
- curses.ascii— Utilities for ASCII characters
- curses.panel— A panel stack extension for curses

```
curses.textpad
```

```
curses.ascii
```

```
curses.panel
```

- threading— Thread-based parallelism
- multiprocessing— Process-based parallelism
- multiprocessing.shared_memory— Shared memory for direct access across processes
- Theconcurrentpackage
- concurrent.futures— Launching parallel tasks
- subprocess— Subprocess management
- sched— Event scheduler
- queue— A synchronized queue class
- contextvars— Context Variables
- _thread— Low-level threading API

```
multiprocessing
```

```
multiprocessing.shared_memory
```

```
concurrent
```

```
concurrent.futures
```

```
subprocess
```

```
contextvars
```

- asyncio— Asynchronous I/O
- socket— Low-level networking interface
- ssl— TLS/SSL wrapper for socket objects
- select— Waiting for I/O completion
- selectors— High-level I/O multiplexing
- signal— Set handlers for asynchronous events
- mmap— Memory-mapped file support

- email— An email and MIME handling package
- json— JSON encoder and decoder
- mailbox— Manipulate mailboxes in various formats
- mimetypes— Map filenames to MIME types
- base64— Base16, Base32, Base64, Base85 Data Encodings
- binascii— Convert between binary and ASCII
- quopri— Encode and decode MIME quoted-printable data

- html— HyperText Markup Language support
- html.parser— Simple HTML and XHTML parser
- html.entities— Definitions of HTML general entities
- XML Processing Modules
- xml.etree.ElementTree— The ElementTree XML API
- xml.dom— The Document Object Model API
- xml.dom.minidom— Minimal DOM implementation
- xml.dom.pulldom— Support for building partial DOM trees
- xml.sax— Support for SAX2 parsers
- xml.sax.handler— Base classes for SAX handlers
- xml.sax.saxutils— SAX Utilities
- xml.sax.xmlreader— Interface for XML parsers
- xml.parsers.expat— Fast XML parsing using Expat

```
html.parser
```

```
html.entities
```

```
xml.etree.ElementTree
```

```
xml.dom.minidom
```

```
xml.dom.pulldom
```

```
xml.sax.handler
```

```
xml.sax.saxutils
```

```
xml.sax.xmlreader
```

```
xml.parsers.expat
```

- webbrowser— Convenient web-browser controller
- wsgiref— WSGI Utilities and Reference Implementation
- urllib— URL handling modules
- urllib.request— Extensible library for opening URLs
- urllib.response— Response classes used by urllib
- urllib.parse— Parse URLs into components
- urllib.error— Exception classes raised by urllib.request
- urllib.robotparser—  Parser for robots.txt
- http— HTTP modules
- http.client— HTTP protocol client
- ftplib— FTP protocol client
- poplib— POP3 protocol client
- imaplib— IMAP4 protocol client
- smtplib— SMTP protocol client
- uuid— UUID objects according toRFC 4122
- socketserver— A framework for network servers
- http.server— HTTP servers
- http.cookies— HTTP state management
- http.cookiejar— Cookie handling for HTTP clients
- xmlrpc— XMLRPC server and client modules
- xmlrpc.client— XML-RPC client access
- xmlrpc.server— Basic XML-RPC servers
- ipaddress— IPv4/IPv6 manipulation library

```
webbrowser
```

```
urllib.request
```

```
urllib.response
```

```
urllib.parse
```

```
urllib.error
```

```
urllib.robotparser
```

```
http.client
```

```
socketserver
```

```
http.server
```

```
http.cookies
```

```
http.cookiejar
```

```
xmlrpc.client
```

```
xmlrpc.server
```

- wave— Read and write WAV files
- colorsys— Conversions between color systems

- gettext— Multilingual internationalization services
- locale— Internationalization services

- turtle— Turtle graphics
- cmd— Support for line-oriented command interpreters
- shlex— Simple lexical analysis

- tkinter— Python interface to Tcl/Tk
- tkinter.colorchooser— Color choosing dialog
- tkinter.font— Tkinter font wrapper
- Tkinter Dialogs
- tkinter.messagebox— Tkinter message prompts
- tkinter.scrolledtext— Scrolled Text Widget
- tkinter.dnd— Drag and drop support
- tkinter.ttk— Tk themed widgets
- IDLE — Python editor and shell

```
tkinter.colorchooser
```

```
tkinter.font
```

```
tkinter.messagebox
```

```
tkinter.scrolledtext
```

```
tkinter.dnd
```

```
tkinter.ttk
```

- typing— Support for type hints
- pydoc— Documentation generator and online help system
- Python Development Mode
- doctest— Test interactive Python examples
- unittest— Unit testing framework
- unittest.mock— mock object library
- unittest.mock— getting started
- test— Regression tests package for Python
- test.support— Utilities for the Python test suite
- test.support.socket_helper— Utilities for socket tests
- test.support.script_helper— Utilities for the Python execution tests
- test.support.bytecode_helper— Support tools for testing correct bytecode generation
- test.support.threading_helper— Utilities for threading tests
- test.support.os_helper— Utilities for os tests
- test.support.import_helper— Utilities for import tests
- test.support.warnings_helper— Utilities for warnings tests

```
unittest.mock
```

```
test.support
```

```
test.support.socket_helper
```

```
test.support.script_helper
```

```
test.support.bytecode_helper
```

```
test.support.threading_helper
```

```
test.support.os_helper
```

```
test.support.import_helper
```

```
test.support.warnings_helper
```

- Audit events table
- bdb— Debugger framework
- faulthandler— Dump the Python traceback
- pdb— The Python Debugger
- The Python Profilers
- timeit— Measure execution time of small code snippets
- trace— Trace or track Python statement execution
- tracemalloc— Trace memory allocations

```
faulthandler
```

```
tracemalloc
```

- ensurepip— Bootstrapping thepipinstaller
- venv— Creation of virtual environments
- zipapp— Manage executable Python zip archives

- sys— System-specific parameters and functions
- sys.monitoring— Execution event monitoring
- sysconfig— Provide access to Python’s configuration information
- builtins— Built-in objects
- __main__— Top-level code environment
- warnings— Warning control
- dataclasses— Data Classes
- contextlib— Utilities forwith-statement contexts
- abc— Abstract Base Classes
- atexit— Exit handlers
- traceback— Print or retrieve a stack traceback
- __future__— Future statement definitions
- gc— Garbage Collector interface
- inspect— Inspect live objects
- site— Site-specific configuration hook

```
sys.monitoring
```

```
dataclasses
```

```
contextlib
```

```
__future__
```

- code— Interpreter base classes
- codeop— Compile Python code

- zipimport— Import modules from Zip archives
- pkgutil— Package extension utility
- modulefinder— Find modules used by a script
- runpy— Locating and executing Python modules
- importlib— The implementation ofimport
- importlib.resources– Package resource reading, opening and access
- importlib.resources.abc– Abstract base classes for resources
- importlib.metadata– Accessing package metadata
- The initialization of thesys.pathmodule search path

```
modulefinder
```

```
importlib.resources
```

```
importlib.resources.abc
```

```
importlib.metadata
```

- ast— Abstract Syntax Trees
- symtable— Access to the compiler’s symbol tables
- token— Constants used with Python parse trees
- keyword— Testing for Python keywords
- tokenize— Tokenizer for Python source
- tabnanny— Detection of ambiguous indentation
- pyclbr— Python module browser support
- py_compile— Compile Python source files
- compileall— Byte-compile Python libraries
- dis— Disassembler for Python bytecode
- pickletools— Tools for pickle developers

```
py_compile
```

```
compileall
```

```
pickletools
```

- msvcrt— Useful routines from the MS VC++ runtime
- winreg— Windows registry access
- winsound— Sound-playing interface for Windows

- posix— The most common POSIX system calls
- pwd— The password database
- grp— The group database
- termios— POSIX style tty control
- tty— Terminal control functions
- pty— Pseudo-terminal utilities
- fcntl— Thefcntlandioctlsystem calls
- resource— Resource usage information
- syslog— Unix syslog library routines

- getopt— C-style parser for command line options

================================================================================

================================================================================

# Overview — Python 3.4.10 documentation
URL: https://docs.python.org/3.4/
Section: 1/2

Content:

================================================================================

# Python 3.4.10 documentation

Welcome! This is the documentation for Python 3.4.10, last updated Jun 16, 2019.

Parts of the documentation:

What's new in Python 3.4?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Installing Python Modulesinstalling from the Python Package Index & other sources

Distributing Python Modulespublishing modules for installation by others

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

About the documentation

History and License of Python

================================================================================

================================================================================

# Search — Python 3.13.3 documentation
URL: https://docs.python.org/3/search.html
Section: 1/2
Description: Search the Python documentation.

Content:

================================================================================

### Navigation

- EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
- 3.13.3 Documentation»
- ThemeAutoLightDark|

Please activate JavaScript to enable the search functionality.

Searching for multiple words only shows matches that contain all words.

================================================================================

================================================================================

# 3.5.10 Documentation
URL: https://docs.python.org/3.5/
Section: 1/2

Content:

================================================================================

# Python 3.5.10 documentation

Welcome! This is the documentation for Python 3.5.10.

Parts of the documentation:

What's new in Python 3.5?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Installing Python Modulesinstalling from the Python Package Index & other sources

Distributing Python Modulespublishing modules for installation by others

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

About the documentation

History and License of Python

================================================================================

================================================================================

# Python Module Index — Python 3.13.3 documentation
URL: https://docs.python.org/3/py-modindex.html
Section: 1/2

Content:

================================================================================

# Python Module Index

```
__future__
```

```
collections
```

```
collections.abc
```

```
compileall
```

```
concurrent
```

```
concurrent.futures
```

```
configparser
```

```
contextlib
```

```
contextvars
```

```
curses.ascii
```

```
curses.panel
```

```
curses.textpad
```

```
dataclasses
```

```
dbm.sqlite3
```

```
email.charset
```

```
email.contentmanager
```

```
email.encoders
```

```
email.errors
```

```
email.generator
```

```
email.header
```

```
email.headerregistry
```

```
email.iterators
```

```
email.message
```

```
email.mime
```

```
email.mime.application
```

```
email.mime.audio
```

```
email.mime.base
```

```
email.mime.image
```

```
email.mime.message
```

```
email.mime.multipart
```

```
email.mime.nonmultipart
```

```
email.mime.text
```

```
email.parser
```

```
email.policy
```

```
email.utils
```

```
encodings.idna
```

```
encodings.mbcs
```

```
encodings.utf_8_sig
```

```
faulthandler
```

```
html.entities
```

```
html.parser
```

```
http.client
```

```
http.cookiejar
```

```
http.cookies
```

```
http.server
```

```
importlib.abc
```

```
importlib.machinery
```

```
importlib.metadata
```

```
importlib.resources
```

```
importlib.resources.abc
```

```
importlib.util
```

```
logging.config
```

```
logging.handlers
```

```
modulefinder
```

```
multiprocessing
```

```
multiprocessing.connection
```

```
multiprocessing.dummy
```

```
multiprocessing.managers
```

```
multiprocessing.pool
```

```
multiprocessing.shared_memory
```

```
multiprocessing.sharedctypes
```

```
ossaudiodev
```

```
pickletools
```

```
py_compile
```

```
rlcompleter
```

```
sitecustomize
```

```
socketserver
```

```
statistics
```

```
stringprep
```

```
subprocess
```

```
sys.monitoring
```

```
test.regrtest
```

```
test.support
```

```
test.support.bytecode_helper
```

```
test.support.import_helper
```

```
test.support.os_helper
```

```
test.support.script_helper
```

```
test.support.socket_helper
```

```
test.support.threading_helper
```

```
test.support.warnings_helper
```

```
tkinter.colorchooser
```

```
tkinter.commondialog
```

```
tkinter.dnd
```

```
tkinter.filedialog
```

```
tkinter.font
```

```
tkinter.messagebox
```

```
tkinter.scrolledtext
```

```
tkinter.simpledialog
```

```
tkinter.ttk
```

```
tracemalloc
```

```
turtledemo
```

```
unicodedata
```

```
unittest.mock
```

```
urllib.error
```

```
urllib.parse
```

```
urllib.request
```

```
urllib.response
```

```
urllib.robotparser
```

```
usercustomize
```

```
webbrowser
```

```
wsgiref.handlers
```

```
wsgiref.headers
```

```
wsgiref.simple_server
```

```
wsgiref.types
```

```
wsgiref.util
```

```
wsgiref.validate
```

```
xml.dom.minidom
```

```
xml.dom.pulldom
```

```
xml.etree.ElementInclude
```

```
xml.etree.ElementTree
```

```
xml.parsers.expat
```

```
xml.parsers.expat.errors
```

```
xml.parsers.expat.model
```

```
xml.sax.handler
```

```
xml.sax.saxutils
```

```
xml.sax.xmlreader
```

```
xmlrpc.client
```

```
xmlrpc.server
```

================================================================================

================================================================================

# Download — Python 3.13.3 documentation
URL: https://docs.python.org/3/download.html
Section: 1/2
Description: Download Python documentation.

Content:

================================================================================

# Download Python 3.13 Documentation

Last updated on: Apr 25, 2025 (05:42 UTC).

To download an archive containing all the documents for this version of Python in one of various formats, follow one of links in this table.

These archives contain all the content in the documentation.

Unix users should download the .tar.bz2 archives; these are bzipped tar archives and can be handled in the usual way using tar and the bzip2 program. TheInfo-ZIPunzip program can be used to handle the ZIP archives if desired. The .tar.bz2 archives provide the best compression and fastest download times.

Windows users can use the ZIP archives since those are customary on that platform. These are created on Unix using the Info-ZIP zip program.

If you have comments or suggestions for the Python documentation, please send email todocs@python.org.

================================================================================

================================================================================

# 3.9.22 Documentation
URL: https://docs.python.org/3.9/
Section: 1/2

Content:

================================================================================

# Python 3.9.22 documentation

Welcome! This is the official documentation for Python 3.9.22.

Parts of the documentation:

What's new in Python 3.9?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Installing Python Modulesinstalling from the Python Package Index & other sources

Distributing Python Modulespublishing modules for installation by others

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

Contributing to Docs

About the documentation

History and License of Python

================================================================================

================================================================================

# 3.12.10 Documentation
URL: https://docs.python.org/3.12/
Section: 1/2
Description: The official Python documentation.

Content:

================================================================================

# Python 3.12.10 documentation

Welcome! This is the official documentation for Python 3.12.10.

Documentation sections:

What's new in Python 3.12?Orall "What's new" documents since Python 2.0

TutorialStart here: a tour of Python's syntax and features

Library referenceStandard library and builtins

Language referenceSyntax and language elements

Python setup and usageHow to install, configure, and use Python

Python HOWTOsIn-depth topic manuals

Installing Python modulesThird-party modules and PyPI.org

Distributing Python modulesPublishing modules for use by other people

Extending and embeddingFor C/C++ programmers

Python's C APIC API reference

FAQsFrequently asked questions (with answers!)

DeprecationsDeprecated functionality

Indices, glossary, and search:

Global module indexAll modules and libraries

General indexAll functions, classes, and terms

GlossaryTerms explained

Search pageSearch this documentation

Complete table of contentsLists all sections and subsections

Project information:

Reporting issues

Contributing to Docs

Download the documentation

History and license of Python

About the documentation

================================================================================

================================================================================

# About this documentation — Python 3.13.3 documentation
URL: https://docs.python.org/3/about.html
Section: 1/2
Description: Python’s documentation is generated from reStructuredText sources using Sphinx, a documentation generator originally created for Python and now maintained as an independent project. Development of ...

Content:

================================================================================

# About this documentation¶

Python’s documentation is generated fromreStructuredTextsources usingSphinx, a documentation generator originally created for Python and now maintained as an independent project.

Development of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you want to contribute, please take a look at theDealing with Bugspage for information on how to do so. New volunteers are always welcome!

Many thanks go to:

- Fred L. Drake, Jr., the creator of the original Python documentation toolset
and author of much of the content;
- theDocutilsproject for creating
reStructuredText and the Docutils suite;
- Fredrik Lundh for his Alternative Python Reference project from which Sphinx
got many good ideas.

================================================================================

## Contributors to the Python documentation¶

Many people have contributed to the Python language, the Python standard library, and the Python documentation. SeeMisc/ACKSin the Python source distribution for a partial list of contributors.

It is only with the input and contributions of the Python community that Python has such wonderful documentation – Thank You!

================================================================================

================================================================================

# 3.13.3 Documentation
URL: https://docs.python.org/3.13/
Section: 1/2
Description: The official Python documentation.

Content:

================================================================================

# Python 3.13.3 documentation

Welcome! This is the official documentation for Python 3.13.3.

Documentation sections:

What's new in Python 3.13?Orall "What's new" documents since Python 2.0

TutorialStart here: a tour of Python's syntax and features

Library referenceStandard library and builtins

Language referenceSyntax and language elements

Python setup and usageHow to install, configure, and use Python

Python HOWTOsIn-depth topic manuals

Installing Python modulesThird-party modules and PyPI.org

Distributing Python modulesPublishing modules for use by other people

Extending and embeddingFor C/C++ programmers

Python's C APIC API reference

FAQsFrequently asked questions (with answers!)

DeprecationsDeprecated functionality

Indices, glossary, and search:

Global module indexAll modules and libraries

General indexAll functions, classes, and terms

GlossaryTerms explained

Search pageSearch this documentation

Complete table of contentsLists all sections and subsections

Project information:

Reporting issues

Contributing to Docs

Download the documentation

History and license of Python

About the documentation

================================================================================

================================================================================

# The Python Tutorial — Python 3.13.3 documentation
URL: https://docs.python.org/3/tutorial/index.html
Section: 1/2
Description: Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax an...

Content:

================================================================================

# The Python Tutorial¶

Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms.

The Python interpreter and the extensive standard library are freely available in source or binary form for all major platforms from the Python web site,https://www.python.org/, and may be freely distributed. The same site also contains distributions of and pointers to many free third party Python modules, programs and tools, and additional documentation.

The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other languages callable from C). Python is also suitable as an extension language for customizable applications.

This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial can be read off-line as well.

For a description of standard objects and modules, seeThe Python Standard Library.The Python Language Referencegives a more formal definition of the language. To write extensions in C or C++, readExtending and Embedding the Python InterpreterandPython/C API Reference Manual. There are also several books covering Python in depth.

This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and you will be ready to learn more about the various Python library modules described inThe Python Standard Library.

TheGlossaryis also worth going through.

- 1. Whetting Your Appetite
- 2. Using the Python Interpreter2.1. Invoking the Interpreter2.1.1. Argument Passing2.1.2. Interactive Mode2.2. The Interpreter and Its Environment2.2.1. Source Code Encoding
- 3. An Informal Introduction to Python3.1. Using Python as a Calculator3.1.1. Numbers3.1.2. Text3.1.3. Lists3.2. First Steps Towards Programming
- 4. More Control Flow Tools4.1.ifStatements4.2.forStatements4.3. Therange()Function4.4.breakandcontinueStatements4.5.elseClauses on Loops4.6.passStatements4.7.matchStatements4.8. Defining Functions4.9. More on Defining Functions4.9.1. Default Argument Values4.9.2. Keyword Arguments4.9.3. Special parameters4.9.3.1. Positional-or-Keyword Arguments4.9.3.2. Positional-Only Parameters4.9.3.3. Keyword-Only Arguments4.9.3.4. Function Examples4.9.3.5. Recap4.9.4. Arbitrary Argument Lists4.9.5. Unpacking Argument Lists4.9.6. Lambda Expressions4.9.7. Documentation Strings4.9.8. Function Annotations4.10. Intermezzo: Coding Style
- 5. Data Structures5.1. More on Lists5.1.1. Using Lists as Stacks5.1.2. Using Lists as Queues5.1.3. List Comprehensions5.1.4. Nested List Comprehensions5.2. Thedelstatement5.3. Tuples and Sequences5.4. Sets5.5. Dictionaries5.6. Looping Techniques5.7. More on Conditions5.8. Comparing Sequences and Other Types
- 6. Modules6.1. More on Modules6.1.1. Executing modules as scripts6.1.2. The Module Search Path6.1.3. “Compiled” Python files6.2. Standard Modules6.3. Thedir()Function6.4. Packages6.4.1. Importing * From a Package6.4.2. Intra-package References6.4.3. Packages in Multiple Directories
- 7. Input and Output7.1. Fancier Output Formatting7.1.1. Formatted String Literals7.1.2. The String format() Method7.1.3. Manual String Formatting7.1.4. Old string formatting7.2. Reading and Writing Files7.2.1. Methods of File Objects7.2.2. Saving structured data withjson
- 8. Errors and Exceptions8.1. Syntax Errors8.2. Exceptions8.3. Handling Exceptions8.4. Raising Exceptions8.5. Exception Chaining8.6. User-defined Exceptions8.7. Defining Clean-up Actions8.8. Predefined Clean-up Actions8.9. Raising and Handling Multiple Unrelated Exceptions8.10. Enriching Exceptions with Notes
- 9. Classes9.1. A Word About Names and Objects9.2. Python Scopes and Namespaces9.2.1. Scopes and Namespaces Example9.3. A First Look at Classes9.3.1. Class Definition Syntax9.3.2. Class Objects9.3.3. Instance Objects9.3.4. Method Objects9.3.5. Class and Instance Variables9.4. Random Remarks9.5. Inheritance9.5.1. Multiple Inheritance9.6. Private Variables9.7. Odds and Ends9.8. Iterators9.9. Generators9.10. Generator Expressions
- 10. Brief Tour of the Standard Library10.1. Operating System Interface10.2. File Wildcards10.3. Command Line Arguments10.4. Error Output Redirection and Program Termination10.5. String Pattern Matching10.6. Mathematics10.7. Internet Access10.8. Dates and Times10.9. Data Compression10.10. Performance Measurement10.11. Quality Control10.12. Batteries Included
- 11. Brief Tour of the Standard Library — Part II11.1. Output Formatting11.2. Templating11.3. Working with Binary Data Record Layouts11.4. Multi-threading11.5. Logging11.6. Weak References11.7. Tools for Working with Lists11.8. Decimal Floating-Point Arithmetic
- 12. Virtual Environments and Packages12.1. Introduction12.2. Creating Virtual Environments12.3. Managing Packages with pip
- 13. What Now?
- 14. Interactive Input Editing and History Substitution14.1. Tab Completion and History Editing14.2. Alternatives to the Interactive Interpreter
- 15. Floating-Point Arithmetic:  Issues and Limitations15.1. Representation Error
- 16. Appendix16.1. Interactive Mode16.1.1. Error Handling16.1.2. Executable Python Scripts16.1.3. The Interactive Startup File16.1.4. The Customization Modules

- 2.1. Invoking the Interpreter2.1.1. Argument Passing2.1.2. Interactive Mode
- 2.2. The Interpreter and Its Environment2.2.1. Source Code Encoding

- 2.1.1. Argument Passing
- 2.1.2. Interactive Mode

- 2.2.1. Source Code Encoding

- 3.1. Using Python as a Calculator3.1.1. Numbers3.1.2. Text3.1.3. Lists
- 3.2. First Steps Towards Programming

- 3.1.1. Numbers
- 3.1.2. Text
- 3.1.3. Lists

- 4.1.ifStatements
- 4.2.forStatements
- 4.3. Therange()Function
- 4.4.breakandcontinueStatements
- 4.5.elseClauses on Loops
- 4.6.passStatements
- 4.7.matchStatements
- 4.8. Defining Functions
- 4.9. More on Defining Functions4.9.1. Default Argument Values4.9.2. Keyword Arguments4.9.3. Special parameters4.9.3.1. Positional-or-Keyword Arguments4.9.3.2. Positional-Only Parameters4.9.3.3. Keyword-Only Arguments4.9.3.4. Function Examples4.9.3.5. Recap4.9.4. Arbitrary Argument Lists4.9.5. Unpacking Argument Lists4.9.6. Lambda Expressions4.9.7. Documentation Strings4.9.8. Function Annotations
- 4.10. Intermezzo: Coding Style

- 4.9.1. Default Argument Values
- 4.9.2. Keyword Arguments
- 4.9.3. Special parameters4.9.3.1. Positional-or-Keyword Arguments4.9.3.2. Positional-Only Parameters4.9.3.3. Keyword-Only Arguments4.9.3.4. Function Examples4.9.3.5. Recap
- 4.9.4. Arbitrary Argument Lists
- 4.9.5. Unpacking Argument Lists
- 4.9.6. Lambda Expressions
- 4.9.7. Documentation Strings
- 4.9.8. Function Annotations

- 4.9.3.1. Positional-or-Keyword Arguments
- 4.9.3.2. Positional-Only Parameters
- 4.9.3.3. Keyword-Only Arguments
- 4.9.3.4. Function Examples
- 4.9.3.5. Recap

- 5.1. More on Lists5.1.1. Using Lists as Stacks5.1.2. Using Lists as Queues5.1.3. List Comprehensions5.1.4. Nested List Comprehensions
- 5.2. Thedelstatement
- 5.3. Tuples and Sequences
- 5.5. Dictionaries
- 5.6. Looping Techniques
- 5.7. More on Conditions
- 5.8. Comparing Sequences and Other Types

- 5.1.1. Using Lists as Stacks
- 5.1.2. Using Lists as Queues
- 5.1.3. List Comprehensions
- 5.1.4. Nested List Comprehensions

- 6.1. More on Modules6.1.1. Executing modules as scripts6.1.2. The Module Search Path6.1.3. “Compiled” Python files
- 6.2. Standard Modules
- 6.3. Thedir()Function
- 6.4. Packages6.4.1. Importing * From a Package6.4.2. Intra-package References6.4.3. Packages in Multiple Directories

- 6.1.1. Executing modules as scripts
- 6.1.2. The Module Search Path
- 6.1.3. “Compiled” Python files

- 6.4.1. Importing * From a Package
- 6.4.2. Intra-package References
- 6.4.3. Packages in Multiple Directories

- 7.1. Fancier Output Formatting7.1.1. Formatted String Literals7.1.2. The String format() Method7.1.3. Manual String Formatting7.1.4. Old string formatting
- 7.2. Reading and Writing Files7.2.1. Methods of File Objects7.2.2. Saving structured data withjson

- 7.1.1. Formatted String Literals
- 7.1.2. The String format() Method
- 7.1.3. Manual String Formatting
- 7.1.4. Old string formatting

- 7.2.1. Methods of File Objects
- 7.2.2. Saving structured data withjson

- 8.1. Syntax Errors
- 8.2. Exceptions
- 8.3. Handling Exceptions
- 8.4. Raising Exceptions
- 8.5. Exception Chaining
- 8.6. User-defined Exceptions
- 8.7. Defining Clean-up Actions
- 8.8. Predefined Clean-up Actions
- 8.9. Raising and Handling Multiple Unrelated Exceptions
- 8.10. Enriching Exceptions with Notes

- 9.1. A Word About Names and Objects
- 9.2. Python Scopes and Namespaces9.2.1. Scopes and Namespaces Example
- 9.3. A First Look at Classes9.3.1. Class Definition Syntax9.3.2. Class Objects9.3.3. Instance Objects9.3.4. Method Objects9.3.5. Class and Instance Variables
- 9.4. Random Remarks
- 9.5. Inheritance9.5.1. Multiple Inheritance
- 9.6. Private Variables
- 9.7. Odds and Ends
- 9.8. Iterators
- 9.9. Generators
- 9.10. Generator Expressions

- 9.2.1. Scopes and Namespaces Example

- 9.3.1. Class Definition Syntax
- 9.3.2. Class Objects
- 9.3.3. Instance Objects
- 9.3.4. Method Objects
- 9.3.5. Class and Instance Variables

- 9.5.1. Multiple Inheritance

- 10.1. Operating System Interface
- 10.2. File Wildcards
- 10.3. Command Line Arguments
- 10.4. Error Output Redirection and Program Termination
- 10.5. String Pattern Matching
- 10.6. Mathematics
- 10.7. Internet Access
- 10.8. Dates and Times
- 10.9. Data Compression
- 10.10. Performance Measurement
- 10.11. Quality Control
- 10.12. Batteries Included

- 11.1. Output Formatting
- 11.2. Templating
- 11.3. Working with Binary Data Record Layouts
- 11.4. Multi-threading
- 11.5. Logging
- 11.6. Weak References
- 11.7. Tools for Working with Lists
- 11.8. Decimal Floating-Point Arithmetic

- 12.1. Introduction
- 12.2. Creating Virtual Environments
- 12.3. Managing Packages with pip

- 14.1. Tab Completion and History Editing
- 14.2. Alternatives to the Interactive Interpreter

- 15.1. Representation Error

- 16.1. Interactive Mode16.1.1. Error Handling16.1.2. Executable Python Scripts16.1.3. The Interactive Startup File16.1.4. The Customization Modules

- 16.1.1. Error Handling
- 16.1.2. Executable Python Scripts
- 16.1.3. The Interactive Startup File
- 16.1.4. The Customization Modules

================================================================================

================================================================================

# 3.10.17 Documentation
URL: https://docs.python.org/3.10/
Section: 1/2

Content:

================================================================================

# Python 3.10.17 documentation

Welcome! This is the official documentation for Python 3.10.17.

Parts of the documentation:

What's new in Python 3.10?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Installing Python Modulesinstalling from the Python Package Index & other sources

Distributing Python Modulespublishing modules for installation by others

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

Contributing to Docs

About the documentation

History and License of Python

================================================================================

================================================================================

# Overview — Python 3.3.7 documentation
URL: https://docs.python.org/3.3/
Section: 1/2

Content:

================================================================================

# Python 3.3.7 documentation

Welcome! This is the documentation for Python 3.3.7, last updated Sep 19, 2017.

Parts of the documentation:

What's new in Python 3.3?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

Installing Python Modulesinformation for installers & sys-admins

Distributing Python Modulessharing modules with others

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

About the documentation

History and License of Python

================================================================================

================================================================================

# Python 2.7.18 documentation
URL: https://docs.python.org/2.7/
Section: 1/2

Content:

================================================================================

# Python 2.7.18 documentation

Welcome! This is the documentation for Python 2.7.18.

Parts of the documentation:

What's new in Python 2.7?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Installing Python Modulesinstalling from the Python Package Index & other sources

Distributing Python Modulespublishing modules for installation by others

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

About the documentation

History and License of Python

================================================================================

================================================================================

# Python HOWTOs — Python 3.13.3 documentation
URL: https://docs.python.org/3/howto/index.html
Section: 1/2
Description: Python HOWTOs are documents that cover a specific topic in-depth. Modeled on the Linux Documentation Project’s HOWTO collection, this collection is an effort to foster documentation that’s more det...

Content:

================================================================================

# Python HOWTOs¶

Python HOWTOs are documents that cover a specific topic in-depth. Modeled on the Linux Documentation Project’s HOWTO collection, this collection is an effort to foster documentation that’s more detailed than the Python Library Reference.

- Annotations Best Practices
- Argparse Tutorial
- Descriptor Guide
- Functional Programming HOWTO
- An introduction to the ipaddress module
- Logging HOWTO
- Logging Cookbook
- Regular Expression HOWTO
- Sorting Techniques
- Unicode HOWTO
- HOWTO Fetch Internet Resources Using The urllib Package

Advanced development:

- Curses Programming with Python
- Python experimental support for free threading
- C API Extension Support for Free Threading
- Isolating Extension Modules
- The Python 2.3 Method Resolution Order
- Socket Programming HOWTO
- timer file descriptor HOWTO
- Porting Extension Modules to Python 3

Debugging and profiling:

- Debugging C API extensions and CPython Internals with GDB
- Instrumenting CPython with DTrace and SystemTap
- Python support for the Linux perf profiler

================================================================================

================================================================================

# Overview — Python v3.2.6 documentation
URL: https://docs.python.org/3.2/
Section: 1/2

Content:

================================================================================

# Python v3.2.6 documentation

Welcome! This is the documentation for Python 3.2.6, last updated Oct 12, 2014.

Parts of the documentation:

What's new in Python 3.2?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

Installing Python Modulesinformation for installers & sys-admins

Distributing Python Modulessharing modules with others

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

About the documentation

History and License of Python

================================================================================

================================================================================

# Deprecations — Python 3.13.3 documentation
URL: https://docs.python.org/3/deprecations/index.html
Section: 1/2
Description: Pending Removal in Python 3.14: argparse: The type, choices, and metavar parameters of argparse.BooleanOptionalAction are deprecated and will be removed in 3.14. (Contributed by Nikita Sobolev in g...

Content:

================================================================================

# Deprecations¶

================================================================================

## Pending Removal in Python 3.14¶

- argparse: Thetype,choices, andmetavarparameters
ofargparse.BooleanOptionalActionare deprecated
and will be removed in 3.14.
(Contributed by Nikita Sobolev ingh-92248.)
- ast: The following features have been deprecated in documentation
since Python 3.8, now cause aDeprecationWarningto be emitted at
runtime when they are accessed or used, and will be removed in Python 3.14:ast.Numast.Strast.Bytesast.NameConstantast.EllipsisUseast.Constantinstead.
(Contributed by Serhiy Storchaka ingh-90953.)
- asyncio:The child watcher classesMultiLoopChildWatcher,FastChildWatcher,AbstractChildWatcherandSafeChildWatcherare deprecated and
will be removed in Python 3.14.
(Contributed by Kumar Aditya ingh-94597.)asyncio.set_child_watcher(),asyncio.get_child_watcher(),asyncio.AbstractEventLoopPolicy.set_child_watcher()andasyncio.AbstractEventLoopPolicy.get_child_watcher()are deprecated
and will be removed in Python 3.14.
(Contributed by Kumar Aditya ingh-94597.)Theget_event_loop()method of the
default event loop policy now emits aDeprecationWarningif there
is no current event loop set and it decides to create one.
(Contributed by Serhiy Storchaka and Guido van Rossum ingh-100160.)
- collections.abc: DeprecatedByteString.
PreferSequenceorBuffer.
For use in typing, prefer a union, likebytes|bytearray,
orcollections.abc.Buffer.
(Contributed by Shantanu Jain ingh-91896.)
- email: Deprecated theisdstparameter inemail.utils.localtime().
(Contributed by Alan Williams ingh-72346.)
- importlib.abcdeprecated classes:importlib.abc.ResourceReaderimportlib.abc.Traversableimportlib.abc.TraversableResourcesUseimportlib.resources.abcclasses instead:importlib.resources.abc.Traversableimportlib.resources.abc.TraversableResources(Contributed by Jason R. Coombs and Hugo van Kemenade ingh-93963.)
- itertoolshad undocumented, inefficient, historically buggy,
and inconsistent support for copy, deepcopy, and pickle operations.
This will be removed in 3.14 for a significant reduction in code
volume and maintenance burden.
(Contributed by Raymond Hettinger ingh-101588.)
- multiprocessing: The default start method will change to a safer one on
Linux, BSDs, and other non-macOS POSIX platforms where'fork'is currently
the default (gh-84559). Adding a runtime warning about this was deemed too
disruptive as the majority of code is not expected to care. Use theget_context()orset_start_method()APIs to explicitly specify when
your coderequires'fork'.  SeeContexts and start methods.
- pathlib:is_relative_to()andrelative_to(): passing additional arguments is
deprecated.
- pkgutil:find_loader()andget_loader()now raiseDeprecationWarning;
useimportlib.util.find_spec()instead.
(Contributed by Nikita Sobolev ingh-97850.)
- pty:master_open(): usepty.openpty().slave_open(): usepty.openpty().
- sqlite3:versionandversion_info.execute()andexecutemany()ifnamed placeholdersare used andparametersis a sequence instead of adict.
- typing:ByteString, deprecated since Python 3.9,
now causes aDeprecationWarningto be emitted when it is used.
- urllib:urllib.parse.Quoteris deprecated: it was not intended to be a
public API.
(Contributed by Gregory P. Smith ingh-88168.)

```
argparse.BooleanOptionalAction
```

ast: The following features have been deprecated in documentation since Python 3.8, now cause aDeprecationWarningto be emitted at runtime when they are accessed or used, and will be removed in Python 3.14:

```
DeprecationWarning
```

- ast.NameConstant
- ast.Ellipsis

Useast.Constantinstead. (Contributed by Serhiy Storchaka ingh-90953.)

```
ast.Constant
```

- The child watcher classesMultiLoopChildWatcher,FastChildWatcher,AbstractChildWatcherandSafeChildWatcherare deprecated and
will be removed in Python 3.14.
(Contributed by Kumar Aditya ingh-94597.)
- asyncio.set_child_watcher(),asyncio.get_child_watcher(),asyncio.AbstractEventLoopPolicy.set_child_watcher()andasyncio.AbstractEventLoopPolicy.get_child_watcher()are deprecated
and will be removed in Python 3.14.
(Contributed by Kumar Aditya ingh-94597.)
- Theget_event_loop()method of the
default event loop policy now emits aDeprecationWarningif there
is no current event loop set and it decides to create one.
(Contributed by Serhiy Storchaka and Guido van Rossum ingh-100160.)

```
MultiLoopChildWatcher
```

```
FastChildWatcher
```

```
AbstractChildWatcher
```

```
SafeChildWatcher
```

```
asyncio.set_child_watcher()
```

```
asyncio.get_child_watcher()
```

```
asyncio.AbstractEventLoopPolicy.set_child_watcher()
```

```
asyncio.AbstractEventLoopPolicy.get_child_watcher()
```

```
get_event_loop()
```

```
collections.abc
```

```
ByteString
```

```
bytes|bytearray
```

```
collections.abc.Buffer
```

```
email.utils.localtime()
```

importlib.abcdeprecated classes:

```
importlib.abc
```

- importlib.abc.ResourceReader
- importlib.abc.Traversable
- importlib.abc.TraversableResources

Useimportlib.resources.abcclasses instead:

```
importlib.resources.abc
```

- importlib.resources.abc.Traversable
- importlib.resources.abc.TraversableResources

(Contributed by Jason R. Coombs and Hugo van Kemenade ingh-93963.)

```
multiprocessing
```

```
get_context()
```

```
set_start_method()
```

```
is_relative_to()
```

```
relative_to()
```

```
find_loader()
```

```
get_loader()
```

```
importlib.util.find_spec()
```

- master_open(): usepty.openpty().
- slave_open(): usepty.openpty().

```
master_open()
```

```
pty.openpty()
```

```
slave_open()
```

- versionandversion_info.
- execute()andexecutemany()ifnamed placeholdersare used andparametersis a sequence instead of adict.

```
version_info
```

```
executemany()
```

```
urllib.parse.Quoter
```

================================================================================

## Pending Removal in Python 3.15¶

- The import system:Setting__cached__on a module while
failing to set__spec__.cachedis deprecated. In Python 3.15,__cached__will cease to be set or
take into consideration by the import system or standard library. (gh-97879)Setting__package__on a module while
failing to set__spec__.parentis deprecated. In Python 3.15,__package__will cease to be set or
take into consideration by the import system or standard library. (gh-97879)
- ctypes:The undocumentedctypes.SetPointerType()function
has been deprecated since Python 3.13.
- http.server:The obsolete and rarely usedCGIHTTPRequestHandlerhas been deprecated since Python 3.13.
No direct replacement exists.Anythingis better than CGI to interface
a web server with a request handler.The--cgiflag to thepython -m http.servercommand-line interface has been deprecated since Python 3.13.
- importlib:load_module()method: useexec_module()instead.
- locale:Thegetdefaultlocale()function
has been deprecated since Python 3.11.
Its removal was originally planned for Python 3.13 (gh-90817),
but has been postponed to Python 3.15.
Usegetlocale(),setlocale(),
andgetencoding()instead.
(Contributed by Hugo van Kemenade ingh-111187.)
- pathlib:PurePath.is_reserved()has been deprecated since Python 3.13.
Useos.path.isreserved()to detect reserved paths on Windows.
- platform:java_ver()has been deprecated since Python 3.13.
This function is only useful for Jython support, has a confusing API,
and is largely untested.
- sysconfig:Thecheck_homeargument ofsysconfig.is_python_build()has been
deprecated since Python 3.12.
- threading:RLock()will take no arguments in Python 3.15.
Passing any arguments has been deprecated since Python 3.14,
as the  Python version does not permit any arguments,
but the C version allows any number of positional or keyword arguments,
ignoring every argument.
- types:types.CodeType: Accessingco_lnotabwas
deprecated inPEP 626since 3.10 and was planned to be removed in 3.12,
but it only got a properDeprecationWarningin 3.12.
May be removed in 3.15.
(Contributed by Nikita Sobolev ingh-101866.)
- typing:The undocumented keyword argument syntax for creatingNamedTupleclasses
(e.g.Point=NamedTuple("Point",x=int,y=int))
has been deprecated since Python 3.13.
Use the class-based syntax or the functional syntax instead.Thetyping.no_type_check_decorator()decorator function
has been deprecated since Python 3.13.
After eight years in thetypingmodule,
it has yet to be supported by any major type checker.
- wave:Thegetmark(),setmark(),
andgetmarkers()methods of
theWave_readandWave_writeclasses
have been deprecated since Python 3.13.

The import system:

- Setting__cached__on a module while
failing to set__spec__.cachedis deprecated. In Python 3.15,__cached__will cease to be set or
take into consideration by the import system or standard library. (gh-97879)
- Setting__package__on a module while
failing to set__spec__.parentis deprecated. In Python 3.15,__package__will cease to be set or
take into consideration by the import system or standard library. (gh-97879)

```
__cached__
```

```
__spec__.cached
```

```
__package__
```

```
__spec__.parent
```

- The undocumentedctypes.SetPointerType()function
has been deprecated since Python 3.13.

```
ctypes.SetPointerType()
```

http.server:

```
http.server
```

- The obsolete and rarely usedCGIHTTPRequestHandlerhas been deprecated since Python 3.13.
No direct replacement exists.Anythingis better than CGI to interface
a web server with a request handler.
- The--cgiflag to thepython -m http.servercommand-line interface has been deprecated since Python 3.13.

```
CGIHTTPRequestHandler
```

- load_module()method: useexec_module()instead.

```
load_module()
```

```
exec_module()
```

- Thegetdefaultlocale()function
has been deprecated since Python 3.11.
Its removal was originally planned for Python 3.13 (gh-90817),
but has been postponed to Python 3.15.
Usegetlocale(),setlocale(),
andgetencoding()instead.
(Contributed by Hugo van Kemenade ingh-111187.)

```
getdefaultlocale()
```

```
getlocale()
```

```
setlocale()
```

```
getencoding()
```

- PurePath.is_reserved()has been deprecated since Python 3.13.
Useos.path.isreserved()to detect reserved paths on Windows.

```
PurePath.is_reserved()
```

```
os.path.isreserved()
```

- java_ver()has been deprecated since Python 3.13.
This function is only useful for Jython support, has a confusing API,
and is largely untested.

```
java_ver()
```

- Thecheck_homeargument ofsysconfig.is_python_build()has been
deprecated since Python 3.12.

```
sysconfig.is_python_build()
```

- RLock()will take no arguments in Python 3.15.
Passing any arguments has been deprecated since Python 3.14,
as the  Python version does not permit any arguments,
but the C version allows any number of positional or keyword arguments,
ignoring every argument.

- types.CodeType: Accessingco_lnotabwas
deprecated inPEP 626since 3.10 and was planned to be removed in 3.12,
but it only got a properDeprecationWarningin 3.12.
May be removed in 3.15.
(Contributed by Nikita Sobolev ingh-101866.)

```
types.CodeType
```

- The undocumented keyword argument syntax for creatingNamedTupleclasses
(e.g.Point=NamedTuple("Point",x=int,y=int))
has been deprecated since Python 3.13.
Use the class-based syntax or the functional syntax instead.
- Thetyping.no_type_check_decorator()decorator function
has been deprecated since Python 3.13.
After eight years in thetypingmodule,
it has yet to be supported by any major type checker.

```
NamedTuple
```

```
Point=NamedTuple("Point",x=int,y=int)
```

```
typing.no_type_check_decorator()
```

- Thegetmark(),setmark(),
andgetmarkers()methods of
theWave_readandWave_writeclasses
have been deprecated since Python 3.13.

```
getmarkers()
```

```
Wave_write
```

================================================================================

## Pending removal in Python 3.16¶

- The import system:Setting__loader__on a module while
failing to set__spec__.loaderis deprecated. In Python 3.16,__loader__will cease to be set or
taken into consideration by the import system or the standard library.
- array:The'u'format code (wchar_t)
has been deprecated in documentation since Python 3.3
and at runtime since Python 3.13.
Use the'w'format code (Py_UCS4)
for Unicode characters instead.
- asyncio:asyncio.iscoroutinefunction()is deprecated
and will be removed in Python 3.16,
useinspect.iscoroutinefunction()instead.
(Contributed by Jiahao Li and Kumar Aditya ingh-122875.)
- builtins:Bitwise inversion on boolean types,~Trueor~Falsehas been deprecated since Python 3.12,
as it produces surprising and unintuitive results (-2and-1).
Usenotxinstead for the logical negation of a Boolean.
In the rare case that you need the bitwise inversion of
the underlying integer, convert tointexplicitly (~int(x)).
- shutil:TheExecErrorexception
has been deprecated since Python 3.14.
It has not been used by any function inshutilsince Python 3.4,
and is now an alias ofRuntimeError.
- symtable:TheClass.get_methodsmethod
has been deprecated since Python 3.14.
- sys:The_enablelegacywindowsfsencoding()function
has been deprecated since Python 3.13.
Use thePYTHONLEGACYWINDOWSFSENCODINGenvironment variable instead.
- tarfile:The undocumented and unusedTarFile.tarfileattribute
has been deprecated since Python 3.13.

- Setting__loader__on a module while
failing to set__spec__.loaderis deprecated. In Python 3.16,__loader__will cease to be set or
taken into consideration by the import system or the standard library.

```
__loader__
```

```
__spec__.loader
```

- The'u'format code (wchar_t)
has been deprecated in documentation since Python 3.3
and at runtime since Python 3.13.
Use the'w'format code (Py_UCS4)
for Unicode characters instead.

- asyncio.iscoroutinefunction()is deprecated
and will be removed in Python 3.16,
useinspect.iscoroutinefunction()instead.
(Contributed by Jiahao Li and Kumar Aditya ingh-122875.)

```
asyncio.iscoroutinefunction()
```

```
inspect.iscoroutinefunction()
```

- Bitwise inversion on boolean types,~Trueor~Falsehas been deprecated since Python 3.12,
as it produces surprising and unintuitive results (-2and-1).
Usenotxinstead for the logical negation of a Boolean.
In the rare case that you need the bitwise inversion of
the underlying integer, convert tointexplicitly (~int(x)).

- TheExecErrorexception
has been deprecated since Python 3.14.
It has not been used by any function inshutilsince Python 3.4,
and is now an alias ofRuntimeError.

```
RuntimeError
```

- TheClass.get_methodsmethod
has been deprecated since Python 3.14.

```
Class.get_methods
```

- The_enablelegacywindowsfsencoding()function
has been deprecated since Python 3.13.
Use thePYTHONLEGACYWINDOWSFSENCODINGenvironment variable instead.

```
_enablelegacywindowsfsencoding()
```

```
PYTHONLEGACYWINDOWSFSENCODING
```

- The undocumented and unusedTarFile.tarfileattribute
has been deprecated since Python 3.13.

```
TarFile.tarfile
```

================================================================================

## Pending Removal in Future Versions¶

The following APIs will be removed in the future, although there is currently no date scheduled for their removal.

- argparse: Nesting argument groups and nesting mutually exclusive
groups are deprecated.
- array’s'u'format code (gh-57281)
- builtins:bool(NotImplemented).Generators:throw(type,exc,tb)andathrow(type,exc,tb)signature is deprecated: usethrow(exc)andathrow(exc)instead,
the single argument signature.Currently Python accepts numeric literals immediately followed by keywords,
for example0inx,1orx,0if1else2.  It allows confusing and
ambiguous expressions like[0x1forxiny](which can be interpreted as[0x1forxiny]or[0x1forxiny]).  A syntax warning is raised
if the numeric literal is immediately followed by one of keywordsand,else,for,if,in,isandor.  In a future release it
will be changed to a syntax error. (gh-87999)Support for__index__()and__int__()method returning non-int type:
these methods will be required to return an instance of a strict subclass ofint.Support for__float__()method returning a strict subclass offloat: these methods will be required to return an instance offloat.Support for__complex__()method returning a strict subclass ofcomplex: these methods will be required to return an instance ofcomplex.Delegation ofint()to__trunc__()method.Passing a complex number as therealorimagargument in thecomplex()constructor is now deprecated; it should only be passed
as a single positional argument.
(Contributed by Serhiy Storchaka ingh-109218.)
- calendar:calendar.Januaryandcalendar.Februaryconstants are
deprecated and replaced bycalendar.JANUARYandcalendar.FEBRUARY.
(Contributed by Prince Roshan ingh-103636.)
- codeobject.co_lnotab: use thecodeobject.co_lines()method
instead.
- datetime:utcnow():
usedatetime.datetime.now(tz=datetime.UTC).utcfromtimestamp():
usedatetime.datetime.fromtimestamp(timestamp,tz=datetime.UTC).
- gettext: Plural value must be an integer.
- importlib:cache_from_source()debug_overrideparameter is
deprecated: use theoptimizationparameter instead.
- importlib.metadata:EntryPointstuple interface.ImplicitNoneon return values.
- logging: thewarn()method has been deprecated
since Python 3.3, usewarning()instead.
- mailbox: Use of StringIO input and text mode is deprecated, use
BytesIO and binary mode instead.
- os: Callingos.register_at_fork()in multi-threaded process.
- pydoc.ErrorDuringImport: A tuple value forexc_infoparameter is
deprecated, use an exception instance.
- re: More strict rules are now applied for numerical group references
and group names in regular expressions.  Only sequence of ASCII digits is now
accepted as a numerical reference.  The group name in bytes patterns and
replacement strings can now only contain ASCII letters and digits and
underscore.
(Contributed by Serhiy Storchaka ingh-91760.)
- sre_compile,sre_constantsandsre_parsemodules.
- shutil:rmtree()’sonerrorparameter is deprecated in
Python 3.12; use theonexcparameter instead.
- ssloptions and protocols:ssl.SSLContextwithout protocol argument is deprecated.ssl.SSLContext:set_npn_protocols()andselected_npn_protocol()are deprecated: use ALPN
instead.ssl.OP_NO_SSL*optionsssl.OP_NO_TLS*optionsssl.PROTOCOL_SSLv3ssl.PROTOCOL_TLSssl.PROTOCOL_TLSv1ssl.PROTOCOL_TLSv1_1ssl.PROTOCOL_TLSv1_2ssl.TLSVersion.SSLv3ssl.TLSVersion.TLSv1ssl.TLSVersion.TLSv1_1
- threadingmethods:threading.Condition.notifyAll(): usenotify_all().threading.Event.isSet(): useis_set().threading.Thread.isDaemon(),threading.Thread.setDaemon():
usethreading.Thread.daemonattribute.threading.Thread.getName(),threading.Thread.setName():
usethreading.Thread.nameattribute.threading.currentThread(): usethreading.current_thread().threading.activeCount(): usethreading.active_count().
- typing.Text(gh-92332).
- unittest.IsolatedAsyncioTestCase: it is deprecated to return a value
that is notNonefrom a test case.
- urllib.parsedeprecated functions:urlparse()insteadsplitattr()splithost()splitnport()splitpasswd()splitport()splitquery()splittag()splittype()splituser()splitvalue()to_bytes()
- urllib.request:URLopenerandFancyURLopenerstyle of invoking requests is
deprecated. Use newerurlopen()functions and methods.
- wsgiref:SimpleHandler.stdout.write()should not do partial
writes.
- xml.etree.ElementTree: Testing the truth value of anElementis deprecated. In a future release it
will always returnTrue. Prefer explicitlen(elem)orelemisnotNonetests instead.
- zipimport.zipimporter.load_module()is deprecated:
useexec_module()instead.

- bool(NotImplemented).
- Generators:throw(type,exc,tb)andathrow(type,exc,tb)signature is deprecated: usethrow(exc)andathrow(exc)instead,
the single argument signature.
- Currently Python accepts numeric literals immediately followed by keywords,
for example0inx,1orx,0if1else2.  It allows confusing and
ambiguous expressions like[0x1forxiny](which can be interpreted as[0x1forxiny]or[0x1forxiny]).  A syntax warning is raised
if the numeric literal is immediately followed by one of keywordsand,else,for,if,in,isandor.  In a future release it
will be changed to a syntax error. (gh-87999)
- Support for__index__()and__int__()method returning non-int type:
these methods will be required to return an instance of a strict subclass ofint.
- Support for__float__()method returning a strict subclass offloat: these methods will be required to return an instance offloat.
- Support for__complex__()method returning a strict subclass ofcomplex: these methods will be required to return an instance ofcomplex.
- Delegation ofint()to__trunc__()method.
- Passing a complex number as therealorimagargument in thecomplex()constructor is now deprecated; it should only be passed
as a single positional argument.
(Contributed by Serhiy Storchaka ingh-109218.)

```
bool(NotImplemented)
```

```
throw(type,exc,tb)
```

```
athrow(type,exc,tb)
```

```
throw(exc)
```

```
athrow(exc)
```

```
[0x1forxiny]
```

```
__index__()
```

```
__float__()
```

```
__complex__()
```

```
__trunc__()
```

```
calendar.January
```

```
calendar.February
```

```
calendar.JANUARY
```

```
calendar.FEBRUARY
```

```
codeobject.co_lnotab
```

```
codeobject.co_lines()
```

- utcnow():
usedatetime.datetime.now(tz=datetime.UTC).
- utcfromtimestamp():
usedatetime.datetime.fromtimestamp(timestamp,tz=datetime.UTC).

```
datetime.datetime.now(tz=datetime.UTC)
```

```
utcfromtimestamp()
```

```
datetime.datetime.fromtimestamp(timestamp,tz=datetime.UTC)
```

- cache_from_source()debug_overrideparameter is
deprecated: use theoptimizationparameter instead.

```
cache_from_source()
```

importlib.metadata:

```
importlib.metadata
```

- EntryPointstuple interface.
- ImplicitNoneon return values.

```
EntryPoints
```

```
os.register_at_fork()
```

```
pydoc.ErrorDuringImport
```

```
sre_compile
```

```
sre_constants
```

ssloptions and protocols:

- ssl.SSLContextwithout protocol argument is deprecated.
- ssl.SSLContext:set_npn_protocols()andselected_npn_protocol()are deprecated: use ALPN
instead.
- ssl.OP_NO_SSL*options
- ssl.OP_NO_TLS*options
- ssl.PROTOCOL_SSLv3
- ssl.PROTOCOL_TLS
- ssl.PROTOCOL_TLSv1
- ssl.PROTOCOL_TLSv1_1
- ssl.PROTOCOL_TLSv1_2
- ssl.TLSVersion.SSLv3
- ssl.TLSVersion.TLSv1
- ssl.TLSVersion.TLSv1_1

```
ssl.SSLContext
```

```
set_npn_protocols()
```

```
selected_npn_protocol()
```

```
ssl.OP_NO_SSL*
```

```
ssl.OP_NO_TLS*
```

threadingmethods:

- threading.Condition.notifyAll(): usenotify_all().
- threading.Event.isSet(): useis_set().
- threading.Thread.isDaemon(),threading.Thread.setDaemon():
usethreading.Thread.daemonattribute.
- threading.Thread.getName(),threading.Thread.setName():
usethreading.Thread.nameattribute.
- threading.currentThread(): usethreading.current_thread().
- threading.activeCount(): usethreading.active_count().

```
threading.Condition.notifyAll()
```

```
notify_all()
```

```
threading.Event.isSet()
```

```
threading.Thread.isDaemon()
```

```
threading.Thread.setDaemon()
```

```
threading.Thread.daemon
```

```
threading.Thread.getName()
```

```
threading.Thread.setName()
```

```
threading.Thread.name
```

```
threading.currentThread()
```

```
threading.current_thread()
```

```
threading.activeCount()
```

```
threading.active_count()
```

```
typing.Text
```

```
unittest.IsolatedAsyncioTestCase
```

urllib.parsedeprecated functions:urlparse()instead

```
urllib.parse
```

```
urlparse()
```

- splitattr()
- splithost()
- splitnport()
- splitpasswd()
- splitport()
- splitquery()
- splittype()
- splituser()
- splitvalue()

```
splittag()
```

```
to_bytes()
```

```
urllib.request
```

```
FancyURLopener
```

```
SimpleHandler.stdout.write()
```

```
xml.etree.ElementTree
```

```
elemisnotNone
```

```
zipimport.zipimporter.load_module()
```

================================================================================

## C API Deprecations¶

================================================================================

### Pending Removal in Python 3.14¶

- Thema_version_tagfield inPyDictObjectfor extension modules
(PEP 699;gh-101193).
- Creatingimmutabletypeswith mutable
bases (gh-95388).
- Functions to configure Python’s initialization, deprecated in Python 3.11:PySys_SetArgvEx():
SetPyConfig.argvinstead.PySys_SetArgv():
SetPyConfig.argvinstead.Py_SetProgramName():
SetPyConfig.program_nameinstead.Py_SetPythonHome():
SetPyConfig.homeinstead.ThePy_InitializeFromConfig()API should be used withPyConfiginstead.
- Global configuration variables:Py_DebugFlag:
UsePyConfig.parser_debuginstead.Py_VerboseFlag:
UsePyConfig.verboseinstead.Py_QuietFlag:
UsePyConfig.quietinstead.Py_InteractiveFlag:
UsePyConfig.interactiveinstead.Py_InspectFlag:
UsePyConfig.inspectinstead.Py_OptimizeFlag:
UsePyConfig.optimization_levelinstead.Py_NoSiteFlag:
UsePyConfig.site_importinstead.Py_BytesWarningFlag:
UsePyConfig.bytes_warninginstead.Py_FrozenFlag:
UsePyConfig.pathconfig_warningsinstead.Py_IgnoreEnvironmentFlag:
UsePyConfig.use_environmentinstead.Py_DontWriteBytecodeFlag:
UsePyConfig.write_bytecodeinstead.Py_NoUserSiteDirectory:
UsePyConfig.user_site_directoryinstead.Py_UnbufferedStdioFlag:
UsePyConfig.buffered_stdioinstead.Py_HashRandomizationFlag:
UsePyConfig.use_hash_seedandPyConfig.hash_seedinstead.Py_IsolatedFlag:
UsePyConfig.isolatedinstead.Py_LegacyWindowsFSEncodingFlag:
UsePyPreConfig.legacy_windows_fs_encodinginstead.Py_LegacyWindowsStdioFlag:
UsePyConfig.legacy_windows_stdioinstead.Py_FileSystemDefaultEncoding:
UsePyConfig.filesystem_encodinginstead.Py_HasFileSystemDefaultEncoding:
UsePyConfig.filesystem_encodinginstead.Py_FileSystemDefaultEncodeErrors:
UsePyConfig.filesystem_errorsinstead.Py_UTF8Mode:
UsePyPreConfig.utf8_modeinstead.
(seePy_PreInitialize())ThePy_InitializeFromConfig()API should be used withPyConfiginstead.

```
ma_version_tag
```

```
PyDictObject
```

```
immutabletypes
```

Functions to configure Python’s initialization, deprecated in Python 3.11:

- PySys_SetArgvEx():
SetPyConfig.argvinstead.
- PySys_SetArgv():
SetPyConfig.argvinstead.
- Py_SetProgramName():
SetPyConfig.program_nameinstead.
- Py_SetPythonHome():
SetPyConfig.homeinstead.

```
PySys_SetArgvEx()
```

```
PyConfig.argv
```

```
PySys_SetArgv()
```

```
Py_SetProgramName()
```

```
PyConfig.program_name
```

```
Py_SetPythonHome()
```

```
PyConfig.home
```

ThePy_InitializeFromConfig()API should be used withPyConfiginstead.

```
Py_InitializeFromConfig()
```

Global configuration variables:

- Py_DebugFlag:
UsePyConfig.parser_debuginstead.
- Py_VerboseFlag:
UsePyConfig.verboseinstead.
- Py_QuietFlag:
UsePyConfig.quietinstead.
- Py_InteractiveFlag:
UsePyConfig.interactiveinstead.
- Py_InspectFlag:
UsePyConfig.inspectinstead.
- Py_OptimizeFlag:
UsePyConfig.optimization_levelinstead.
- Py_NoSiteFlag:
UsePyConfig.site_importinstead.
- Py_BytesWarningFlag:
UsePyConfig.bytes_warninginstead.
- Py_FrozenFlag:
UsePyConfig.pathconfig_warningsinstead.
- Py_IgnoreEnvironmentFlag:
UsePyConfig.use_environmentinstead.
- Py_DontWriteBytecodeFlag:
UsePyConfig.write_bytecodeinstead.
- Py_NoUserSiteDirectory:
UsePyConfig.user_site_directoryinstead.
- Py_UnbufferedStdioFlag:
UsePyConfig.buffered_stdioinstead.
- Py_HashRandomizationFlag:
UsePyConfig.use_hash_seedandPyConfig.hash_seedinstead.
- Py_IsolatedFlag:
UsePyConfig.isolatedinstead.
- Py_LegacyWindowsFSEncodingFlag:
UsePyPreConfig.legacy_windows_fs_encodinginstead.
- Py_LegacyWindowsStdioFlag:
UsePyConfig.legacy_windows_stdioinstead.
- Py_FileSystemDefaultEncoding:
UsePyConfig.filesystem_encodinginstead.
- Py_HasFileSystemDefaultEncoding:
UsePyConfig.filesystem_encodinginstead.
- Py_FileSystemDefaultEncodeErrors:
UsePyConfig.filesystem_errorsinstead.
- Py_UTF8Mode:
UsePyPreConfig.utf8_modeinstead.
(seePy_PreInitialize())

```
Py_DebugFlag
```

```
PyConfig.parser_debug
```

```
Py_VerboseFlag
```

```
PyConfig.verbose
```

```
Py_QuietFlag
```

```
PyConfig.quiet
```

```
Py_InteractiveFlag
```

```
PyConfig.interactive
```

```
Py_InspectFlag
```

```
PyConfig.inspect
```

```
Py_OptimizeFlag
```

```
PyConfig.optimization_level
```

```
Py_NoSiteFlag
```

```
PyConfig.site_import
```

```
Py_BytesWarningFlag
```

```
PyConfig.bytes_warning
```

```
Py_FrozenFlag
```

```
PyConfig.pathconfig_warnings
```

```
Py_IgnoreEnvironmentFlag
```

```
PyConfig.use_environment
```

```
Py_DontWriteBytecodeFlag
```

```
PyConfig.write_bytecode
```

```
Py_NoUserSiteDirectory
```

```
PyConfig.user_site_directory
```

```
Py_UnbufferedStdioFlag
```

```
PyConfig.buffered_stdio
```

```
Py_HashRandomizationFlag
```

```
PyConfig.use_hash_seed
```

```
PyConfig.hash_seed
```

```
Py_IsolatedFlag
```

```
PyConfig.isolated
```

```
Py_LegacyWindowsFSEncodingFlag
```

```
PyPreConfig.legacy_windows_fs_encoding
```

```
Py_LegacyWindowsStdioFlag
```

```
PyConfig.legacy_windows_stdio
```

```
Py_FileSystemDefaultEncoding
```

```
PyConfig.filesystem_encoding
```

```
Py_HasFileSystemDefaultEncoding
```

```
Py_FileSystemDefaultEncodeErrors
```

```
PyConfig.filesystem_errors
```

```
Py_UTF8Mode
```

```
PyPreConfig.utf8_mode
```

```
Py_PreInitialize()
```

================================================================================

### Pending Removal in Python 3.15¶

- The bundled copy oflibmpdecimal.
- ThePyImport_ImportModuleNoBlock():
UsePyImport_ImportModule()instead.
- PyWeakref_GetObject()andPyWeakref_GET_OBJECT():
UsePyWeakref_GetRef()instead.
- Py_UNICODEtype and thePy_UNICODE_WIDEmacro:
Usewchar_tinstead.
- Python initialization functions:PySys_ResetWarnOptions():
Clearsys.warnoptionsandwarnings.filtersinstead.Py_GetExecPrefix():
Getsys.base_exec_prefixandsys.exec_prefixinstead.Py_GetPath():
Getsys.pathinstead.Py_GetPrefix():
Getsys.base_prefixandsys.prefixinstead.Py_GetProgramFullPath():
Getsys.executableinstead.Py_GetProgramName():
Getsys.executableinstead.Py_GetPythonHome():
GetPyConfig.homeor thePYTHONHOMEenvironment variable instead.

```
libmpdecimal
```

```
PyImport_ImportModuleNoBlock()
```

```
PyImport_ImportModule()
```

```
PyWeakref_GetObject()
```

```
PyWeakref_GET_OBJECT()
```

```
PyWeakref_GetRef()
```

```
Py_UNICODE
```

```
Py_UNICODE_WIDE
```

Python initialization functions:

- PySys_ResetWarnOptions():
Clearsys.warnoptionsandwarnings.filtersinstead.
- Py_GetExecPrefix():
Getsys.base_exec_prefixandsys.exec_prefixinstead.
- Py_GetPath():
Getsys.pathinstead.
- Py_GetPrefix():
Getsys.base_prefixandsys.prefixinstead.
- Py_GetProgramFullPath():
Getsys.executableinstead.
- Py_GetProgramName():
Getsys.executableinstead.
- Py_GetPythonHome():
GetPyConfig.homeor thePYTHONHOMEenvironment variable instead.

```
PySys_ResetWarnOptions()
```

```
sys.warnoptions
```

```
warnings.filters
```

```
Py_GetExecPrefix()
```

```
sys.base_exec_prefix
```

```
sys.exec_prefix
```

```
Py_GetPath()
```

```
Py_GetPrefix()
```

```
sys.base_prefix
```

```
sys.prefix
```

```
Py_GetProgramFullPath()
```

```
sys.executable
```

```
Py_GetProgramName()
```

```
Py_GetPythonHome()
```

```
PYTHONHOME
```

================================================================================

### Pending Removal in Future Versions¶

The following APIs are deprecated and will be removed, although there is currently no date scheduled for their removal.

- Py_TPFLAGS_HAVE_FINALIZE:
Unneeded since Python 3.8.
- PyErr_Fetch():
UsePyErr_GetRaisedException()instead.
- PyErr_NormalizeException():
UsePyErr_GetRaisedException()instead.
- PyErr_Restore():
UsePyErr_SetRaisedException()instead.
- PyModule_GetFilename():
UsePyModule_GetFilenameObject()instead.
- PyOS_AfterFork():
UsePyOS_AfterFork_Child()instead.
- PySlice_GetIndicesEx():
UsePySlice_Unpack()andPySlice_AdjustIndices()instead.
- PyUnicode_AsDecodedObject():
UsePyCodec_Decode()instead.
- PyUnicode_AsDecodedUnicode():
UsePyCodec_Decode()instead.
- PyUnicode_AsEncodedObject():
UsePyCodec_Encode()instead.
- PyUnicode_AsEncodedUnicode():
UsePyCodec_Encode()instead.
- PyUnicode_READY():
Unneeded since Python 3.12
- PyErr_Display():
UsePyErr_DisplayException()instead.
- _PyErr_ChainExceptions():
Use_PyErr_ChainExceptions1()instead.
- PyBytesObject.ob_shashmember:
callPyObject_Hash()instead.
- PyDictObject.ma_version_tagmember.
- Thread Local Storage (TLS) API:PyThread_create_key():
UsePyThread_tss_alloc()instead.PyThread_delete_key():
UsePyThread_tss_free()instead.PyThread_set_key_value():
UsePyThread_tss_set()instead.PyThread_get_key_value():
UsePyThread_tss_get()instead.PyThread_delete_key_value():
UsePyThread_tss_delete()instead.PyThread_ReInitTLS():
Unneeded since Python 3.7.

```
Py_TPFLAGS_HAVE_FINALIZE
```

```
PyErr_Fetch()
```

```
PyErr_GetRaisedException()
```

```
PyErr_NormalizeException()
```

```
PyErr_Restore()
```

```
PyErr_SetRaisedException()
```

```
PyModule_GetFilename()
```

```
PyModule_GetFilenameObject()
```

```
PyOS_AfterFork()
```

```
PyOS_AfterFork_Child()
```

```
PySlice_GetIndicesEx()
```

```
PySlice_Unpack()
```

```
PySlice_AdjustIndices()
```

```
PyUnicode_AsDecodedObject()
```

```
PyCodec_Decode()
```

```
PyUnicode_AsDecodedUnicode()
```

```
PyUnicode_AsEncodedObject()
```

```
PyCodec_Encode()
```

```
PyUnicode_AsEncodedUnicode()
```

```
PyUnicode_READY()
```

```
PyErr_Display()
```

```
PyErr_DisplayException()
```

```
_PyErr_ChainExceptions()
```

```
_PyErr_ChainExceptions1()
```

```
PyBytesObject.ob_shash
```

```
PyObject_Hash()
```

```
PyDictObject.ma_version_tag
```

Thread Local Storage (TLS) API:

- PyThread_create_key():
UsePyThread_tss_alloc()instead.
- PyThread_delete_key():
UsePyThread_tss_free()instead.
- PyThread_set_key_value():
UsePyThread_tss_set()instead.
- PyThread_get_key_value():
UsePyThread_tss_get()instead.
- PyThread_delete_key_value():
UsePyThread_tss_delete()instead.
- PyThread_ReInitTLS():
Unneeded since Python 3.7.

```
PyThread_create_key()
```

```
PyThread_tss_alloc()
```

```
PyThread_delete_key()
```

```
PyThread_tss_free()
```

```
PyThread_set_key_value()
```

```
PyThread_tss_set()
```

```
PyThread_get_key_value()
```

```
PyThread_tss_get()
```

```
PyThread_delete_key_value()
```

```
PyThread_tss_delete()
```

```
PyThread_ReInitTLS()
```

================================================================================

================================================================================

# Python Setup and Usage — Python 3.13.3 documentation
URL: https://docs.python.org/3/using/index.html
Section: 1/2
Description: This part of the documentation is devoted to general information on the setup of the Python environment on different platforms, the invocation of the interpreter and things that make working with P...

Content:

================================================================================

# Python Setup and Usage¶

This part of the documentation is devoted to general information on the setup of the Python environment on different platforms, the invocation of the interpreter and things that make working with Python easier.

- 1. Command line and environment1.1. Command line1.2. Environment variables
- 2. Using Python on Unix platforms2.1. Getting and installing the latest version of Python2.2. Building Python2.3. Python-related paths and files2.4. Miscellaneous2.5. Custom OpenSSL
- 3. Configure Python3.1. Build Requirements3.2. Generated files3.3. Configure Options3.4. Python Build System3.5. Compiler and linker flags
- 4. Using Python on Windows4.1. The full installer4.2. The Microsoft Store package4.3. The nuget.org packages4.4. The embeddable package4.5. Alternative bundles4.6. Configuring Python4.7. UTF-8 mode4.8. Python Launcher for Windows4.9. Finding modules4.10. Additional modules4.11. Compiling Python on Windows4.12. Other Platforms
- 5. Using Python on macOS5.1. Using Python for macOS frompython.org5.2. Alternative Distributions5.3. Installing Additional Python Packages5.4. GUI Programming5.5. Advanced Topics5.6. Other Resources
- 6. Using Python on Android6.1. Adding Python to an Android app
- 7. Using Python on iOS7.1. Python at runtime on iOS7.2. Installing Python on iOS7.3. App Store Compliance
- 8. Editors and IDEs8.1. IDLE — Python editor and shell8.2. Other Editors and IDEs

- 1.1. Command line
- 1.2. Environment variables

- 2.1. Getting and installing the latest version of Python
- 2.2. Building Python
- 2.3. Python-related paths and files
- 2.4. Miscellaneous
- 2.5. Custom OpenSSL

- 3.1. Build Requirements
- 3.2. Generated files
- 3.3. Configure Options
- 3.4. Python Build System
- 3.5. Compiler and linker flags

- 4.1. The full installer
- 4.2. The Microsoft Store package
- 4.3. The nuget.org packages
- 4.4. The embeddable package
- 4.5. Alternative bundles
- 4.6. Configuring Python
- 4.7. UTF-8 mode
- 4.8. Python Launcher for Windows
- 4.9. Finding modules
- 4.10. Additional modules
- 4.11. Compiling Python on Windows
- 4.12. Other Platforms

- 5.1. Using Python for macOS frompython.org
- 5.2. Alternative Distributions
- 5.3. Installing Additional Python Packages
- 5.4. GUI Programming
- 5.5. Advanced Topics
- 5.6. Other Resources

```
python.org
```

- 6.1. Adding Python to an Android app

- 7.1. Python at runtime on iOS
- 7.2. Installing Python on iOS
- 7.3. App Store Compliance

- 8.1. IDLE — Python editor and shell
- 8.2. Other Editors and IDEs

================================================================================

================================================================================

# What’s New In Python 3.13 — Python 3.13.3 documentation
URL: https://docs.python.org/3/whatsnew/3.13.html
Section: 1/2
Description: Editors, Adam Turner and Thomas Wouters,. This article explains the new features in Python 3.13, compared to 3.12. Python 3.13 was released on October 7, 2024. For full details, see the changelog. ...

Content:

================================================================================

# What’s New In Python 3.13¶

Editors:: Adam Turner and Thomas Wouters

Adam Turner and Thomas Wouters

This article explains the new features in Python 3.13, compared to 3.12. Python 3.13 was released on October 7, 2024. For full details, see thechangelog.

PEP 719– Python 3.13 Release Schedule

================================================================================

## Summary – Release Highlights¶

Python 3.13 is the latest stable release of the Python programming language, with a mix of changes to the language, the implementation and the standard library. The biggest changes include a newinteractive interpreter, experimental support for running in afree-threaded mode(PEP 703), and aJust-In-Time compiler(PEP 744).

Error messages continue to improve, with tracebacks now highlighted in color by default. Thelocals()builtin now hasdefined semanticsfor changing the returned mapping, and type parameters now support default values.

The library changes contain removal of deprecated APIs and modules, as well as the usual improvements in user-friendliness and correctness. Several legacy standard library modules have nowbeen removedfollowing their deprecation in Python 3.11 (PEP 594).

This article doesn’t attempt to provide a complete specification of all new features, but instead gives a convenient overview. For full details refer to the documentation, such as theLibrary ReferenceandLanguage Reference. To understand the complete implementation and design rationale for a change, refer to the PEP for a particular new feature; but note that PEPs usually are not kept up-to-date once a feature has been fully implemented. SeePorting to Python 3.13for guidance on upgrading from earlier versions of Python.

Interpreter improvements:

- A greatly improvedinteractive interpreterandimproved error messages.
- PEP 667: Thelocals()builtin now hasdefined semanticswhen mutating the
returned mapping. Python debuggers and similar tools may now more reliably
update local variables in optimized scopes even during concurrent code
execution.
- PEP 703: CPython 3.13 has experimental support for running with theglobal interpreter lockdisabled. SeeFree-threaded CPythonfor more details.
- PEP 744: A basicJIT compilerwas added.
It is currently disabled by default (though we may turn it on later).
Performance improvements are modest – we expect to improve this
over the next few releases.
- Color support in the newinteractive interpreter,
as well as intracebacksanddoctestoutput.
This can be disabled through thePYTHON_COLORSandNO_COLORenvironment variables.

```
PYTHON_COLORS
```

Python data model improvements:

- __static_attributes__stores the names of attributes accessed
throughself.Xin any function in a class body.
- __firstlineno__records the first line number of a class
definition.

```
__static_attributes__
```

```
__firstlineno__
```

Significant improvements in the standard library:

- Add a newPythonFinalizationErrorexception, raised when an operation
is blocked duringfinalization.
- Theargparsemodule now supports deprecating command-line options,
positional arguments, and subcommands.
- The new functionsbase64.z85encode()andbase64.z85decode()support encoding and decodingZ85 data.
- Thecopymodule now has acopy.replace()function,
with support for many builtin types and any class defining
the__replace__()method.
- The newdbm.sqlite3module is now the defaultdbmbackend.
- Theosmodule has asuite of new functionsfor working with Linux’s timer notification file descriptors.
- Therandommodule now has acommand-line interface.

```
PythonFinalizationError
```

```
base64.z85encode()
```

```
base64.z85decode()
```

```
copy.replace()
```

```
__replace__()
```

```
dbm.sqlite3
```

Security improvements:

- ssl.create_default_context()setsssl.VERIFY_X509_PARTIAL_CHAINandssl.VERIFY_X509_STRICTas default flags.

```
ssl.create_default_context()
```

```
ssl.VERIFY_X509_PARTIAL_CHAIN
```

```
ssl.VERIFY_X509_STRICT
```

C API improvements:

- ThePy_mod_gilslot is now used to indicate that
an extension module supports running with theGILdisabled.
- ThePyTime C APIhas been added,
providing access to system clocks.
- PyMutexis a new lightweight mutex that occupies a single byte.
- There is a newsuite of functionsfor generatingPEP 669monitoring events in the C API.

```
Py_mod_gil
```

New typing features:

- PEP 696: Type parameters (typing.TypeVar,typing.ParamSpec,
andtyping.TypeVarTuple) now support defaults.
- PEP 702: The newwarnings.deprecated()decorator adds support
for marking deprecations in the type system and at runtime.
- PEP 705:typing.ReadOnlycan be used to mark an item of atyping.TypedDictas read-only for type checkers.
- PEP 742:typing.TypeIsprovides more intuitive
type narrowing behavior, as an alternative totyping.TypeGuard.

```
typing.TypeVar
```

```
typing.ParamSpec
```

```
typing.TypeVarTuple
```

```
warnings.deprecated()
```

```
typing.ReadOnly
```

```
typing.TypedDict
```

```
typing.TypeIs
```

```
typing.TypeGuard
```

Platform support:

- PEP 730: Apple’s iOS is now anofficially supported platform, attier 3.
- PEP 738: Android is now anofficially supported platform, attier 3.
- wasm32-wasiis now supported as atier 2platform.
- wasm32-emscriptenis no longer an officially supported platform.

```
wasm32-wasi
```

```
wasm32-emscripten
```

Important removals:

- PEP 594: The remaining 19 “dead batteries”
(legacy stdlib modules) have been removed from the standard library:aifc,audioop,cgi,cgitb,chunk,crypt,imghdr,mailcap,msilib,nis,nntplib,ossaudiodev,pipes,sndhdr,spwd,sunau,telnetlib,uuandxdrlib.
- Remove the2to3tool andlib2to3module
(deprecated in Python 3.11).
- Remove thetkinter.tixmodule (deprecated in Python 3.6).
- Remove thelocale.resetlocale()function.
- Remove thetyping.ioandtyping.renamespaces.
- Remove chainedclassmethoddescriptors.

```
ossaudiodev
```

```
tkinter.tix
```

```
locale.resetlocale()
```

```
classmethod
```

Release schedule changes:

PEP 602(“Annual Release Cycle for Python”) has been updated to extend the full support (‘bugfix’) period for new releases to two years. This updated policy means that:

- Python 3.9–3.12 have one and a half years of full support,
followed by three and a half years of security fixes.
- Python 3.13 and later have two years of full support,
followed by three years of security fixes.

================================================================================

## New Features¶

================================================================================

### A better interactive interpreter¶

Python now uses a newinteractiveshell by default, based on code from thePyPy project. When the user starts theREPLfrom an interactive terminal, the following new features are now supported:

- Multiline editing with history preservation.
- Direct support for REPL-specific commands likehelp,exit,
andquit, without the need to call them as functions.
- Prompts and tracebacks withcolor enabled by default.
- Interactive help browsing usingF1with a separate command
history.
- History browsing usingF2that skips output as well as the>>>and…prompts.
- “Paste mode” withF3that makes pasting larger blocks of code
easier (pressF3again to return to the regular prompt).

To disable the new interactive shell, set thePYTHON_BASIC_REPLenvironment variable. For more on interactive mode, seeInteractive Mode.

```
PYTHON_BASIC_REPL
```

(Contributed by Pablo Galindo Salgado, Łukasz Langa, and Lysandros Nikolaou ingh-111201based on code from the PyPy project. Windows support contributed by Dino Viehland and Anthony Shaw.)

================================================================================

### Improved error messages¶

- The interpreter now uses color by default when displaying tracebacks in the
terminal. This featurecan be controlledvia the newPYTHON_COLORSenvironment variable as well as
the canonicalNO_COLORandFORCE_COLORenvironment variables.
(Contributed by Pablo Galindo Salgado ingh-112730.)

```
FORCE_COLOR
```

- A common mistake is to write a script with the same name as a
standard library module. When this results in errors, we now
display a more helpful error message:$ python random.pyTraceback (most recent call last):File"/home/me/random.py", line1, in<module>importrandomFile"/home/me/random.py", line3, in<module>print(random.randint(5))^^^^^^^^^^^^^^AttributeError:module 'random' has no attribute 'randint' (consider renaming '/home/me/random.py' since it has the same name as the standard library module named 'random' and prevents importing that standard library module)Similarly, if a script has the same name as a third-party
module that it attempts to import and this results in errors,
we also display a more helpful error message:$ python numpy.pyTraceback (most recent call last):File"/home/me/numpy.py", line1, in<module>importnumpyasnpFile"/home/me/numpy.py", line3, in<module>np.array([1,2,3])^^^^^^^^AttributeError:module 'numpy' has no attribute 'array' (consider renaming '/home/me/numpy.py' if it has the same name as a library you intended to import)(Contributed by Shantanu Jain ingh-95754.)
- The error message now tries to suggest the correct keyword argument
when an incorrect keyword argument is passed to a function.>>>>>>"Better error messages!".split(max_split=1)Traceback (most recent call last):File"<python-input-0>", line1, in<module>"Better error messages!".split(max_split=1)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^TypeError:split() got an unexpected keyword argument 'max_split'. Did you mean 'maxsplit'?(Contributed by Pablo Galindo Salgado and Shantanu Jain ingh-107944.)

A common mistake is to write a script with the same name as a standard library module. When this results in errors, we now display a more helpful error message:

```
$ python random.pyTraceback (most recent call last):File"/home/me/random.py", line1, in<module>importrandomFile"/home/me/random.py", line3, in<module>print(random.randint(5))^^^^^^^^^^^^^^AttributeError:module 'random' has no attribute 'randint' (consider renaming '/home/me/random.py' since it has the same name as the standard library module named 'random' and prevents importing that standard library module)
```

Similarly, if a script has the same name as a third-party module that it attempts to import and this results in errors, we also display a more helpful error message:

```
$ python numpy.pyTraceback (most recent call last):File"/home/me/numpy.py", line1, in<module>importnumpyasnpFile"/home/me/numpy.py", line3, in<module>np.array([1,2,3])^^^^^^^^AttributeError:module 'numpy' has no attribute 'array' (consider renaming '/home/me/numpy.py' if it has the same name as a library you intended to import)
```

(Contributed by Shantanu Jain ingh-95754.)

The error message now tries to suggest the correct keyword argument when an incorrect keyword argument is passed to a function.

```
>>>"Better error messages!".split(max_split=1)Traceback (most recent call last):File"<python-input-0>", line1, in<module>"Better error messages!".split(max_split=1)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^TypeError:split() got an unexpected keyword argument 'max_split'. Did you mean 'maxsplit'?
```

(Contributed by Pablo Galindo Salgado and Shantanu Jain ingh-107944.)

================================================================================

### Free-threaded CPython¶

CPython now has experimental support for running in a free-threaded mode, with theglobal interpreter lock(GIL) disabled. This is an experimental feature and therefore is not enabled by default. The free-threaded mode requires a different executable, usually calledpython3.13torpython3.13t.exe. Pre-built binaries marked asfree-threadedcan be installed as part of the officialWindowsandmacOSinstallers, or CPython can be built from source with the--disable-giloption.

```
python3.13t
```

```
python3.13t.exe
```

```
--disable-gil
```

Free-threaded execution allows for full utilization of the available processing power by running threads in parallel on available CPU cores. While not all software will benefit from this automatically, programs designed with threading in mind will run faster on multi-core hardware.The free-threaded mode is experimentaland work is ongoing to improve it: expect some bugs and a substantial single-threaded performance hit. Free-threaded builds of CPython support optionally running with the GIL enabled at runtime using the environment variablePYTHON_GILor the command-line option-Xgil=1.

```
PYTHON_GIL
```

To check if the current interpreter supports free-threading,python-VVandsys.versioncontain “experimental free-threading build”. The newsys._is_gil_enabled()function can be used to check whether the GIL is actually disabled in the running process.

```
sys.version
```

```
sys._is_gil_enabled()
```

C-API extension modules need to be built specifically for the free-threaded build. Extensions that support running with theGILdisabled should use thePy_mod_gilslot. Extensions using single-phase init should usePyUnstable_Module_SetGIL()to indicate whether they support running with the GIL disabled. Importing C extensions that don’t use these mechanisms will cause the GIL to be enabled, unless the GIL was explicitly disabled with thePYTHON_GILenvironment variable or the-Xgil=0option. pip 24.1 or newer is required to install packages with C extensions in the free-threaded build.

```
PyUnstable_Module_SetGIL()
```

This work was made possible thanks to many individuals and organizations, including the large community of contributors to Python and third-party projects to test and enable free-threading support. Notable contributors include: Sam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett Simmers, Dino Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers, Lysandros Nikolaou, and many others. Many of these contributors are employed by Meta, which has provided significant engineering resources to support this project.

PEP 703“Making the Global Interpreter Lock Optional in CPython” contains rationale and information surrounding this work.

Porting Extension Modules to Support Free-Threading: A community-maintained porting guide for extension authors.

================================================================================

### An experimental just-in-time (JIT) compiler¶

When CPython is configured and built using the--enable-experimental-jitoption, a just-in-time (JIT) compiler is added which may speed up some Python programs. On Windows, usePCbuild/build.bat--experimental-jitto enable the JIT or--experimental-jit-interpreterto enable the Tier 2 interpreter. Build requirements and further supporting informationare contained atTools/jit/README.md.

```
--enable-experimental-jit
```

```
PCbuild/build.bat--experimental-jit
```

```
--experimental-jit-interpreter
```

```
Tools/jit/README.md
```

The--enable-experimental-jitoption takes these (optional) values, defaulting toyesif--enable-experimental-jitis present without the optional value.

- no: Disable the entire Tier 2 and JIT pipeline.
- yes: Enable the JIT.
To disable the JIT at runtime, pass the environment variablePYTHON_JIT=0.
- yes-off: Build the JIT but disable it by default.
To enable the JIT at runtime, pass the environment variablePYTHON_JIT=1.
- interpreter: Enable the Tier 2 interpreter but disable the JIT.
The interpreter can be disabled by running withPYTHON_JIT=0.

```
PYTHON_JIT=0
```

```
PYTHON_JIT=1
```

```
interpreter
```

The internal architecture is roughly as follows:

- We start with specializedTier 1 bytecode.
SeeWhat’s new in 3.11for details.
- When the Tier 1 bytecode gets hot enough, it gets translated
to a new purely internal intermediate representation (IR),
called theTier 2 IR, and sometimes referred to as micro-ops (“uops”).
- The Tier 2 IR uses the same stack-based virtual machine as Tier 1,
but the instruction format is better suited to translation to machine code.
- We have several optimization passes for Tier 2 IR, which are applied
before it is interpreted or translated to machine code.
- There is a Tier 2 interpreter, but it is mostly intended for debugging
the earlier stages of the optimization pipeline.
The Tier 2 interpreter can be enabled by configuring Python
with--enable-experimental-jit=interpreter.
- When the JIT is enabled, the optimized
Tier 2 IR is translated to machine code, which is then executed.
- The machine code translation process uses a technique calledcopy-and-patch. It has no runtime dependencies, but there is a new
build-time dependency on LLVM.

```
--enable-experimental-jit=interpreter
```

(JIT by Brandt Bucher, inspired by a paper by Haoran Xu and Fredrik Kjolstad. Tier 2 IR by Mark Shannon and Guido van Rossum. Tier 2 optimizer by Ken Jin.)

================================================================================

### Defined mutation semantics forlocals()¶

Historically, the expected result of mutating the return value oflocals()has been left to individual Python implementations to define. Starting from Python 3.13,PEP 667standardises the historical behavior of CPython for most code execution scopes, but changesoptimized scopes(functions, generators, coroutines, comprehensions, and generator expressions) to explicitly return independent snapshots of the currently assigned local variables, including locally referenced nonlocal variables captured in closures.

This change to the semantics oflocals()in optimized scopes also affects the default behavior of code execution functions that implicitly targetlocals()if no explicit namespace is provided (such asexec()andeval()). In previous versions, whether or not changes could be accessed by callinglocals()after calling the code execution function was implementation-dependent. In CPython specifically, such code would typically appear to work as desired, but could sometimes fail in optimized scopes based on other code (including debuggers and code execution tracing tools) potentially resetting the shared snapshot in that scope. Now, the code will always run against an independent snapshot of the local variables in optimized scopes, and hence the changes will never be visible in subsequent calls tolocals(). To access the changes made in these cases, an explicit namespace reference must now be passed to the relevant function. Alternatively, it may make sense to update affected code to use a higher level code execution API that returns the resulting code execution namespace (e.g.runpy.run_path()when executing Python files from disk).

```
runpy.run_path()
```

To ensure debuggers and similar tools can reliably update local variables in scopes affected by this change,FrameType.f_localsnow returns a write-through proxy to the frame’s local and locally referenced nonlocal variables in these scopes, rather than returning an inconsistently updated shareddictinstance with undefined runtime semantics.

```
FrameType.f_locals
```

SeePEP 667for more details, including related C API changes and deprecations. Porting notes are also provided below for the affectedPython APIsandC APIs.

(PEP and implementation contributed by Mark Shannon and Tian Gao ingh-74929. Documentation updates provided by Guido van Rossum and Alyssa Coghlan.)

================================================================================

### Support for mobile platforms¶

PEP 730: iOS is now aPEP 11supported platform, with thearm64-apple-iosandarm64-apple-ios-simulatortargets at tier 3 (iPhone and iPad devices released after 2013 and the Xcode iOS simulator running on Apple silicon hardware, respectively).x86_64-apple-ios-simulator(the Xcode iOS simulator running on olderx86_64hardware) is not a tier 3 supported platform, but will have best-effort support. (PEP written and implementation contributed by Russell Keith-Magee ingh-114099.)

```
arm64-apple-ios
```

```
arm64-apple-ios-simulator
```

```
x86_64-apple-ios-simulator
```

PEP 738: Android is now aPEP 11supported platform, with theaarch64-linux-androidandx86_64-linux-androidtargets at tier 3. The 32-bit targetsarm-linux-androideabiandi686-linux-androidare not tier 3 supported platforms, but will have best-effort support. (PEP written and implementation contributed by Malcolm Smith ingh-116622.)

```
aarch64-linux-android
```

```
x86_64-linux-android
```

```
arm-linux-androideabi
```

```
i686-linux-android
```

PEP 730,PEP 738

================================================================================

## Other Language Changes¶

- The compiler now strips common leading whitespace
from every line in a docstring.
This reduces the size of thebytecode cache(such as.pycfiles), with reductions in file size of around 5%,
for example insqlalchemy.orm.sessionfrom SQLAlchemy 2.0.
This change affects tools that use docstrings, such asdoctest.>>>>>>defspam():..."""...This is a docstring with...leading whitespace.......It even has multiple paragraphs!..."""...>>>spam.__doc__'\nThis is a docstring with\n  leading whitespace.\n\nIt even has multiple paragraphs!\n'(Contributed by Inada Naoki ingh-81283.)
- Annotation scopeswithin class scopes
can now contain lambdas and comprehensions.
Comprehensions that are located within class scopes
are not inlined into their parent scope.classC[T]:typeAlias=lambda:T(Contributed by Jelle Zijlstra ingh-109118andgh-118160.)
- Future statementsare no longer triggered by
relative imports of the__future__module,
meaning that statements of the formfrom.__future__import...are now simply standard relative imports, with no special features activated.
(Contributed by Jeremiah Gabriel Pascual ingh-118216.)
- globaldeclarations are now permitted inexceptblocks
when that global is used in theelseblock.
Previously this raised an erroneousSyntaxError.
(Contributed by Irit Katriel ingh-111123.)
- AddPYTHON_FROZEN_MODULES, a new environment variable that
determines whether frozen modules are ignored by the import machinery,
equivalent to the-Xfrozen_modulescommand-line option.
(Contributed by Yilei Yang ingh-111374.)
- Addsupport for the perf profilerworking
withoutframe pointersthrough
the new environment variablePYTHON_PERF_JIT_SUPPORTand command-line option-Xperf_jit.
(Contributed by Pablo Galindo ingh-118518.)
- The location of a.python_historyfile can be changed via the
newPYTHON_HISTORYenvironment variable.
(Contributed by Levi Sabah, Zackery Spytz and Hugo van Kemenade
ingh-73965.)
- Classes have a new__static_attributes__attribute.
This is populated by the compiler with a tuple of the class’s attribute names
which are assigned throughself.<name>from any function in its body.
(Contributed by Irit Katriel ingh-115775.)
- The compiler now creates a__firstlineno__attribute on classes
with the line number of the first line of the class definition.
(Contributed by Serhiy Storchaka ingh-118465.)
- Theexec()andeval()builtins now accept
theglobalsandlocalsarguments as keywords.
(Contributed by Raphael Gaschignard ingh-105879)
- Thecompile()builtin now accepts a new flag,ast.PyCF_OPTIMIZED_AST, which is similar toast.PyCF_ONLY_ASTexcept that the returned AST is optimized according to
the value of theoptimizeargument.
(Contributed by Irit Katriel ingh-108113).
- Add a__name__attribute onpropertyobjects.
(Contributed by Eugene Toder ingh-101860.)
- AddPythonFinalizationError, a new exception derived fromRuntimeErrorand used to signal when operations are blocked
duringfinalization.
The following callables now raisePythonFinalizationError,
instead ofRuntimeError:_thread.start_new_thread()os.fork()os.forkpty()subprocess.Popen(Contributed by Victor Stinner ingh-114570.)
- Allow thecountargument ofstr.replace()to be a keyword.
(Contributed by Hugo van Kemenade ingh-106487.)
- Many functions now emit a warning if a boolean value is passed as
a file descriptor argument.
This can help catch some errors earlier.
(Contributed by Serhiy Storchaka ingh-82626.)
- Addednameandmodeattributes
for compressed and archived file-like objects in
thebz2,lzma,tarfile, andzipfilemodules.
(Contributed by Serhiy Storchaka ingh-115961.)

The compiler now strips common leading whitespace from every line in a docstring. This reduces the size of thebytecode cache(such as.pycfiles), with reductions in file size of around 5%, for example insqlalchemy.orm.sessionfrom SQLAlchemy 2.0. This change affects tools that use docstrings, such asdoctest.

```
sqlalchemy.orm.session
```

```
>>>defspam():..."""...This is a docstring with...leading whitespace.......It even has multiple paragraphs!..."""...>>>spam.__doc__'\nThis is a docstring with\n  leading whitespace.\n\nIt even has multiple paragraphs!\n'
```

(Contributed by Inada Naoki ingh-81283.)

Annotation scopeswithin class scopes can now contain lambdas and comprehensions. Comprehensions that are located within class scopes are not inlined into their parent scope.

```
classC[T]:typeAlias=lambda:T
```

(Contributed by Jelle Zijlstra ingh-109118andgh-118160.)

```
__future__
```

```
from.__future__import...
```

```
SyntaxError
```

```
PYTHON_FROZEN_MODULES
```

```
-Xfrozen_modules
```

```
PYTHON_PERF_JIT_SUPPORT
```

```
-Xperf_jit
```

```
.python_history
```

```
PYTHON_HISTORY
```

```
self.<name>
```

```
ast.PyCF_OPTIMIZED_AST
```

```
ast.PyCF_ONLY_AST
```

AddPythonFinalizationError, a new exception derived fromRuntimeErrorand used to signal when operations are blocked duringfinalization. The following callables now raisePythonFinalizationError, instead ofRuntimeError:

```
RuntimeError
```

- _thread.start_new_thread()
- os.forkpty()
- subprocess.Popen

(Contributed by Victor Stinner ingh-114570.)

```
str.replace()
```

================================================================================

## New Modules¶

- dbm.sqlite3: An SQLite backend fordbm.
(Contributed by Raymond Hettinger and Erlend E. Aasland ingh-100414.)

================================================================================

## Improved Modules¶

- Add thedeprecatedparameter to theadd_argument()andadd_parser()methods, to enable deprecating
command-line options, positional arguments, and subcommands.
(Contributed by Serhiy Storchaka ingh-83648.)

```
add_argument()
```

```
add_parser()
```

- Add the'w'type code (Py_UCS4) for Unicode characters.
It should be used instead of the deprecated'u'type code.
(Contributed by Inada Naoki ingh-80480.)
- Registerarray.arrayas aMutableSequenceby implementing theclear()method.
(Contributed by Mike Zimin ingh-114894.)

```
array.array
```

```
MutableSequence
```

- The constructors of node types in theastmodule are now
stricter in the arguments they accept,
with more intuitive behavior when arguments are omitted.If an optional field on an AST node is not included as an argument when
constructing an instance, the field will now be set toNone. Similarly,
if a list field is omitted, that field will now be set to an empty list,
and if anexpr_contextfield is omitted, it defaults toLoad().
(Previously, in all cases, the attribute would be missing on the newly
constructed AST node instance.)In all other cases, where a required argument is omitted,
the node constructor will emit aDeprecationWarning.
This will raise an exception in Python 3.15.
Similarly, passing a keyword argument to the constructor
that does not map to a field on the AST node is now deprecated,
and will raise an exception in Python 3.15.These changes do not apply to user-defined subclasses ofast.ASTunless the class opts in to the new behavior
by defining theAST._field_typesmapping.(Contributed by Jelle Zijlstra ingh-105858,gh-117486, andgh-118851.)
- ast.parse()now accepts an optional argumentoptimizewhich is passed on tocompile().
This makes it possible to obtain an optimized AST.
(Contributed by Irit Katriel ingh-108113.)

The constructors of node types in theastmodule are now stricter in the arguments they accept, with more intuitive behavior when arguments are omitted.

If an optional field on an AST node is not included as an argument when constructing an instance, the field will now be set toNone. Similarly, if a list field is omitted, that field will now be set to an empty list, and if anexpr_contextfield is omitted, it defaults toLoad(). (Previously, in all cases, the attribute would be missing on the newly constructed AST node instance.)

```
expr_context
```

In all other cases, where a required argument is omitted, the node constructor will emit aDeprecationWarning. This will raise an exception in Python 3.15. Similarly, passing a keyword argument to the constructor that does not map to a field on the AST node is now deprecated, and will raise an exception in Python 3.15.

```
DeprecationWarning
```

These changes do not apply to user-defined subclasses ofast.ASTunless the class opts in to the new behavior by defining theAST._field_typesmapping.

```
AST._field_types
```

(Contributed by Jelle Zijlstra ingh-105858,gh-117486, andgh-118851.)

```
ast.parse()
```

- asyncio.as_completed()now returns an object that is both anasynchronous iteratorand a plainiteratorofawaitables.
The awaitables yielded by asynchronous iteration include original task
or future objects that were passed in,
making it easier to associate results with the tasks being completed.
(Contributed by Justin Arthur ingh-77714.)
- asyncio.loop.create_unix_server()will now automatically remove
the Unix socket when the server is closed.
(Contributed by Pierre Ossman ingh-111246.)
- DatagramTransport.sendto()will now send zero-length
datagrams if called with an empty bytes object.
The transport flow control also now accounts for the datagram header
when calculating the buffer size.
(Contributed by Jamie Phan ingh-115199.)
- AddQueue.shutdownandQueueShutDownto manage queue termination.
(Contributed by Laurie Opperman and Yves Duprat ingh-104228.)
- Add theServer.close_clients()andServer.abort_clients()methods, which more forcefully close an asyncio server.
(Contributed by Pierre Ossman ingh-113538.)
- Accept a tuple of separators inStreamReader.readuntil(),
stopping when any one of them is encountered.
(Contributed by Bruce Merry ingh-81322.)
- Improve the behavior ofTaskGroupwhen
an external cancellation collides with an internal cancellation.
For example, when two task groups are nested
and both experience an exception in a child task simultaneously,
it was possible that the outer task group would hang,
because its internal cancellation was swallowed by the inner task group.In the case where a task group is cancelled externally
and also must raise anExceptionGroup,
it will now call the parent task’scancel()method.
This ensures that aCancelledErrorwill be raised
at the nextawait, so the cancellation is not lost.An added benefit of these changes is that task groups now preserve
the cancellation count (cancelling()).In order to handle some corner cases,uncancel()may now
reset the undocumented_must_cancelflag
when the cancellation count reaches zero.(Inspired by an issue reported by Arthur Tacca ingh-116720.)
- WhenTaskGroup.create_task()is called on an inactiveTaskGroup, the given coroutine will be closed (which
prevents aRuntimeWarningabout the given coroutine being
never awaited).
(Contributed by Arthur Tacca and Jason Zhang ingh-115957.)

```
asyncio.as_completed()
```

```
asyncio.loop.create_unix_server()
```

```
DatagramTransport.sendto()
```

```
Queue.shutdown
```

```
QueueShutDown
```

```
Server.close_clients()
```

```
Server.abort_clients()
```

```
StreamReader.readuntil()
```

Improve the behavior ofTaskGroupwhen an external cancellation collides with an internal cancellation. For example, when two task groups are nested and both experience an exception in a child task simultaneously, it was possible that the outer task group would hang, because its internal cancellation was swallowed by the inner task group.

In the case where a task group is cancelled externally and also must raise anExceptionGroup, it will now call the parent task’scancel()method. This ensures that aCancelledErrorwill be raised at the nextawait, so the cancellation is not lost.

```
ExceptionGroup
```

```
CancelledError
```

An added benefit of these changes is that task groups now preserve the cancellation count (cancelling()).

```
cancelling()
```

In order to handle some corner cases,uncancel()may now reset the undocumented_must_cancelflag when the cancellation count reaches zero.

```
uncancel()
```

```
_must_cancel
```

(Inspired by an issue reported by Arthur Tacca ingh-116720.)

```
TaskGroup.create_task()
```

```
RuntimeWarning
```

- Addz85encode()andz85decode()functions
for encodingbytesasZ85 dataand decoding Z85-encoded data tobytes.
(Contributed by Matan Perelman ingh-75299.)

```
z85encode()
```

```
z85decode()
```

================================================================================

### compileall¶

- The default number of worker threads and processes is now selected usingos.process_cpu_count()instead ofos.cpu_count().
(Contributed by Victor Stinner ingh-109649.)

```
os.process_cpu_count()
```

```
os.cpu_count()
```

================================================================================

### concurrent.futures¶

================================================================================

### configparser¶

- ConfigParsernow has support for unnamed sections,
which allows for top-level key-value pairs.
This can be enabled with the newallow_unnamed_sectionparameter.
(Contributed by Pedro Sousa Lacerda ingh-66449.)

```
ConfigParser
```

- The newreplace()function and thereplaceprotocolmake creating modified copies of objects much simpler.
This is especially useful when working with immutable objects.
The following types support thereplace()function
and implement the replace protocol:collections.namedtuple()dataclasses.dataclassdatetime.datetime,datetime.date,datetime.timeinspect.Signature,inspect.Parametertypes.SimpleNamespacecode objectsAny user-defined class can also supportcopy.replace()by defining
the__replace__()method.
(Contributed by Serhiy Storchaka ingh-108751.)

The newreplace()function and thereplaceprotocolmake creating modified copies of objects much simpler. This is especially useful when working with immutable objects. The following types support thereplace()function and implement the replace protocol:

```
replaceprotocol
```

- collections.namedtuple()
- dataclasses.dataclass
- datetime.datetime,datetime.date,datetime.time
- inspect.Signature,inspect.Parameter
- types.SimpleNamespace
- code objects

```
datetime.datetime
```

```
datetime.date
```

```
datetime.time
```

```
inspect.Signature
```

```
inspect.Parameter
```

Any user-defined class can also supportcopy.replace()by defining the__replace__()method. (Contributed by Serhiy Storchaka ingh-108751.)

- As a consequence of necessary internal refactoring, initialization of
internal metaclasses now happens in__init__rather
than in__new__. This affects projects that subclass these internal
metaclasses to provide custom initialization.
Generally:Custom logic that was done in__new__after callingsuper().__new__should be moved to__init__.To create a class, call the metaclass, not only the metaclass’s__new__method.Seegh-124520for discussion and links to changes in some affected
projects.
- ctypes.Structureobjects have a new_align_attribute which allows the alignment of the structure being packed to/from
memory to be specified explicitly.
(Contributed by Matt Sanderson ingh-112433)

As a consequence of necessary internal refactoring, initialization of internal metaclasses now happens in__init__rather than in__new__. This affects projects that subclass these internal metaclasses to provide custom initialization. Generally:

- Custom logic that was done in__new__after callingsuper().__new__should be moved to__init__.
- To create a class, call the metaclass, not only the metaclass’s__new__method.

```
super().__new__
```

Seegh-124520for discussion and links to changes in some affected projects.

```
ctypes.Structure
```

- Adddbm.sqlite3, a new module which implements an SQLite backend,
and make it the defaultdbmbackend.
(Contributed by Raymond Hettinger and Erlend E. Aasland ingh-100414.)
- Allow removing all items from the database through
the newgdbm.clear()andndbm.clear()methods.
(Contributed by Donghee Na ingh-107122.)

```
gdbm.clear()
```

```
ndbm.clear()
```

- Change the output ofdismodule functions to show logical
labels for jump targets and exception handlers, rather than offsets.
The offsets can be added with the new-Ocommand-line option
or theshow_offsetsargument.
(Contributed by Irit Katriel ingh-112137.)
- get_instructions()no longer represents cache entries
as separate instructions.
Instead, it returns them as part of theInstruction,
in the newcache_infofield.
Theshow_cachesargument toget_instructions()is deprecated
and no longer has any effect.
(Contributed by Irit Katriel ingh-112962.)

```
get_instructions()
```

```
Instruction
```

- doctestoutput is now colored by default.
This can be controlled via the newPYTHON_COLORSenvironment
variable as well as the canonicalNO_COLORandFORCE_COLORenvironment variables.
See alsoControlling color.
(Contributed by Hugo van Kemenade ingh-117225.)
- TheDocTestRunner.run()method now counts the number of skipped tests.
Add theDocTestRunner.skipsandTestResults.skippedattributes.
(Contributed by Victor Stinner ingh-108794.)

```
DocTestRunner.run()
```

```
DocTestRunner.skips
```

```
TestResults.skipped
```

- Headers with embedded newlines are now quoted on output.
Thegeneratorwill now refuse to serialize (write) headers
that are improperly folded or delimited, such that they would be parsed as
multiple headers or joined with adjacent data.
If you need to turn this safety feature off,
setverify_generated_headers.
(Contributed by Bas Bloemsaat and Petr Viktorin ingh-121650.)
- getaddresses()andparseaddr()now
return('','')pairs in more situations where invalid email addresses
are encountered instead of potentially inaccurate values.
The two functions have a new optionalstrictparameter (defaultTrue).
To get the old behavior (accepting malformed input), usestrict=False.getattr(email.utils,'supports_strict_parsing',False)can be used
to check if thestrictparameter is available.
(Contributed by Thomas Dwyer and Victor Stinner forgh-102988to improve
theCVE 2023-27043fix.)

```
verify_generated_headers
```

```
getaddresses()
```

```
parseaddr()
```

```
strict=False
```

```
getattr(email.utils,'supports_strict_parsing',False)
```

- EnumDicthas been made public to better support subclassingEnumType.

================================================================================

### fractions¶

- Fractionobjects now support the standardformat specification mini-languagerules
for fill, alignment, sign handling, minimum width, and grouping.
(Contributed by Mark Dickinson ingh-111320.)

- Addtranslate(), a function to convert a path specification
with shell-style wildcards to a regular expression.
(Contributed by Barney Gale ingh-72904.)

```
translate()
```

================================================================================

### importlib¶

- The following functions inimportlib.resourcesnow allow accessing
a directory (or tree) of resources, using multiple positional arguments
(theencodinganderrorsarguments in the text-reading functions
are now keyword-only):is_resource()open_binary()open_text()path()read_binary()read_text()These functions are no longer deprecated and are not scheduled for removal.
(Contributed by Petr Viktorin ingh-116608.)
- contents()remains deprecated in favor of
the fully-featuredTraversableAPI.
However, there is now no plan to remove it.
(Contributed by Petr Viktorin ingh-116608.)

The following functions inimportlib.resourcesnow allow accessing a directory (or tree) of resources, using multiple positional arguments (theencodinganderrorsarguments in the text-reading functions are now keyword-only):

```
importlib.resources
```

- is_resource()
- open_binary()
- open_text()
- read_binary()
- read_text()

These functions are no longer deprecated and are not scheduled for removal. (Contributed by Petr Viktorin ingh-116608.)

```
contents()
```

```
Traversable
```

- TheIOBasefinalizer now logs any errors raised by
theclose()method withsys.unraisablehook.
Previously, errors were ignored silently by default,
and only logged inPython Development Modeor when using aPython debug build.
(Contributed by Victor Stinner ingh-62948.)

```
sys.unraisablehook
```

================================================================================

### ipaddress¶

- Add theIPv4Address.ipv6_mappedproperty,
which returns the IPv4-mapped IPv6 address.
(Contributed by Charles Machalow ingh-109466.)
- Fixis_globalandis_privatebehavior inIPv4Address,IPv6Address,IPv4Network, andIPv6Network.
(Contributed by Jakub Stasiak ingh-113171.)

```
IPv4Address.ipv6_mapped
```

```
is_private
```

```
IPv4Address
```

```
IPv6Address
```

```
IPv4Network
```

```
IPv6Network
```

================================================================================

### itertools¶

- batched()has a newstrictparameter,
which raises aValueErrorif the final batch is shorter
than the specified batch size.
(Contributed by Raymond Hettinger ingh-113202.)

```
ValueError
```

- Add theallow_codeparameter in module functions.
Passingallow_code=Falseprevents serialization and de-serialization
of code objects which are incompatible between Python versions.
(Contributed by Serhiy Storchaka ingh-113626.)

```
allow_code=False
```

- The new functionfma()performs fused multiply-add operations.
This computesx*y+zwith only a single round,
and so avoids any intermediate loss of precision.
It wraps thefma()function provided by C99,
and follows the specification of the IEEE 754 “fusedMultiplyAdd” operation
for special cases.
(Contributed by Mark Dickinson and Victor Stinner ingh-73468.)

================================================================================

### mimetypes¶

- Add theguess_file_type()function to guess a MIME type
from a filesystem path.
Using paths withguess_type()is nowsoft deprecated.
(Contributed by Serhiy Storchaka ingh-66543.)

```
guess_file_type()
```

```
guess_type()
```

- mmapis now protected from crashing on Windows when the
mapped memory is inaccessible due to file system errors or access violations.
(Contributed by Jannis Weigend ingh-118209.)
- mmaphas a newseekable()method
that can be used when a seekable file-like object is required.
Theseek()method now returns the new absolute position.
(Contributed by Donghee Na and Sylvie Liberman ingh-111835.)
- The new UNIX-onlytrackfdparameter formmapcontrols
file descriptor duplication;
if false, the file descriptor specified byfilenowill not be duplicated.
(Contributed by Zackery Spytz and Petr Viktorin ingh-78502.)

```
seekable()
```

================================================================================

### multiprocessing¶

- Addprocess_cpu_count()function to get the number
of logical CPU cores usable by the calling thread of the current process.
(Contributed by Victor Stinner ingh-109649.)
- cpu_count()andprocess_cpu_count()can be overridden
through the new environment variablePYTHON_CPU_COUNTor the new command-line option-Xcpu_count.
This option is useful for users who need to limit CPU resources
of a container system without having to modify application code
or the container itself.
(Contributed by Donghee Na ingh-109595.)
- Add alow level interfaceto Linux’stimer file descriptorsviatimerfd_create(),timerfd_settime(),timerfd_settime_ns(),timerfd_gettime(),timerfd_gettime_ns(),TFD_NONBLOCK,TFD_CLOEXEC,TFD_TIMER_ABSTIME, andTFD_TIMER_CANCEL_ON_SET(Contributed by Masaru Tsuchiyama ingh-108277.)
- lchmod()and thefollow_symlinksargument ofchmod()are both now available on Windows.
Note that the default value offollow_symlinksinlchmod()isFalseon Windows.
(Contributed by Serhiy Storchaka ingh-59616.)
- fchmod()and support for file descriptors inchmod()are both now available on Windows.
(Contributed by Serhiy Storchaka ingh-113191.)
- On Windows,mkdir()andmakedirs()now support passing
amodevalue of0o700to apply access control to the new directory.
This implicitly affectstempfile.mkdtemp()and is a mitigation forCVE 2024-4030.
Other values formodecontinue to be ignored.
(Contributed by Steve Dower ingh-118486.)
- posix_spawn()now acceptsNonefor theenvargument,
which makes the newly spawned process use the current process environment.
(Contributed by Jakub Kulik ingh-113119.)
- posix_spawn()can now use thePOSIX_SPAWN_CLOSEFROMattribute in thefile_actionsparameter on platforms that supportposix_spawn_file_actions_addclosefrom_np().
(Contributed by Jakub Kulik ingh-113117.)

```
process_cpu_count()
```

```
cpu_count()
```

```
PYTHON_CPU_COUNT
```

```
-Xcpu_count
```

```
timerfd_create()
```

```
timerfd_settime()
```

```
timerfd_settime_ns()
```

```
timerfd_gettime()
```

```
timerfd_gettime_ns()
```

```
TFD_NONBLOCK
```

```
TFD_CLOEXEC
```

```
TFD_TIMER_ABSTIME
```

```
TFD_TIMER_CANCEL_ON_SET
```

```
makedirs()
```

```
tempfile.mkdtemp()
```

```
posix_spawn()
```

```
POSIX_SPAWN_CLOSEFROM
```

```
posix_spawn_file_actions_addclosefrom_np()
```

- Addisreserved()to check if a path is reserved
on the current system.
This function is only available on Windows.
(Contributed by Barney Gale ingh-88569.)
- On Windows,isabs()no longer considers paths
starting with exactly one slash (\or/) to be absolute.
(Contributed by Barney Gale and Jon Foster ingh-44626.)
- realpath()now resolves MS-DOS style file names
even if the file is not accessible.
(Contributed by Moonsik Park ingh-82367.)

```
isreserved()
```

```
realpath()
```

- AddUnsupportedOperation, which is raised instead ofNotImplementedErrorwhen a path operation isn’t supported.
(Contributed by Barney Gale ingh-89812.)
- Add a new constructor for creatingPathobjects
from ‘file’ URIs (file:///),Path.from_uri().
(Contributed by Barney Gale ingh-107465.)
- AddPurePath.full_match()for matching paths with
shell-style wildcards, including the recursive wildcard “**”.
(Contributed by Barney Gale ingh-73435.)
- Add thePurePath.parserclass attribute to store the
implementation ofos.pathused
for low-level path parsing and joining.
This will be eitherposixpathorntpath.
- Addrecurse_symlinkskeyword-only argument toPath.glob()andrglob().
(Contributed by Barney Gale ingh-77609.)
- Path.glob()andrglob()now return files and directories when given a pattern that ends with “**”.
Previously, only directories were returned.
(Contributed by Barney Gale ingh-70303.)
- Add thefollow_symlinkskeyword-only argument toPath.is_file,Path.is_dir,Path.owner(), andPath.group().
(Contributed by Barney Gale ingh-105793and Kamil Turek ingh-107962.)

```
UnsupportedOperation
```

```
NotImplementedError
```

```
Path.from_uri()
```

```
PurePath.full_match()
```

```
PurePath.parser
```

```
Path.glob()
```

```
Path.is_file
```

```
Path.is_dir
```

```
Path.owner()
```

```
Path.group()
```

- breakpoint()andset_trace()now enter the debugger immediately
rather than on the next line of code to be executed. This change prevents the
debugger from breaking outside of the context whenbreakpoint()is positioned
at the end of the context.
(Contributed by Tian Gao ingh-118579.)
- sys.path[0]is no longer replaced by the directory of the script
being debugged whensys.flags.safe_pathis set.
(Contributed by Tian Gao and Christian Walther ingh-111762.)
- zipappis now supported as a debugging target.
(Contributed by Tian Gao ingh-118501.)
- Add ability to move between chained exceptions during
post-mortem debugging inpm()using
the newexceptions[exc_number]command for Pdb.
(Contributed by Matthias Bussonnier ingh-106676.)
- Expressions and statements whose prefix is a pdb command are now correctly
identified and executed.
(Contributed by Tian Gao ingh-108464.)

```
breakpoint()
```

```
set_trace()
```

```
sys.path[0]
```

```
sys.flags.safe_path
```

```
exceptions[exc_number]
```

- AddQueue.shutdownandShutDownto manage queue termination.
(Contributed by Laurie Opperman and Yves Duprat ingh-104750.)

- Add acommand-line interface.
(Contributed by Hugo van Kemenade ingh-118131.)

- Renamere.errortoPatternErrorfor improved clarity.re.erroris kept for backward compatibility.

```
PatternError
```

- Support thedir_fdandfollow_symlinkskeyword arguments
inchown().
(Contributed by Berker Peksag and Tahia K ingh-62308)

- .pthfiles are now decoded using UTF-8 first,
and then with thelocale encodingif UTF-8 decoding fails.
(Contributed by Inada Naoki ingh-117802.)

- AResourceWarningis now emitted if aConnectionobject is notclosedexplicitly.
(Contributed by Erlend E. Aasland ingh-105539.)
- Add thefilterkeyword-only parameter toConnection.iterdump()for filtering database objects to dump.
(Contributed by Mariusz Felisiak ingh-91602.)

```
ResourceWarning
```

```
Connection
```

```
Connection.iterdump()
```

- Thecreate_default_context()API now includesVERIFY_X509_PARTIAL_CHAINandVERIFY_X509_STRICTin its default flags.NoteVERIFY_X509_STRICTmay reject pre-RFC 5280or malformed certificates that the underlying OpenSSL implementation
might otherwise accept.
Whilst disabling this is not recommended, you can do so using:importsslctx=ssl.create_default_context()ctx.verify_flags&=~ssl.VERIFY_X509_STRICT(Contributed by William Woodruff ingh-112389.)

Thecreate_default_context()API now includesVERIFY_X509_PARTIAL_CHAINandVERIFY_X509_STRICTin its default flags.

```
create_default_context()
```

```
VERIFY_X509_PARTIAL_CHAIN
```

```
VERIFY_X509_STRICT
```

VERIFY_X509_STRICTmay reject pre-RFC 5280or malformed certificates that the underlying OpenSSL implementation might otherwise accept. Whilst disabling this is not recommended, you can do so using:

```
importsslctx=ssl.create_default_context()ctx.verify_flags&=~ssl.VERIFY_X509_STRICT
```

(Contributed by William Woodruff ingh-112389.)

================================================================================

### statistics¶

- Addkde()for kernel density estimation.
This makes it possible to estimate a continuous probability density function
from a fixed number of discrete samples.
(Contributed by Raymond Hettinger ingh-115863.)
- Addkde_random()for sampling from an
estimated probability density function created bykde().
(Contributed by Raymond Hettinger ingh-115863.)

```
kde_random()
```

================================================================================

### subprocess¶

- Thesubprocessmodule now uses theposix_spawn()function in
more situations.Notably, whenclose_fdsisTrue(the default),posix_spawn()will be used when the C library providesposix_spawn_file_actions_addclosefrom_np(),
which includes recent versions of Linux, FreeBSD, and Solaris.
On Linux, this should perform similarly to the existing
Linuxvfork()based code.A private control knobsubprocess._USE_POSIX_SPAWNcan
be set toFalseif you need to forcesubprocessto never useposix_spawn().
Please report your reason and platform details in
theissue trackerif you set this
so that we can improve our API selection logic for everyone.
(Contributed by Jakub Kulik ingh-113117.)

Thesubprocessmodule now uses theposix_spawn()function in more situations.

```
subprocess
```

Notably, whenclose_fdsisTrue(the default),posix_spawn()will be used when the C library providesposix_spawn_file_actions_addclosefrom_np(), which includes recent versions of Linux, FreeBSD, and Solaris. On Linux, this should perform similarly to the existing Linuxvfork()based code.

A private control knobsubprocess._USE_POSIX_SPAWNcan be set toFalseif you need to forcesubprocessto never useposix_spawn(). Please report your reason and platform details in theissue trackerif you set this so that we can improve our API selection logic for everyone. (Contributed by Jakub Kulik ingh-113117.)

```
subprocess._USE_POSIX_SPAWN
```

- Add the_is_interned()function to test if a string was interned.
This function is not guaranteed to exist in all implementations of Python.
(Contributed by Serhiy Storchaka ingh-78573.)

```
_is_interned()
```

- On Windows, the default mode0o700used bytempfile.mkdtemp()now
limits access to the new directory due to changes toos.mkdir().
This is a mitigation forCVE 2024-4030.
(Contributed by Steve Dower ingh-118486.)

```
os.mkdir()
```

- On Windows,monotonic()now uses theQueryPerformanceCounter()clock for a resolution of 1 microsecond,
instead of theGetTickCount64()clock which has
a resolution of 15.6 milliseconds.
(Contributed by Victor Stinner ingh-88494.)
- On Windows,time()now uses theGetSystemTimePreciseAsFileTime()clock for a resolution of 1 microsecond,
instead of theGetSystemTimeAsFileTime()clock which has
a resolution of 15.6 milliseconds.
(Contributed by Victor Stinner ingh-63207.)

```
monotonic()
```

```
QueryPerformanceCounter()
```

```
GetTickCount64()
```

```
GetSystemTimePreciseAsFileTime()
```

```
GetSystemTimeAsFileTime()
```

- Addtkinterwidget methods:tk_busy_hold(),tk_busy_configure(),tk_busy_cget(),tk_busy_forget(),tk_busy_current(), andtk_busy_status().
(Contributed by Miguel, klappnase and Serhiy Storchaka ingh-72684.)
- Thetkinterwidget methodwm_attributes()now accepts
the attribute name without the minus prefix to get window attributes,
for examplew.wm_attributes('alpha')and allows specifying attributes and values to set as keyword arguments,
for examplew.wm_attributes(alpha=0.5).
(Contributed by Serhiy Storchaka ingh-43457.)
- wm_attributes()can now return attributes as adict,
by using the new optional keyword-only parameterreturn_python_dict.
(Contributed by Serhiy Storchaka ingh-43457.)
- Text.count()can now return a simpleintwhen the new optional keyword-only parameterreturn_intsis used.
Otherwise, the single count is returned as a 1-tuple orNone.
(Contributed by Serhiy Storchaka ingh-97928.)
- Support the “vsapi” element type in
theelement_create()method oftkinter.ttk.Style.
(Contributed by Serhiy Storchaka ingh-68166.)
- Add theafter_info()method for Tkinter widgets.
(Contributed by Cheryl Sabella ingh-77020.)
- Add a newcopy_replace()method toPhotoImageto copy a region from one image to another,
possibly with pixel zooming, subsampling, or both.
(Contributed by Serhiy Storchaka ingh-118225.)
- Addfrom_coordsparameter to thePhotoImagemethodscopy(),zoom()andsubsample().
Addzoomandsubsampleparameters to thePhotoImagemethodcopy().
(Contributed by Serhiy Storchaka ingh-118225.)
- Add thePhotoImagemethodsread()to read an image from a file
anddata()to get the image data.
Addbackgroundandgrayscaleparameters to thewrite()method.
(Contributed by Serhiy Storchaka ingh-118271.)

```
tk_busy_hold()
```

```
tk_busy_configure()
```

```
tk_busy_cget()
```

```
tk_busy_forget()
```

```
tk_busy_current()
```

```
tk_busy_status()
```

```
wm_attributes()
```

```
w.wm_attributes('alpha')
```

```
w.wm_attributes(alpha=0.5)
```

```
Text.count()
```

```
element_create()
```

```
tkinter.ttk.Style
```

```
after_info()
```

```
copy_replace()
```

```
PhotoImage
```

```
subsample()
```

================================================================================

### traceback¶

- Add theexc_type_strattribute
toTracebackException,
which holds a string display of theexc_type.
Deprecate theexc_typeattribute,
which holds the type object itself.
Add parametersave_exc_type(defaultTrue)
to indicate whetherexc_typeshould be saved.
(Contributed by Irit Katriel ingh-112332.)
- Add a newshow_groupkeyword-only parameter toTracebackException.format_exception_only()to (recursively) format
the nested exceptions of aBaseExceptionGroupinstance.
(Contributed by Irit Katriel ingh-105292.)

```
exc_type_str
```

```
TracebackException
```

```
TracebackException.format_exception_only()
```

```
BaseExceptionGroup
```

- SimpleNamespacecan now take a single positional argument
to initialise the namespace’s arguments.
This argument must either be a mapping or an iterable of key-value pairs.
(Contributed by Serhiy Storchaka ingh-108191.)

```
SimpleNamespace
```

- PEP 705: AddReadOnly, a special typing construct
to mark aTypedDictitem as read-only for type checkers.
- PEP 742: AddTypeIs, a typing construct
that can be used to instruct a type checker how to narrow a type.
- AddNoDefault, a sentinel object used to represent
the defaults of some parameters in thetypingmodule.
(Contributed by Jelle Zijlstra ingh-116126.)
- Addget_protocol_members()to return the set of members
defining atyping.Protocol.
(Contributed by Jelle Zijlstra ingh-104873.)
- Addis_protocol()to check whether a class
is aProtocol.
(Contributed by Jelle Zijlstra ingh-104873.)
- ClassVarcan now be nested inFinal,
and vice versa.
(Contributed by Mehdi Drissi ingh-89547.)

```
get_protocol_members()
```

```
typing.Protocol
```

```
is_protocol()
```

================================================================================

### unicodedata¶

- Update the Unicode database toversion 15.1.0.
(Contributed by James Gerity ingh-109559.)

- Add support for creating source control management (SCM) ignore files
in a virtual environment’s directory.
By default, Git is supported.
This is implemented as opt-in via the API,
which can be extended to support other SCMs
(EnvBuilderandcreate()),
and opt-out via the CLI, using--without-scm-ignore-files.
(Contributed by Brett Cannon ingh-108125.)

```
EnvBuilder
```

```
--without-scm-ignore-files
```

- PEP 702: The newwarnings.deprecated()decorator provides a way to
communicate deprecations to astatic type checkerand to warn on usage of deprecated classes and functions.
ADeprecationWarningmay also be emitted when
a decorated function or class is used at runtime.
(Contributed by Jelle Zijlstra ingh-104003.)

- Allow controlling Expat >=2.6.0 reparse deferral (CVE 2023-52425)
by adding five new methods:xml.etree.ElementTree.XMLParser.flush()xml.etree.ElementTree.XMLPullParser.flush()xml.parsers.expat.xmlparser.GetReparseDeferralEnabled()xml.parsers.expat.xmlparser.SetReparseDeferralEnabled()xml.sax.expatreader.ExpatParser.flush()(Contributed by Sebastian Pipping ingh-115623.)
- Add theclose()method for the iterator returned byiterparse()for explicit cleanup.
(Contributed by Serhiy Storchaka ingh-69893.)

Allow controlling Expat >=2.6.0 reparse deferral (CVE 2023-52425) by adding five new methods:

- xml.etree.ElementTree.XMLParser.flush()
- xml.etree.ElementTree.XMLPullParser.flush()
- xml.parsers.expat.xmlparser.GetReparseDeferralEnabled()
- xml.parsers.expat.xmlparser.SetReparseDeferralEnabled()
- xml.sax.expatreader.ExpatParser.flush()

(Contributed by Sebastian Pipping ingh-115623.)

```
iterparse()
```

================================================================================

### zipimport¶

- Add support forZIP64format files.
Everybody loves huge data, right?
(Contributed by Tim Hatch ingh-94146.)

================================================================================

## Optimizations¶

- Several standard library modules have had
their import times significantly improved.
For example, the import time of thetypingmodule
has been reduced by around a third by removing dependencies
onreandcontextlib.
Other modules to enjoy import-time speedups includeemail.utils,enum,functools,importlib.metadata, andthreading.
(Contributed by Alex Waygood, Shantanu Jain, Adam Turner, Daniel Hollas,
and others ingh-109653.)
- textwrap.indent()is now around 30% faster than before for large input.
(Contributed by Inada Naoki ingh-107369.)
- Thesubprocessmodule now uses theposix_spawn()function in
more situations, including whenclose_fdsisTrue(the default)
on many modern platforms.
This should provide a notable performance increase
when launching processes on FreeBSD and Solaris.
See thesubprocesssection above for details.
(Contributed by Jakub Kulik ingh-113117.)

```
contextlib
```

```
email.utils
```

```
importlib.metadata
```

```
textwrap.indent()
```

================================================================================

## Removed Modules And APIs¶

================================================================================

### PEP 594: Remove “dead batteries” from the standard library¶

PEP 594proposed removing 19 modules from the standard library, colloquially referred to as ‘dead batteries’ due to their historic, obsolete, or insecure status. All of the following modules were deprecated in Python 3.11, and are now removed:

- aifcstandard-aifc:
Use the redistribution ofaifclibrary from PyPI.
- audioopaudioop-lts:
Useaudioop-ltslibrary from PyPI.
- chunkstandard-chunk:
Use the redistribution ofchunklibrary from PyPI.
- cgiandcgitbcgi.FieldStoragecan typically be replaced withurllib.parse.parse_qsl()forGETandHEADrequests,
and theemail.messagemodule or themultipartlibrary
forPOSTandPUTrequests.cgi.parse()can be replaced by callingurllib.parse.parse_qs()directly on the desired query string,
unless the input ismultipart/form-data,
which should be replaced as described below forcgi.parse_multipart().cgi.parse_header()can be replaced with the functionality
in theemailpackage, which implements the same MIME RFCs.
For example, withemail.message.EmailMessage:fromemail.messageimportEmailMessagemsg=EmailMessage()msg['content-type']='application/json; charset="utf8"'main,params=msg.get_content_type(),msg['content-type'].paramscgi.parse_multipart()can be replaced with the functionality
in theemailpackage, which implements the same MIME RFCs,
or with themultipartlibrary.
For example, theemail.message.EmailMessageandemail.message.Messageclasses.standard-cgi: andstandard-cgitb:
Use the redistribution ofcgiandcgitblibrary from PyPI.
- cryptand the private_cryptextension.
Thehashlibmodule may be an appropriate replacement
when simply hashing a value is required.
Otherwise, various third-party libraries on PyPI are available:bcrypt:
Modern password hashing for your software and your servers.passlib:
Comprehensive password hashing framework supporting over 30 schemes.argon2-cffi:
The secure Argon2 password hashing algorithm.legacycrypt:ctypeswrapper to the POSIX crypt library call
and associated functionality.crypt_r:
Fork of thecryptmodule,
wrapper to thecrypt_r(3)library call
and associated functionality.standard-cryptanddeprecated-crypt-alternative:
Use the redistribution ofcryptand reimplementation of_cryptlibraries from PyPI.
- imghdr:
Thefiletype,puremagic, orpython-magiclibraries
should be used as replacements.
For example, thepuremagic.what()function can be used
to replace theimghdr.what()function for all file formats
that were supported byimghdr.standard-imghdr:
Use the redistribution ofimghdrlibrary from PyPI.
- mailcap:
Use themimetypesmodule instead.standard-mailcap:
Use the redistribution ofmailcaplibrary from PyPI.
- nntplib:
Use thepynntplibrary from PyPI instead.standard-nntplib:
Use the redistribution ofnntpliblibrary from PyPI.
- ossaudiodev:
For audio playback, use thepygamelibrary from PyPI instead.
- pipes:
Use thesubprocessmodule instead.
Useshlex.quote()to replace the undocumentedpipes.quotefunction.standard-pipes:
Use the redistribution ofpipeslibrary from PyPI.
- sndhdr:
Thefiletype,puremagic, orpython-magiclibraries
should be used as replacements.standard-sndhdr:
Use the redistribution ofsndhdrlibrary from PyPI.
- spwd:
Use thepython-pamlibrary from PyPI instead.
- sunaustandard-sunau:
Use the redistribution ofsunaulibrary from PyPI.
- telnetlib,
Use thetelnetlib3orExscriptlibraries from PyPI instead.standard-telnetlib:
Use the redistribution oftelnetliblibrary from PyPI.
- uu:
Use thebase64module instead, as a modern alternative.standard-uu:
Use the redistribution ofuulibrary from PyPI.
- xdrlibstandard-xdrlib:
Use the redistribution ofxdrliblibrary from PyPI.

- standard-aifc:
Use the redistribution ofaifclibrary from PyPI.

- audioop-lts:
Useaudioop-ltslibrary from PyPI.

```
audioop-lts
```

- standard-chunk:
Use the redistribution ofchunklibrary from PyPI.

cgiandcgitb

- cgi.FieldStoragecan typically be replaced withurllib.parse.parse_qsl()forGETandHEADrequests,
and theemail.messagemodule or themultipartlibrary
forPOSTandPUTrequests.
- cgi.parse()can be replaced by callingurllib.parse.parse_qs()directly on the desired query string,
unless the input ismultipart/form-data,
which should be replaced as described below forcgi.parse_multipart().
- cgi.parse_header()can be replaced with the functionality
in theemailpackage, which implements the same MIME RFCs.
For example, withemail.message.EmailMessage:fromemail.messageimportEmailMessagemsg=EmailMessage()msg['content-type']='application/json; charset="utf8"'main,params=msg.get_content_type(),msg['content-type'].params
- cgi.parse_multipart()can be replaced with the functionality
in theemailpackage, which implements the same MIME RFCs,
or with themultipartlibrary.
For example, theemail.message.EmailMessageandemail.message.Messageclasses.
- standard-cgi: andstandard-cgitb:
Use the redistribution ofcgiandcgitblibrary from PyPI.

```
cgi.FieldStorage
```

```
urllib.parse.parse_qsl()
```

```
email.message
```

```
cgi.parse()
```

```
urllib.parse.parse_qs()
```

```
multipart/form-data
```

```
cgi.parse_multipart()
```

cgi.parse_header()can be replaced with the functionality in theemailpackage, which implements the same MIME RFCs. For example, withemail.message.EmailMessage:

```
cgi.parse_header()
```

```
email.message.EmailMessage
```

```
fromemail.messageimportEmailMessagemsg=EmailMessage()msg['content-type']='application/json; charset="utf8"'main,params=msg.get_content_type(),msg['content-type'].params
```

```
email.message.Message
```

cryptand the private_cryptextension. Thehashlibmodule may be an appropriate replacement when simply hashing a value is required. Otherwise, various third-party libraries on PyPI are available:

- bcrypt:
Modern password hashing for your software and your servers.
- passlib:
Comprehensive password hashing framework supporting over 30 schemes.
- argon2-cffi:
The secure Argon2 password hashing algorithm.
- legacycrypt:ctypeswrapper to the POSIX crypt library call
and associated functionality.
- crypt_r:
Fork of thecryptmodule,
wrapper to thecrypt_r(3)library call
and associated functionality.
- standard-cryptanddeprecated-crypt-alternative:
Use the redistribution ofcryptand reimplementation of_cryptlibraries from PyPI.

imghdr: Thefiletype,puremagic, orpython-magiclibraries should be used as replacements. For example, thepuremagic.what()function can be used to replace theimghdr.what()function for all file formats that were supported byimghdr.

```
puremagic.what()
```

```
imghdr.what()
```

- standard-imghdr:
Use the redistribution ofimghdrlibrary from PyPI.

mailcap: Use themimetypesmodule instead.

- standard-mailcap:
Use the redistribution ofmailcaplibrary from PyPI.

nntplib: Use thepynntplibrary from PyPI instead.

- standard-nntplib:
Use the redistribution ofnntpliblibrary from PyPI.

pipes: Use thesubprocessmodule instead. Useshlex.quote()to replace the undocumentedpipes.quotefunction.

```
shlex.quote()
```

```
pipes.quote
```

- standard-pipes:
Use the redistribution ofpipeslibrary from PyPI.

sndhdr: Thefiletype,puremagic, orpython-magiclibraries should be used as replacements.

- standard-sndhdr:
Use the redistribution ofsndhdrlibrary from PyPI.

- standard-sunau:
Use the redistribution ofsunaulibrary from PyPI.

telnetlib, Use thetelnetlib3orExscriptlibraries from PyPI instead.

- standard-telnetlib:
Use the redistribution oftelnetliblibrary from PyPI.

uu: Use thebase64module instead, as a modern alternative.

- standard-uu:
Use the redistribution ofuulibrary from PyPI.

- standard-xdrlib:
Use the redistribution ofxdrliblibrary from PyPI.

(Contributed by Victor Stinner and Zachary Ware ingh-104773andgh-104780.)

- Remove the2to3program and thelib2to3module,
previously deprecated in Python 3.11.
(Contributed by Victor Stinner ingh-104780.)

- Remove support for chainedclassmethoddescriptors
(introduced ingh-63272).
These can no longer be used to wrap other descriptors,
such asproperty.
The core design of this feature was flawed and led to several problems.
To “pass-through” aclassmethod, consider using
the__wrapped__attribute that was added in Python 3.10.
(Contributed by Raymond Hettinger ingh-89519.)
- Raise aRuntimeErrorwhen callingframe.clear()on a suspended frame (as has always been the case for an executing frame).
(Contributed by Irit Katriel ingh-79932.)

```
__wrapped__
```

```
frame.clear()
```

- Remove the undocumentedLegacyInterpolationclass,
deprecated in the docstring since Python 3.2,
and at runtime since Python 3.11.
(Contributed by Hugo van Kemenade ingh-104886.)

```
LegacyInterpolation
```

================================================================================

### importlib.metadata¶

- Remove deprecated subscript (__getitem__()) access forEntryPointobjects.
(Contributed by Jason R. Coombs ingh-113175.)

```
__getitem__()
```

- Remove thelocale.resetlocale()function, deprecated in Python 3.11.
Uselocale.setlocale(locale.LC_ALL,"")instead.
(Contributed by Victor Stinner ingh-104783.)

```
locale.setlocale(locale.LC_ALL,"")
```

- Moveopcode.ENABLE_SPECIALIZATIONto_opcode.ENABLE_SPECIALIZATION.
This field was added in 3.12, it was never documented,
and is not intended for external use.
(Contributed by Irit Katriel ingh-105481.)
- Removeopcode.is_pseudo(),opcode.MIN_PSEUDO_OPCODE,
andopcode.MAX_PSEUDO_OPCODE, which were added in Python 3.12,
but were neither documented nor exposed throughdis,
and were not intended to be used externally.
(Contributed by Irit Katriel ingh-105481.)

```
opcode.ENABLE_SPECIALIZATION
```

```
_opcode.ENABLE_SPECIALIZATION
```

```
opcode.is_pseudo()
```

```
opcode.MIN_PSEUDO_OPCODE
```

```
opcode.MAX_PSEUDO_OPCODE
```

- This module is no longer consideredsoft deprecated.
Whileargparseremains preferred for new projects that
aren’t using a third party command line argument processing
library, there are aspects of the wayargparseworks that
mean the lower leveloptparsemodule may provide a better
foundation forwritingargument processing libraries, and
for implementing command line applications which adhere more
strictly thanargparsedoes to various Unix command line
processing conventions that originate in the behaviour of the
Cgetopt()function .
(Contributed by Alyssa Coghlan and Serhiy Storchaka ingh-126180.)

- Remove the ability to usePathobjects as context managers.
This functionality was deprecated and has had no effect since Python 3.9.
(Contributed by Barney Gale ingh-83863.)

- Remove the undocumented, deprecated, and brokenre.template()function andre.TEMPLATE/re.Tflag.
(Contributed by Serhiy Storchaka and Nikita Sobolev ingh-105687.)

```
re.template()
```

```
re.TEMPLATE
```

================================================================================

### tkinter.tix¶

- Remove thetkinter.tixmodule, deprecated in Python 3.6.
The third-party Tix library which the module wrapped is unmaintained.
(Contributed by Zachary Ware ingh-75552.)

- Remove theRawTurtle.settiltangle()method,
deprecated in the documentation since Python 3.1
and at runtime since Python 3.11.
(Contributed by Hugo van Kemenade ingh-104876.)

```
RawTurtle.settiltangle()
```

- Remove thetyping.ioandtyping.renamespaces,
deprecated since Python 3.8.
The items in those namespaces can be imported directly
from thetypingmodule.
(Contributed by Sebastian Rittau ingh-92871.)
- Remove the keyword-argument method of creatingTypedDicttypes, deprecated in Python 3.11.
(Contributed by Tomas Roun ingh-104786.)

- Remove the followingunittestfunctions, deprecated in Python 3.11:unittest.findTestCases()unittest.makeSuite()unittest.getTestCaseNames()UseTestLoadermethods instead:loadTestsFromModule()loadTestsFromTestCase()getTestCaseNames()(Contributed by Hugo van Kemenade ingh-104835.)
- Remove the untested and undocumentedTestProgram.usageExit()method, deprecated in Python 3.11.
(Contributed by Hugo van Kemenade ingh-104992.)

Remove the followingunittestfunctions, deprecated in Python 3.11:

- unittest.findTestCases()
- unittest.makeSuite()
- unittest.getTestCaseNames()

UseTestLoadermethods instead:

```
TestLoader
```

- loadTestsFromModule()
- loadTestsFromTestCase()
- getTestCaseNames()

(Contributed by Hugo van Kemenade ingh-104835.)

```
TestProgram.usageExit()
```

- Remove thecafile,capath, andcadefaultparameters of theurllib.request.urlopen()function, deprecated in Python 3.6.
Use thecontextparameter instead with anSSLContextinstance.
Thessl.SSLContext.load_cert_chain()function
can be used to load specific certificates,
or letssl.create_default_context()select
the operating system’s trusted certificate authority (CA) certificates.
(Contributed by Victor Stinner ingh-105382.)

```
urllib.request.urlopen()
```

```
SSLContext
```

```
ssl.SSLContext.load_cert_chain()
```

================================================================================

### webbrowser¶

- Remove the untested and undocumentedMacOSXclass,
deprecated in Python 3.11.
Use theMacOSXOSAScriptclass (introduced in Python 3.2) instead.
(Contributed by Hugo van Kemenade ingh-104804.)
- Remove the deprecatedMacOSXOSAScript._nameattribute.
Use theMacOSXOSAScript.nameattribute instead.
(Contributed by Nikita Sobolev ingh-105546.)

```
MacOSXOSAScript
```

```
MacOSXOSAScript._name
```

```
MacOSXOSAScript.name
```

================================================================================

## New Deprecations¶

- User-defined functions:Deprecate assignment to a function’s__code__attribute,
where the new code object’s type does not match the function’s type.
The different types are:
plain function, generator, async generator, and coroutine.
(Contributed by Irit Katriel ingh-81137.)
- array:Deprecate the'u'format code (wchar_t) at runtime.
This format code has been deprecated in documentation since Python 3.3,
and will be removed in Python 3.16.
Use the'w'format code (Py_UCS4)
for Unicode characters instead.
(Contributed by Hugo van Kemenade ingh-80480.)
- ctypes:Deprecate the undocumentedSetPointerType()function,
to be removed in Python 3.15.
(Contributed by Victor Stinner ingh-105733.)Soft-deprecatetheARRAY()function in favour oftype*lengthmultiplication.
(Contributed by Victor Stinner ingh-105733.)
- decimal:Deprecate the non-standard and undocumentedDecimalformat specifier'N',
which is only supported in thedecimalmodule’s C implementation.
(Contributed by Serhiy Storchaka ingh-89902.)
- dis:Deprecate theHAVE_ARGUMENTseparator.
Check membership inhasarginstead.
(Contributed by Irit Katriel ingh-109319.)
- gettext:Deprecate non-integer numbers as arguments to functions and methods
that consider plural forms in thegettextmodule,
even if no translation was found.
(Contributed by Serhiy Storchaka ingh-88434.)
- glob:Deprecate the undocumentedglob0()andglob1()functions.
Useglob()and pass apath-like objectspecifying
the root directory to theroot_dirparameter instead.
(Contributed by Barney Gale ingh-117337.)
- http.server:DeprecateCGIHTTPRequestHandler,
to be removed in Python 3.15.
Process-based CGI HTTP servers have been out of favor for a very long time.
This code was outdated, unmaintained, and rarely used.
It has a high potential for both security and functionality bugs.
(Contributed by Gregory P. Smith ingh-109096.)Deprecate the--cgiflag to
thepython -m http.servercommand-line interface,
to be removed in Python 3.15.
(Contributed by Gregory P. Smith ingh-109096.)
- mimetypes:Soft-deprecatefile path arguments
toguess_type(),
useguess_file_type()instead.
(Contributed by Serhiy Storchaka ingh-66543.)
- re:Deprecate passing the optionalmaxsplit,count, orflagsarguments
as positional arguments to the module-levelsplit(),sub(), andsubn()functions.
These parameters will becomekeyword-onlyin a future version of Python.
(Contributed by Serhiy Storchaka ingh-56166.)
- pathlib:DeprecatePurePath.is_reserved(),
to be removed in Python 3.15.
Useos.path.isreserved()to detect reserved paths on Windows.
(Contributed by Barney Gale ingh-88569.)
- platform:Deprecatejava_ver(),
to be removed in Python 3.15.
This function is only useful for Jython support, has a confusing API,
and is largely untested.
(Contributed by Nikita Sobolev ingh-116349.)
- pydoc:Deprecate the undocumentedispackage()function.
(Contributed by Zackery Spytz ingh-64020.)
- sqlite3:Deprecate passing more than one positional argument to
theconnect()function
and theConnectionconstructor.
The remaining parameters will become keyword-only in Python 3.15.
(Contributed by Erlend E. Aasland ingh-107948.)Deprecate passing name, number of arguments, and the callable as keyword
arguments forConnection.create_function()andConnection.create_aggregate()These parameters will become positional-only in Python 3.15.
(Contributed by Erlend E. Aasland ingh-108278.)Deprecate passing the callback callable by keyword for theset_authorizer(),set_progress_handler(), andset_trace_callback()Connectionmethods.
The callback callables will become positional-only in Python 3.15.
(Contributed by Erlend E. Aasland ingh-108278.)
- sys:Deprecate the_enablelegacywindowsfsencoding()function,
to be removed in Python 3.16.
Use thePYTHONLEGACYWINDOWSFSENCODINGenvironment variable instead.
(Contributed by Inada Naoki ingh-73427.)
- tarfile:Deprecate the undocumented and unusedTarFile.tarfileattribute,
to be removed in Python 3.16.
(Contributed ingh-115256.)
- traceback:Deprecate theTracebackException.exc_typeattribute.
UseTracebackException.exc_type_strinstead.
(Contributed by Irit Katriel ingh-112332.)
- typing:Deprecate the undocumented keyword argument syntax for creatingNamedTupleclasses
(e.g.Point=NamedTuple("Point",x=int,y=int)),
to be removed in Python 3.15.
Use the class-based syntax or the functional syntax instead.
(Contributed by Alex Waygood ingh-105566.)Deprecate omitting thefieldsparameter when creating
aNamedTupleortyping.TypedDictclass,
and deprecate passingNoneto thefieldsparameter of both types.
Python 3.15 will require a valid sequence for thefieldsparameter.
To create a NamedTuple class with zero fields,
useclassNT(NamedTuple):passorNT=NamedTuple("NT",()).
To create a TypedDict class with zero fields,
useclassTD(TypedDict):passorTD=TypedDict("TD",{}).
(Contributed by Alex Waygood ingh-105566andgh-105570.)Deprecate thetyping.no_type_check_decorator()decorator function,
to be removed in in Python 3.15.
After eight years in thetypingmodule,
it has yet to be supported by any major type checker.
(Contributed by Alex Waygood ingh-106309.)Deprecatetyping.AnyStr.
In Python 3.16, it will be removed fromtyping.__all__,
and aDeprecationWarningwill be emitted at runtime
when it is imported or accessed.
It will be removed entirely in Python 3.18.
Use the newtype parameter syntaxinstead.
(Contributed by Michael The ingh-107116.)
- wave:Deprecate thegetmark(),setmark(),
andgetmarkers()methods of
theWave_readandWave_writeclasses,
to be removed in Python 3.15.
(Contributed by Victor Stinner ingh-105096.)

User-defined functions:

- Deprecate assignment to a function’s__code__attribute,
where the new code object’s type does not match the function’s type.
The different types are:
plain function, generator, async generator, and coroutine.
(Contributed by Irit Katriel ingh-81137.)

- Deprecate the'u'format code (wchar_t) at runtime.
This format code has been deprecated in documentation since Python 3.3,
and will be removed in Python 3.16.
Use the'w'format code (Py_UCS4)
for Unicode characters instead.
(Contributed by Hugo van Kemenade ingh-80480.)

- Deprecate the undocumentedSetPointerType()function,
to be removed in Python 3.15.
(Contributed by Victor Stinner ingh-105733.)
- Soft-deprecatetheARRAY()function in favour oftype*lengthmultiplication.
(Contributed by Victor Stinner ingh-105733.)

```
SetPointerType()
```

```
type*length
```

- Deprecate the non-standard and undocumentedDecimalformat specifier'N',
which is only supported in thedecimalmodule’s C implementation.
(Contributed by Serhiy Storchaka ingh-89902.)

- Deprecate theHAVE_ARGUMENTseparator.
Check membership inhasarginstead.
(Contributed by Irit Katriel ingh-109319.)

```
HAVE_ARGUMENT
```

- Deprecate non-integer numbers as arguments to functions and methods
that consider plural forms in thegettextmodule,
even if no translation was found.
(Contributed by Serhiy Storchaka ingh-88434.)

- Deprecate the undocumentedglob0()andglob1()functions.
Useglob()and pass apath-like objectspecifying
the root directory to theroot_dirparameter instead.
(Contributed by Barney Gale ingh-117337.)

http.server:

```
http.server
```

- DeprecateCGIHTTPRequestHandler,
to be removed in Python 3.15.
Process-based CGI HTTP servers have been out of favor for a very long time.
This code was outdated, unmaintained, and rarely used.
It has a high potential for both security and functionality bugs.
(Contributed by Gregory P. Smith ingh-109096.)
- Deprecate the--cgiflag to
thepython -m http.servercommand-line interface,
to be removed in Python 3.15.
(Contributed by Gregory P. Smith ingh-109096.)

```
CGIHTTPRequestHandler
```

- Soft-deprecatefile path arguments
toguess_type(),
useguess_file_type()instead.
(Contributed by Serhiy Storchaka ingh-66543.)

- Deprecate passing the optionalmaxsplit,count, orflagsarguments
as positional arguments to the module-levelsplit(),sub(), andsubn()functions.
These parameters will becomekeyword-onlyin a future version of Python.
(Contributed by Serhiy Storchaka ingh-56166.)

- DeprecatePurePath.is_reserved(),
to be removed in Python 3.15.
Useos.path.isreserved()to detect reserved paths on Windows.
(Contributed by Barney Gale ingh-88569.)

```
PurePath.is_reserved()
```

```
os.path.isreserved()
```

- Deprecatejava_ver(),
to be removed in Python 3.15.
This function is only useful for Jython support, has a confusing API,
and is largely untested.
(Contributed by Nikita Sobolev ingh-116349.)

```
java_ver()
```

- Deprecate the undocumentedispackage()function.
(Contributed by Zackery Spytz ingh-64020.)

```
ispackage()
```

- Deprecate passing more than one positional argument to
theconnect()function
and theConnectionconstructor.
The remaining parameters will become keyword-only in Python 3.15.
(Contributed by Erlend E. Aasland ingh-107948.)
- Deprecate passing name, number of arguments, and the callable as keyword
arguments forConnection.create_function()andConnection.create_aggregate()These parameters will become positional-only in Python 3.15.
(Contributed by Erlend E. Aasland ingh-108278.)
- Deprecate passing the callback callable by keyword for theset_authorizer(),set_progress_handler(), andset_trace_callback()Connectionmethods.
The callback callables will become positional-only in Python 3.15.
(Contributed by Erlend E. Aasland ingh-108278.)

```
Connection.create_function()
```

```
Connection.create_aggregate()
```

```
set_authorizer()
```

```
set_progress_handler()
```

```
set_trace_callback()
```

- Deprecate the_enablelegacywindowsfsencoding()function,
to be removed in Python 3.16.
Use thePYTHONLEGACYWINDOWSFSENCODINGenvironment variable instead.
(Contributed by Inada Naoki ingh-73427.)

```
_enablelegacywindowsfsencoding()
```

```
PYTHONLEGACYWINDOWSFSENCODING
```

- Deprecate the undocumented and unusedTarFile.tarfileattribute,
to be removed in Python 3.16.
(Contributed ingh-115256.)

```
TarFile.tarfile
```

- Deprecate theTracebackException.exc_typeattribute.
UseTracebackException.exc_type_strinstead.
(Contributed by Irit Katriel ingh-112332.)

```
TracebackException.exc_type
```

```
TracebackException.exc_type_str
```

- Deprecate the undocumented keyword argument syntax for creatingNamedTupleclasses
(e.g.Point=NamedTuple("Point",x=int,y=int)),
to be removed in Python 3.15.
Use the class-based syntax or the functional syntax instead.
(Contributed by Alex Waygood ingh-105566.)
- Deprecate omitting thefieldsparameter when creating
aNamedTupleortyping.TypedDictclass,
and deprecate passingNoneto thefieldsparameter of both types.
Python 3.15 will require a valid sequence for thefieldsparameter.
To create a NamedTuple class with zero fields,
useclassNT(NamedTuple):passorNT=NamedTuple("NT",()).
To create a TypedDict class with zero fields,
useclassTD(TypedDict):passorTD=TypedDict("TD",{}).
(Contributed by Alex Waygood ingh-105566andgh-105570.)
- Deprecate thetyping.no_type_check_decorator()decorator function,
to be removed in in Python 3.15.
After eight years in thetypingmodule,
it has yet to be supported by any major type checker.
(Contributed by Alex Waygood ingh-106309.)
- Deprecatetyping.AnyStr.
In Python 3.16, it will be removed fromtyping.__all__,
and aDeprecationWarningwill be emitted at runtime
when it is imported or accessed.
It will be removed entirely in Python 3.18.
Use the newtype parameter syntaxinstead.
(Contributed by Michael The ingh-107116.)

```
NamedTuple
```

```
Point=NamedTuple("Point",x=int,y=int)
```

```
classNT(NamedTuple):pass
```

```
NT=NamedTuple("NT",())
```

```
classTD(TypedDict):pass
```

```
TD=TypedDict("TD",{})
```

```
typing.no_type_check_decorator()
```

```
typing.AnyStr
```

```
typing.__all__
```

- Deprecate thegetmark(),setmark(),
andgetmarkers()methods of
theWave_readandWave_writeclasses,
to be removed in Python 3.15.
(Contributed by Victor Stinner ingh-105096.)

```
getmarkers()
```

```
Wave_write
```

================================================================================

### Pending Removal in Python 3.14¶

- argparse: Thetype,choices, andmetavarparameters
ofargparse.BooleanOptionalActionare deprecated
and will be removed in 3.14.
(Contributed by Nikita Sobolev ingh-92248.)
- ast: The following features have been deprecated in documentation
since Python 3.8, now cause aDeprecationWarningto be emitted at
runtime when they are accessed or used, and will be removed in Python 3.14:ast.Numast.Strast.Bytesast.NameConstantast.EllipsisUseast.Constantinstead.
(Contributed by Serhiy Storchaka ingh-90953.)
- asyncio:The child watcher classesMultiLoopChildWatcher,FastChildWatcher,AbstractChildWatcherandSafeChildWatcherare deprecated and
will be removed in Python 3.14.
(Contributed by Kumar Aditya ingh-94597.)asyncio.set_child_watcher(),asyncio.get_child_watcher(),asyncio.AbstractEventLoopPolicy.set_child_watcher()andasyncio.AbstractEventLoopPolicy.get_child_watcher()are deprecated
and will be removed in Python 3.14.
(Contributed by Kumar Aditya ingh-94597.)Theget_event_loop()method of the
default event loop policy now emits aDeprecationWarningif there
is no current event loop set and it decides to create one.
(Contributed by Serhiy Storchaka and Guido van Rossum ingh-100160.)
- collections.abc: DeprecatedByteString.
PreferSequenceorBuffer.
For use in typing, prefer a union, likebytes|bytearray,
orcollections.abc.Buffer.
(Contributed by Shantanu Jain ingh-91896.)
- email: Deprecated theisdstparameter inemail.utils.localtime().
(Contributed by Alan Williams ingh-72346.)
- importlib.abcdeprecated classes:importlib.abc.ResourceReaderimportlib.abc.Traversableimportlib.abc.TraversableResourcesUseimportlib.resources.abcclasses instead:importlib.resources.abc.Traversableimportlib.resources.abc.TraversableResources(Contributed by Jason R. Coombs and Hugo van Kemenade ingh-93963.)
- itertoolshad undocumented, inefficient, historically buggy,
and inconsistent support for copy, deepcopy, and pickle operations.
This will be removed in 3.14 for a significant reduction in code
volume and maintenance burden.
(Contributed by Raymond Hettinger ingh-101588.)
- multiprocessing: The default start method will change to a safer one on
Linux, BSDs, and other non-macOS POSIX platforms where'fork'is currently
the default (gh-84559). Adding a runtime warning about this was deemed too
disruptive as the majority of code is not expected to care. Use theget_context()orset_start_method()APIs to explicitly specify when
your coderequires'fork'.  SeeContexts and start methods.
- pathlib:is_relative_to()andrelative_to(): passing additional arguments is
deprecated.
- pkgutil:find_loader()andget_loader()now raiseDeprecationWarning;
useimportlib.util.find_spec()instead.
(Contributed by Nikita Sobolev ingh-97850.)
- pty:master_open(): usepty.openpty().slave_open(): usepty.openpty().
- sqlite3:versionandversion_info.execute()andexecutemany()ifnamed placeholdersare used andparametersis a sequence instead of adict.
- typing:ByteString, deprecated since Python 3.9,
now causes aDeprecationWarningto be emitted when it is used.
- urllib:urllib.parse.Quoteris deprecated: it was not intended to be a
public API.
(Contributed by Gregory P. Smith ingh-88168.)

```
argparse.BooleanOptionalAction
```

ast: The following features have been deprecated in documentation since Python 3.8, now cause aDeprecationWarningto be emitted at runtime when they are accessed or used, and will be removed in Python 3.14:

- ast.NameConstant
- ast.Ellipsis

Useast.Constantinstead. (Contributed by Serhiy Storchaka ingh-90953.)

```
ast.Constant
```

- The child watcher classesMultiLoopChildWatcher,FastChildWatcher,AbstractChildWatcherandSafeChildWatcherare deprecated and
will be removed in Python 3.14.
(Contributed by Kumar Aditya ingh-94597.)
- asyncio.set_child_watcher(),asyncio.get_child_watcher(),asyncio.AbstractEventLoopPolicy.set_child_watcher()andasyncio.AbstractEventLoopPolicy.get_child_watcher()are deprecated
and will be removed in Python 3.14.
(Contributed by Kumar Aditya ingh-94597.)
- Theget_event_loop()method of the
default event loop policy now emits aDeprecationWarningif there
is no current event loop set and it decides to create one.
(Contributed by Serhiy Storchaka and Guido van Rossum ingh-100160.)

```
MultiLoopChildWatcher
```

```
FastChildWatcher
```

```
AbstractChildWatcher
```

```
SafeChildWatcher
```

```
asyncio.set_child_watcher()
```

```
asyncio.get_child_watcher()
```

```
asyncio.AbstractEventLoopPolicy.set_child_watcher()
```

```
asyncio.AbstractEventLoopPolicy.get_child_watcher()
```

```
get_event_loop()
```

```
collections.abc
```

```
ByteString
```

```
bytes|bytearray
```

```
collections.abc.Buffer
```

```
email.utils.localtime()
```

importlib.abcdeprecated classes:

```
importlib.abc
```

- importlib.abc.ResourceReader
- importlib.abc.Traversable
- importlib.abc.TraversableResources

Useimportlib.resources.abcclasses instead:

```
importlib.resources.abc
```

- importlib.resources.abc.Traversable
- importlib.resources.abc.TraversableResources

(Contributed by Jason R. Coombs and Hugo van Kemenade ingh-93963.)

```
multiprocessing
```

```
get_context()
```

```
set_start_method()
```

```
is_relative_to()
```

```
relative_to()
```

```
find_loader()
```

```
get_loader()
```

```
importlib.util.find_spec()
```

- master_open(): usepty.openpty().
- slave_open(): usepty.openpty().

```
master_open()
```

```
pty.openpty()
```

```
slave_open()
```

- versionandversion_info.
- execute()andexecutemany()ifnamed placeholdersare used andparametersis a sequence instead of adict.

```
version_info
```

```
executemany()
```

```
urllib.parse.Quoter
```

================================================================================

### Pending Removal in Python 3.15¶

- The import system:Setting__cached__on a module while
failing to set__spec__.cachedis deprecated. In Python 3.15,__cached__will cease to be set or
take into consideration by the import system or standard library. (gh-97879)Setting__package__on a module while
failing to set__spec__.parentis deprecated. In Python 3.15,__package__will cease to be set or
take into consideration by the import system or standard library. (gh-97879)
- ctypes:The undocumentedctypes.SetPointerType()function
has been deprecated since Python 3.13.
- http.server:The obsolete and rarely usedCGIHTTPRequestHandlerhas been deprecated since Python 3.13.
No direct replacement exists.Anythingis better than CGI to interface
a web server with a request handler.The--cgiflag to thepython -m http.servercommand-line interface has been deprecated since Python 3.13.
- importlib:load_module()method: useexec_module()instead.
- locale:Thegetdefaultlocale()function
has been deprecated since Python 3.11.
Its removal was originally planned for Python 3.13 (gh-90817),
but has been postponed to Python 3.15.
Usegetlocale(),setlocale(),
andgetencoding()instead.
(Contributed by Hugo van Kemenade ingh-111187.)
- pathlib:PurePath.is_reserved()has been deprecated since Python 3.13.
Useos.path.isreserved()to detect reserved paths on Windows.
- platform:java_ver()has been deprecated since Python 3.13.
This function is only useful for Jython support, has a confusing API,
and is largely untested.
- sysconfig:Thecheck_homeargument ofsysconfig.is_python_build()has been
deprecated since Python 3.12.
- threading:RLock()will take no arguments in Python 3.15.
Passing any arguments has been deprecated since Python 3.14,
as the  Python version does not permit any arguments,
but the C version allows any number of positional or keyword arguments,
ignoring every argument.
- types:types.CodeType: Accessingco_lnotabwas
deprecated inPEP 626since 3.10 and was planned to be removed in 3.12,
but it only got a properDeprecationWarningin 3.12.
May be removed in 3.15.
(Contributed by Nikita Sobolev ingh-101866.)
- typing:The undocumented keyword argument syntax for creatingNamedTupleclasses
(e.g.Point=NamedTuple("Point",x=int,y=int))
has been deprecated since Python 3.13.
Use the class-based syntax or the functional syntax instead.Thetyping.no_type_check_decorator()decorator function
has been deprecated since Python 3.13.
After eight years in thetypingmodule,
it has yet to be supported by any major type checker.
- wave:Thegetmark(),setmark(),
andgetmarkers()methods of
theWave_readandWave_writeclasses
have been deprecated since Python 3.13.

The import system:

- Setting__cached__on a module while
failing to set__spec__.cachedis deprecated. In Python 3.15,__cached__will cease to be set or
take into consideration by the import system or standard library. (gh-97879)
- Setting__package__on a module while
failing to set__spec__.parentis deprecated. In Python 3.15,__package__will cease to be set or
take into consideration by the import system or standard library. (gh-97879)

```
__cached__
```

```
__spec__.cached
```

```
__package__
```

```
__spec__.parent
```

- The undocumentedctypes.SetPointerType()function
has been deprecated since Python 3.13.

```
ctypes.SetPointerType()
```

- The obsolete and rarely usedCGIHTTPRequestHandlerhas been deprecated since Python 3.13.
No direct replacement exists.Anythingis better than CGI to interface
a web server with a request handler.
- The--cgiflag to thepython -m http.servercommand-line interface has been deprecated since Python 3.13.

- load_module()method: useexec_module()instead.

```
load_module()
```

```
exec_module()
```

- Thegetdefaultlocale()function
has been deprecated since Python 3.11.
Its removal was originally planned for Python 3.13 (gh-90817),
but has been postponed to Python 3.15.
Usegetlocale(),setlocale(),
andgetencoding()instead.
(Contributed by Hugo van Kemenade ingh-111187.)

```
getdefaultlocale()
```

```
getlocale()
```

```
setlocale()
```

```
getencoding()
```

- PurePath.is_reserved()has been deprecated since Python 3.13.
Useos.path.isreserved()to detect reserved paths on Windows.

- java_ver()has been deprecated since Python 3.13.
This function is only useful for Jython support, has a confusing API,
and is largely untested.

- Thecheck_homeargument ofsysconfig.is_python_build()has been
deprecated since Python 3.12.

```
sysconfig.is_python_build()
```

- RLock()will take no arguments in Python 3.15.
Passing any arguments has been deprecated since Python 3.14,
as the  Python version does not permit any arguments,
but the C version allows any number of positional or keyword arguments,
ignoring every argument.

- types.CodeType: Accessingco_lnotabwas
deprecated inPEP 626since 3.10 and was planned to be removed in 3.12,
but it only got a properDeprecationWarningin 3.12.
May be removed in 3.15.
(Contributed by Nikita Sobolev ingh-101866.)

```
types.CodeType
```

- The undocumented keyword argument syntax for creatingNamedTupleclasses
(e.g.Point=NamedTuple("Point",x=int,y=int))
has been deprecated since Python 3.13.
Use the class-based syntax or the functional syntax instead.
- Thetyping.no_type_check_decorator()decorator function
has been deprecated since Python 3.13.
After eight years in thetypingmodule,
it has yet to be supported by any major type checker.

- Thegetmark(),setmark(),
andgetmarkers()methods of
theWave_readandWave_writeclasses
have been deprecated since Python 3.13.

================================================================================

### Pending removal in Python 3.16¶

- The import system:Setting__loader__on a module while
failing to set__spec__.loaderis deprecated. In Python 3.16,__loader__will cease to be set or
taken into consideration by the import system or the standard library.
- array:The'u'format code (wchar_t)
has been deprecated in documentation since Python 3.3
and at runtime since Python 3.13.
Use the'w'format code (Py_UCS4)
for Unicode characters instead.
- asyncio:asyncio.iscoroutinefunction()is deprecated
and will be removed in Python 3.16,
useinspect.iscoroutinefunction()instead.
(Contributed by Jiahao Li and Kumar Aditya ingh-122875.)
- builtins:Bitwise inversion on boolean types,~Trueor~Falsehas been deprecated since Python 3.12,
as it produces surprising and unintuitive results (-2and-1).
Usenotxinstead for the logical negation of a Boolean.
In the rare case that you need the bitwise inversion of
the underlying integer, convert tointexplicitly (~int(x)).
- shutil:TheExecErrorexception
has been deprecated since Python 3.14.
It has not been used by any function inshutilsince Python 3.4,
and is now an alias ofRuntimeError.
- symtable:TheClass.get_methodsmethod
has been deprecated since Python 3.14.
- sys:The_enablelegacywindowsfsencoding()function
has been deprecated since Python 3.13.
Use thePYTHONLEGACYWINDOWSFSENCODINGenvironment variable instead.
- tarfile:The undocumented and unusedTarFile.tarfileattribute
has been deprecated since Python 3.13.

- Setting__loader__on a module while
failing to set__spec__.loaderis deprecated. In Python 3.16,__loader__will cease to be set or
taken into consideration by the import system or the standard library.

```
__loader__
```

```
__spec__.loader
```

- The'u'format code (wchar_t)
has been deprecated in documentation since Python 3.3
and at runtime since Python 3.13.
Use the'w'format code (Py_UCS4)
for Unicode characters instead.

- asyncio.iscoroutinefunction()is deprecated
and will be removed in Python 3.16,
useinspect.iscoroutinefunction()instead.
(Contributed by Jiahao Li and Kumar Aditya ingh-122875.)

```
asyncio.iscoroutinefunction()
```

```
inspect.iscoroutinefunction()
```

- Bitwise inversion on boolean types,~Trueor~Falsehas been deprecated since Python 3.12,
as it produces surprising and unintuitive results (-2and-1).
Usenotxinstead for the logical negation of a Boolean.
In the rare case that you need the bitwise inversion of
the underlying integer, convert tointexplicitly (~int(x)).

- TheExecErrorexception
has been deprecated since Python 3.14.
It has not been used by any function inshutilsince Python 3.4,
and is now an alias ofRuntimeError.

- TheClass.get_methodsmethod
has been deprecated since Python 3.14.

```
Class.get_methods
```

- The_enablelegacywindowsfsencoding()function
has been deprecated since Python 3.13.
Use thePYTHONLEGACYWINDOWSFSENCODINGenvironment variable instead.

- The undocumented and unusedTarFile.tarfileattribute
has been deprecated since Python 3.13.

================================================================================

### Pending Removal in Future Versions¶

The following APIs will be removed in the future, although there is currently no date scheduled for their removal.

- argparse: Nesting argument groups and nesting mutually exclusive
groups are deprecated.
- array’s'u'format code (gh-57281)
- builtins:bool(NotImplemented).Generators:throw(type,exc,tb)andathrow(type,exc,tb)signature is deprecated: usethrow(exc)andathrow(exc)instead,
the single argument signature.Currently Python accepts numeric literals immediately followed by keywords,
for example0inx,1orx,0if1else2.  It allows confusing and
ambiguous expressions like[0x1forxiny](which can be interpreted as[0x1forxiny]or[0x1forxiny]).  A syntax warning is raised
if the numeric literal is immediately followed by one of keywordsand,else,for,if,in,isandor.  In a future release it
will be changed to a syntax error. (gh-87999)Support for__index__()and__int__()method returning non-int type:
these methods will be required to return an instance of a strict subclass ofint.Support for__float__()method returning a strict subclass offloat: these methods will be required to return an instance offloat.Support for__complex__()method returning a strict subclass ofcomplex: these methods will be required to return an instance ofcomplex.Delegation ofint()to__trunc__()method.Passing a complex number as therealorimagargument in thecomplex()constructor is now deprecated; it should only be passed
as a single positional argument.
(Contributed by Serhiy Storchaka ingh-109218.)
- calendar:calendar.Januaryandcalendar.Februaryconstants are
deprecated and replaced bycalendar.JANUARYandcalendar.FEBRUARY.
(Contributed by Prince Roshan ingh-103636.)
- codeobject.co_lnotab: use thecodeobject.co_lines()method
instead.
- datetime:utcnow():
usedatetime.datetime.now(tz=datetime.UTC).utcfromtimestamp():
usedatetime.datetime.fromtimestamp(timestamp,tz=datetime.UTC).
- gettext: Plural value must be an integer.
- importlib:cache_from_source()debug_overrideparameter is
deprecated: use theoptimizationparameter instead.
- importlib.metadata:EntryPointstuple interface.ImplicitNoneon return values.
- logging: thewarn()method has been deprecated
since Python 3.3, usewarning()instead.
- mailbox: Use of StringIO input and text mode is deprecated, use
BytesIO and binary mode instead.
- os: Callingos.register_at_fork()in multi-threaded process.
- pydoc.ErrorDuringImport: A tuple value forexc_infoparameter is
deprecated, use an exception instance.
- re: More strict rules are now applied for numerical group references
and group names in regular expressions.  Only sequence of ASCII digits is now
accepted as a numerical reference.  The group name in bytes patterns and
replacement strings can now only contain ASCII letters and digits and
underscore.
(Contributed by Serhiy Storchaka ingh-91760.)
- sre_compile,sre_constantsandsre_parsemodules.
- shutil:rmtree()’sonerrorparameter is deprecated in
Python 3.12; use theonexcparameter instead.
- ssloptions and protocols:ssl.SSLContextwithout protocol argument is deprecated.ssl.SSLContext:set_npn_protocols()andselected_npn_protocol()are deprecated: use ALPN
instead.ssl.OP_NO_SSL*optionsssl.OP_NO_TLS*optionsssl.PROTOCOL_SSLv3ssl.PROTOCOL_TLSssl.PROTOCOL_TLSv1ssl.PROTOCOL_TLSv1_1ssl.PROTOCOL_TLSv1_2ssl.TLSVersion.SSLv3ssl.TLSVersion.TLSv1ssl.TLSVersion.TLSv1_1
- threadingmethods:threading.Condition.notifyAll(): usenotify_all().threading.Event.isSet(): useis_set().threading.Thread.isDaemon(),threading.Thread.setDaemon():
usethreading.Thread.daemonattribute.threading.Thread.getName(),threading.Thread.setName():
usethreading.Thread.nameattribute.threading.currentThread(): usethreading.current_thread().threading.activeCount(): usethreading.active_count().
- typing.Text(gh-92332).
- unittest.IsolatedAsyncioTestCase: it is deprecated to return a value
that is notNonefrom a test case.
- urllib.parsedeprecated functions:urlparse()insteadsplitattr()splithost()splitnport()splitpasswd()splitport()splitquery()splittag()splittype()splituser()splitvalue()to_bytes()
- urllib.request:URLopenerandFancyURLopenerstyle of invoking requests is
deprecated. Use newerurlopen()functions and methods.
- wsgiref:SimpleHandler.stdout.write()should not do partial
writes.
- xml.etree.ElementTree: Testing the truth value of anElementis deprecated. In a future release it
will always returnTrue. Prefer explicitlen(elem)orelemisnotNonetests instead.
- zipimport.zipimporter.load_module()is deprecated:
useexec_module()instead.

- bool(NotImplemented).
- Generators:throw(type,exc,tb)andathrow(type,exc,tb)signature is deprecated: usethrow(exc)andathrow(exc)instead,
the single argument signature.
- Currently Python accepts numeric literals immediately followed by keywords,
for example0inx,1orx,0if1else2.  It allows confusing and
ambiguous expressions like[0x1forxiny](which can be interpreted as[0x1forxiny]or[0x1forxiny]).  A syntax warning is raised
if the numeric literal is immediately followed by one of keywordsand,else,for,if,in,isandor.  In a future release it
will be changed to a syntax error. (gh-87999)
- Support for__index__()and__int__()method returning non-int type:
these methods will be required to return an instance of a strict subclass ofint.
- Support for__float__()method returning a strict subclass offloat: these methods will be required to return an instance offloat.
- Support for__complex__()method returning a strict subclass ofcomplex: these methods will be required to return an instance ofcomplex.
- Delegation ofint()to__trunc__()method.
- Passing a complex number as therealorimagargument in thecomplex()constructor is now deprecated; it should only be passed
as a single positional argument.
(Contributed by Serhiy Storchaka ingh-109218.)

```
bool(NotImplemented)
```

```
throw(type,exc,tb)
```

```
athrow(type,exc,tb)
```

```
throw(exc)
```

```
athrow(exc)
```

```
[0x1forxiny]
```

```
__index__()
```

```
__float__()
```

```
__complex__()
```

```
__trunc__()
```

```
calendar.January
```

```
calendar.February
```

```
calendar.JANUARY
```

```
calendar.FEBRUARY
```

```
codeobject.co_lnotab
```

```
codeobject.co_lines()
```

- utcnow():
usedatetime.datetime.now(tz=datetime.UTC).
- utcfromtimestamp():
usedatetime.datetime.fromtimestamp(timestamp,tz=datetime.UTC).

```
datetime.datetime.now(tz=datetime.UTC)
```

```
utcfromtimestamp()
```

```
datetime.datetime.fromtimestamp(timestamp,tz=datetime.UTC)
```

- cache_from_source()debug_overrideparameter is
deprecated: use theoptimizationparameter instead.

```
cache_from_source()
```

importlib.metadata:

- EntryPointstuple interface.
- ImplicitNoneon return values.

```
EntryPoints
```

```
os.register_at_fork()
```

```
pydoc.ErrorDuringImport
```

```
sre_compile
```

```
sre_constants
```

ssloptions and protocols:

- ssl.SSLContextwithout protocol argument is deprecated.
- ssl.SSLContext:set_npn_protocols()andselected_npn_protocol()are deprecated: use ALPN
instead.
- ssl.OP_NO_SSL*options
- ssl.OP_NO_TLS*options
- ssl.PROTOCOL_SSLv3
- ssl.PROTOCOL_TLS
- ssl.PROTOCOL_TLSv1
- ssl.PROTOCOL_TLSv1_1
- ssl.PROTOCOL_TLSv1_2
- ssl.TLSVersion.SSLv3
- ssl.TLSVersion.TLSv1
- ssl.TLSVersion.TLSv1_1

```
ssl.SSLContext
```

```
set_npn_protocols()
```

```
selected_npn_protocol()
```

```
ssl.OP_NO_SSL*
```

```
ssl.OP_NO_TLS*
```

threadingmethods:

- threading.Condition.notifyAll(): usenotify_all().
- threading.Event.isSet(): useis_set().
- threading.Thread.isDaemon(),threading.Thread.setDaemon():
usethreading.Thread.daemonattribute.
- threading.Thread.getName(),threading.Thread.setName():
usethreading.Thread.nameattribute.
- threading.currentThread(): usethreading.current_thread().
- threading.activeCount(): usethreading.active_count().

```
threading.Condition.notifyAll()
```

```
notify_all()
```

```
threading.Event.isSet()
```

```
threading.Thread.isDaemon()
```

```
threading.Thread.setDaemon()
```

```
threading.Thread.daemon
```

```
threading.Thread.getName()
```

```
threading.Thread.setName()
```

```
threading.Thread.name
```

```
threading.currentThread()
```

```
threading.current_thread()
```

```
threading.activeCount()
```

```
threading.active_count()
```

```
typing.Text
```

```
unittest.IsolatedAsyncioTestCase
```

urllib.parsedeprecated functions:urlparse()instead

```
urllib.parse
```

```
urlparse()
```

- splitattr()
- splithost()
- splitnport()
- splitpasswd()
- splitport()
- splitquery()
- splittype()
- splituser()
- splitvalue()

```
splittag()
```

```
to_bytes()
```

```
urllib.request
```

```
FancyURLopener
```

```
SimpleHandler.stdout.write()
```

```
xml.etree.ElementTree
```

```
elemisnotNone
```

```
zipimport.zipimporter.load_module()
```

================================================================================

## CPython Bytecode Changes¶

- The oparg ofYIELD_VALUEis now1if the yield is part of a yield-from or await, and0otherwise.
The oparg ofRESUMEwas changed to add a bit indicating
if the except-depth is 1, which is needed to optimize closing of generators.
(Contributed by Irit Katriel ingh-111354.)

```
YIELD_VALUE
```

================================================================================

## C API Changes¶

================================================================================

### New Features¶

- Add thePyMonitoring C APIfor generatingPEP 669monitoring events:PyMonitoringStatePyMonitoring_FirePyStartEvent()PyMonitoring_FirePyResumeEvent()PyMonitoring_FirePyReturnEvent()PyMonitoring_FirePyYieldEvent()PyMonitoring_FireCallEvent()PyMonitoring_FireLineEvent()PyMonitoring_FireJumpEvent()PyMonitoring_FireBranchEvent()PyMonitoring_FireCReturnEvent()PyMonitoring_FirePyThrowEvent()PyMonitoring_FireRaiseEvent()PyMonitoring_FireCRaiseEvent()PyMonitoring_FireReraiseEvent()PyMonitoring_FireExceptionHandledEvent()PyMonitoring_FirePyUnwindEvent()PyMonitoring_FireStopIterationEvent()PyMonitoring_EnterScope()PyMonitoring_ExitScope()(Contributed by Irit Katriel ingh-111997).
- AddPyMutex, a lightweight mutex that occupies a single byte,
and the newPyMutex_Lock()andPyMutex_Unlock()functions.PyMutex_Lock()will release theGIL(if currently held)
if the operation needs to block.
(Contributed by Sam Gross ingh-108724.)
- Add thePyTime C APIto provide access to system clocks:PyTime_t.PyTime_MINandPyTime_MAX.PyTime_AsSecondsDouble().PyTime_Monotonic().PyTime_MonotonicRaw().PyTime_PerfCounter().PyTime_PerfCounterRaw().PyTime_Time().PyTime_TimeRaw().(Contributed by Victor Stinner and Petr Viktorin ingh-110850.)
- Add thePyDict_ContainsString()function
with the same behavior asPyDict_Contains(),
butkeyis specified as aconstchar*UTF-8 encoded bytes string,
rather than aPyObject*.
(Contributed by Victor Stinner ingh-108314.)
- Add thePyDict_GetItemRef()andPyDict_GetItemStringRef()functions,
which behave similarly toPyDict_GetItemWithError(),
but return astrong referenceinstead of aborrowed reference.
Moreover, these functions return-1on error,
removing the need to checkPyErr_Occurred().
(Contributed by Victor Stinner ingh-106004.)
- Add thePyDict_SetDefaultRef()function,
which behaves similarly toPyDict_SetDefault(),
but returns astrong referenceinstead of aborrowed reference.
This function returns-1on error,0on insertion,
and1if the key was already present in the dictionary.
(Contributed by Sam Gross ingh-112066.)
- Add thePyDict_Pop()andPyDict_PopString()functions
to remove a key from a dictionary and optionally return the removed value.
This is similar todict.pop(),
though there is no default value,
andKeyErroris not raised for missing keys.
(Contributed by Stefan Behnel and Victor Stinner ingh-111262.)
- Add thePyMapping_GetOptionalItem()andPyMapping_GetOptionalItemString()functions
as alternatives toPyObject_GetItem()andPyMapping_GetItemString()respectively.
The new functions do not raiseKeyErrorif the requested key is missing from the mapping.
These variants are more convenient and faster
if a missing key should not be treated as a failure.
(Contributed by Serhiy Storchaka ingh-106307.)
- Add thePyObject_GetOptionalAttr()andPyObject_GetOptionalAttrString()functions
as alternatives toPyObject_GetAttr()andPyObject_GetAttrString()respectively.
The new functions do not raiseAttributeErrorif the requested attribute is not found on the object.
These variants are more convenient and faster
if the missing attribute should not be treated as a failure.
(Contributed by Serhiy Storchaka ingh-106521.)
- Add thePyErr_FormatUnraisable()function
as an extension toPyErr_WriteUnraisable()that allows customizing the warning message.
(Contributed by Serhiy Storchaka ingh-108082.)
- Add new functions that return astrong referenceinstead of
aborrowed referencefor frame locals, globals, and builtins,
as part ofPEP 667:PyEval_GetFrameBuiltins()replacesPyEval_GetBuiltins()PyEval_GetFrameGlobals()replacesPyEval_GetGlobals()PyEval_GetFrameLocals()replacesPyEval_GetLocals()(Contributed by Mark Shannon and Tian Gao ingh-74929.)
- Add thePy_GetConstant()andPy_GetConstantBorrowed()functions to getstrongorborrowedreferences to constants.
For example,Py_GetConstant(Py_CONSTANT_ZERO)returns a strong reference
to the constant zero.
(Contributed by Victor  Stinner ingh-115754.)
- Add thePyImport_AddModuleRef()function
as a replacement forPyImport_AddModule()that returns astrong referenceinstead of aborrowed reference.
(Contributed by Victor Stinner ingh-105922.)
- Add thePy_IsFinalizing()function to check
whether the main Python interpreter isshutting down.
(Contributed by Victor Stinner ingh-108014.)
- Add thePyList_GetItemRef()function
as a replacement forPyList_GetItem()that returns astrong referenceinstead of aborrowed reference.
(Contributed by Sam Gross ingh-114329.)
- Add thePyList_Extend()andPyList_Clear()functions,
mirroring the Pythonlist.extend()andlist.clear()methods.
(Contributed by Victor Stinner ingh-111138.)
- Add thePyLong_AsInt()function.
It behaves similarly toPyLong_AsLong(),
but stores the result in a Cintinstead of a Clong.
(Contributed by Victor Stinner ingh-108014.)
- Add thePyLong_AsNativeBytes(),PyLong_FromNativeBytes(),
andPyLong_FromUnsignedNativeBytes()functions
to simplify converting between native integer types
and Pythonintobjects.
(Contributed by Steve Dower ingh-111140.)
- AddPyModule_Add()function, which is similar toPyModule_AddObjectRef()andPyModule_AddObject(),
but always steals a reference to the value.
(Contributed by Serhiy Storchaka ingh-86493.)
- Add thePyObject_GenericHash()function
that implements the default hashing function of a Python object.
(Contributed by Serhiy Storchaka ingh-113024.)
- Add thePy_HashPointer()function to hash a raw pointer.
(Contributed by Victor Stinner ingh-111545.)
- Add thePyObject_VisitManagedDict()andPyObject_ClearManagedDict()functions.
which must be called by the traverse and clear functions of a type using
thePy_TPFLAGS_MANAGED_DICTflag.
Thepythoncapi-compat projectcan be used to
use these functions with Python 3.11 and 3.12.
(Contributed by Victor Stinner ingh-107073.)
- Add thePyRefTracer_SetTracer()andPyRefTracer_GetTracer()functions,
which enable tracking object creation and destruction
in the same way that thetracemallocmodule does.
(Contributed by Pablo Galindo ingh-93502.)
- Add thePySys_AuditTuple()function
as an alternative toPySys_Audit()that takes event arguments as a Pythontupleobject.
(Contributed by Victor Stinner ingh-85283.)
- Add thePyThreadState_GetUnchecked()function
as an alternative toPyThreadState_Get()that doesn’t kill the process with a fatal error if it isNULL.
The caller is responsible for checking if the result isNULL.
(Contributed by Victor Stinner ingh-108867.)
- Add thePyType_GetFullyQualifiedName()function
to get the type’s fully qualified name.
The module name is prepended iftype.__module__is
a string and is not equal to either'builtins'or'__main__'.
(Contributed by Victor Stinner ingh-111696.)
- Add thePyType_GetModuleName()function
to get the type’s module name. This is equivalent to getting thetype.__module__attribute.
(Contributed by Eric Snow and Victor Stinner ingh-111696.)
- Add thePyUnicode_EqualToUTF8AndSize()andPyUnicode_EqualToUTF8()functions
to compare a Unicode object with aconstchar*UTF-8 encoded string
and1if they are equal or0otherwise.
These functions do not raise exceptions.
(Contributed by Serhiy Storchaka ingh-110289.)
- Add thePyWeakref_GetRef()function
as an alternative toPyWeakref_GetObject()that returns astrong referenceorNULLif the referent is no longer live.
(Contributed by Victor Stinner ingh-105927.)
- Add fixed variants of functions which silently ignore errors:PyObject_HasAttrWithError()replacesPyObject_HasAttr().PyObject_HasAttrStringWithError()replacesPyObject_HasAttrString().PyMapping_HasKeyWithError()replacesPyMapping_HasKey().PyMapping_HasKeyStringWithError()replacesPyMapping_HasKeyString().The new functions return-1for errors
and the standard1for true and0for false.(Contributed by Serhiy Storchaka ingh-108511.)

Add thePyMonitoring C APIfor generatingPEP 669monitoring events:

- PyMonitoringState
- PyMonitoring_FirePyStartEvent()
- PyMonitoring_FirePyResumeEvent()
- PyMonitoring_FirePyReturnEvent()
- PyMonitoring_FirePyYieldEvent()
- PyMonitoring_FireCallEvent()
- PyMonitoring_FireLineEvent()
- PyMonitoring_FireJumpEvent()
- PyMonitoring_FireBranchEvent()
- PyMonitoring_FireCReturnEvent()
- PyMonitoring_FirePyThrowEvent()
- PyMonitoring_FireRaiseEvent()
- PyMonitoring_FireCRaiseEvent()
- PyMonitoring_FireReraiseEvent()
- PyMonitoring_FireExceptionHandledEvent()
- PyMonitoring_FirePyUnwindEvent()
- PyMonitoring_FireStopIterationEvent()
- PyMonitoring_EnterScope()
- PyMonitoring_ExitScope()

(Contributed by Irit Katriel ingh-111997).

```
PyMutex_Lock()
```

```
PyMutex_Unlock()
```

Add thePyTime C APIto provide access to system clocks:

- PyTime_MINandPyTime_MAX.
- PyTime_AsSecondsDouble().
- PyTime_Monotonic().
- PyTime_MonotonicRaw().
- PyTime_PerfCounter().
- PyTime_PerfCounterRaw().
- PyTime_Time().
- PyTime_TimeRaw().

```
PyTime_MIN
```

```
PyTime_MAX
```

```
PyTime_AsSecondsDouble()
```

```
PyTime_Monotonic()
```

```
PyTime_MonotonicRaw()
```

```
PyTime_PerfCounter()
```

```
PyTime_PerfCounterRaw()
```

```
PyTime_Time()
```

```
PyTime_TimeRaw()
```

(Contributed by Victor Stinner and Petr Viktorin ingh-110850.)

```
PyDict_ContainsString()
```

```
PyDict_Contains()
```

```
PyDict_GetItemRef()
```

```
PyDict_GetItemStringRef()
```

```
PyDict_GetItemWithError()
```

```
PyErr_Occurred()
```

```
PyDict_SetDefaultRef()
```

```
PyDict_SetDefault()
```

```
PyDict_Pop()
```

```
PyDict_PopString()
```

```
dict.pop()
```

```
PyMapping_GetOptionalItem()
```

```
PyMapping_GetOptionalItemString()
```

```
PyObject_GetItem()
```

```
PyMapping_GetItemString()
```

```
PyObject_GetOptionalAttr()
```

```
PyObject_GetOptionalAttrString()
```

```
PyObject_GetAttr()
```

```
PyObject_GetAttrString()
```

```
AttributeError
```

```
PyErr_FormatUnraisable()
```

```
PyErr_WriteUnraisable()
```

Add new functions that return astrong referenceinstead of aborrowed referencefor frame locals, globals, and builtins, as part ofPEP 667:

- PyEval_GetFrameBuiltins()replacesPyEval_GetBuiltins()
- PyEval_GetFrameGlobals()replacesPyEval_GetGlobals()
- PyEval_GetFrameLocals()replacesPyEval_GetLocals()

```
PyEval_GetFrameBuiltins()
```

```
PyEval_GetBuiltins()
```

```
PyEval_GetFrameGlobals()
```

```
PyEval_GetGlobals()
```

```
PyEval_GetFrameLocals()
```

```
PyEval_GetLocals()
```

(Contributed by Mark Shannon and Tian Gao ingh-74929.)

```
Py_GetConstant()
```

```
Py_GetConstantBorrowed()
```

```
Py_GetConstant(Py_CONSTANT_ZERO)
```

```
PyImport_AddModuleRef()
```

```
PyImport_AddModule()
```

```
Py_IsFinalizing()
```

```
PyList_GetItemRef()
```

```
PyList_GetItem()
```

```
PyList_Extend()
```

```
PyList_Clear()
```

```
list.extend()
```

```
list.clear()
```

```
PyLong_AsInt()
```

```
PyLong_AsLong()
```

```
PyLong_AsNativeBytes()
```

```
PyLong_FromNativeBytes()
```

```
PyLong_FromUnsignedNativeBytes()
```

```
PyModule_Add()
```

```
PyModule_AddObjectRef()
```

```
PyModule_AddObject()
```

```
PyObject_GenericHash()
```

```
Py_HashPointer()
```

```
PyObject_VisitManagedDict()
```

```
PyObject_ClearManagedDict()
```

```
Py_TPFLAGS_MANAGED_DICT
```

```
PyRefTracer_SetTracer()
```

```
PyRefTracer_GetTracer()
```

```
tracemalloc
```

```
PySys_AuditTuple()
```

```
PySys_Audit()
```

```
PyThreadState_GetUnchecked()
```

```
PyThreadState_Get()
```

```
PyType_GetFullyQualifiedName()
```

```
type.__module__
```

```
'builtins'
```

```
'__main__'
```

```
PyType_GetModuleName()
```

```
PyUnicode_EqualToUTF8AndSize()
```

```
PyUnicode_EqualToUTF8()
```

```
PyWeakref_GetRef()
```

```
PyWeakref_GetObject()
```

Add fixed variants of functions which silently ignore errors:

- PyObject_HasAttrWithError()replacesPyObject_HasAttr().
- PyObject_HasAttrStringWithError()replacesPyObject_HasAttrString().
- PyMapping_HasKeyWithError()replacesPyMapping_HasKey().
- PyMapping_HasKeyStringWithError()replacesPyMapping_HasKeyString().

```
PyObject_HasAttrWithError()
```

```
PyObject_HasAttr()
```

```
PyObject_HasAttrStringWithError()
```

```
PyObject_HasAttrString()
```

```
PyMapping_HasKeyWithError()
```

```
PyMapping_HasKey()
```

```
PyMapping_HasKeyStringWithError()
```

```
PyMapping_HasKeyString()
```

The new functions return-1for errors and the standard1for true and0for false.

(Contributed by Serhiy Storchaka ingh-108511.)

================================================================================

### Changed C APIs¶

- Thekeywordsparameter ofPyArg_ParseTupleAndKeywords()andPyArg_VaParseTupleAndKeywords()now has typechar*const*in C
andconstchar*const*in C++,
instead ofchar**.
In C++, this makes these functions compatible with arguments
of typeconstchar*const*,constchar**,
orchar*const*without an explicit type cast.
In C, the functions only support arguments of typechar*const*.
This can be overridden with thePY_CXX_CONSTmacro.
(Contributed by Serhiy Storchaka ingh-65210.)
- PyArg_ParseTupleAndKeywords()now supports
non-ASCII keyword parameter names.
(Contributed by Serhiy Storchaka ingh-110815.)
- ThePyCode_GetFirstFree()function is now unstable API
and is now namedPyUnstable_Code_GetFirstFree().
(Contributed by Bogdan Romanyuk ingh-115781.)
- ThePyDict_GetItem(),PyDict_GetItemString(),PyMapping_HasKey(),PyMapping_HasKeyString(),PyObject_HasAttr(),PyObject_HasAttrString(),
andPySys_GetObject()functions,
each of which clears all errors which occurred when calling them
now reports these errors usingsys.unraisablehook().
You may replace them with other functions as recommended in the documentation.
(Contributed by Serhiy Storchaka ingh-106672.)
- Add support for the%T,%#T,%Nand%#Nformats
toPyUnicode_FromFormat():%T: Get the fully qualified name of an object type%#T: As above, but use a colon as the separator%N: Get the fully qualified name of a type%#N: As above, but use a colon as the separatorSeePEP 737for more information.
(Contributed by Victor Stinner ingh-111696.)
- You no longer have to define thePY_SSIZE_T_CLEANmacro before
includingPython.hwhen using#formats informat codes.
APIs accepting the format codes always usePy_ssize_tfor#formats.
(Contributed by Inada Naoki ingh-104922.)
- If Python is built indebug modeorwithassertions,PyTuple_SET_ITEM()andPyList_SET_ITEM()now check the index argument with an assertion.
(Contributed by Victor Stinner ingh-106168.)

```
PyArg_ParseTupleAndKeywords()
```

```
PyArg_VaParseTupleAndKeywords()
```

```
PY_CXX_CONST
```

```
PyCode_GetFirstFree()
```

```
PyUnstable_Code_GetFirstFree()
```

```
PyDict_GetItem()
```

```
PyDict_GetItemString()
```

```
PySys_GetObject()
```

```
sys.unraisablehook()
```

Add support for the%T,%#T,%Nand%#Nformats toPyUnicode_FromFormat():

```
PyUnicode_FromFormat()
```

- %T: Get the fully qualified name of an object type
- %#T: As above, but use a colon as the separator
- %N: Get the fully qualified name of a type
- %#N: As above, but use a colon as the separator

SeePEP 737for more information. (Contributed by Victor Stinner ingh-111696.)

```
PY_SSIZE_T_CLEAN
```

```
Py_ssize_t
```

```
withassertions
```

```
PyTuple_SET_ITEM()
```

```
PyList_SET_ITEM()
```

================================================================================

### Limited C API Changes¶

- The following functions are now included in the Limited C API:PyMem_RawMalloc()PyMem_RawCalloc()PyMem_RawRealloc()PyMem_RawFree()PySys_Audit()PySys_AuditTuple()PyType_GetModuleByDef()(Contributed by Victor Stinner ingh-85283,gh-85283, andgh-116936.)
- Python built with--with-trace-refs(tracing references)
now supports theLimited API.
(Contributed by Victor Stinner ingh-108634.)

The following functions are now included in the Limited C API:

- PyMem_RawMalloc()
- PyMem_RawCalloc()
- PyMem_RawRealloc()
- PyMem_RawFree()
- PySys_Audit()
- PySys_AuditTuple()
- PyType_GetModuleByDef()

(Contributed by Victor Stinner ingh-85283,gh-85283, andgh-116936.)

```
--with-trace-refs
```

================================================================================

### Removed C APIs¶

- Remove several functions, macros, variables, etc
with names prefixed by_Pyor_PY(which are considered private).
If your project is affected  by one of these removals
and you believe that the removed API should remain available,
pleaseopen a new issueto request a public C API
and addcc:@vstinnerto the issue to notify Victor Stinner.
(Contributed by Victor Stinner ingh-106320.)
- Remove old buffer protocols deprecated in Python 3.0.
UseBuffer Protocolinstead.PyObject_CheckReadBuffer():
UsePyObject_CheckBuffer()to test
whether the object supports the buffer protocol.
Note thatPyObject_CheckBuffer()doesn’t guarantee
thatPyObject_GetBuffer()will succeed.
To test if the object is actually readable,
see the next example ofPyObject_GetBuffer().PyObject_AsCharBuffer(),PyObject_AsReadBuffer():
UsePyObject_GetBuffer()andPyBuffer_Release()instead:Py_bufferview;if(PyObject_GetBuffer(obj,&view,PyBUF_SIMPLE)<0){returnNULL;}// Use `view.buf` and `view.len` to read from the buffer.// You may need to cast buf as `(const char*)view.buf`.PyBuffer_Release(&view);PyObject_AsWriteBuffer():
UsePyObject_GetBuffer()andPyBuffer_Release()instead:Py_bufferview;if(PyObject_GetBuffer(obj,&view,PyBUF_WRITABLE)<0){returnNULL;}// Use `view.buf` and `view.len` to write to the buffer.PyBuffer_Release(&view);(Contributed by Inada Naoki ingh-85275.)
- Remove various functions deprecated in Python 3.9:PyEval_CallObject(),PyEval_CallObjectWithKeywords():
UsePyObject_CallNoArgs()orPyObject_Call()instead.WarningInPyObject_Call(), positional arguments must be atupleand must not beNULL,
and keyword arguments must be adictorNULL,
whereas the removed functions checked argument types
and acceptedNULLpositional and keyword arguments.
To replacePyEval_CallObjectWithKeywords(func,NULL,kwargs)withPyObject_Call(),
pass an empty tuple as positional arguments usingPyTuple_New(0).PyEval_CallFunction():
UsePyObject_CallFunction()instead.PyEval_CallMethod():
UsePyObject_CallMethod()instead.PyCFunction_Call():
UsePyObject_Call()instead.(Contributed by Victor Stinner ingh-105107.)
- Remove the following old functions to configure the Python initialization,
deprecated in Python 3.11:PySys_AddWarnOptionUnicode():
UsePyConfig.warnoptionsinstead.PySys_AddWarnOption():
UsePyConfig.warnoptionsinstead.PySys_AddXOption():
UsePyConfig.xoptionsinstead.PySys_HasWarnOptions():
UsePyConfig.xoptionsinstead.PySys_SetPath():
SetPyConfig.module_search_pathsinstead.Py_SetPath():
SetPyConfig.module_search_pathsinstead.Py_SetStandardStreamEncoding():
SetPyConfig.stdio_encodinginstead,
and set also maybePyConfig.legacy_windows_stdio(on Windows)._Py_SetProgramFullPath():
SetPyConfig.executableinstead.Use the newPyConfigAPI of thePython Initialization
Configurationinstead (PEP 587), added to Python 3.8.
(Contributed by Victor Stinner ingh-105145.)
- RemovePyEval_AcquireLock()andPyEval_ReleaseLock()functions,
deprecated in Python 3.2.
They didn’t update the current thread state.
They can be replaced with:PyEval_SaveThread()andPyEval_RestoreThread();low-levelPyEval_AcquireThread()andPyEval_RestoreThread();orPyGILState_Ensure()andPyGILState_Release().(Contributed by Victor Stinner ingh-105182.)
- Remove thePyEval_ThreadsInitialized()function,
deprecated in Python 3.9.
Since Python 3.7,Py_Initialize()always creates the GIL:
callingPyEval_InitThreads()does nothing andPyEval_ThreadsInitialized()always returns non-zero.
(Contributed by Victor Stinner ingh-105182.)
- Remove the_PyInterpreterState_Get()alias toPyInterpreterState_Get()which was kept for backward compatibility with Python 3.8.
Thepythoncapi-compat projectcan be used to getPyInterpreterState_Get()on Python 3.8 and older.
(Contributed by Victor Stinner ingh-106320.)
- Remove the private_PyObject_FastCall()function:
usePyObject_Vectorcall()which is available since Python 3.8
(PEP 590).
(Contributed by Victor Stinner ingh-106023.)
- Remove thecpython/pytime.hheader file,
which only contained private functions.
(Contributed by Victor Stinner ingh-106316.)
- Remove the undocumentedPY_TIMEOUT_MAXconstant from the limited C API.
(Contributed by Victor Stinner ingh-110014.)
- Remove the old trashcan macrosPy_TRASHCAN_SAFE_BEGINandPy_TRASHCAN_SAFE_END.
Replace both with the new macrosPy_TRASHCAN_BEGINandPy_TRASHCAN_END.
(Contributed by Irit Katriel ingh-105111.)

```
cc:@vstinner
```

Remove old buffer protocols deprecated in Python 3.0. UseBuffer Protocolinstead.

- PyObject_CheckReadBuffer():
UsePyObject_CheckBuffer()to test
whether the object supports the buffer protocol.
Note thatPyObject_CheckBuffer()doesn’t guarantee
thatPyObject_GetBuffer()will succeed.
To test if the object is actually readable,
see the next example ofPyObject_GetBuffer().
- PyObject_AsCharBuffer(),PyObject_AsReadBuffer():
UsePyObject_GetBuffer()andPyBuffer_Release()instead:Py_bufferview;if(PyObject_GetBuffer(obj,&view,PyBUF_SIMPLE)<0){returnNULL;}// Use `view.buf` and `view.len` to read from the buffer.// You may need to cast buf as `(const char*)view.buf`.PyBuffer_Release(&view);
- PyObject_AsWriteBuffer():
UsePyObject_GetBuffer()andPyBuffer_Release()instead:Py_bufferview;if(PyObject_GetBuffer(obj,&view,PyBUF_WRITABLE)<0){returnNULL;}// Use `view.buf` and `view.len` to write to the buffer.PyBuffer_Release(&view);

```
PyObject_CheckReadBuffer()
```

```
PyObject_CheckBuffer()
```

```
PyObject_GetBuffer()
```

PyObject_AsCharBuffer(),PyObject_AsReadBuffer(): UsePyObject_GetBuffer()andPyBuffer_Release()instead:

```
PyObject_AsCharBuffer()
```

```
PyObject_AsReadBuffer()
```

```
PyBuffer_Release()
```

```
Py_bufferview;if(PyObject_GetBuffer(obj,&view,PyBUF_SIMPLE)<0){returnNULL;}// Use `view.buf` and `view.len` to read from the buffer.// You may need to cast buf as `(const char*)view.buf`.PyBuffer_Release(&view);
```

PyObject_AsWriteBuffer(): UsePyObject_GetBuffer()andPyBuffer_Release()instead:

```
PyObject_AsWriteBuffer()
```

```
Py_bufferview;if(PyObject_GetBuffer(obj,&view,PyBUF_WRITABLE)<0){returnNULL;}// Use `view.buf` and `view.len` to write to the buffer.PyBuffer_Release(&view);
```

(Contributed by Inada Naoki ingh-85275.)

Remove various functions deprecated in Python 3.9:

- PyEval_CallObject(),PyEval_CallObjectWithKeywords():
UsePyObject_CallNoArgs()orPyObject_Call()instead.WarningInPyObject_Call(), positional arguments must be atupleand must not beNULL,
and keyword arguments must be adictorNULL,
whereas the removed functions checked argument types
and acceptedNULLpositional and keyword arguments.
To replacePyEval_CallObjectWithKeywords(func,NULL,kwargs)withPyObject_Call(),
pass an empty tuple as positional arguments usingPyTuple_New(0).
- PyEval_CallFunction():
UsePyObject_CallFunction()instead.
- PyEval_CallMethod():
UsePyObject_CallMethod()instead.
- PyCFunction_Call():
UsePyObject_Call()instead.

PyEval_CallObject(),PyEval_CallObjectWithKeywords(): UsePyObject_CallNoArgs()orPyObject_Call()instead.

```
PyEval_CallObject()
```

```
PyEval_CallObjectWithKeywords()
```

```
PyObject_CallNoArgs()
```

```
PyObject_Call()
```

InPyObject_Call(), positional arguments must be atupleand must not beNULL, and keyword arguments must be adictorNULL, whereas the removed functions checked argument types and acceptedNULLpositional and keyword arguments. To replacePyEval_CallObjectWithKeywords(func,NULL,kwargs)withPyObject_Call(), pass an empty tuple as positional arguments usingPyTuple_New(0).

```
PyEval_CallObjectWithKeywords(func,NULL,kwargs)
```

```
PyTuple_New(0)
```

```
PyEval_CallFunction()
```

```
PyObject_CallFunction()
```

```
PyEval_CallMethod()
```

```
PyObject_CallMethod()
```

```
PyCFunction_Call()
```

(Contributed by Victor Stinner ingh-105107.)

Remove the following old functions to configure the Python initialization, deprecated in Python 3.11:

- PySys_AddWarnOptionUnicode():
UsePyConfig.warnoptionsinstead.
- PySys_AddWarnOption():
UsePyConfig.warnoptionsinstead.
- PySys_AddXOption():
UsePyConfig.xoptionsinstead.
- PySys_HasWarnOptions():
UsePyConfig.xoptionsinstead.
- PySys_SetPath():
SetPyConfig.module_search_pathsinstead.
- Py_SetPath():
SetPyConfig.module_search_pathsinstead.
- Py_SetStandardStreamEncoding():
SetPyConfig.stdio_encodinginstead,
and set also maybePyConfig.legacy_windows_stdio(on Windows).
- _Py_SetProgramFullPath():
SetPyConfig.executableinstead.

```
PySys_AddWarnOptionUnicode()
```

```
PyConfig.warnoptions
```

```
PySys_AddWarnOption()
```

```
PySys_AddXOption()
```

```
PyConfig.xoptions
```

```
PySys_HasWarnOptions()
```

```
PySys_SetPath()
```

```
PyConfig.module_search_paths
```

```
Py_SetPath()
```

```
Py_SetStandardStreamEncoding()
```

```
PyConfig.stdio_encoding
```

```
PyConfig.legacy_windows_stdio
```

```
_Py_SetProgramFullPath()
```

```
PyConfig.executable
```

Use the newPyConfigAPI of thePython Initialization Configurationinstead (PEP 587), added to Python 3.8. (Contributed by Victor Stinner ingh-105145.)

RemovePyEval_AcquireLock()andPyEval_ReleaseLock()functions, deprecated in Python 3.2. They didn’t update the current thread state. They can be replaced with:

```
PyEval_AcquireLock()
```

```
PyEval_ReleaseLock()
```

- PyEval_SaveThread()andPyEval_RestoreThread();
- low-levelPyEval_AcquireThread()andPyEval_RestoreThread();
- orPyGILState_Ensure()andPyGILState_Release().

```
PyEval_SaveThread()
```

```
PyEval_RestoreThread()
```

```
PyEval_AcquireThread()
```

```
PyGILState_Ensure()
```

```
PyGILState_Release()
```

(Contributed by Victor Stinner ingh-105182.)

```
PyEval_ThreadsInitialized()
```

```
Py_Initialize()
```

```
PyEval_InitThreads()
```

```
_PyInterpreterState_Get()
```

```
PyInterpreterState_Get()
```

```
_PyObject_FastCall()
```

```
PyObject_Vectorcall()
```

```
cpython/pytime.h
```

```
PY_TIMEOUT_MAX
```

```
Py_TRASHCAN_SAFE_BEGIN
```

```
Py_TRASHCAN_SAFE_END
```

```
Py_TRASHCAN_BEGIN
```

```
Py_TRASHCAN_END
```

================================================================================

### Deprecated C APIs¶

- Deprecate old Python initialization functions:PySys_ResetWarnOptions():
Clearsys.warnoptionsandwarnings.filtersinstead.Py_GetExecPrefix():
Getsys.exec_prefixinstead.Py_GetPath():
Getsys.pathinstead.Py_GetPrefix():
Getsys.prefixinstead.Py_GetProgramFullPath():
Getsys.executableinstead.Py_GetProgramName():
Getsys.executableinstead.Py_GetPythonHome():
GetPyConfig.homeor thePYTHONHOMEenvironment variable instead.(Contributed by Victor Stinner ingh-105145.)
- Soft deprecatethePyEval_GetBuiltins(),PyEval_GetGlobals(),
andPyEval_GetLocals()functions,
which return aborrowed reference.
(Soft deprecated as part ofPEP 667.)
- Deprecate thePyImport_ImportModuleNoBlock()function,
which is just an alias toPyImport_ImportModule()since Python 3.3.
(Contributed by Victor Stinner ingh-105396.)
- Soft deprecatethePyModule_AddObject()function.
It should be replaced withPyModule_Add()orPyModule_AddObjectRef().
(Contributed by Serhiy Storchaka ingh-86493.)
- Deprecate the oldPy_UNICODEandPY_UNICODE_TYPEtypes
and thePy_UNICODE_WIDEdefine.
Use thewchar_ttype directly instead.
Since Python 3.3,Py_UNICODEandPY_UNICODE_TYPEare just aliases towchar_t.
(Contributed by Victor Stinner ingh-105156.)
- Deprecate thePyWeakref_GetObject()andPyWeakref_GET_OBJECT()functions,
which return aborrowed reference.
Replace them with the newPyWeakref_GetRef()function,
which returns astrong reference.
Thepythoncapi-compat projectcan be used to getPyWeakref_GetRef()on Python 3.12 and older.
(Contributed by Victor Stinner ingh-105927.)

Deprecate old Python initialization functions:

- PySys_ResetWarnOptions():
Clearsys.warnoptionsandwarnings.filtersinstead.
- Py_GetExecPrefix():
Getsys.exec_prefixinstead.
- Py_GetPath():
Getsys.pathinstead.
- Py_GetPrefix():
Getsys.prefixinstead.
- Py_GetProgramFullPath():
Getsys.executableinstead.
- Py_GetProgramName():
Getsys.executableinstead.
- Py_GetPythonHome():
GetPyConfig.homeor thePYTHONHOMEenvironment variable instead.

```
PySys_ResetWarnOptions()
```

```
sys.warnoptions
```

```
warnings.filters
```

```
Py_GetExecPrefix()
```

```
sys.exec_prefix
```

```
Py_GetPath()
```

```
Py_GetPrefix()
```

```
sys.prefix
```

```
Py_GetProgramFullPath()
```

```
sys.executable
```

```
Py_GetProgramName()
```

```
Py_GetPythonHome()
```

```
PyConfig.home
```

```
PYTHONHOME
```

(Contributed by Victor Stinner ingh-105145.)

```
PyImport_ImportModuleNoBlock()
```

```
PyImport_ImportModule()
```

```
Py_UNICODE
```

```
PY_UNICODE_TYPE
```

```
Py_UNICODE_WIDE
```

```
PyWeakref_GET_OBJECT()
```

================================================================================

#### Pending Removal in Python 3.14¶

- Thema_version_tagfield inPyDictObjectfor extension modules
(PEP 699;gh-101193).
- Creatingimmutabletypeswith mutable
bases (gh-95388).
- Functions to configure Python’s initialization, deprecated in Python 3.11:PySys_SetArgvEx():
SetPyConfig.argvinstead.PySys_SetArgv():
SetPyConfig.argvinstead.Py_SetProgramName():
SetPyConfig.program_nameinstead.Py_SetPythonHome():
SetPyConfig.homeinstead.ThePy_InitializeFromConfig()API should be used withPyConfiginstead.
- Global configuration variables:Py_DebugFlag:
UsePyConfig.parser_debuginstead.Py_VerboseFlag:
UsePyConfig.verboseinstead.Py_QuietFlag:
UsePyConfig.quietinstead.Py_InteractiveFlag:
UsePyConfig.interactiveinstead.Py_InspectFlag:
UsePyConfig.inspectinstead.Py_OptimizeFlag:
UsePyConfig.optimization_levelinstead.Py_NoSiteFlag:
UsePyConfig.site_importinstead.Py_BytesWarningFlag:
UsePyConfig.bytes_warninginstead.Py_FrozenFlag:
UsePyConfig.pathconfig_warningsinstead.Py_IgnoreEnvironmentFlag:
UsePyConfig.use_environmentinstead.Py_DontWriteBytecodeFlag:
UsePyConfig.write_bytecodeinstead.Py_NoUserSiteDirectory:
UsePyConfig.user_site_directoryinstead.Py_UnbufferedStdioFlag:
UsePyConfig.buffered_stdioinstead.Py_HashRandomizationFlag:
UsePyConfig.use_hash_seedandPyConfig.hash_seedinstead.Py_IsolatedFlag:
UsePyConfig.isolatedinstead.Py_LegacyWindowsFSEncodingFlag:
UsePyPreConfig.legacy_windows_fs_encodinginstead.Py_LegacyWindowsStdioFlag:
UsePyConfig.legacy_windows_stdioinstead.Py_FileSystemDefaultEncoding:
UsePyConfig.filesystem_encodinginstead.Py_HasFileSystemDefaultEncoding:
UsePyConfig.filesystem_encodinginstead.Py_FileSystemDefaultEncodeErrors:
UsePyConfig.filesystem_errorsinstead.Py_UTF8Mode:
UsePyPreConfig.utf8_modeinstead.
(seePy_PreInitialize())ThePy_InitializeFromConfig()API should be used withPyConfiginstead.

```
ma_version_tag
```

```
PyDictObject
```

```
immutabletypes
```

Functions to configure Python’s initialization, deprecated in Python 3.11:

- PySys_SetArgvEx():
SetPyConfig.argvinstead.
- PySys_SetArgv():
SetPyConfig.argvinstead.
- Py_SetProgramName():
SetPyConfig.program_nameinstead.
- Py_SetPythonHome():
SetPyConfig.homeinstead.

```
PySys_SetArgvEx()
```

```
PyConfig.argv
```

```
PySys_SetArgv()
```

```
Py_SetProgramName()
```

```
PyConfig.program_name
```

```
Py_SetPythonHome()
```

ThePy_InitializeFromConfig()API should be used withPyConfiginstead.

```
Py_InitializeFromConfig()
```

Global configuration variables:

- Py_DebugFlag:
UsePyConfig.parser_debuginstead.
- Py_VerboseFlag:
UsePyConfig.verboseinstead.
- Py_QuietFlag:
UsePyConfig.quietinstead.
- Py_InteractiveFlag:
UsePyConfig.interactiveinstead.
- Py_InspectFlag:
UsePyConfig.inspectinstead.
- Py_OptimizeFlag:
UsePyConfig.optimization_levelinstead.
- Py_NoSiteFlag:
UsePyConfig.site_importinstead.
- Py_BytesWarningFlag:
UsePyConfig.bytes_warninginstead.
- Py_FrozenFlag:
UsePyConfig.pathconfig_warningsinstead.
- Py_IgnoreEnvironmentFlag:
UsePyConfig.use_environmentinstead.
- Py_DontWriteBytecodeFlag:
UsePyConfig.write_bytecodeinstead.
- Py_NoUserSiteDirectory:
UsePyConfig.user_site_directoryinstead.
- Py_UnbufferedStdioFlag:
UsePyConfig.buffered_stdioinstead.
- Py_HashRandomizationFlag:
UsePyConfig.use_hash_seedandPyConfig.hash_seedinstead.
- Py_IsolatedFlag:
UsePyConfig.isolatedinstead.
- Py_LegacyWindowsFSEncodingFlag:
UsePyPreConfig.legacy_windows_fs_encodinginstead.
- Py_LegacyWindowsStdioFlag:
UsePyConfig.legacy_windows_stdioinstead.
- Py_FileSystemDefaultEncoding:
UsePyConfig.filesystem_encodinginstead.
- Py_HasFileSystemDefaultEncoding:
UsePyConfig.filesystem_encodinginstead.
- Py_FileSystemDefaultEncodeErrors:
UsePyConfig.filesystem_errorsinstead.
- Py_UTF8Mode:
UsePyPreConfig.utf8_modeinstead.
(seePy_PreInitialize())

```
Py_DebugFlag
```

```
PyConfig.parser_debug
```

```
Py_VerboseFlag
```

```
PyConfig.verbose
```

```
Py_QuietFlag
```

```
PyConfig.quiet
```

```
Py_InteractiveFlag
```

```
PyConfig.interactive
```

```
Py_InspectFlag
```

```
PyConfig.inspect
```

```
Py_OptimizeFlag
```

```
PyConfig.optimization_level
```

```
Py_NoSiteFlag
```

```
PyConfig.site_import
```

```
Py_BytesWarningFlag
```

```
PyConfig.bytes_warning
```

```
Py_FrozenFlag
```

```
PyConfig.pathconfig_warnings
```

```
Py_IgnoreEnvironmentFlag
```

```
PyConfig.use_environment
```

```
Py_DontWriteBytecodeFlag
```

```
PyConfig.write_bytecode
```

```
Py_NoUserSiteDirectory
```

```
PyConfig.user_site_directory
```

```
Py_UnbufferedStdioFlag
```

```
PyConfig.buffered_stdio
```

```
Py_HashRandomizationFlag
```

```
PyConfig.use_hash_seed
```

```
PyConfig.hash_seed
```

```
Py_IsolatedFlag
```

```
PyConfig.isolated
```

```
Py_LegacyWindowsFSEncodingFlag
```

```
PyPreConfig.legacy_windows_fs_encoding
```

```
Py_LegacyWindowsStdioFlag
```

```
Py_FileSystemDefaultEncoding
```

```
PyConfig.filesystem_encoding
```

```
Py_HasFileSystemDefaultEncoding
```

```
Py_FileSystemDefaultEncodeErrors
```

```
PyConfig.filesystem_errors
```

```
Py_UTF8Mode
```

```
PyPreConfig.utf8_mode
```

```
Py_PreInitialize()
```

================================================================================

#### Pending Removal in Python 3.15¶

- The bundled copy oflibmpdecimal.
- ThePyImport_ImportModuleNoBlock():
UsePyImport_ImportModule()instead.
- PyWeakref_GetObject()andPyWeakref_GET_OBJECT():
UsePyWeakref_GetRef()instead.
- Py_UNICODEtype and thePy_UNICODE_WIDEmacro:
Usewchar_tinstead.
- Python initialization functions:PySys_ResetWarnOptions():
Clearsys.warnoptionsandwarnings.filtersinstead.Py_GetExecPrefix():
Getsys.base_exec_prefixandsys.exec_prefixinstead.Py_GetPath():
Getsys.pathinstead.Py_GetPrefix():
Getsys.base_prefixandsys.prefixinstead.Py_GetProgramFullPath():
Getsys.executableinstead.Py_GetProgramName():
Getsys.executableinstead.Py_GetPythonHome():
GetPyConfig.homeor thePYTHONHOMEenvironment variable instead.

```
libmpdecimal
```

Python initialization functions:

- Py_GetExecPrefix():
Getsys.base_exec_prefixandsys.exec_prefixinstead.
- Py_GetPrefix():
Getsys.base_prefixandsys.prefixinstead.

```
sys.base_exec_prefix
```

```
sys.base_prefix
```

================================================================================

#### Pending Removal in Future Versions¶

The following APIs are deprecated and will be removed, although there is currently no date scheduled for their removal.

- Py_TPFLAGS_HAVE_FINALIZE:
Unneeded since Python 3.8.
- PyErr_Fetch():
UsePyErr_GetRaisedException()instead.
- PyErr_NormalizeException():
UsePyErr_GetRaisedException()instead.
- PyErr_Restore():
UsePyErr_SetRaisedException()instead.
- PyModule_GetFilename():
UsePyModule_GetFilenameObject()instead.
- PyOS_AfterFork():
UsePyOS_AfterFork_Child()instead.
- PySlice_GetIndicesEx():
UsePySlice_Unpack()andPySlice_AdjustIndices()instead.
- PyUnicode_AsDecodedObject():
UsePyCodec_Decode()instead.
- PyUnicode_AsDecodedUnicode():
UsePyCodec_Decode()instead.
- PyUnicode_AsEncodedObject():
UsePyCodec_Encode()instead.
- PyUnicode_AsEncodedUnicode():
UsePyCodec_Encode()instead.
- PyUnicode_READY():
Unneeded since Python 3.12
- PyErr_Display():
UsePyErr_DisplayException()instead.
- _PyErr_ChainExceptions():
Use_PyErr_ChainExceptions1()instead.
- PyBytesObject.ob_shashmember:
callPyObject_Hash()instead.
- PyDictObject.ma_version_tagmember.
- Thread Local Storage (TLS) API:PyThread_create_key():
UsePyThread_tss_alloc()instead.PyThread_delete_key():
UsePyThread_tss_free()instead.PyThread_set_key_value():
UsePyThread_tss_set()instead.PyThread_get_key_value():
UsePyThread_tss_get()instead.PyThread_delete_key_value():
UsePyThread_tss_delete()instead.PyThread_ReInitTLS():
Unneeded since Python 3.7.

```
Py_TPFLAGS_HAVE_FINALIZE
```

```
PyErr_Fetch()
```

```
PyErr_GetRaisedException()
```

```
PyErr_NormalizeException()
```

```
PyErr_Restore()
```

```
PyErr_SetRaisedException()
```

```
PyModule_GetFilename()
```

```
PyModule_GetFilenameObject()
```

```
PyOS_AfterFork()
```

```
PyOS_AfterFork_Child()
```

```
PySlice_GetIndicesEx()
```

```
PySlice_Unpack()
```

```
PySlice_AdjustIndices()
```

```
PyUnicode_AsDecodedObject()
```

```
PyCodec_Decode()
```

```
PyUnicode_AsDecodedUnicode()
```

```
PyUnicode_AsEncodedObject()
```

```
PyCodec_Encode()
```

```
PyUnicode_AsEncodedUnicode()
```

```
PyUnicode_READY()
```

```
PyErr_Display()
```

```
PyErr_DisplayException()
```

```
_PyErr_ChainExceptions()
```

```
_PyErr_ChainExceptions1()
```

```
PyBytesObject.ob_shash
```

```
PyObject_Hash()
```

```
PyDictObject.ma_version_tag
```

Thread Local Storage (TLS) API:

- PyThread_create_key():
UsePyThread_tss_alloc()instead.
- PyThread_delete_key():
UsePyThread_tss_free()instead.
- PyThread_set_key_value():
UsePyThread_tss_set()instead.
- PyThread_get_key_value():
UsePyThread_tss_get()instead.
- PyThread_delete_key_value():
UsePyThread_tss_delete()instead.
- PyThread_ReInitTLS():
Unneeded since Python 3.7.

```
PyThread_create_key()
```

```
PyThread_tss_alloc()
```

```
PyThread_delete_key()
```

```
PyThread_tss_free()
```

```
PyThread_set_key_value()
```

```
PyThread_tss_set()
```

```
PyThread_get_key_value()
```

```
PyThread_tss_get()
```

```
PyThread_delete_key_value()
```

```
PyThread_tss_delete()
```

```
PyThread_ReInitTLS()
```

================================================================================

## Build Changes¶

- arm64-apple-iosandarm64-apple-ios-simulatorare both
nowPEP 11tier 3 platforms.
(PEP 730written
and implementation contributed by Russell Keith-Magee ingh-114099.)
- aarch64-linux-androidandx86_64-linux-androidare both
nowPEP 11tier 3 platforms.
(PEP 738written
and implementation contributed by Malcolm Smith ingh-116622.)
- wasm32-wasiis now aPEP 11tier 2 platform.
(Contributed by Brett Cannon ingh-115192.)
- wasm32-emscriptenis no longer aPEP 11supported platform.
(Contributed by Brett Cannon ingh-115192.)
- Building CPython now requires a compiler with support for the C11 atomic
library, GCC built-in atomic functions, or MSVC interlocked intrinsics.
- Autoconf 2.71 and aclocal 1.16.5 are now required to regenerate
theconfigurescript.
(Contributed by Christian Heimes ingh-89886and by Victor Stinner ingh-112090.)
- SQLite 3.15.2 or newer is required to build
thesqlite3extension module.
(Contributed by Erlend Aasland ingh-105875.)
- CPython now bundles themimalloc libraryby default.
It is licensed under the MIT license;
seemimalloc license.
The bundled mimalloc has custom changes, seegh-113141for details.
(Contributed by Dino Viehland ingh-109914.)
- Theconfigureoption--with-system-libmpdecnow defaults toyes.
The bundled copy oflibmpdecimalwill be removed in Python 3.15.
- Python built withconfigure--with-trace-refs(tracing references) is now ABI compatible with the Python release build
anddebug build.
(Contributed by Victor Stinner ingh-108634.)
- On POSIX systems, the pkg-config (.pc) filenames now include the ABI
flags.  For example, the free-threaded build generatespython-3.13t.pcand the debug build generatespython-3.13d.pc.
- Theerrno,fcntl,grp,md5,pwd,resource,termios,winsound,_ctypes_test,_multiprocessing.posixshmem,_scproxy,_stat,_statistics,_testconsole,_testimportmultipleand_uuidC extensions are now built with thelimited C API.
(Contributed by Victor Stinner ingh-85283.)

```
--with-system-libmpdec
```

```
python-3.13t.pc
```

```
python-3.13d.pc
```

```
_ctypes_test
```

```
_multiprocessing.posixshmem
```

```
_statistics
```

```
_testconsole
```

```
_testimportmultiple
```

================================================================================

## Porting to Python 3.13¶

This section lists previously described changes and other bugfixes that may require changes to your code.

================================================================================

### Changes in the Python API¶

- PEP 667introduces several changes
to the semantics oflocals()andf_locals:Callinglocals()in anoptimized scopenow produces an
independent snapshot on each call, and hence no longer implicitly updates
previously returned references. Obtaining the legacy CPython behavior now
requires explicit calls to update the initially returned dictionary with the
results of subsequent calls tolocals(). Code execution functions that
implicitly targetlocals()(such asexecandeval) must be
passed an explicit namespace to access their results in an optimized scope.
(Changed as part ofPEP 667.)Callinglocals()from a comprehension at module or class scope
(including viaexecoreval) once more behaves as if the comprehension
were running as an independent nested function (i.e. the local variables from
the containing scope are not included). In Python 3.12, this had changed
to include the local variables from the containing scope when implementingPEP 709. (Changed as part ofPEP 667.)AccessingFrameType.f_localsin anoptimized scopenow returns a write-through proxy rather than a
snapshot that gets updated at ill-specified times. If a snapshot is desired,
it must be created explicitly withdictor the proxy’s.copy()method.
(Changed as part ofPEP 667.)
- functools.partialnow emits aFutureWarningwhen used as a method.
The behavior will change in future Python versions.
Wrap it instaticmethod()if you want to preserve the old behavior.
(Contributed by Serhiy Storchaka ingh-121027.)
- AnOSErroris now raised bygetpass.getuser()for any failure to retrieve a username,
instead ofImportErroron non-Unix platforms
orKeyErroron Unix platforms where the password database is empty.
- The value of themodeattribute ofgzip.GzipFileis now a string ('rb'or'wb') instead of an integer (1or2).
The value of themodeattribute of the readable file-like object
returned byzipfile.ZipFile.open()is now'rb'instead of'r'.
(Contributed by Serhiy Storchaka ingh-115961.)
- mailbox.Maildirnow ignores files with a leading dot (.).
(Contributed by Zackery Spytz ingh-65559.)
- pathlib.Path.glob()andrglob()now return both
files and directories if a pattern that ends with “**” is given,
rather than directories only.
Add a trailing slash to keep the previous behavior and only match directories.
- Thethreadingmodule now expects the_threadmodule
to have an_is_main_interpreter()function.
This function takes no arguments and returnsTrueif the current interpreter is the main interpreter.Any library or application that provides a custom_threadmodule
must provide_is_main_interpreter(),
just like the module’s other “private” attributes.
(gh-112826.)

PEP 667introduces several changes to the semantics oflocals()andf_locals:

- Callinglocals()in anoptimized scopenow produces an
independent snapshot on each call, and hence no longer implicitly updates
previously returned references. Obtaining the legacy CPython behavior now
requires explicit calls to update the initially returned dictionary with the
results of subsequent calls tolocals(). Code execution functions that
implicitly targetlocals()(such asexecandeval) must be
passed an explicit namespace to access their results in an optimized scope.
(Changed as part ofPEP 667.)
- Callinglocals()from a comprehension at module or class scope
(including viaexecoreval) once more behaves as if the comprehension
were running as an independent nested function (i.e. the local variables from
the containing scope are not included). In Python 3.12, this had changed
to include the local variables from the containing scope when implementingPEP 709. (Changed as part ofPEP 667.)
- AccessingFrameType.f_localsin anoptimized scopenow returns a write-through proxy rather than a
snapshot that gets updated at ill-specified times. If a snapshot is desired,
it must be created explicitly withdictor the proxy’s.copy()method.
(Changed as part ofPEP 667.)

```
functools.partial
```

```
FutureWarning
```

```
staticmethod()
```

```
getpass.getuser()
```

```
ImportError
```

```
gzip.GzipFile
```

```
zipfile.ZipFile.open()
```

```
mailbox.Maildir
```

```
pathlib.Path.glob()
```

Thethreadingmodule now expects the_threadmodule to have an_is_main_interpreter()function. This function takes no arguments and returnsTrueif the current interpreter is the main interpreter.

```
_is_main_interpreter()
```

Any library or application that provides a custom_threadmodule must provide_is_main_interpreter(), just like the module’s other “private” attributes. (gh-112826.)

================================================================================

### Changes in the C API¶

- Python.hno longer includes the<ieeefp.h>standard header. It was
included for thefinite()function which is now provided by the<math.h>header. It should now be included explicitly if needed. Remove
also theHAVE_IEEEFP_Hmacro.
(Contributed by Victor Stinner ingh-108765.)
- Python.hno longer includes these standard header files:<time.h>,<sys/select.h>and<sys/time.h>. If needed, they should now be
included explicitly. For example,<time.h>provides theclock()andgmtime()functions,<sys/select.h>provides theselect()function, and<sys/time.h>provides thefutimes(),gettimeofday()andsetitimer()functions.
(Contributed by Victor Stinner ingh-108765.)
- On Windows,Python.hno longer includes the<stddef.h>standard
header file. If needed, it should now be included explicitly. For example, it
providesoffsetof()function, andsize_tandptrdiff_ttypes.
Including<stddef.h>explicitly was already needed by all other
platforms, theHAVE_STDDEF_Hmacro is only defined on Windows.
(Contributed by Victor Stinner ingh-108765.)
- If thePy_LIMITED_APImacro is defined,Py_BUILD_CORE,Py_BUILD_CORE_BUILTINandPy_BUILD_CORE_MODULEmacros
are now undefined by<Python.h>.
(Contributed by Victor Stinner ingh-85283.)
- The old trashcan macrosPy_TRASHCAN_SAFE_BEGINandPy_TRASHCAN_SAFE_ENDwere removed. They should be replaced by the new macrosPy_TRASHCAN_BEGINandPy_TRASHCAN_END.Atp_deallocfunction that has the old macros, such as:staticvoidmytype_dealloc(mytype*p){PyObject_GC_UnTrack(p);Py_TRASHCAN_SAFE_BEGIN(p);...Py_TRASHCAN_SAFE_END}should migrate to the new macros as follows:staticvoidmytype_dealloc(mytype*p){PyObject_GC_UnTrack(p);Py_TRASHCAN_BEGIN(p,mytype_dealloc)...Py_TRASHCAN_END}Note thatPy_TRASHCAN_BEGINhas a second argument which
should be the deallocation function it is in. The new macros were
added in Python 3.8 and the old macros were deprecated in Python 3.11.
(Contributed by Irit Katriel ingh-105111.)

```
<ieeefp.h>
```

```
HAVE_IEEEFP_H
```

```
<sys/select.h>
```

```
<sys/time.h>
```

```
gettimeofday()
```

```
setitimer()
```

```
<stddef.h>
```

```
offsetof()
```

```
HAVE_STDDEF_H
```

```
Py_LIMITED_API
```

```
Py_BUILD_CORE
```

```
Py_BUILD_CORE_BUILTIN
```

```
Py_BUILD_CORE_MODULE
```

```
<Python.h>
```

The old trashcan macrosPy_TRASHCAN_SAFE_BEGINandPy_TRASHCAN_SAFE_ENDwere removed. They should be replaced by the new macrosPy_TRASHCAN_BEGINandPy_TRASHCAN_END.

Atp_deallocfunction that has the old macros, such as:

```
tp_dealloc
```

```
staticvoidmytype_dealloc(mytype*p){PyObject_GC_UnTrack(p);Py_TRASHCAN_SAFE_BEGIN(p);...Py_TRASHCAN_SAFE_END}
```

should migrate to the new macros as follows:

```
staticvoidmytype_dealloc(mytype*p){PyObject_GC_UnTrack(p);Py_TRASHCAN_BEGIN(p,mytype_dealloc)...Py_TRASHCAN_END}
```

Note thatPy_TRASHCAN_BEGINhas a second argument which should be the deallocation function it is in. The new macros were added in Python 3.8 and the old macros were deprecated in Python 3.11. (Contributed by Irit Katriel ingh-105111.)

- PEP 667introduces several changes
to frame-related functions:The effects of mutating the dictionary returned fromPyEval_GetLocals()in anoptimized scopehave changed.
New dict entries added this way will nowonlybe visible to
subsequentPyEval_GetLocals()calls in that frame,
asPyFrame_GetLocals(),locals(),
andFrameType.f_localsno longer access
the same underlying cached dictionary.
Changes made to entries for actual variable names and names added via
the write-through proxy interfaces will be overwritten on subsequent calls
toPyEval_GetLocals()in that frame.
The recommended code update depends on how the function was being used,
so refer to the deprecation notice on the function for details.CallingPyFrame_GetLocals()in anoptimized scopenow returns a write-through proxy rather than a snapshot
that gets updated at ill-specified times.
If a snapshot is desired, it must be created explicitly
(e.g. withPyDict_Copy()),
or by calling the newPyEval_GetFrameLocals()API.PyFrame_FastToLocals()andPyFrame_FastToLocalsWithError()no longer have any effect.
Calling these functions has been redundant since Python 3.11,
whenPyFrame_GetLocals()was first introduced.PyFrame_LocalsToFast()no longer has any effect.
Calling this function is redundant now thatPyFrame_GetLocals()returns a write-through proxy foroptimized scopes.
- Python 3.13 removed many private functions. Some of them can be replaced using these
alternatives:_PyDict_Pop():PyDict_Pop()orPyDict_PopString();_PyDict_GetItemWithError():PyDict_GetItemRef();_PyErr_WriteUnraisableMsg():PyErr_FormatUnraisable();_PyEval_SetTrace():PyEval_SetTrace()orPyEval_SetTraceAllThreads();_PyList_Extend():PyList_Extend();_PyLong_AsInt():PyLong_AsInt();_PyMem_RawStrdup():strdup();_PyMem_Strdup():strdup();_PyObject_ClearManagedDict():PyObject_ClearManagedDict();_PyObject_VisitManagedDict():PyObject_VisitManagedDict();_PyThreadState_UncheckedGet():PyThreadState_GetUnchecked();_PyTime_AsSecondsDouble():PyTime_AsSecondsDouble();_PyTime_GetMonotonicClock():PyTime_Monotonic()orPyTime_MonotonicRaw();_PyTime_GetPerfCounter():PyTime_PerfCounter()orPyTime_PerfCounterRaw();_PyTime_GetSystemClock():PyTime_Time()orPyTime_TimeRaw();_PyTime_MAX:PyTime_MAX;_PyTime_MIN:PyTime_MIN;_PyTime_t:PyTime_t;_Py_HashPointer():Py_HashPointer();_Py_IsFinalizing():Py_IsFinalizing().Thepythoncapi-compat projectcan be used to get most of these new
functions on Python 3.12 and older.

PEP 667introduces several changes to frame-related functions:

- The effects of mutating the dictionary returned fromPyEval_GetLocals()in anoptimized scopehave changed.
New dict entries added this way will nowonlybe visible to
subsequentPyEval_GetLocals()calls in that frame,
asPyFrame_GetLocals(),locals(),
andFrameType.f_localsno longer access
the same underlying cached dictionary.
Changes made to entries for actual variable names and names added via
the write-through proxy interfaces will be overwritten on subsequent calls
toPyEval_GetLocals()in that frame.
The recommended code update depends on how the function was being used,
so refer to the deprecation notice on the function for details.
- CallingPyFrame_GetLocals()in anoptimized scopenow returns a write-through proxy rather than a snapshot
that gets updated at ill-specified times.
If a snapshot is desired, it must be created explicitly
(e.g. withPyDict_Copy()),
or by calling the newPyEval_GetFrameLocals()API.
- PyFrame_FastToLocals()andPyFrame_FastToLocalsWithError()no longer have any effect.
Calling these functions has been redundant since Python 3.11,
whenPyFrame_GetLocals()was first introduced.
- PyFrame_LocalsToFast()no longer has any effect.
Calling this function is redundant now thatPyFrame_GetLocals()returns a write-through proxy foroptimized scopes.

```
PyFrame_GetLocals()
```

```
PyDict_Copy()
```

```
PyFrame_FastToLocals()
```

```
PyFrame_FastToLocalsWithError()
```

```
PyFrame_LocalsToFast()
```

Python 3.13 removed many private functions. Some of them can be replaced using these alternatives:

- _PyDict_Pop():PyDict_Pop()orPyDict_PopString();
- _PyDict_GetItemWithError():PyDict_GetItemRef();
- _PyErr_WriteUnraisableMsg():PyErr_FormatUnraisable();
- _PyEval_SetTrace():PyEval_SetTrace()orPyEval_SetTraceAllThreads();
- _PyList_Extend():PyList_Extend();
- _PyLong_AsInt():PyLong_AsInt();
- _PyMem_RawStrdup():strdup();
- _PyMem_Strdup():strdup();
- _PyObject_ClearManagedDict():PyObject_ClearManagedDict();
- _PyObject_VisitManagedDict():PyObject_VisitManagedDict();
- _PyThreadState_UncheckedGet():PyThreadState_GetUnchecked();
- _PyTime_AsSecondsDouble():PyTime_AsSecondsDouble();
- _PyTime_GetMonotonicClock():PyTime_Monotonic()orPyTime_MonotonicRaw();
- _PyTime_GetPerfCounter():PyTime_PerfCounter()orPyTime_PerfCounterRaw();
- _PyTime_GetSystemClock():PyTime_Time()orPyTime_TimeRaw();
- _PyTime_MAX:PyTime_MAX;
- _PyTime_MIN:PyTime_MIN;
- _PyTime_t:PyTime_t;
- _Py_HashPointer():Py_HashPointer();
- _Py_IsFinalizing():Py_IsFinalizing().

```
_PyDict_Pop()
```

```
_PyDict_GetItemWithError()
```

```
_PyErr_WriteUnraisableMsg()
```

```
_PyEval_SetTrace()
```

```
PyEval_SetTrace()
```

```
PyEval_SetTraceAllThreads()
```

```
_PyList_Extend()
```

```
_PyLong_AsInt()
```

```
_PyMem_RawStrdup()
```

```
_PyMem_Strdup()
```

```
_PyObject_ClearManagedDict()
```

```
_PyObject_VisitManagedDict()
```

```
_PyThreadState_UncheckedGet()
```

```
_PyTime_AsSecondsDouble()
```

```
_PyTime_GetMonotonicClock()
```

```
_PyTime_GetPerfCounter()
```

```
_PyTime_GetSystemClock()
```

```
_PyTime_MAX
```

```
_PyTime_MIN
```

```
_Py_HashPointer()
```

```
_Py_IsFinalizing()
```

Thepythoncapi-compat projectcan be used to get most of these new functions on Python 3.12 and older.

================================================================================

## Regression Test Changes¶

- Python built withconfigure--with-pydebugnow
supports a-Xpresite=package.modulecommand-line
option. If used, it specifies a module that should be imported early
in the lifecycle of the interpreter, beforesite.pyis executed.
(Contributed by Łukasz Langa ingh-110769.)

```
--with-pydebug
```

```
-Xpresite=package.module
```

================================================================================

## Notable changes in 3.13.1¶

- The previously undocumented special functionsys.getobjects(),
which only exists in specialized builds of Python, may now return objects
from other interpreters than the one it’s called in.

```
sys.getobjects()
```

================================================================================

================================================================================

# Glossary — Python 3.13.3 documentation
URL: https://docs.python.org/3/glossary.html
Section: 1/2
Description: >>>, The default Python prompt of the interactive shell. Often seen for code examples which can be executed interactively in the interpreter.,,..., Can refer to:- The default Python prompt of the i...

Content:
>>>¶: The default Python prompt of theinteractiveshell.  Often
seen for code examples which can be executed interactively in the
interpreter.

...¶: Can refer to:The default Python prompt of theinteractiveshell when entering the
code for an indented code block, when within a pair of matching left and
right delimiters (parentheses, square brackets, curly braces or triple
quotes), or after specifying a decorator.TheEllipsisbuilt-in constant.

abstract base class¶: Abstract base classes complementduck-typingby
providing a way to define interfaces when other techniques likehasattr()would be clumsy or subtly wrong (for example withmagic methods).  ABCs introduce virtual
subclasses, which are classes that don’t inherit from a class but are
still recognized byisinstance()andissubclass(); see theabcmodule documentation.  Python comes with many built-in ABCs for
data structures (in thecollections.abcmodule), numbers (in thenumbersmodule), streams (in theiomodule), import finders
and loaders (in theimportlib.abcmodule).  You can create your own
ABCs with theabcmodule.

annotation¶: A label associated with a variable, a class
attribute or a function parameter or return value,
used by convention as atype hint.Annotations of local variables cannot be accessed at runtime, but
annotations of global variables, class attributes, and functions
are stored in the__annotations__special attribute of modules, classes, and functions,
respectively.Seevariable annotation,function annotation,PEP 484andPEP 526, which describe this functionality.
Also seeAnnotations Best Practicesfor best practices on working with annotations.

argument¶: A value passed to afunction(ormethod) when calling the
function.  There are two kinds of argument:keyword argument: an argument preceded by an identifier (e.g.name=) in a function call or passed as a value in a dictionary
preceded by**.  For example,3and5are both keyword
arguments in the following calls tocomplex():complex(real=3,imag=5)complex(**{'real':3,'imag':5})positional argument: an argument that is not a keyword argument.
Positional arguments can appear at the beginning of an argument list
and/or be passed as elements of aniterablepreceded by*.
For example,3and5are both positional arguments in the
following calls:complex(3,5)complex(*(3,5))Arguments are assigned to the named local variables in a function body.
See theCallssection for the rules governing this assignment.
Syntactically, any expression can be used to represent an argument; the
evaluated value is assigned to the local variable.See also theparameterglossary entry, the FAQ question onthe difference between arguments and parameters, andPEP 362.

asynchronous context manager¶: An object which controls the environment seen in anasyncwithstatement by defining__aenter__()and__aexit__()methods.  Introduced byPEP 492.

asynchronous generator¶: A function which returns anasynchronous generator iterator.  It
looks like a coroutine function defined withasyncdefexcept
that it containsyieldexpressions for producing a series of
values usable in anasyncforloop.Usually refers to an asynchronous generator function, but may refer to anasynchronous generator iteratorin some contexts.  In cases where the
intended meaning isn’t clear, using the full terms avoids ambiguity.An asynchronous generator function may containawaitexpressions as well asasyncfor, andasyncwithstatements.

asynchronous generator iterator¶: An object created by aasynchronous generatorfunction.This is anasynchronous iteratorwhich when called using the__anext__()method returns an awaitable object which will execute
the body of the asynchronous generator function until the nextyieldexpression.Eachyieldtemporarily suspends processing, remembering the
execution state (including local variables and pending
try-statements).  When theasynchronous generator iteratoreffectively
resumes with another awaitable returned by__anext__(), it
picks up where it left off.  SeePEP 492andPEP 525.

asynchronous iterable¶: An object, that can be used in anasyncforstatement.
Must return anasynchronous iteratorfrom its__aiter__()method.  Introduced byPEP 492.

asynchronous iterator¶: An object that implements the__aiter__()and__anext__()methods.__anext__()must return anawaitableobject.asyncforresolves the awaitables returned by an asynchronous
iterator’s__anext__()method until it raises aStopAsyncIterationexception.  Introduced byPEP 492.

attribute¶: A value associated with an object which is usually referenced by name
using dotted expressions.
For example, if an objectohas an attributeait would be referenced aso.a.It is possible to give an object an attribute whose name is not an
identifier as defined byIdentifiers and keywords, for example usingsetattr(), if the object allows it.
Such an attribute will not be accessible using a dotted expression,
and would instead need to be retrieved withgetattr().

awaitable¶: An object that can be used in anawaitexpression.  Can be
acoroutineor an object with an__await__()method.
See alsoPEP 492.

BDFL¶: Benevolent Dictator For Life, a.k.a.Guido van Rossum, Python’s creator.

binary file¶: Afile objectable to read and writebytes-like objects.
Examples of binary files are files opened in binary mode ('rb','wb'or'rb+'),sys.stdin.buffer,sys.stdout.buffer, and instances ofio.BytesIOandgzip.GzipFile.See alsotext filefor a file object able to read and writestrobjects.

borrowed reference¶: In Python’s C API, a borrowed reference is a reference to an object,
where the code using the object does not own the reference.
It becomes a dangling
pointer if the object is destroyed. For example, a garbage collection can
remove the laststrong referenceto the object and so destroy it.CallingPy_INCREF()on theborrowed referenceis
recommended to convert it to astrong referencein-place, except
when the object cannot be destroyed before the last usage of the borrowed
reference. ThePy_NewRef()function can be used to create a newstrong reference.

bytes-like object¶: An object that supports theBuffer Protocoland can
export a C-contiguousbuffer. This includes allbytes,bytearray, andarray.arrayobjects, as well as many
commonmemoryviewobjects.  Bytes-like objects can
be used for various operations that work with binary data; these include
compression, saving to a binary file, and sending over a socket.Some operations need the binary data to be mutable.  The documentation
often refers to these as “read-write bytes-like objects”.  Example
mutable buffer objects includebytearrayand amemoryviewof abytearray.
Other operations require the binary data to be stored in
immutable objects (“read-only bytes-like objects”); examples
of these includebytesand amemoryviewof abytesobject.

bytecode¶: Python source code is compiled into bytecode, the internal representation
of a Python program in the CPython interpreter.  The bytecode is also
cached in.pycfiles so that executing the same file is
faster the second time (recompilation from source to bytecode can be
avoided).  This “intermediate language” is said to run on avirtual machinethat executes the machine code corresponding to
each bytecode. Do note that bytecodes are not expected to work between
different Python virtual machines, nor to be stable between Python
releases.A list of bytecode instructions can be found in the documentation forthe dis module.

callable¶: A callable is an object that can be called, possibly with a set
of arguments (seeargument), with the following syntax:callable(argument1,argument2,argumentN)Afunction, and by extension amethod, is a callable.
An instance of a class that implements the__call__()method is also a callable.

callback¶: A subroutine function which is passed as an argument to be executed at
some point in the future.

class¶: A template for creating user-defined objects. Class definitions
normally contain method definitions which operate on instances of the
class.

class variable¶: A variable defined in a class and intended to be modified only at
class level (i.e., not in an instance of the class).

closure variable¶: Afree variablereferenced from anested scopethat is defined in an outer
scope rather than being resolved at runtime from the globals or builtin namespaces.
May be explicitly defined with thenonlocalkeyword to allow write access,
or implicitly defined if the variable is only being read.For example, in theinnerfunction in the following code, bothxandprintarefree variables, but onlyxis aclosure variable:defouter():x=0definner():nonlocalxx+=1print(x)returninnerDue to thecodeobject.co_freevarsattribute (which, despite its name, only
includes the names of closure variables rather than listing all referenced free
variables), the more generalfree variableterm is sometimes used even
when the intended meaning is to refer specifically to closure variables.

complex number¶: An extension of the familiar real number system in which all numbers are
expressed as a sum of a real part and an imaginary part.  Imaginary
numbers are real multiples of the imaginary unit (the square root of-1), often writteniin mathematics orjin
engineering.  Python has built-in support for complex numbers, which are
written with this latter notation; the imaginary part is written with ajsuffix, e.g.,3+1j.  To get access to complex equivalents of themathmodule, usecmath.  Use of complex numbers is a fairly
advanced mathematical feature.  If you’re not aware of a need for them,
it’s almost certain you can safely ignore them.

context¶: This term has different meanings depending on where and how it is used.
Some common meanings:The temporary state or environment established by acontext
managervia awithstatement.The collection of key­value bindings associated with a particularcontextvars.Contextobject and accessed viaContextVarobjects.  Also seecontext
variable.Acontextvars.Contextobject.  Also seecurrent
context.

context management protocol¶: The__enter__()and__exit__()methods called
by thewithstatement.  SeePEP 343.

context manager¶: An object which implements thecontext management protocoland
controls the environment seen in awithstatement.  SeePEP 343.

context variable¶: A variable whose value depends on which context is thecurrent
context.  Values are accessed viacontextvars.ContextVarobjects.  Context variables are primarily used to isolate state between
concurrent asynchronous tasks.

contiguous¶: A buffer is considered contiguous exactly if it is eitherC-contiguousorFortran contiguous.  Zero-dimensional buffers are
C and Fortran contiguous.  In one-dimensional arrays, the items
must be laid out in memory next to each other, in order of
increasing indexes starting from zero.  In multidimensional
C-contiguous arrays, the last index varies the fastest when
visiting items in order of memory address.  However, in
Fortran contiguous arrays, the first index varies the fastest.

coroutine¶: Coroutines are a more generalized form of subroutines. Subroutines are
entered at one point and exited at another point.  Coroutines can be
entered, exited, and resumed at many different points.  They can be

================================================================================

implemented with theasyncdefstatement.  See alsoPEP 492.

coroutine function¶: A function which returns acoroutineobject.  A coroutine
function may be defined with theasyncdefstatement,
and may containawait,asyncfor, andasyncwithkeywords.  These were introduced
byPEP 492.

CPython¶: The canonical implementation of the Python programming language, as
distributed onpython.org.  The term “CPython”
is used when necessary to distinguish this implementation from others
such as Jython or IronPython.

current context¶: Thecontext(contextvars.Contextobject) that is
currently used byContextVarobjects to access (get
or set) the values ofcontext variables.  Each
thread has its own current context.  Frameworks for executing asynchronous
tasks (seeasyncio) associate each task with a context which
becomes the current context whenever the task starts or resumes execution.

decorator¶: A function returning another function, usually applied as a function
transformation using the@wrappersyntax.  Common examples for
decorators areclassmethod()andstaticmethod().The decorator syntax is merely syntactic sugar, the following two
function definitions are semantically equivalent:deff(arg):...f=staticmethod(f)@staticmethoddeff(arg):...The same concept exists for classes, but is less commonly used there.  See
the documentation forfunction definitionsandclass definitionsfor more about decorators.

descriptor¶: Any object which defines the methods__get__(),__set__(), or__delete__().
When a class attribute is a descriptor, its special
binding behavior is triggered upon attribute lookup.  Normally, usinga.bto get, set or delete an attribute looks up the object namedbin
the class dictionary fora, but ifbis a descriptor, the respective
descriptor method gets called.  Understanding descriptors is a key to a
deep understanding of Python because they are the basis for many features
including functions, methods, properties, class methods, static methods,
and reference to super classes.For more information about descriptors’ methods, seeImplementing Descriptorsor theDescriptor How To Guide.

dictionary¶: An associative array, where arbitrary keys are mapped to values.  The
keys can be any object with__hash__()and__eq__()methods.
Called a hash in Perl.

dictionary comprehension¶: A compact way to process all or part of the elements in an iterable and
return a dictionary with the results.results={n:n**2forninrange(10)}generates a dictionary containing keynmapped to
valuen**2. SeeDisplays for lists, sets and dictionaries.

dictionary view¶: The objects returned fromdict.keys(),dict.values(), anddict.items()are called dictionary views. They provide a dynamic
view on the dictionary’s entries, which means that when the dictionary
changes, the view reflects these changes. To force the
dictionary view to become a full list uselist(dictview).  SeeDictionary view objects.

docstring¶: A string literal which appears as the first expression in a class,
function or module.  While ignored when the suite is executed, it is
recognized by the compiler and put into the__doc__attribute
of the enclosing class, function or module.  Since it is available via
introspection, it is the canonical place for documentation of the
object.

duck-typing¶: A programming style which does not look at an object’s type to determine
if it has the right interface; instead, the method or attribute is simply
called or used (“If it looks like a duck and quacks like a duck, it
must be a duck.”)  By emphasizing interfaces rather than specific types,
well-designed code improves its flexibility by allowing polymorphic
substitution.  Duck-typing avoids tests usingtype()orisinstance().  (Note, however, that duck-typing can be complemented
withabstract base classes.)  Instead, it
typically employshasattr()tests orEAFPprogramming.

EAFP¶: Easier to ask for forgiveness than permission.  This common Python coding
style assumes the existence of valid keys or attributes and catches
exceptions if the assumption proves false.  This clean and fast style is
characterized by the presence of manytryandexceptstatements.  The technique contrasts with theLBYLstyle
common to many other languages such as C.

expression¶: A piece of syntax which can be evaluated to some value.  In other words,
an expression is an accumulation of expression elements like literals,
names, attribute access, operators or function calls which all return a
value.  In contrast to many other languages, not all language constructs
are expressions.  There are alsostatements which cannot be used
as expressions, such aswhile.  Assignments are also statements,
not expressions.

extension module¶: A module written in C or C++, using Python’s C API to interact with the
core and with user code.

f-string¶: String literals prefixed with'f'or'F'are commonly called
“f-strings” which is short forformatted string literals.  See alsoPEP 498.

file object¶: An object exposing a file-oriented API (with methods such asread()orwrite()) to an underlying resource.  Depending
on the way it was created, a file object can mediate access to a real
on-disk file or to another type of storage or communication device
(for example standard input/output, in-memory buffers, sockets, pipes,
etc.).  File objects are also calledfile-like objectsorstreams.There are actually three categories of file objects: rawbinary files, bufferedbinary filesandtext files.
Their interfaces are defined in theiomodule.  The canonical
way to create a file object is by using theopen()function.

file-like object¶: A synonym forfile object.

filesystem encoding and error handler¶: Encoding and error handler used by Python to decode bytes from the
operating system and encode Unicode to the operating system.The filesystem encoding must guarantee to successfully decode all bytes
below 128. If the file system encoding fails to provide this guarantee,
API functions can raiseUnicodeError.Thesys.getfilesystemencoding()andsys.getfilesystemencodeerrors()functions can be used to get the
filesystem encoding and error handler.Thefilesystem encoding and error handlerare configured at
Python startup by thePyConfig_Read()function: seefilesystem_encodingandfilesystem_errorsmembers ofPyConfig.See also thelocale encoding.

finder¶: An object that tries to find theloaderfor a module that is
being imported.There are two types of finder:meta path findersfor use withsys.meta_path, andpath
entry findersfor use withsys.path_hooks.SeeFinders and loadersandimportlibfor much more detail.

floor division¶: Mathematical division that rounds down to nearest integer.  The floor
division operator is//.  For example, the expression11//4evaluates to2in contrast to the2.75returned by float true
division.  Note that(-11)//4is-3because that is-2.75roundeddownward. SeePEP 238.

free threading¶: A threading model where multiple threads can run Python bytecode
simultaneously within the same interpreter.  This is in contrast to
theglobal interpreter lockwhich allows only one thread to
execute Python bytecode at a time.  SeePEP 703.

free variable¶: Formally, as defined in thelanguage execution model, a free
variable is any variable used in a namespace which is not a local variable in that
namespace. Seeclosure variablefor an example.
Pragmatically, due to the name of thecodeobject.co_freevarsattribute,
the term is also sometimes used as a synonym forclosure variable.

function¶: A series of statements which returns some value to a caller. It can also
be passed zero or moreargumentswhich may be used in
the execution of the body. See alsoparameter,method,
and theFunction definitionssection.

function annotation¶: Anannotationof a function parameter or return value.Function annotations are usually used fortype hints: for example, this function is expected to take twointarguments and is also expected to have anintreturn value:defsum_two_numbers(a:int,b:int)->int:returna+bFunction annotation syntax is explained in sectionFunction definitions.Seevariable annotationandPEP 484,
which describe this functionality.
Also seeAnnotations Best Practicesfor best practices on working with annotations.

__future__¶: Afuture statement,from__future__import<feature>,
directs the compiler to compile the current module using syntax or
semantics that will become standard in a future release of Python.
The__future__module documents the possible values offeature.  By importing this module and evaluating its variables,
you can see when a new feature was first added to the language and
when it will (or did) become the default:>>>>>>import__future__>>>__future__.division_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)

garbage collection¶: The process of freeing memory when it is not used anymore.  Python
performs garbage collection via reference counting and a cyclic garbage
collector that is able to detect and break reference cycles.  The
garbage collector can be controlled using thegcmodule.

generator¶: A function which returns agenerator iterator.  It looks like a
normal function except that it containsyieldexpressions
for producing a series of values usable in a for-loop or that can be
retrieved one at a time with thenext()function.Usually refers to a generator function, but may refer to agenerator iteratorin some contexts.  In cases where the intended
meaning isn’t clear, using the full terms avoids ambiguity.

generator iterator¶: An object created by ageneratorfunction.Eachyieldtemporarily suspends processing, remembering the
execution state (including local variables and pending
try-statements).  When thegenerator iteratorresumes, it picks up where
it left off (in contrast to functions which start fresh on every
invocation).

generator expression¶: Anexpressionthat returns aniterator.  It looks like a normal expression
followed by aforclause defining a loop variable, range,
and an optionalifclause.  The combined expression
generates values for an enclosing function:>>>>>>sum(i*iforiinrange(10))# sum of squares 0, 1, 4, ... 81285

generic function¶: A function composed of multiple functions implementing the same operation
for different types. Which implementation should be used during a call is
determined by the dispatch algorithm.See also thesingle dispatchglossary entry, thefunctools.singledispatch()decorator, andPEP 443.

generic type¶: Atypethat can be parameterized; typically acontainer classsuch aslistordict. Used fortype hintsandannotations.For more details, seegeneric alias types,PEP 483,PEP 484,PEP 585, and thetypingmodule.

GIL¶: Seeglobal interpreter lock.

global interpreter lock¶: The mechanism used by theCPythoninterpreter to assure that
only one thread executes Pythonbytecodeat a time.
This simplifies the CPython implementation by making the object model
(including critical built-in types such asdict) implicitly
safe against concurrent access.  Locking the entire interpreter
makes it easier for the interpreter to be multi-threaded, at the
expense of much of the parallelism afforded by multi-processor
machines.However, some extension modules, either standard or third-party,
are designed so as to release the GIL when doing computationally intensive
tasks such as compression or hashing.  Also, the GIL is always released

================================================================================

when doing I/O.As of Python 3.13, the GIL can be disabled using the--disable-gilbuild configuration. After building Python with this option, code must be
run with-Xgil=0or after setting thePYTHON_GIL=0environment variable. This feature enables improved performance for
multi-threaded applications and makes it easier to use multi-core CPUs
efficiently. For more details, seePEP 703.

hash-based pyc¶: A bytecode cache file that uses the hash rather than the last-modified
time of the corresponding source file to determine its validity. SeeCached bytecode invalidation.

hashable¶: An object ishashableif it has a hash value which never changes during
its lifetime (it needs a__hash__()method), and can be
compared to other objects (it needs an__eq__()method).
Hashable objects which
compare equal must have the same hash value.Hashability makes an object usable as a dictionary key and a set member,
because these data structures use the hash value internally.Most of Python’s immutable built-in objects are hashable; mutable
containers (such as lists or dictionaries) are not; immutable
containers (such as tuples and frozensets) are only hashable if
their elements are hashable.  Objects which are
instances of user-defined classes are hashable by default.  They all
compare unequal (except with themselves), and their hash value is derived
from theirid().

IDLE¶: An Integrated Development and Learning Environment for Python.IDLE — Python editor and shellis a basic editor and interpreter environment
which ships with the standard distribution of Python.

immortal¶: Immortal objectsare a CPython implementation detail introduced
inPEP 683.If an object is immortal, itsreference countis never modified,
and therefore it is never deallocated while the interpreter is running.
For example,TrueandNoneare immortal in CPython.

immutable¶: An object with a fixed value.  Immutable objects include numbers, strings and
tuples.  Such an object cannot be altered.  A new object has to
be created if a different value has to be stored.  They play an important
role in places where a constant hash value is needed, for example as a key
in a dictionary.

import path¶: A list of locations (orpath entries) that are
searched by thepath based finderfor modules to import. During
import, this list of locations usually comes fromsys.path, but
for subpackages it may also come from the parent package’s__path__attribute.

importing¶: The process by which Python code in one module is made available to
Python code in another module.

importer¶: An object that both finds and loads a module; both afinderandloaderobject.

interactive¶: Python has an interactive interpreter which means you can enter
statements and expressions at the interpreter prompt, immediately
execute them and see their results.  Just launchpythonwith no
arguments (possibly by selecting it from your computer’s main
menu). It is a very powerful way to test out new ideas or inspect
modules and packages (rememberhelp(x)). For more on interactive
mode, seeInteractive Mode.

interpreted¶: Python is an interpreted language, as opposed to a compiled one,
though the distinction can be blurry because of the presence of the
bytecode compiler.  This means that source files can be run directly
without explicitly creating an executable which is then run.
Interpreted languages typically have a shorter development/debug cycle
than compiled ones, though their programs generally also run more
slowly.  See alsointeractive.

interpreter shutdown¶: When asked to shut down, the Python interpreter enters a special phase
where it gradually releases all allocated resources, such as modules
and various critical internal structures.  It also makes several calls
to thegarbage collector. This can trigger
the execution of code in user-defined destructors or weakref callbacks.
Code executed during the shutdown phase can encounter various
exceptions as the resources it relies on may not function anymore
(common examples are library modules or the warnings machinery).The main reason for interpreter shutdown is that the__main__module
or the script being run has finished executing.

iterable¶: An object capable of returning its members one at a time. Examples of
iterables include all sequence types (such aslist,str,
andtuple) and some non-sequence types likedict,file objects, and objects of any classes you define
with an__iter__()method or with a__getitem__()method
that implementssequencesemantics.Iterables can be
used in aforloop and in many other places where a sequence is
needed (zip(),map(), …).  When an iterable object is passed
as an argument to the built-in functioniter(), it returns an
iterator for the object.  This iterator is good for one pass over the set
of values.  When using iterables, it is usually not necessary to calliter()or deal with iterator objects yourself.  Theforstatement does that automatically for you, creating a temporary unnamed
variable to hold the iterator for the duration of the loop.  See alsoiterator,sequence, andgenerator.

iterator¶: An object representing a stream of data.  Repeated calls to the iterator’s__next__()method (or passing it to the built-in functionnext()) return successive items in the stream.  When no more data
are available aStopIterationexception is raised instead.  At this
point, the iterator object is exhausted and any further calls to its__next__()method just raiseStopIterationagain.  Iterators
are required to have an__iter__()method that returns the iterator
object itself so every iterator is also iterable and may be used in most
places where other iterables are accepted.  One notable exception is code
which attempts multiple iteration passes.  A container object (such as alist) produces a fresh new iterator each time you pass it to theiter()function or use it in aforloop.  Attempting this
with an iterator will just return the same exhausted iterator object used
in the previous iteration pass, making it appear like an empty container.More information can be found inIterator Types.CPython implementation detail:CPython does not consistently apply the requirement that an iterator
define__iter__().
And also please note that the free-threading CPython does not guarantee
the thread-safety of iterator operations.

key function¶: A key function or collation function is a callable that returns a value
used for sorting or ordering.  For example,locale.strxfrm()is
used to produce a sort key that is aware of locale specific sort
conventions.A number of tools in Python accept key functions to control how elements
are ordered or grouped.  They includemin(),max(),sorted(),list.sort(),heapq.merge(),heapq.nsmallest(),heapq.nlargest(), anditertools.groupby().There are several ways to create a key function.  For example. thestr.lower()method can serve as a key function for case insensitive
sorts.  Alternatively, a key function can be built from alambdaexpression such aslambdar:(r[0],r[2]).  Also,operator.attrgetter(),operator.itemgetter(), andoperator.methodcaller()are three key function constructors.  See theSorting HOW TOfor examples of how to create and use key functions.

keyword argument¶: Seeargument.

lambda¶: An anonymous inline function consisting of a singleexpressionwhich is evaluated when the function is called.  The syntax to create
a lambda function islambda[parameters]:expression

LBYL¶: Look before you leap.  This coding style explicitly tests for
pre-conditions before making calls or lookups.  This style contrasts with
theEAFPapproach and is characterized by the presence of manyifstatements.In a multi-threaded environment, the LBYL approach can risk introducing a
race condition between “the looking” and “the leaping”.  For example, the
code,ifkeyinmapping:returnmapping[key]can fail if another
thread removeskeyfrommappingafter the test, but before the lookup.
This issue can be solved with locks or by using the EAFP approach.

lexical analyzer¶: Formal name for thetokenizer; seetoken.

list¶: A built-in Pythonsequence.  Despite its name it is more akin
to an array in other languages than to a linked list since access to
elements isO(1).

list comprehension¶: A compact way to process all or part of the elements in a sequence and
return a list with the results.result=['{:#04x}'.format(x)forxinrange(256)ifx%2==0]generates a list of strings containing
even hex numbers (0x..) in the range from 0 to 255. Theifclause is optional.  If omitted, all elements inrange(256)are
processed.

loader¶: An object that loads a module.
It must define theexec_module()andcreate_module()methods
to implement theLoaderinterface.
A loader is typically returned by afinder.
See also:Finders and loadersimportlib.abc.LoaderPEP 302

locale encoding¶: On Unix, it is the encoding of the LC_CTYPE locale. It can be set withlocale.setlocale(locale.LC_CTYPE,new_locale).On Windows, it is the ANSI code page (ex:"cp1252").On Android and VxWorks, Python uses"utf-8"as the locale encoding.locale.getencoding()can be used to get the locale encoding.See also thefilesystem encoding and error handler.

magic method¶: An informal synonym forspecial method.

mapping¶: A container object that supports arbitrary key lookups and implements the
methods specified in thecollections.abc.Mappingorcollections.abc.MutableMappingabstract base classes.  Examples
includedict,collections.defaultdict,collections.OrderedDictandcollections.Counter.

meta path finder¶: Afinderreturned by a search ofsys.meta_path.  Meta path
finders are related to, but different frompath entry finders.Seeimportlib.abc.MetaPathFinderfor the methods that meta path
finders implement.

metaclass¶: The class of a class.  Class definitions create a class name, a class
dictionary, and a list of base classes.  The metaclass is responsible for
taking those three arguments and creating the class.  Most object oriented
programming languages provide a default implementation.  What makes Python
special is that it is possible to create custom metaclasses.  Most users
never need this tool, but when the need arises, metaclasses can provide
powerful, elegant solutions.  They have been used for logging attribute
access, adding thread-safety, tracking object creation, implementing
singletons, and many other tasks.More information can be found inMetaclasses.

method¶: A function which is defined inside a class body.  If called as an attribute
of an instance of that class, the method will get the instance object as
its firstargument(which is usually calledself).
Seefunctionandnested scope.

method resolution order¶: Method Resolution Order is the order in which base classes are searched
for a member during lookup. SeeThe Python 2.3 Method Resolution Orderfor details of the
algorithm used by the Python interpreter since the 2.3 release.

================================================================================

module¶: An object that serves as an organizational unit of Python code.  Modules
have a namespace containing arbitrary Python objects.  Modules are loaded
into Python by the process ofimporting.See alsopackage.

module spec¶: A namespace containing the import-related information used to load a
module. An instance ofimportlib.machinery.ModuleSpec.See alsoModule specs.

MRO¶: Seemethod resolution order.

mutable¶: Mutable objects can change their value but keep theirid().  See
alsoimmutable.

named tuple¶: The term “named tuple” applies to any type or class that inherits from
tuple and whose indexable elements are also accessible using named
attributes.  The type or class may have other features as well.Several built-in types are named tuples, including the values returned
bytime.localtime()andos.stat().  Another example issys.float_info:>>>>>>sys.float_info[1]# indexed access1024>>>sys.float_info.max_exp# named field access1024>>>isinstance(sys.float_info,tuple)# kind of tupleTrueSome named tuples are built-in types (such as the above examples).
Alternatively, a named tuple can be created from a regular class
definition that inherits fromtupleand that defines named
fields.  Such a class can be written by hand, or it can be created by
inheritingtyping.NamedTuple, or with the factory functioncollections.namedtuple().  The latter techniques also add some
extra methods that may not be found in hand-written or built-in named
tuples.

namespace¶: The place where a variable is stored.  Namespaces are implemented as
dictionaries.  There are the local, global and built-in namespaces as well
as nested namespaces in objects (in methods).  Namespaces support
modularity by preventing naming conflicts.  For instance, the functionsbuiltins.openandos.open()are distinguished by
their namespaces.  Namespaces also aid readability and maintainability by
making it clear which module implements a function.  For instance, writingrandom.seed()oritertools.islice()makes it clear that those
functions are implemented by therandomanditertoolsmodules, respectively.

namespace package¶: Apackagewhich serves only as a container for subpackages.
Namespace packages may have no physical representation,
and specifically are not like aregular packagebecause they
have no__init__.pyfile.Namespace packages allow several individually installable packages to have a common parent package.
Otherwise, it is recommended to use aregular package.For more information, seePEP 420andNamespace packages.See alsomodule.

nested scope¶: The ability to refer to a variable in an enclosing definition.  For
instance, a function defined inside another function can refer to
variables in the outer function.  Note that nested scopes by default work
only for reference and not for assignment.  Local variables both read and
write in the innermost scope.  Likewise, global variables read and write
to the global namespace.  Thenonlocalallows writing to outer
scopes.

new-style class¶: Old name for the flavor of classes now used for all class objects.  In
earlier Python versions, only new-style classes could use Python’s newer,
versatile features like__slots__, descriptors,
properties,__getattribute__(), class methods, and static
methods.

object¶: Any data with state (attributes or value) and defined behavior
(methods).  Also the ultimate base class of anynew-style
class.

optimized scope¶: A scope where target local variable names are reliably known to the
compiler when the code is compiled, allowing optimization of read and
write access to these names. The local namespaces for functions,
generators, coroutines, comprehensions, and generator expressions are
optimized in this fashion. Note: most interpreter optimizations are
applied to all scopes, only those relying on a known set of local
and nonlocal variable names are restricted to optimized scopes.

package¶: A Pythonmodulewhich can contain submodules or recursively,
subpackages.  Technically, a package is a Python module with a__path__attribute.See alsoregular packageandnamespace package.

parameter¶: A named entity in afunction(or method) definition that
specifies anargument(or in some cases, arguments) that the
function can accept.  There are five kinds of parameter:positional-or-keyword: specifies an argument that can be passed
eitherpositionallyor as akeyword argument.  This is the default kind of parameter, for examplefooandbarin the following:deffunc(foo,bar=None):...positional-only: specifies an argument that can be supplied only
by position. Positional-only parameters can be defined by including a/character in the parameter list of the function definition after
them, for exampleposonly1andposonly2in the following:deffunc(posonly1,posonly2,/,positional_or_keyword):...keyword-only: specifies an argument that can be supplied only
by keyword.  Keyword-only parameters can be defined by including a
single var-positional parameter or bare*in the parameter list
of the function definition before them, for examplekw_only1andkw_only2in the following:deffunc(arg,*,kw_only1,kw_only2):...var-positional: specifies that an arbitrary sequence of
positional arguments can be provided (in addition to any positional
arguments already accepted by other parameters).  Such a parameter can
be defined by prepending the parameter name with*, for exampleargsin the following:deffunc(*args,**kwargs):...var-keyword: specifies that arbitrarily many keyword arguments
can be provided (in addition to any keyword arguments already accepted
by other parameters).  Such a parameter can be defined by prepending
the parameter name with**, for examplekwargsin the example
above.Parameters can specify both optional and required arguments, as well as
default values for some optional arguments.See also theargumentglossary entry, the FAQ question onthe difference between arguments and parameters, theinspect.Parameterclass, theFunction definitionssection, andPEP 362.

path entry¶: A single location on theimport pathwhich thepath
based finderconsults to find modules for importing.

path entry finder¶: Afinderreturned by a callable onsys.path_hooks(i.e. apath entry hook) which knows how to locate modules given
apath entry.Seeimportlib.abc.PathEntryFinderfor the methods that path entry
finders implement.

path entry hook¶: A callable on thesys.path_hookslist which returns apath
entry finderif it knows how to find modules on a specificpath
entry.

path based finder¶: One of the defaultmeta path finderswhich
searches animport pathfor modules.

path-like object¶: An object representing a file system path. A path-like object is either
astrorbytesobject representing a path, or an object
implementing theos.PathLikeprotocol. An object that supports
theos.PathLikeprotocol can be converted to astrorbytesfile system path by calling theos.fspath()function;os.fsdecode()andos.fsencode()can be used to guarantee astrorbytesresult instead, respectively. Introduced
byPEP 519.

PEP¶: Python Enhancement Proposal. A PEP is a design document
providing information to the Python community, or describing a new
feature for Python or its processes or environment. PEPs should
provide a concise technical specification and a rationale for proposed
features.PEPs are intended to be the primary mechanisms for proposing major new
features, for collecting community input on an issue, and for documenting
the design decisions that have gone into Python. The PEP author is
responsible for building consensus within the community and documenting
dissenting opinions.SeePEP 1.

portion¶: A set of files in a single directory (possibly stored in a zip file)
that contribute to a namespace package, as defined inPEP 420.

positional argument¶: Seeargument.

provisional API¶: A provisional API is one which has been deliberately excluded from
the standard library’s backwards compatibility guarantees.  While major
changes to such interfaces are not expected, as long as they are marked
provisional, backwards incompatible changes (up to and including removal
of the interface) may occur if deemed necessary by core developers.  Such
changes will not be made gratuitously – they will occur only if serious
fundamental flaws are uncovered that were missed prior to the inclusion
of the API.Even for provisional APIs, backwards incompatible changes are seen as
a “solution of last resort” - every attempt will still be made to find
a backwards compatible resolution to any identified problems.This process allows the standard library to continue to evolve over
time, without locking in problematic design errors for extended periods
of time.  SeePEP 411for more details.

provisional package¶: Seeprovisional API.

Python 3000¶: Nickname for the Python 3.x release line (coined long ago when the
release of version 3 was something in the distant future.)  This is also
abbreviated “Py3k”.

Pythonic¶: An idea or piece of code which closely follows the most common idioms
of the Python language, rather than implementing code using concepts
common to other languages.  For example, a common idiom in Python is
to loop over all elements of an iterable using aforstatement.  Many other languages don’t have this type of construct, so
people unfamiliar with Python sometimes use a numerical counter instead:foriinrange(len(food)):print(food[i])As opposed to the cleaner, Pythonic method:forpieceinfood:print(piece)

qualified name¶: A dotted name showing the “path” from a module’s global scope to a
class, function or method defined in that module, as defined inPEP 3155.  For top-level functions and classes, the qualified name
is the same as the object’s name:>>>>>>classC:...classD:...defmeth(self):...pass...>>>C.__qualname__'C'>>>C.D.__qualname__'C.D'>>>C.D.meth.__qualname__'C.D.meth'When used to refer to modules, thefully qualified namemeans the
entire dotted path to the module, including any parent packages,
e.g.email.mime.text:>>>>>>importemail.mime.text>>>email.mime.text.__name__'email.mime.text'

reference count¶: The number of references to an object.  When the reference count of an
object drops to zero, it is deallocated.  Some objects areimmortaland have reference counts that are never modified, and
therefore the objects are never deallocated.  Reference counting is
generally not visible to Python code, but it is a key element of theCPythonimplementation.  Programmers can call thesys.getrefcount()function to return the
reference count for a particular object.

regular package¶: A traditionalpackage, such as a directory containing an__init__.pyfile.See alsonamespace package.

REPL¶: An acronym for the “read–eval–print loop”, another name for theinteractiveinterpreter shell.

__slots__¶: A declaration inside a class that saves memory by pre-declaring space for
instance attributes and eliminating instance dictionaries.  Though
popular, the technique is somewhat tricky to get right and is best
reserved for rare cases where there are large numbers of instances in a
memory-critical application.

sequence¶: Aniterablewhich supports efficient element access using integer
indices via the__getitem__()special method and defines a__len__()method that returns the length of the sequence.
Some built-in sequence types arelist,str,tuple, andbytes. Note thatdictalso
supports__getitem__()and__len__(), but is considered a
mapping rather than a sequence because the lookups use arbitraryhashablekeys rather than integers.Thecollections.abc.Sequenceabstract base class

================================================================================

defines a much richer interface that goes beyond just__getitem__()and__len__(), addingcount(),index(),__contains__(), and__reversed__(). Types that implement this expanded
interface can be registered explicitly usingregister(). For more documentation on sequence
methods generally, seeCommon Sequence Operations.

set comprehension¶: A compact way to process all or part of the elements in an iterable and
return a set with the results.results={cforcin'abracadabra'ifcnotin'abc'}generates the set of strings{'r','d'}.  SeeDisplays for lists, sets and dictionaries.

single dispatch¶: A form ofgeneric functiondispatch where the implementation is
chosen based on the type of a single argument.

slice¶: An object usually containing a portion of asequence.  A slice is
created using the subscript notation,[]with colons between numbers
when several are given, such as invariable_name[1:3:5].  The bracket
(subscript) notation usessliceobjects internally.

soft deprecated¶: A soft deprecated API should not be used in new code,
but it is safe for already existing code to use it.
The API remains documented and tested, but will not be enhanced further.Soft deprecation, unlike normal deprecation, does not plan on removing the API
and will not emit warnings.SeePEP 387: Soft Deprecation.

special method¶: A method that is called implicitly by Python to execute a certain
operation on a type, such as addition.  Such methods have names starting
and ending with double underscores.  Special methods are documented inSpecial method names.

statement¶: A statement is part of a suite (a “block” of code).  A statement is either
anexpressionor one of several constructs with a keyword, such
asif,whileorfor.

static type checker¶: An external tool that reads Python code and analyzes it, looking for
issues such as incorrect types. See alsotype hintsand thetypingmodule.

strong reference¶: In Python’s C API, a strong reference is a reference to an object
which is owned by the code holding the reference.  The strong
reference is taken by callingPy_INCREF()when the
reference is created and released withPy_DECREF()when the reference is deleted.ThePy_NewRef()function can be used to create a strong reference
to an object. Usually, thePy_DECREF()function must be called on
the strong reference before exiting the scope of the strong reference, to
avoid leaking one reference.See alsoborrowed reference.

text encoding¶: A string in Python is a sequence of Unicode code points (in rangeU+0000–U+10FFFF). To store or transfer a string, it needs to be
serialized as a sequence of bytes.Serializing a string into a sequence of bytes is known as “encoding”, and
recreating the string from the sequence of bytes is known as “decoding”.There are a variety of different text serializationcodecs, which are collectively referred to as
“text encodings”.

text file¶: Afile objectable to read and writestrobjects.
Often, a text file actually accesses a byte-oriented datastream
and handles thetext encodingautomatically.
Examples of text files are files opened in text mode ('r'or'w'),sys.stdin,sys.stdout, and instances ofio.StringIO.See alsobinary filefor a file object able to read and writebytes-like objects.

token¶: A small unit of source code, generated by thelexical analyzer(also called thetokenizer).
Names, numbers, strings, operators,
newlines and similar are represented by tokens.Thetokenizemodule exposes Python’s lexical analyzer.
Thetokenmodule contains information on the various types
of tokens.

triple-quoted string¶: A string which is bound by three instances of either a quotation mark
(”) or an apostrophe (‘).  While they don’t provide any functionality
not available with single-quoted strings, they are useful for a number
of reasons.  They allow you to include unescaped single and double
quotes within a string and they can span multiple lines without the
use of the continuation character, making them especially useful when
writing docstrings.

type¶: The type of a Python object determines what kind of object it is; every
object has a type.  An object’s type is accessible as its__class__attribute or can be retrieved withtype(obj).

type alias¶: A synonym for a type, created by assigning the type to an identifier.Type aliases are useful for simplifyingtype hints.
For example:defremove_gray_shades(colors:list[tuple[int,int,int]])->list[tuple[int,int,int]]:passcould be made more readable like this:Color=tuple[int,int,int]defremove_gray_shades(colors:list[Color])->list[Color]:passSeetypingandPEP 484, which describe this functionality.

type hint¶: Anannotationthat specifies the expected type for a variable, a class
attribute, or a function parameter or return value.Type hints are optional and are not enforced by Python but
they are useful tostatic type checkers.
They can also aid IDEs with code completion and refactoring.Type hints of global variables, class attributes, and functions,
but not local variables, can be accessed usingtyping.get_type_hints().SeetypingandPEP 484, which describe this functionality.

universal newlines¶: A manner of interpreting text streams in which all of the following are
recognized as ending a line: the Unix end-of-line convention'\n',
the Windows convention'\r\n', and the old Macintosh convention'\r'.  SeePEP 278andPEP 3116, as well asbytes.splitlines()for an additional use.

variable annotation¶: Anannotationof a variable or a class attribute.When annotating a variable or a class attribute, assignment is optional:classC:field:'annotation'Variable annotations are usually used fortype hints: for example this variable is expected to takeintvalues:count:int=0Variable annotation syntax is explained in sectionAnnotated assignment statements.Seefunction annotation,PEP 484andPEP 526, which describe this functionality.
Also seeAnnotations Best Practicesfor best practices on working with annotations.

virtual environment¶: A cooperatively isolated runtime environment that allows Python users
and applications to install and upgrade Python distribution packages
without interfering with the behaviour of other Python applications
running on the same system.See alsovenv.

virtual machine¶: A computer defined entirely in software.  Python’s virtual machine
executes thebytecodeemitted by the bytecode compiler.

Zen of Python¶: Listing of Python design principles and philosophies that are helpful in
understanding and using the language.  The listing can be found by typing
“importthis” at the interactive prompt.

The default Python prompt of theinteractiveshell. Often seen for code examples which can be executed interactively in the interpreter.

Can refer to:

- The default Python prompt of theinteractiveshell when entering the
code for an indented code block, when within a pair of matching left and
right delimiters (parentheses, square brackets, curly braces or triple
quotes), or after specifying a decorator.
- TheEllipsisbuilt-in constant.

Abstract base classes complementduck-typingby providing a way to define interfaces when other techniques likehasattr()would be clumsy or subtly wrong (for example withmagic methods). ABCs introduce virtual subclasses, which are classes that don’t inherit from a class but are still recognized byisinstance()andissubclass(); see theabcmodule documentation. Python comes with many built-in ABCs for data structures (in thecollections.abcmodule), numbers (in thenumbersmodule), streams (in theiomodule), import finders and loaders (in theimportlib.abcmodule). You can create your own ABCs with theabcmodule.

```
isinstance()
```

```
issubclass()
```

```
collections.abc
```

```
importlib.abc
```

A label associated with a variable, a class attribute or a function parameter or return value, used by convention as atype hint.

Annotations of local variables cannot be accessed at runtime, but annotations of global variables, class attributes, and functions are stored in the__annotations__special attribute of modules, classes, and functions, respectively.

```
__annotations__
```

Seevariable annotation,function annotation,PEP 484andPEP 526, which describe this functionality. Also seeAnnotations Best Practicesfor best practices on working with annotations.

A value passed to afunction(ormethod) when calling the function. There are two kinds of argument:

- keyword argument: an argument preceded by an identifier (e.g.name=) in a function call or passed as a value in a dictionary
preceded by**.  For example,3and5are both keyword
arguments in the following calls tocomplex():complex(real=3,imag=5)complex(**{'real':3,'imag':5})
- positional argument: an argument that is not a keyword argument.
Positional arguments can appear at the beginning of an argument list
and/or be passed as elements of aniterablepreceded by*.
For example,3and5are both positional arguments in the
following calls:complex(3,5)complex(*(3,5))

keyword argument: an argument preceded by an identifier (e.g.name=) in a function call or passed as a value in a dictionary preceded by**. For example,3and5are both keyword arguments in the following calls tocomplex():

```
complex(real=3,imag=5)complex(**{'real':3,'imag':5})
```

positional argument: an argument that is not a keyword argument. Positional arguments can appear at the beginning of an argument list and/or be passed as elements of aniterablepreceded by*. For example,3and5are both positional arguments in the following calls:

```
complex(3,5)complex(*(3,5))
```

Arguments are assigned to the named local variables in a function body. See theCallssection for the rules governing this assignment. Syntactically, any expression can be used to represent an argument; the evaluated value is assigned to the local variable.

See also theparameterglossary entry, the FAQ question onthe difference between arguments and parameters, andPEP 362.

An object which controls the environment seen in anasyncwithstatement by defining__aenter__()and__aexit__()methods. Introduced byPEP 492.

```
__aenter__()
```

```
__aexit__()
```

A function which returns anasynchronous generator iterator. It looks like a coroutine function defined withasyncdefexcept that it containsyieldexpressions for producing a series of values usable in anasyncforloop.

Usually refers to an asynchronous generator function, but may refer to anasynchronous generator iteratorin some contexts. In cases where the intended meaning isn’t clear, using the full terms avoids ambiguity.

An asynchronous generator function may containawaitexpressions as well asasyncfor, andasyncwithstatements.

An object created by aasynchronous generatorfunction.

This is anasynchronous iteratorwhich when called using the__anext__()method returns an awaitable object which will execute the body of the asynchronous generator function until the nextyieldexpression.

```
__anext__()
```

Eachyieldtemporarily suspends processing, remembering the execution state (including local variables and pending try-statements). When theasynchronous generator iteratoreffectively resumes with another awaitable returned by__anext__(), it picks up where it left off. SeePEP 492andPEP 525.

An object, that can be used in anasyncforstatement. Must return anasynchronous iteratorfrom its__aiter__()method. Introduced byPEP 492.

```
__aiter__()
```

================================================================================

An object that implements the__aiter__()and__anext__()methods.__anext__()must return anawaitableobject.asyncforresolves the awaitables returned by an asynchronous iterator’s__anext__()method until it raises aStopAsyncIterationexception. Introduced byPEP 492.

```
StopAsyncIteration
```

A value associated with an object which is usually referenced by name using dotted expressions. For example, if an objectohas an attributeait would be referenced aso.a.

It is possible to give an object an attribute whose name is not an identifier as defined byIdentifiers and keywords, for example usingsetattr(), if the object allows it. Such an attribute will not be accessible using a dotted expression, and would instead need to be retrieved withgetattr().

An object that can be used in anawaitexpression. Can be acoroutineor an object with an__await__()method. See alsoPEP 492.

```
__await__()
```

Benevolent Dictator For Life, a.k.a.Guido van Rossum, Python’s creator.

Afile objectable to read and writebytes-like objects. Examples of binary files are files opened in binary mode ('rb','wb'or'rb+'),sys.stdin.buffer,sys.stdout.buffer, and instances ofio.BytesIOandgzip.GzipFile.

```
sys.stdin.buffer
```

```
sys.stdout.buffer
```

```
io.BytesIO
```

```
gzip.GzipFile
```

See alsotext filefor a file object able to read and writestrobjects.

In Python’s C API, a borrowed reference is a reference to an object, where the code using the object does not own the reference. It becomes a dangling pointer if the object is destroyed. For example, a garbage collection can remove the laststrong referenceto the object and so destroy it.

CallingPy_INCREF()on theborrowed referenceis recommended to convert it to astrong referencein-place, except when the object cannot be destroyed before the last usage of the borrowed reference. ThePy_NewRef()function can be used to create a newstrong reference.

```
Py_INCREF()
```

```
Py_NewRef()
```

An object that supports theBuffer Protocoland can export a C-contiguousbuffer. This includes allbytes,bytearray, andarray.arrayobjects, as well as many commonmemoryviewobjects. Bytes-like objects can be used for various operations that work with binary data; these include compression, saving to a binary file, and sending over a socket.

```
array.array
```

```
memoryview
```

Some operations need the binary data to be mutable. The documentation often refers to these as “read-write bytes-like objects”. Example mutable buffer objects includebytearrayand amemoryviewof abytearray. Other operations require the binary data to be stored in immutable objects (“read-only bytes-like objects”); examples of these includebytesand amemoryviewof abytesobject.

Python source code is compiled into bytecode, the internal representation of a Python program in the CPython interpreter. The bytecode is also cached in.pycfiles so that executing the same file is faster the second time (recompilation from source to bytecode can be avoided). This “intermediate language” is said to run on avirtual machinethat executes the machine code corresponding to each bytecode. Do note that bytecodes are not expected to work between different Python virtual machines, nor to be stable between Python releases.

A list of bytecode instructions can be found in the documentation forthe dis module.

A callable is an object that can be called, possibly with a set of arguments (seeargument), with the following syntax:

```
callable(argument1,argument2,argumentN)
```

Afunction, and by extension amethod, is a callable. An instance of a class that implements the__call__()method is also a callable.

```
__call__()
```

A subroutine function which is passed as an argument to be executed at some point in the future.

A template for creating user-defined objects. Class definitions normally contain method definitions which operate on instances of the class.

A variable defined in a class and intended to be modified only at class level (i.e., not in an instance of the class).

Afree variablereferenced from anested scopethat is defined in an outer scope rather than being resolved at runtime from the globals or builtin namespaces. May be explicitly defined with thenonlocalkeyword to allow write access, or implicitly defined if the variable is only being read.

For example, in theinnerfunction in the following code, bothxandprintarefree variables, but onlyxis aclosure variable:

```
defouter():x=0definner():nonlocalxx+=1print(x)returninner
```

Due to thecodeobject.co_freevarsattribute (which, despite its name, only includes the names of closure variables rather than listing all referenced free variables), the more generalfree variableterm is sometimes used even when the intended meaning is to refer specifically to closure variables.

```
codeobject.co_freevars
```

An extension of the familiar real number system in which all numbers are expressed as a sum of a real part and an imaginary part. Imaginary numbers are real multiples of the imaginary unit (the square root of-1), often writteniin mathematics orjin engineering. Python has built-in support for complex numbers, which are written with this latter notation; the imaginary part is written with ajsuffix, e.g.,3+1j. To get access to complex equivalents of themathmodule, usecmath. Use of complex numbers is a fairly advanced mathematical feature. If you’re not aware of a need for them, it’s almost certain you can safely ignore them.

This term has different meanings depending on where and how it is used. Some common meanings:

- The temporary state or environment established by acontext
managervia awithstatement.
- The collection of key­value bindings associated with a particularcontextvars.Contextobject and accessed viaContextVarobjects.  Also seecontext
variable.
- Acontextvars.Contextobject.  Also seecurrent
context.

```
contextvars.Context
```

```
ContextVar
```

The__enter__()and__exit__()methods called by thewithstatement. SeePEP 343.

```
__enter__()
```

```
__exit__()
```

An object which implements thecontext management protocoland controls the environment seen in awithstatement. SeePEP 343.

A variable whose value depends on which context is thecurrent context. Values are accessed viacontextvars.ContextVarobjects. Context variables are primarily used to isolate state between concurrent asynchronous tasks.

```
contextvars.ContextVar
```

A buffer is considered contiguous exactly if it is eitherC-contiguousorFortran contiguous. Zero-dimensional buffers are C and Fortran contiguous. In one-dimensional arrays, the items must be laid out in memory next to each other, in order of increasing indexes starting from zero. In multidimensional C-contiguous arrays, the last index varies the fastest when visiting items in order of memory address. However, in Fortran contiguous arrays, the first index varies the fastest.

Coroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at another point. Coroutines can be entered, exited, and resumed at many different points. They can be implemented with theasyncdefstatement. See alsoPEP 492.

A function which returns acoroutineobject. A coroutine function may be defined with theasyncdefstatement, and may containawait,asyncfor, andasyncwithkeywords. These were introduced byPEP 492.

The canonical implementation of the Python programming language, as distributed onpython.org. The term “CPython” is used when necessary to distinguish this implementation from others such as Jython or IronPython.

Thecontext(contextvars.Contextobject) that is currently used byContextVarobjects to access (get or set) the values ofcontext variables. Each thread has its own current context. Frameworks for executing asynchronous tasks (seeasyncio) associate each task with a context which becomes the current context whenever the task starts or resumes execution.

A function returning another function, usually applied as a function transformation using the@wrappersyntax. Common examples for decorators areclassmethod()andstaticmethod().

```
classmethod()
```

```
staticmethod()
```

The decorator syntax is merely syntactic sugar, the following two function definitions are semantically equivalent:

```
deff(arg):...f=staticmethod(f)@staticmethoddeff(arg):...
```

The same concept exists for classes, but is less commonly used there. See the documentation forfunction definitionsandclass definitionsfor more about decorators.

Any object which defines the methods__get__(),__set__(), or__delete__(). When a class attribute is a descriptor, its special binding behavior is triggered upon attribute lookup. Normally, usinga.bto get, set or delete an attribute looks up the object namedbin the class dictionary fora, but ifbis a descriptor, the respective descriptor method gets called. Understanding descriptors is a key to a deep understanding of Python because they are the basis for many features including functions, methods, properties, class methods, static methods, and reference to super classes.

```
__delete__()
```

For more information about descriptors’ methods, seeImplementing Descriptorsor theDescriptor How To Guide.

An associative array, where arbitrary keys are mapped to values. The keys can be any object with__hash__()and__eq__()methods. Called a hash in Perl.

```
__hash__()
```

A compact way to process all or part of the elements in an iterable and return a dictionary with the results.results={n:n**2forninrange(10)}generates a dictionary containing keynmapped to valuen**2. SeeDisplays for lists, sets and dictionaries.

```
results={n:n**2forninrange(10)}
```

The objects returned fromdict.keys(),dict.values(), anddict.items()are called dictionary views. They provide a dynamic view on the dictionary’s entries, which means that when the dictionary changes, the view reflects these changes. To force the dictionary view to become a full list uselist(dictview). SeeDictionary view objects.

```
dict.keys()
```

```
dict.values()
```

```
dict.items()
```

```
list(dictview)
```

A string literal which appears as the first expression in a class, function or module. While ignored when the suite is executed, it is recognized by the compiler and put into the__doc__attribute of the enclosing class, function or module. Since it is available via introspection, it is the canonical place for documentation of the object.

A programming style which does not look at an object’s type to determine if it has the right interface; instead, the method or attribute is simply called or used (“If it looks like a duck and quacks like a duck, it must be a duck.”) By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests usingtype()orisinstance(). (Note, however, that duck-typing can be complemented withabstract base classes.) Instead, it typically employshasattr()tests orEAFPprogramming.

================================================================================

Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of manytryandexceptstatements. The technique contrasts with theLBYLstyle common to many other languages such as C.

A piece of syntax which can be evaluated to some value. In other words, an expression is an accumulation of expression elements like literals, names, attribute access, operators or function calls which all return a value. In contrast to many other languages, not all language constructs are expressions. There are alsostatements which cannot be used as expressions, such aswhile. Assignments are also statements, not expressions.

A module written in C or C++, using Python’s C API to interact with the core and with user code.

String literals prefixed with'f'or'F'are commonly called “f-strings” which is short forformatted string literals. See alsoPEP 498.

An object exposing a file-oriented API (with methods such asread()orwrite()) to an underlying resource. Depending on the way it was created, a file object can mediate access to a real on-disk file or to another type of storage or communication device (for example standard input/output, in-memory buffers, sockets, pipes, etc.). File objects are also calledfile-like objectsorstreams.

There are actually three categories of file objects: rawbinary files, bufferedbinary filesandtext files. Their interfaces are defined in theiomodule. The canonical way to create a file object is by using theopen()function.

A synonym forfile object.

Encoding and error handler used by Python to decode bytes from the operating system and encode Unicode to the operating system.

The filesystem encoding must guarantee to successfully decode all bytes below 128. If the file system encoding fails to provide this guarantee, API functions can raiseUnicodeError.

```
UnicodeError
```

Thesys.getfilesystemencoding()andsys.getfilesystemencodeerrors()functions can be used to get the filesystem encoding and error handler.

```
sys.getfilesystemencoding()
```

```
sys.getfilesystemencodeerrors()
```

Thefilesystem encoding and error handlerare configured at Python startup by thePyConfig_Read()function: seefilesystem_encodingandfilesystem_errorsmembers ofPyConfig.

```
PyConfig_Read()
```

```
filesystem_encoding
```

```
filesystem_errors
```

See also thelocale encoding.

An object that tries to find theloaderfor a module that is being imported.

There are two types of finder:meta path findersfor use withsys.meta_path, andpath entry findersfor use withsys.path_hooks.

```
sys.meta_path
```

```
sys.path_hooks
```

SeeFinders and loadersandimportlibfor much more detail.

Mathematical division that rounds down to nearest integer. The floor division operator is//. For example, the expression11//4evaluates to2in contrast to the2.75returned by float true division. Note that(-11)//4is-3because that is-2.75roundeddownward. SeePEP 238.

A threading model where multiple threads can run Python bytecode simultaneously within the same interpreter. This is in contrast to theglobal interpreter lockwhich allows only one thread to execute Python bytecode at a time. SeePEP 703.

Formally, as defined in thelanguage execution model, a free variable is any variable used in a namespace which is not a local variable in that namespace. Seeclosure variablefor an example. Pragmatically, due to the name of thecodeobject.co_freevarsattribute, the term is also sometimes used as a synonym forclosure variable.

A series of statements which returns some value to a caller. It can also be passed zero or moreargumentswhich may be used in the execution of the body. See alsoparameter,method, and theFunction definitionssection.

Anannotationof a function parameter or return value.

Function annotations are usually used fortype hints: for example, this function is expected to take twointarguments and is also expected to have anintreturn value:

```
defsum_two_numbers(a:int,b:int)->int:returna+b
```

Function annotation syntax is explained in sectionFunction definitions.

Seevariable annotationandPEP 484, which describe this functionality. Also seeAnnotations Best Practicesfor best practices on working with annotations.

Afuture statement,from__future__import<feature>, directs the compiler to compile the current module using syntax or semantics that will become standard in a future release of Python. The__future__module documents the possible values offeature. By importing this module and evaluating its variables, you can see when a new feature was first added to the language and when it will (or did) become the default:

```
from__future__import<feature>
```

```
__future__
```

```
>>>import__future__>>>__future__.division_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)
```

The process of freeing memory when it is not used anymore. Python performs garbage collection via reference counting and a cyclic garbage collector that is able to detect and break reference cycles. The garbage collector can be controlled using thegcmodule.

A function which returns agenerator iterator. It looks like a normal function except that it containsyieldexpressions for producing a series of values usable in a for-loop or that can be retrieved one at a time with thenext()function.

Usually refers to a generator function, but may refer to agenerator iteratorin some contexts. In cases where the intended meaning isn’t clear, using the full terms avoids ambiguity.

An object created by ageneratorfunction.

Eachyieldtemporarily suspends processing, remembering the execution state (including local variables and pending try-statements). When thegenerator iteratorresumes, it picks up where it left off (in contrast to functions which start fresh on every invocation).

Anexpressionthat returns aniterator. It looks like a normal expression followed by aforclause defining a loop variable, range, and an optionalifclause. The combined expression generates values for an enclosing function:

```
>>>sum(i*iforiinrange(10))# sum of squares 0, 1, 4, ... 81285
```

A function composed of multiple functions implementing the same operation for different types. Which implementation should be used during a call is determined by the dispatch algorithm.

See also thesingle dispatchglossary entry, thefunctools.singledispatch()decorator, andPEP 443.

```
functools.singledispatch()
```

Atypethat can be parameterized; typically acontainer classsuch aslistordict. Used fortype hintsandannotations.

For more details, seegeneric alias types,PEP 483,PEP 484,PEP 585, and thetypingmodule.

Seeglobal interpreter lock.

The mechanism used by theCPythoninterpreter to assure that only one thread executes Pythonbytecodeat a time. This simplifies the CPython implementation by making the object model (including critical built-in types such asdict) implicitly safe against concurrent access. Locking the entire interpreter makes it easier for the interpreter to be multi-threaded, at the expense of much of the parallelism afforded by multi-processor machines.

However, some extension modules, either standard or third-party, are designed so as to release the GIL when doing computationally intensive tasks such as compression or hashing. Also, the GIL is always released when doing I/O.

As of Python 3.13, the GIL can be disabled using the--disable-gilbuild configuration. After building Python with this option, code must be run with-Xgil=0or after setting thePYTHON_GIL=0environment variable. This feature enables improved performance for multi-threaded applications and makes it easier to use multi-core CPUs efficiently. For more details, seePEP 703.

```
--disable-gil
```

```
PYTHON_GIL=0
```

A bytecode cache file that uses the hash rather than the last-modified time of the corresponding source file to determine its validity. SeeCached bytecode invalidation.

An object ishashableif it has a hash value which never changes during its lifetime (it needs a__hash__()method), and can be compared to other objects (it needs an__eq__()method). Hashable objects which compare equal must have the same hash value.

Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.

Most of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries) are not; immutable containers (such as tuples and frozensets) are only hashable if their elements are hashable. Objects which are instances of user-defined classes are hashable by default. They all compare unequal (except with themselves), and their hash value is derived from theirid().

An Integrated Development and Learning Environment for Python.IDLE — Python editor and shellis a basic editor and interpreter environment which ships with the standard distribution of Python.

Immortal objectsare a CPython implementation detail introduced inPEP 683.

If an object is immortal, itsreference countis never modified, and therefore it is never deallocated while the interpreter is running. For example,TrueandNoneare immortal in CPython.

An object with a fixed value. Immutable objects include numbers, strings and tuples. Such an object cannot be altered. A new object has to be created if a different value has to be stored. They play an important role in places where a constant hash value is needed, for example as a key in a dictionary.

A list of locations (orpath entries) that are searched by thepath based finderfor modules to import. During import, this list of locations usually comes fromsys.path, but for subpackages it may also come from the parent package’s__path__attribute.

The process by which Python code in one module is made available to Python code in another module.

An object that both finds and loads a module; both afinderandloaderobject.

Python has an interactive interpreter which means you can enter statements and expressions at the interpreter prompt, immediately execute them and see their results. Just launchpythonwith no arguments (possibly by selecting it from your computer’s main menu). It is a very powerful way to test out new ideas or inspect modules and packages (rememberhelp(x)). For more on interactive mode, seeInteractive Mode.

================================================================================

Python is an interpreted language, as opposed to a compiled one, though the distinction can be blurry because of the presence of the bytecode compiler. This means that source files can be run directly without explicitly creating an executable which is then run. Interpreted languages typically have a shorter development/debug cycle than compiled ones, though their programs generally also run more slowly. See alsointeractive.

When asked to shut down, the Python interpreter enters a special phase where it gradually releases all allocated resources, such as modules and various critical internal structures. It also makes several calls to thegarbage collector. This can trigger the execution of code in user-defined destructors or weakref callbacks. Code executed during the shutdown phase can encounter various exceptions as the resources it relies on may not function anymore (common examples are library modules or the warnings machinery).

The main reason for interpreter shutdown is that the__main__module or the script being run has finished executing.

An object capable of returning its members one at a time. Examples of iterables include all sequence types (such aslist,str, andtuple) and some non-sequence types likedict,file objects, and objects of any classes you define with an__iter__()method or with a__getitem__()method that implementssequencesemantics.

```
__iter__()
```

```
__getitem__()
```

Iterables can be used in aforloop and in many other places where a sequence is needed (zip(),map(), …). When an iterable object is passed as an argument to the built-in functioniter(), it returns an iterator for the object. This iterator is good for one pass over the set of values. When using iterables, it is usually not necessary to calliter()or deal with iterator objects yourself. Theforstatement does that automatically for you, creating a temporary unnamed variable to hold the iterator for the duration of the loop. See alsoiterator,sequence, andgenerator.

An object representing a stream of data. Repeated calls to the iterator’s__next__()method (or passing it to the built-in functionnext()) return successive items in the stream. When no more data are available aStopIterationexception is raised instead. At this point, the iterator object is exhausted and any further calls to its__next__()method just raiseStopIterationagain. Iterators are required to have an__iter__()method that returns the iterator object itself so every iterator is also iterable and may be used in most places where other iterables are accepted. One notable exception is code which attempts multiple iteration passes. A container object (such as alist) produces a fresh new iterator each time you pass it to theiter()function or use it in aforloop. Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container.

```
__next__()
```

```
StopIteration
```

More information can be found inIterator Types.

CPython implementation detail:CPython does not consistently apply the requirement that an iterator define__iter__(). And also please note that the free-threading CPython does not guarantee the thread-safety of iterator operations.

A key function or collation function is a callable that returns a value used for sorting or ordering. For example,locale.strxfrm()is used to produce a sort key that is aware of locale specific sort conventions.

```
locale.strxfrm()
```

A number of tools in Python accept key functions to control how elements are ordered or grouped. They includemin(),max(),sorted(),list.sort(),heapq.merge(),heapq.nsmallest(),heapq.nlargest(), anditertools.groupby().

```
list.sort()
```

```
heapq.merge()
```

```
heapq.nsmallest()
```

```
heapq.nlargest()
```

```
itertools.groupby()
```

There are several ways to create a key function. For example. thestr.lower()method can serve as a key function for case insensitive sorts. Alternatively, a key function can be built from alambdaexpression such aslambdar:(r[0],r[2]). Also,operator.attrgetter(),operator.itemgetter(), andoperator.methodcaller()are three key function constructors. See theSorting HOW TOfor examples of how to create and use key functions.

```
str.lower()
```

```
lambdar:(r[0],r[2])
```

```
operator.attrgetter()
```

```
operator.itemgetter()
```

```
operator.methodcaller()
```

Seeargument.

An anonymous inline function consisting of a singleexpressionwhich is evaluated when the function is called. The syntax to create a lambda function islambda[parameters]:expression

```
lambda[parameters]:expression
```

Look before you leap. This coding style explicitly tests for pre-conditions before making calls or lookups. This style contrasts with theEAFPapproach and is characterized by the presence of manyifstatements.

In a multi-threaded environment, the LBYL approach can risk introducing a race condition between “the looking” and “the leaping”. For example, the code,ifkeyinmapping:returnmapping[key]can fail if another thread removeskeyfrommappingafter the test, but before the lookup. This issue can be solved with locks or by using the EAFP approach.

```
ifkeyinmapping:returnmapping[key]
```

Formal name for thetokenizer; seetoken.

A built-in Pythonsequence. Despite its name it is more akin to an array in other languages than to a linked list since access to elements isO(1).

A compact way to process all or part of the elements in a sequence and return a list with the results.result=['{:#04x}'.format(x)forxinrange(256)ifx%2==0]generates a list of strings containing even hex numbers (0x..) in the range from 0 to 255. Theifclause is optional. If omitted, all elements inrange(256)are processed.

```
result=['{:#04x}'.format(x)forxinrange(256)ifx%2==0]
```

```
range(256)
```

An object that loads a module. It must define theexec_module()andcreate_module()methods to implement theLoaderinterface. A loader is typically returned by afinder. See also:

```
exec_module()
```

```
create_module()
```

- Finders and loaders
- importlib.abc.Loader

On Unix, it is the encoding of the LC_CTYPE locale. It can be set withlocale.setlocale(locale.LC_CTYPE,new_locale).

```
locale.setlocale(locale.LC_CTYPE,new_locale)
```

On Windows, it is the ANSI code page (ex:"cp1252").

On Android and VxWorks, Python uses"utf-8"as the locale encoding.

locale.getencoding()can be used to get the locale encoding.

```
locale.getencoding()
```

See also thefilesystem encoding and error handler.

An informal synonym forspecial method.

A container object that supports arbitrary key lookups and implements the methods specified in thecollections.abc.Mappingorcollections.abc.MutableMappingabstract base classes. Examples includedict,collections.defaultdict,collections.OrderedDictandcollections.Counter.

```
collections.abc.Mapping
```

```
collections.abc.MutableMapping
```

```
collections.defaultdict
```

```
collections.OrderedDict
```

```
collections.Counter
```

Afinderreturned by a search ofsys.meta_path. Meta path finders are related to, but different frompath entry finders.

Seeimportlib.abc.MetaPathFinderfor the methods that meta path finders implement.

```
importlib.abc.MetaPathFinder
```

The class of a class. Class definitions create a class name, a class dictionary, and a list of base classes. The metaclass is responsible for taking those three arguments and creating the class. Most object oriented programming languages provide a default implementation. What makes Python special is that it is possible to create custom metaclasses. Most users never need this tool, but when the need arises, metaclasses can provide powerful, elegant solutions. They have been used for logging attribute access, adding thread-safety, tracking object creation, implementing singletons, and many other tasks.

More information can be found inMetaclasses.

A function which is defined inside a class body. If called as an attribute of an instance of that class, the method will get the instance object as its firstargument(which is usually calledself). Seefunctionandnested scope.

Method Resolution Order is the order in which base classes are searched for a member during lookup. SeeThe Python 2.3 Method Resolution Orderfor details of the algorithm used by the Python interpreter since the 2.3 release.

An object that serves as an organizational unit of Python code. Modules have a namespace containing arbitrary Python objects. Modules are loaded into Python by the process ofimporting.

See alsopackage.

A namespace containing the import-related information used to load a module. An instance ofimportlib.machinery.ModuleSpec.

```
importlib.machinery.ModuleSpec
```

See alsoModule specs.

Seemethod resolution order.

Mutable objects can change their value but keep theirid(). See alsoimmutable.

The term “named tuple” applies to any type or class that inherits from tuple and whose indexable elements are also accessible using named attributes. The type or class may have other features as well.

Several built-in types are named tuples, including the values returned bytime.localtime()andos.stat(). Another example issys.float_info:

```
time.localtime()
```

```
sys.float_info
```

```
>>>sys.float_info[1]# indexed access1024>>>sys.float_info.max_exp# named field access1024>>>isinstance(sys.float_info,tuple)# kind of tupleTrue
```

Some named tuples are built-in types (such as the above examples). Alternatively, a named tuple can be created from a regular class definition that inherits fromtupleand that defines named fields. Such a class can be written by hand, or it can be created by inheritingtyping.NamedTuple, or with the factory functioncollections.namedtuple(). The latter techniques also add some extra methods that may not be found in hand-written or built-in named tuples.

```
typing.NamedTuple
```

```
collections.namedtuple()
```

The place where a variable is stored. Namespaces are implemented as dictionaries. There are the local, global and built-in namespaces as well as nested namespaces in objects (in methods). Namespaces support modularity by preventing naming conflicts. For instance, the functionsbuiltins.openandos.open()are distinguished by their namespaces. Namespaces also aid readability and maintainability by making it clear which module implements a function. For instance, writingrandom.seed()oritertools.islice()makes it clear that those functions are implemented by therandomanditertoolsmodules, respectively.

```
builtins.open
```

```
random.seed()
```

```
itertools.islice()
```

Apackagewhich serves only as a container for subpackages. Namespace packages may have no physical representation, and specifically are not like aregular packagebecause they have no__init__.pyfile.

```
__init__.py
```

Namespace packages allow several individually installable packages to have a common parent package. Otherwise, it is recommended to use aregular package.

For more information, seePEP 420andNamespace packages.

See alsomodule.

================================================================================

The ability to refer to a variable in an enclosing definition. For instance, a function defined inside another function can refer to variables in the outer function. Note that nested scopes by default work only for reference and not for assignment. Local variables both read and write in the innermost scope. Likewise, global variables read and write to the global namespace. Thenonlocalallows writing to outer scopes.

Old name for the flavor of classes now used for all class objects. In earlier Python versions, only new-style classes could use Python’s newer, versatile features like__slots__, descriptors, properties,__getattribute__(), class methods, and static methods.

```
__getattribute__()
```

Any data with state (attributes or value) and defined behavior (methods). Also the ultimate base class of anynew-style class.

A scope where target local variable names are reliably known to the compiler when the code is compiled, allowing optimization of read and write access to these names. The local namespaces for functions, generators, coroutines, comprehensions, and generator expressions are optimized in this fashion. Note: most interpreter optimizations are applied to all scopes, only those relying on a known set of local and nonlocal variable names are restricted to optimized scopes.

A Pythonmodulewhich can contain submodules or recursively, subpackages. Technically, a package is a Python module with a__path__attribute.

See alsoregular packageandnamespace package.

A named entity in afunction(or method) definition that specifies anargument(or in some cases, arguments) that the function can accept. There are five kinds of parameter:

- positional-or-keyword: specifies an argument that can be passed
eitherpositionallyor as akeyword argument.  This is the default kind of parameter, for examplefooandbarin the following:deffunc(foo,bar=None):...

positional-or-keyword: specifies an argument that can be passed eitherpositionallyor as akeyword argument. This is the default kind of parameter, for examplefooandbarin the following:

```
deffunc(foo,bar=None):...
```

- positional-only: specifies an argument that can be supplied only
by position. Positional-only parameters can be defined by including a/character in the parameter list of the function definition after
them, for exampleposonly1andposonly2in the following:deffunc(posonly1,posonly2,/,positional_or_keyword):...

positional-only: specifies an argument that can be supplied only by position. Positional-only parameters can be defined by including a/character in the parameter list of the function definition after them, for exampleposonly1andposonly2in the following:

```
deffunc(posonly1,posonly2,/,positional_or_keyword):...
```

- keyword-only: specifies an argument that can be supplied only
by keyword.  Keyword-only parameters can be defined by including a
single var-positional parameter or bare*in the parameter list
of the function definition before them, for examplekw_only1andkw_only2in the following:deffunc(arg,*,kw_only1,kw_only2):...
- var-positional: specifies that an arbitrary sequence of
positional arguments can be provided (in addition to any positional
arguments already accepted by other parameters).  Such a parameter can
be defined by prepending the parameter name with*, for exampleargsin the following:deffunc(*args,**kwargs):...
- var-keyword: specifies that arbitrarily many keyword arguments
can be provided (in addition to any keyword arguments already accepted
by other parameters).  Such a parameter can be defined by prepending
the parameter name with**, for examplekwargsin the example
above.

keyword-only: specifies an argument that can be supplied only by keyword. Keyword-only parameters can be defined by including a single var-positional parameter or bare*in the parameter list of the function definition before them, for examplekw_only1andkw_only2in the following:

```
deffunc(arg,*,kw_only1,kw_only2):...
```

var-positional: specifies that an arbitrary sequence of positional arguments can be provided (in addition to any positional arguments already accepted by other parameters). Such a parameter can be defined by prepending the parameter name with*, for exampleargsin the following:

```
deffunc(*args,**kwargs):...
```

Parameters can specify both optional and required arguments, as well as default values for some optional arguments.

See also theargumentglossary entry, the FAQ question onthe difference between arguments and parameters, theinspect.Parameterclass, theFunction definitionssection, andPEP 362.

```
inspect.Parameter
```

A single location on theimport pathwhich thepath based finderconsults to find modules for importing.

Afinderreturned by a callable onsys.path_hooks(i.e. apath entry hook) which knows how to locate modules given apath entry.

Seeimportlib.abc.PathEntryFinderfor the methods that path entry finders implement.

```
importlib.abc.PathEntryFinder
```

A callable on thesys.path_hookslist which returns apath entry finderif it knows how to find modules on a specificpath entry.

One of the defaultmeta path finderswhich searches animport pathfor modules.

An object representing a file system path. A path-like object is either astrorbytesobject representing a path, or an object implementing theos.PathLikeprotocol. An object that supports theos.PathLikeprotocol can be converted to astrorbytesfile system path by calling theos.fspath()function;os.fsdecode()andos.fsencode()can be used to guarantee astrorbytesresult instead, respectively. Introduced byPEP 519.

```
os.PathLike
```

```
os.fspath()
```

```
os.fsdecode()
```

```
os.fsencode()
```

Python Enhancement Proposal. A PEP is a design document providing information to the Python community, or describing a new feature for Python or its processes or environment. PEPs should provide a concise technical specification and a rationale for proposed features.

PEPs are intended to be the primary mechanisms for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python. The PEP author is responsible for building consensus within the community and documenting dissenting opinions.

A set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as defined inPEP 420.

A provisional API is one which has been deliberately excluded from the standard library’s backwards compatibility guarantees. While major changes to such interfaces are not expected, as long as they are marked provisional, backwards incompatible changes (up to and including removal of the interface) may occur if deemed necessary by core developers. Such changes will not be made gratuitously – they will occur only if serious fundamental flaws are uncovered that were missed prior to the inclusion of the API.

Even for provisional APIs, backwards incompatible changes are seen as a “solution of last resort” - every attempt will still be made to find a backwards compatible resolution to any identified problems.

This process allows the standard library to continue to evolve over time, without locking in problematic design errors for extended periods of time. SeePEP 411for more details.

Seeprovisional API.

Nickname for the Python 3.x release line (coined long ago when the release of version 3 was something in the distant future.) This is also abbreviated “Py3k”.

An idea or piece of code which closely follows the most common idioms of the Python language, rather than implementing code using concepts common to other languages. For example, a common idiom in Python is to loop over all elements of an iterable using aforstatement. Many other languages don’t have this type of construct, so people unfamiliar with Python sometimes use a numerical counter instead:

```
foriinrange(len(food)):print(food[i])
```

As opposed to the cleaner, Pythonic method:

```
forpieceinfood:print(piece)
```

A dotted name showing the “path” from a module’s global scope to a class, function or method defined in that module, as defined inPEP 3155. For top-level functions and classes, the qualified name is the same as the object’s name:

```
>>>classC:...classD:...defmeth(self):...pass...>>>C.__qualname__'C'>>>C.D.__qualname__'C.D'>>>C.D.meth.__qualname__'C.D.meth'
```

When used to refer to modules, thefully qualified namemeans the entire dotted path to the module, including any parent packages, e.g.email.mime.text:

```
email.mime.text
```

```
>>>importemail.mime.text>>>email.mime.text.__name__'email.mime.text'
```

The number of references to an object. When the reference count of an object drops to zero, it is deallocated. Some objects areimmortaland have reference counts that are never modified, and therefore the objects are never deallocated. Reference counting is generally not visible to Python code, but it is a key element of theCPythonimplementation. Programmers can call thesys.getrefcount()function to return the reference count for a particular object.

```
sys.getrefcount()
```

A traditionalpackage, such as a directory containing an__init__.pyfile.

See alsonamespace package.

An acronym for the “read–eval–print loop”, another name for theinteractiveinterpreter shell.

A declaration inside a class that saves memory by pre-declaring space for instance attributes and eliminating instance dictionaries. Though popular, the technique is somewhat tricky to get right and is best reserved for rare cases where there are large numbers of instances in a memory-critical application.

Aniterablewhich supports efficient element access using integer indices via the__getitem__()special method and defines a__len__()method that returns the length of the sequence. Some built-in sequence types arelist,str,tuple, andbytes. Note thatdictalso supports__getitem__()and__len__(), but is considered a mapping rather than a sequence because the lookups use arbitraryhashablekeys rather than integers.

Thecollections.abc.Sequenceabstract base class defines a much richer interface that goes beyond just__getitem__()and__len__(), addingcount(),index(),__contains__(), and__reversed__(). Types that implement this expanded interface can be registered explicitly usingregister(). For more documentation on sequence methods generally, seeCommon Sequence Operations.

```
collections.abc.Sequence
```

```
__contains__()
```

```
__reversed__()
```

```
register()
```

A compact way to process all or part of the elements in an iterable and return a set with the results.results={cforcin'abracadabra'ifcnotin'abc'}generates the set of strings{'r','d'}. SeeDisplays for lists, sets and dictionaries.

```
results={cforcin'abracadabra'ifcnotin'abc'}
```

A form ofgeneric functiondispatch where the implementation is chosen based on the type of a single argument.

An object usually containing a portion of asequence. A slice is created using the subscript notation,[]with colons between numbers when several are given, such as invariable_name[1:3:5]. The bracket (subscript) notation usessliceobjects internally.

```
variable_name[1:3:5]
```

================================================================================

A soft deprecated API should not be used in new code, but it is safe for already existing code to use it. The API remains documented and tested, but will not be enhanced further.

Soft deprecation, unlike normal deprecation, does not plan on removing the API and will not emit warnings.

SeePEP 387: Soft Deprecation.

A method that is called implicitly by Python to execute a certain operation on a type, such as addition. Such methods have names starting and ending with double underscores. Special methods are documented inSpecial method names.

A statement is part of a suite (a “block” of code). A statement is either anexpressionor one of several constructs with a keyword, such asif,whileorfor.

An external tool that reads Python code and analyzes it, looking for issues such as incorrect types. See alsotype hintsand thetypingmodule.

In Python’s C API, a strong reference is a reference to an object which is owned by the code holding the reference. The strong reference is taken by callingPy_INCREF()when the reference is created and released withPy_DECREF()when the reference is deleted.

```
Py_DECREF()
```

ThePy_NewRef()function can be used to create a strong reference to an object. Usually, thePy_DECREF()function must be called on the strong reference before exiting the scope of the strong reference, to avoid leaking one reference.

See alsoborrowed reference.

A string in Python is a sequence of Unicode code points (in rangeU+0000–U+10FFFF). To store or transfer a string, it needs to be serialized as a sequence of bytes.

Serializing a string into a sequence of bytes is known as “encoding”, and recreating the string from the sequence of bytes is known as “decoding”.

There are a variety of different text serializationcodecs, which are collectively referred to as “text encodings”.

Afile objectable to read and writestrobjects. Often, a text file actually accesses a byte-oriented datastream and handles thetext encodingautomatically. Examples of text files are files opened in text mode ('r'or'w'),sys.stdin,sys.stdout, and instances ofio.StringIO.

```
sys.stdout
```

```
io.StringIO
```

See alsobinary filefor a file object able to read and writebytes-like objects.

A small unit of source code, generated by thelexical analyzer(also called thetokenizer). Names, numbers, strings, operators, newlines and similar are represented by tokens.

Thetokenizemodule exposes Python’s lexical analyzer. Thetokenmodule contains information on the various types of tokens.

A string which is bound by three instances of either a quotation mark (”) or an apostrophe (‘). While they don’t provide any functionality not available with single-quoted strings, they are useful for a number of reasons. They allow you to include unescaped single and double quotes within a string and they can span multiple lines without the use of the continuation character, making them especially useful when writing docstrings.

The type of a Python object determines what kind of object it is; every object has a type. An object’s type is accessible as its__class__attribute or can be retrieved withtype(obj).

A synonym for a type, created by assigning the type to an identifier.

Type aliases are useful for simplifyingtype hints. For example:

```
defremove_gray_shades(colors:list[tuple[int,int,int]])->list[tuple[int,int,int]]:pass
```

could be made more readable like this:

```
Color=tuple[int,int,int]defremove_gray_shades(colors:list[Color])->list[Color]:pass
```

SeetypingandPEP 484, which describe this functionality.

Anannotationthat specifies the expected type for a variable, a class attribute, or a function parameter or return value.

Type hints are optional and are not enforced by Python but they are useful tostatic type checkers. They can also aid IDEs with code completion and refactoring.

Type hints of global variables, class attributes, and functions, but not local variables, can be accessed usingtyping.get_type_hints().

```
typing.get_type_hints()
```

A manner of interpreting text streams in which all of the following are recognized as ending a line: the Unix end-of-line convention'\n', the Windows convention'\r\n', and the old Macintosh convention'\r'. SeePEP 278andPEP 3116, as well asbytes.splitlines()for an additional use.

```
bytes.splitlines()
```

Anannotationof a variable or a class attribute.

When annotating a variable or a class attribute, assignment is optional:

```
classC:field:'annotation'
```

Variable annotations are usually used fortype hints: for example this variable is expected to takeintvalues:

```
count:int=0
```

Variable annotation syntax is explained in sectionAnnotated assignment statements.

Seefunction annotation,PEP 484andPEP 526, which describe this functionality. Also seeAnnotations Best Practicesfor best practices on working with annotations.

A cooperatively isolated runtime environment that allows Python users and applications to install and upgrade Python distribution packages without interfering with the behaviour of other Python applications running on the same system.

See alsovenv.

A computer defined entirely in software. Python’s virtual machine executes thebytecodeemitted by the bytecode compiler.

Listing of Python design principles and philosophies that are helpful in understanding and using the language. The listing can be found by typing “importthis” at the interactive prompt.

```
importthis
```

================================================================================

================================================================================

# What’s New in Python — Python 3.13.3 documentation
URL: https://docs.python.org/3/whatsnew/index.html
Section: 1/2
Description: The “What’s New in Python” series of essays takes tours through the most important changes between major Python versions. They are a “must read” for anyone wishing to stay up-to-date after a new re...

Content:

================================================================================

# What’s New in Python¶

The “What’s New in Python” series of essays takes tours through the most important changes between major Python versions. They are a “must read” for anyone wishing to stay up-to-date after a new release.

- What’s New In Python 3.13Summary – Release HighlightsNew FeaturesOther Language ChangesNew ModulesImproved ModulesOptimizationsRemoved Modules And APIsNew DeprecationsCPython Bytecode ChangesC API ChangesBuild ChangesPorting to Python 3.13Regression Test ChangesNotable changes in 3.13.1
- What’s New In Python 3.12Summary – Release highlightsNew FeaturesNew Features Related to Type HintsOther Language ChangesNew ModulesImproved ModulesOptimizationsCPython bytecode changesDemos and ToolsDeprecatedRemovedPorting to Python 3.12Build ChangesC API Changes
- What’s New In Python 3.11Summary – Release highlightsNew FeaturesNew Features Related to Type HintsOther Language ChangesOther CPython Implementation ChangesNew ModulesImproved ModulesOptimizationsFaster CPythonCPython bytecode changesDeprecatedPending Removal in Python 3.12RemovedPorting to Python 3.11Build ChangesC API ChangesNotable changes in 3.11.4Notable changes in 3.11.5
- What’s New In Python 3.10Summary – Release highlightsNew FeaturesNew Features Related to Type HintsOther Language ChangesNew ModulesImproved ModulesOptimizationsDeprecatedRemovedPorting to Python 3.10CPython bytecode changesBuild ChangesC API ChangesNotable security feature in 3.10.7Notable security feature in 3.10.8Notable changes in 3.10.12
- What’s New In Python 3.9Summary – Release highlightsYou should check for DeprecationWarning in your codeNew FeaturesOther Language ChangesNew ModulesImproved ModulesOptimizationsDeprecatedRemovedPorting to Python 3.9Build ChangesC API ChangesNotable changes in Python 3.9.1Notable changes in Python 3.9.2Notable changes in Python 3.9.3Notable changes in Python 3.9.5Notable security feature in 3.9.14Notable changes in 3.9.17
- What’s New In Python 3.8Summary – Release highlightsNew FeaturesOther Language ChangesNew ModulesImproved ModulesOptimizationsBuild and C API ChangesDeprecatedAPI and Feature RemovalsPorting to Python 3.8Notable changes in Python 3.8.1Notable changes in Python 3.8.2Notable changes in Python 3.8.3Notable changes in Python 3.8.8Notable changes in Python 3.8.9Notable changes in Python 3.8.10Notable changes in Python 3.8.10Notable changes in Python 3.8.12Notable security feature in 3.8.14Notable changes in 3.8.17
- What’s New In Python 3.7Summary – Release HighlightsNew FeaturesOther Language ChangesNew ModulesImproved ModulesC API ChangesBuild ChangesOptimizationsOther CPython Implementation ChangesDeprecated Python BehaviorDeprecated Python modules, functions and methodsDeprecated functions and types of the C APIPlatform Support RemovalsAPI and Feature RemovalsModule RemovalsWindows-only ChangesPorting to Python 3.7Notable changes in Python 3.7.1Notable changes in Python 3.7.2Notable changes in Python 3.7.6Notable changes in Python 3.7.10Notable changes in Python 3.7.11Notable security feature in 3.7.14
- What’s New In Python 3.6Summary – Release highlightsNew FeaturesOther Language ChangesNew ModulesImproved ModulesOptimizationsBuild and C API ChangesOther ImprovementsDeprecatedRemovedPorting to Python 3.6Notable changes in Python 3.6.2Notable changes in Python 3.6.4Notable changes in Python 3.6.5Notable changes in Python 3.6.7Notable changes in Python 3.6.10Notable changes in Python 3.6.13Notable changes in Python 3.6.14
- What’s New In Python 3.5Summary – Release highlightsNew FeaturesOther Language ChangesNew ModulesImproved ModulesOther module-level changesOptimizationsBuild and C API ChangesDeprecatedRemovedPorting to Python 3.5Notable changes in Python 3.5.4
- What’s New In Python 3.4Summary – Release HighlightsNew FeaturesNew ModulesImproved ModulesCPython Implementation ChangesDeprecatedRemovedPorting to Python 3.4Changed in 3.4.3
- What’s New In Python 3.3Summary – Release highlightsPEP 405: Virtual EnvironmentsPEP 420: Implicit Namespace PackagesPEP 3118: New memoryview implementation and buffer protocol documentationPEP 393: Flexible String RepresentationPEP 397: Python Launcher for WindowsPEP 3151: Reworking the OS and IO exception hierarchyPEP 380: Syntax for Delegating to a SubgeneratorPEP 409: Suppressing exception contextPEP 414: Explicit Unicode literalsPEP 3155: Qualified name for classes and functionsPEP 412: Key-Sharing DictionaryPEP 362: Function Signature ObjectPEP 421: Adding sys.implementationUsing importlib as the Implementation of ImportOther Language ChangesA Finer-Grained Import LockBuiltin functions and typesNew ModulesImproved ModulesOptimizationsBuild and C API ChangesDeprecatedPorting to Python 3.3
- What’s New In Python 3.2PEP 384: Defining a Stable ABIPEP 389: Argparse Command Line Parsing ModulePEP 391:  Dictionary Based Configuration for LoggingPEP 3148:  Theconcurrent.futuresmodulePEP 3147:  PYC Repository DirectoriesPEP 3149: ABI Version Tagged .so FilesPEP 3333: Python Web Server Gateway Interface v1.0.1Other Language ChangesNew, Improved, and Deprecated ModulesMulti-threadingOptimizationsUnicodeCodecsDocumentationIDLECode RepositoryBuild and C API ChangesPorting to Python 3.2
- What’s New In Python 3.1PEP 372: Ordered DictionariesPEP 378: Format Specifier for Thousands SeparatorOther Language ChangesNew, Improved, and Deprecated ModulesOptimizationsIDLEBuild and C API ChangesPorting to Python 3.1
- What’s New In Python 3.0Common Stumbling BlocksOverview Of Syntax ChangesChanges Already Present In Python 2.6Library ChangesPEP 3101: A New Approach To String FormattingChanges To ExceptionsMiscellaneous Other ChangesBuild and C API ChangesPerformancePorting To Python 3.0
- What’s New in Python 2.7The Future for Python 2.xChanges to the Handling of Deprecation WarningsPython 3.1 FeaturesPEP 372: Adding an Ordered Dictionary to collectionsPEP 378: Format Specifier for Thousands SeparatorPEP 389: The argparse Module for Parsing Command LinesPEP 391: Dictionary-Based Configuration For LoggingPEP 3106: Dictionary ViewsPEP 3137: The memoryview ObjectOther Language ChangesNew and Improved ModulesBuild and C API ChangesOther Changes and FixesPorting to Python 2.7New Features Added to Python 2.7 Maintenance ReleasesAcknowledgements
- What’s New in Python 2.6Python 3.0Changes to the Development ProcessPEP 343: The ‘with’ statementPEP 366: Explicit Relative Imports From a Main ModulePEP 370: Per-usersite-packagesDirectoryPEP 371: ThemultiprocessingPackagePEP 3101: Advanced String FormattingPEP 3105:printAs a FunctionPEP 3110: Exception-Handling ChangesPEP 3112: Byte LiteralsPEP 3116: New I/O LibraryPEP 3118: Revised Buffer ProtocolPEP 3119: Abstract Base ClassesPEP 3127: Integer Literal Support and SyntaxPEP 3129: Class DecoratorsPEP 3141: A Type Hierarchy for NumbersOther Language ChangesNew and Improved ModulesDeprecations and RemovalsBuild and C API ChangesPorting to Python 2.6Acknowledgements
- What’s New in Python 2.5PEP 308: Conditional ExpressionsPEP 309: Partial Function ApplicationPEP 314: Metadata for Python Software Packages v1.1PEP 328: Absolute and Relative ImportsPEP 338: Executing Modules as ScriptsPEP 341: Unified try/except/finallyPEP 342: New Generator FeaturesPEP 343: The ‘with’ statementPEP 352: Exceptions as New-Style ClassesPEP 353: Using ssize_t as the index typePEP 357: The ‘__index__’ methodOther Language ChangesNew, Improved, and Removed ModulesBuild and C API ChangesPorting to Python 2.5Acknowledgements
- What’s New in Python 2.4PEP 218: Built-In Set ObjectsPEP 237: Unifying Long Integers and IntegersPEP 289: Generator ExpressionsPEP 292: Simpler String SubstitutionsPEP 318: Decorators for Functions and MethodsPEP 322: Reverse IterationPEP 324: New subprocess ModulePEP 327: Decimal Data TypePEP 328: Multi-line ImportsPEP 331: Locale-Independent Float/String ConversionsOther Language ChangesNew, Improved, and Deprecated ModulesBuild and C API ChangesPorting to Python 2.4Acknowledgements
- What’s New in Python 2.3PEP 218: A Standard Set DatatypePEP 255: Simple GeneratorsPEP 263: Source Code EncodingsPEP 273: Importing Modules from ZIP ArchivesPEP 277: Unicode file name support for Windows NTPEP 278: Universal Newline SupportPEP 279: enumerate()PEP 282: The logging PackagePEP 285: A Boolean TypePEP 293: Codec Error Handling CallbacksPEP 301: Package Index and Metadata for DistutilsPEP 302: New Import HooksPEP 305: Comma-separated FilesPEP 307: Pickle EnhancementsExtended SlicesOther Language ChangesNew, Improved, and Deprecated ModulesPymalloc: A Specialized Object AllocatorBuild and C API ChangesOther Changes and FixesPorting to Python 2.3Acknowledgements
- What’s New in Python 2.2IntroductionPEPs 252 and 253: Type and Class ChangesPEP 234: IteratorsPEP 255: Simple GeneratorsPEP 237: Unifying Long Integers and IntegersPEP 238: Changing the Division OperatorUnicode ChangesPEP 227: Nested ScopesNew and Improved ModulesInterpreter Changes and FixesOther Changes and FixesAcknowledgements
- What’s New in Python 2.1IntroductionPEP 227: Nested ScopesPEP 236: __future__ DirectivesPEP 207: Rich ComparisonsPEP 230: Warning FrameworkPEP 229: New Build SystemPEP 205: Weak ReferencesPEP 232: Function AttributesPEP 235: Importing Modules on Case-Insensitive PlatformsPEP 217: Interactive Display HookPEP 208: New Coercion ModelPEP 241: Metadata in Python PackagesNew and Improved ModulesOther Changes and FixesAcknowledgements
- What’s New in Python 2.0IntroductionWhat About Python 1.6?New Development ProcessUnicodeList ComprehensionsAugmented AssignmentString MethodsGarbage Collection of CyclesOther Core ChangesPorting to 2.0Extending/Embedding ChangesDistutils: Making Modules Easy to InstallXML ModulesModule changesNew modulesIDLE ImprovementsDeleted and Deprecated ModulesAcknowledgements

- Summary – Release Highlights
- New Features
- Other Language Changes
- New Modules
- Improved Modules
- Optimizations
- Removed Modules And APIs
- New Deprecations
- CPython Bytecode Changes
- C API Changes
- Build Changes
- Porting to Python 3.13
- Regression Test Changes
- Notable changes in 3.13.1

- Summary – Release highlights
- New Features Related to Type Hints
- CPython bytecode changes
- Demos and Tools
- Porting to Python 3.12

- Other CPython Implementation Changes
- Faster CPython
- Pending Removal in Python 3.12
- Porting to Python 3.11
- Notable changes in 3.11.4
- Notable changes in 3.11.5

- Porting to Python 3.10
- Notable security feature in 3.10.7
- Notable security feature in 3.10.8
- Notable changes in 3.10.12

- You should check for DeprecationWarning in your code
- Porting to Python 3.9
- Notable changes in Python 3.9.1
- Notable changes in Python 3.9.2
- Notable changes in Python 3.9.3
- Notable changes in Python 3.9.5
- Notable security feature in 3.9.14
- Notable changes in 3.9.17

- Build and C API Changes
- API and Feature Removals
- Porting to Python 3.8
- Notable changes in Python 3.8.1
- Notable changes in Python 3.8.2
- Notable changes in Python 3.8.3
- Notable changes in Python 3.8.8
- Notable changes in Python 3.8.9
- Notable changes in Python 3.8.10
- Notable changes in Python 3.8.12
- Notable security feature in 3.8.14
- Notable changes in 3.8.17

- Deprecated Python Behavior
- Deprecated Python modules, functions and methods
- Deprecated functions and types of the C API
- Platform Support Removals
- Module Removals
- Windows-only Changes
- Porting to Python 3.7
- Notable changes in Python 3.7.1
- Notable changes in Python 3.7.2
- Notable changes in Python 3.7.6
- Notable changes in Python 3.7.10
- Notable changes in Python 3.7.11
- Notable security feature in 3.7.14

- Other Improvements
- Porting to Python 3.6
- Notable changes in Python 3.6.2
- Notable changes in Python 3.6.4
- Notable changes in Python 3.6.5
- Notable changes in Python 3.6.7
- Notable changes in Python 3.6.10
- Notable changes in Python 3.6.13
- Notable changes in Python 3.6.14

- Other module-level changes
- Porting to Python 3.5
- Notable changes in Python 3.5.4

- CPython Implementation Changes
- Porting to Python 3.4
- Changed in 3.4.3

- PEP 405: Virtual Environments
- PEP 420: Implicit Namespace Packages
- PEP 3118: New memoryview implementation and buffer protocol documentation
- PEP 393: Flexible String Representation
- PEP 397: Python Launcher for Windows
- PEP 3151: Reworking the OS and IO exception hierarchy
- PEP 380: Syntax for Delegating to a Subgenerator
- PEP 409: Suppressing exception context
- PEP 414: Explicit Unicode literals
- PEP 3155: Qualified name for classes and functions
- PEP 412: Key-Sharing Dictionary
- PEP 362: Function Signature Object
- PEP 421: Adding sys.implementation
- Using importlib as the Implementation of Import
- A Finer-Grained Import Lock
- Builtin functions and types
- Porting to Python 3.3

- PEP 384: Defining a Stable ABI
- PEP 389: Argparse Command Line Parsing Module
- PEP 391:  Dictionary Based Configuration for Logging
- PEP 3148:  Theconcurrent.futuresmodule
- PEP 3147:  PYC Repository Directories
- PEP 3149: ABI Version Tagged .so Files
- PEP 3333: Python Web Server Gateway Interface v1.0.1
- New, Improved, and Deprecated Modules
- Multi-threading
- Documentation
- Code Repository
- Porting to Python 3.2

================================================================================

```
concurrent.futures
```

- PEP 372: Ordered Dictionaries
- PEP 378: Format Specifier for Thousands Separator
- Porting to Python 3.1

- Common Stumbling Blocks
- Overview Of Syntax Changes
- Changes Already Present In Python 2.6
- Library Changes
- PEP 3101: A New Approach To String Formatting
- Changes To Exceptions
- Miscellaneous Other Changes
- Performance
- Porting To Python 3.0

- The Future for Python 2.x
- Changes to the Handling of Deprecation Warnings
- Python 3.1 Features
- PEP 372: Adding an Ordered Dictionary to collections
- PEP 389: The argparse Module for Parsing Command Lines
- PEP 391: Dictionary-Based Configuration For Logging
- PEP 3106: Dictionary Views
- PEP 3137: The memoryview Object
- New and Improved Modules
- Other Changes and Fixes
- Porting to Python 2.7
- New Features Added to Python 2.7 Maintenance Releases
- Acknowledgements

- Changes to the Development Process
- PEP 343: The ‘with’ statement
- PEP 366: Explicit Relative Imports From a Main Module
- PEP 370: Per-usersite-packagesDirectory
- PEP 371: ThemultiprocessingPackage
- PEP 3101: Advanced String Formatting
- PEP 3105:printAs a Function
- PEP 3110: Exception-Handling Changes
- PEP 3112: Byte Literals
- PEP 3116: New I/O Library
- PEP 3118: Revised Buffer Protocol
- PEP 3119: Abstract Base Classes
- PEP 3127: Integer Literal Support and Syntax
- PEP 3129: Class Decorators
- PEP 3141: A Type Hierarchy for Numbers
- Deprecations and Removals
- Porting to Python 2.6

```
site-packages
```

```
multiprocessing
```

- PEP 308: Conditional Expressions
- PEP 309: Partial Function Application
- PEP 314: Metadata for Python Software Packages v1.1
- PEP 328: Absolute and Relative Imports
- PEP 338: Executing Modules as Scripts
- PEP 341: Unified try/except/finally
- PEP 342: New Generator Features
- PEP 352: Exceptions as New-Style Classes
- PEP 353: Using ssize_t as the index type
- PEP 357: The ‘__index__’ method
- New, Improved, and Removed Modules
- Porting to Python 2.5

- PEP 218: Built-In Set Objects
- PEP 237: Unifying Long Integers and Integers
- PEP 289: Generator Expressions
- PEP 292: Simpler String Substitutions
- PEP 318: Decorators for Functions and Methods
- PEP 322: Reverse Iteration
- PEP 324: New subprocess Module
- PEP 327: Decimal Data Type
- PEP 328: Multi-line Imports
- PEP 331: Locale-Independent Float/String Conversions
- Porting to Python 2.4

- PEP 218: A Standard Set Datatype
- PEP 255: Simple Generators
- PEP 263: Source Code Encodings
- PEP 273: Importing Modules from ZIP Archives
- PEP 277: Unicode file name support for Windows NT
- PEP 278: Universal Newline Support
- PEP 279: enumerate()
- PEP 282: The logging Package
- PEP 285: A Boolean Type
- PEP 293: Codec Error Handling Callbacks
- PEP 301: Package Index and Metadata for Distutils
- PEP 302: New Import Hooks
- PEP 305: Comma-separated Files
- PEP 307: Pickle Enhancements
- Extended Slices
- Pymalloc: A Specialized Object Allocator
- Porting to Python 2.3

- Introduction
- PEPs 252 and 253: Type and Class Changes
- PEP 234: Iterators
- PEP 238: Changing the Division Operator
- Unicode Changes
- PEP 227: Nested Scopes
- Interpreter Changes and Fixes

- PEP 236: __future__ Directives
- PEP 207: Rich Comparisons
- PEP 230: Warning Framework
- PEP 229: New Build System
- PEP 205: Weak References
- PEP 232: Function Attributes
- PEP 235: Importing Modules on Case-Insensitive Platforms
- PEP 217: Interactive Display Hook
- PEP 208: New Coercion Model
- PEP 241: Metadata in Python Packages

- What About Python 1.6?
- New Development Process
- List Comprehensions
- Augmented Assignment
- String Methods
- Garbage Collection of Cycles
- Other Core Changes
- Porting to 2.0
- Extending/Embedding Changes
- Distutils: Making Modules Easy to Install
- XML Modules
- Module changes
- New modules
- IDLE Improvements
- Deleted and Deprecated Modules

The “Changelog” is an HTML version of thefile builtfrom the contents of theMisc/NEWS.ddirectory tree, which containsallnontrivial changes to Python for the current version.

- ChangelogPython nextPython 3.13.3 finalPython 3.13.2 finalPython 3.13.1 finalPython 3.13.0 finalPython 3.13.0 release candidate 3Python 3.13.0 release candidate 2Python 3.13.0 release candidate 1Python 3.13.0 beta 4Python 3.13.0 beta 3Python 3.13.0 beta 2Python 3.13.0 beta 1Python 3.13.0 alpha 6Python 3.13.0 alpha 5Python 3.13.0 alpha 4Python 3.13.0 alpha 3Python 3.13.0 alpha 2Python 3.13.0 alpha 1Python 3.12.0 beta 1Python 3.12.0 alpha 7Python 3.12.0 alpha 6Python 3.12.0 alpha 5Python 3.12.0 alpha 4Python 3.12.0 alpha 3Python 3.12.0 alpha 2Python 3.12.0 alpha 1Python 3.11.0 beta 1Python 3.11.0 alpha 7Python 3.11.0 alpha 6Python 3.11.0 alpha 5Python 3.11.0 alpha 4Python 3.11.0 alpha 3Python 3.11.0 alpha 2Python 3.11.0 alpha 1Python 3.10.0 beta 1Python 3.10.0 alpha 7Python 3.10.0 alpha 6Python 3.10.0 alpha 5Python 3.10.0 alpha 4Python 3.10.0 alpha 3Python 3.10.0 alpha 2Python 3.10.0 alpha 1Python 3.9.0 beta 1Python 3.9.0 alpha 6Python 3.9.0 alpha 5Python 3.9.0 alpha 4Python 3.9.0 alpha 3Python 3.9.0 alpha 2Python 3.9.0 alpha 1Python 3.8.0 beta 1Python 3.8.0 alpha 4Python 3.8.0 alpha 3Python 3.8.0 alpha 2Python 3.8.0 alpha 1Python 3.7.0 finalPython 3.7.0 release candidate 1Python 3.7.0 beta 5Python 3.7.0 beta 4Python 3.7.0 beta 3Python 3.7.0 beta 2Python 3.7.0 beta 1Python 3.7.0 alpha 4Python 3.7.0 alpha 3Python 3.7.0 alpha 2Python 3.7.0 alpha 1Python 3.6.6 finalPython 3.6.6 release candidate 1Python 3.6.5 finalPython 3.6.5 release candidate 1Python 3.6.4 finalPython 3.6.4 release candidate 1Python 3.6.3 finalPython 3.6.3 release candidate 1Python 3.6.2 finalPython 3.6.2 release candidate 2Python 3.6.2 release candidate 1Python 3.6.1 finalPython 3.6.1 release candidate 1Python 3.6.0 finalPython 3.6.0 release candidate 2Python 3.6.0 release candidate 1Python 3.6.0 beta 4Python 3.6.0 beta 3Python 3.6.0 beta 2Python 3.6.0 beta 1Python 3.6.0 alpha 4Python 3.6.0 alpha 3Python 3.6.0 alpha 2Python 3.6.0 alpha 1Python 3.5.5 finalPython 3.5.5 release candidate 1Python 3.5.4 finalPython 3.5.4 release candidate 1Python 3.5.3 finalPython 3.5.3 release candidate 1Python 3.5.2 finalPython 3.5.2 release candidate 1Python 3.5.1 finalPython 3.5.1 release candidate 1Python 3.5.0 finalPython 3.5.0 release candidate 4Python 3.5.0 release candidate 3Python 3.5.0 release candidate 2Python 3.5.0 release candidate 1Python 3.5.0 beta 4Python 3.5.0 beta 3Python 3.5.0 beta 2Python 3.5.0 beta 1Python 3.5.0 alpha 4Python 3.5.0 alpha 3Python 3.5.0 alpha 2Python 3.5.0 alpha 1

- Python next
- Python 3.13.3 final
- Python 3.13.2 final
- Python 3.13.1 final
- Python 3.13.0 final
- Python 3.13.0 release candidate 3
- Python 3.13.0 release candidate 2
- Python 3.13.0 release candidate 1
- Python 3.13.0 beta 4
- Python 3.13.0 beta 3
- Python 3.13.0 beta 2
- Python 3.13.0 beta 1
- Python 3.13.0 alpha 6
- Python 3.13.0 alpha 5
- Python 3.13.0 alpha 4
- Python 3.13.0 alpha 3
- Python 3.13.0 alpha 2
- Python 3.13.0 alpha 1
- Python 3.12.0 beta 1
- Python 3.12.0 alpha 7
- Python 3.12.0 alpha 6
- Python 3.12.0 alpha 5
- Python 3.12.0 alpha 4
- Python 3.12.0 alpha 3
- Python 3.12.0 alpha 2
- Python 3.12.0 alpha 1
- Python 3.11.0 beta 1
- Python 3.11.0 alpha 7
- Python 3.11.0 alpha 6
- Python 3.11.0 alpha 5
- Python 3.11.0 alpha 4
- Python 3.11.0 alpha 3
- Python 3.11.0 alpha 2
- Python 3.11.0 alpha 1
- Python 3.10.0 beta 1
- Python 3.10.0 alpha 7
- Python 3.10.0 alpha 6
- Python 3.10.0 alpha 5
- Python 3.10.0 alpha 4
- Python 3.10.0 alpha 3
- Python 3.10.0 alpha 2
- Python 3.10.0 alpha 1
- Python 3.9.0 beta 1
- Python 3.9.0 alpha 6
- Python 3.9.0 alpha 5
- Python 3.9.0 alpha 4
- Python 3.9.0 alpha 3
- Python 3.9.0 alpha 2
- Python 3.9.0 alpha 1
- Python 3.8.0 beta 1
- Python 3.8.0 alpha 4
- Python 3.8.0 alpha 3
- Python 3.8.0 alpha 2
- Python 3.8.0 alpha 1
- Python 3.7.0 final
- Python 3.7.0 release candidate 1
- Python 3.7.0 beta 5
- Python 3.7.0 beta 4
- Python 3.7.0 beta 3
- Python 3.7.0 beta 2
- Python 3.7.0 beta 1
- Python 3.7.0 alpha 4
- Python 3.7.0 alpha 3
- Python 3.7.0 alpha 2
- Python 3.7.0 alpha 1
- Python 3.6.6 final
- Python 3.6.6 release candidate 1
- Python 3.6.5 final
- Python 3.6.5 release candidate 1
- Python 3.6.4 final
- Python 3.6.4 release candidate 1
- Python 3.6.3 final
- Python 3.6.3 release candidate 1
- Python 3.6.2 final
- Python 3.6.2 release candidate 2
- Python 3.6.2 release candidate 1
- Python 3.6.1 final
- Python 3.6.1 release candidate 1
- Python 3.6.0 final
- Python 3.6.0 release candidate 2
- Python 3.6.0 release candidate 1
- Python 3.6.0 beta 4
- Python 3.6.0 beta 3
- Python 3.6.0 beta 2
- Python 3.6.0 beta 1
- Python 3.6.0 alpha 4
- Python 3.6.0 alpha 3
- Python 3.6.0 alpha 2
- Python 3.6.0 alpha 1
- Python 3.5.5 final
- Python 3.5.5 release candidate 1
- Python 3.5.4 final
- Python 3.5.4 release candidate 1
- Python 3.5.3 final
- Python 3.5.3 release candidate 1
- Python 3.5.2 final
- Python 3.5.2 release candidate 1
- Python 3.5.1 final
- Python 3.5.1 release candidate 1
- Python 3.5.0 final
- Python 3.5.0 release candidate 4
- Python 3.5.0 release candidate 3
- Python 3.5.0 release candidate 2
- Python 3.5.0 release candidate 1
- Python 3.5.0 beta 4
- Python 3.5.0 beta 3
- Python 3.5.0 beta 2
- Python 3.5.0 beta 1
- Python 3.5.0 alpha 4
- Python 3.5.0 alpha 3
- Python 3.5.0 alpha 2
- Python 3.5.0 alpha 1

================================================================================

================================================================================

================================================================================

# History and License — Python 3.13.3 documentation
URL: https://docs.python.org/license.html
Section: 1/2
Description: History of the software: Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see https://www.cwi.nl) in the Netherlands as a successor of a language ca...

Content:

================================================================================

# History and License¶

================================================================================

## History of the software¶

Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, seehttps://www.cwi.nl) in the Netherlands as a successor of a language called ABC. Guido remains Python’s principal author, although it includes many contributions from others.

In 1995, Guido continued his work on Python at the Corporation for National Research Initiatives (CNRI, seehttps://www.cnri.reston.va.us) in Reston, Virginia where he released several versions of the software.

In May 2000, Guido and the Python core development team moved to BeOpen.com to form the BeOpen PythonLabs team. In October of the same year, the PythonLabs team moved to Digital Creations, which became Zope Corporation. In 2001, the Python Software Foundation (PSF, seehttps://www.python.org/psf/) was formed, a non-profit organization created specifically to own Python-related Intellectual Property. Zope Corporation was a sponsoring member of the PSF.

All Python releases are Open Source (seehttps://opensource.orgfor the Open Source Definition). Historically, most, but not all, Python releases have also been GPL-compatible; the table below summarizes the various releases.

Derived from

GPL-compatible? (1)

0.9.0 thru 1.2

1.3 thru 1.5.2

2.2 and above

- GPL-compatible doesn’t mean that we’re distributing Python under the GPL.
All Python licenses, unlike the GPL, let you distribute a modified version
without making your changes open source. The GPL-compatible licenses make
it possible to combine Python with other software that is released under
the GPL; the others don’t.
- According to Richard Stallman, 1.6.1 is not GPL-compatible, because its license
has a choice of law clause. According to CNRI, however, Stallman’s lawyer has
told CNRI’s lawyer that 1.6.1 is “not incompatible” with the GPL.

Thanks to the many outside volunteers who have worked under Guido’s direction to make these releases possible.

================================================================================

## Terms and conditions for accessing or otherwise using Python¶

Python software and documentation are licensed under the Python Software Foundation License Version 2.

Starting with Python 3.8.6, examples, recipes, and other code in the documentation are dual licensed under the PSF License Version 2 and theZero-Clause BSD license.

Some software incorporated into Python is under different licenses. The licenses are listed with code falling under that license. SeeLicenses and Acknowledgements for Incorporated Softwarefor an incomplete list of these licenses.

================================================================================

### PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2¶

```
1. This LICENSE AGREEMENT is between the Python Software Foundation ("PSF"), and
   the Individual or Organization ("Licensee") accessing and otherwise using this
   software ("Python") in source or binary form and its associated documentation.

2. Subject to the terms and conditions of this License Agreement, PSF hereby
   grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
   analyze, test, perform and/or display publicly, prepare derivative works,
   distribute, and otherwise use Python alone or in any derivative
   version, provided, however, that PSF's License Agreement and PSF's notice of
   copyright, i.e., "Copyright © 2001-2024 Python Software Foundation; All Rights
   Reserved" are retained in Python alone or in any derivative version
   prepared by Licensee.

3. In the event Licensee prepares a derivative work that is based on or
   incorporates Python or any part thereof, and wants to make the
   derivative work available to others as provided herein, then Licensee hereby
   agrees to include in any such work a brief summary of the changes made to Python.

4. PSF is making Python available to Licensee on an "AS IS" basis.
   PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF
   EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
   WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
   USE OF PYTHON WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON
   FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
   MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON, OR ANY DERIVATIVE
   THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.

6. This License Agreement will automatically terminate upon a material breach of
   its terms and conditions.

7. Nothing in this License Agreement shall be deemed to create any relationship
   of agency, partnership, or joint venture between PSF and Licensee.  This License
   Agreement does not grant permission to use PSF trademarks or trade name in a
   trademark sense to endorse or promote products or services of Licensee, or any
   third party.

8. By copying, installing or otherwise using Python, Licensee agrees
   to be bound by the terms and conditions of this License Agreement.
```

================================================================================

### BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0¶

BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1

```
1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an office at
   160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization
   ("Licensee") accessing and otherwise using this software in source or binary
   form and its associated documentation ("the Software").

2. Subject to the terms and conditions of this BeOpen Python License Agreement,
   BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license
   to reproduce, analyze, test, perform and/or display publicly, prepare derivative
   works, distribute, and otherwise use the Software alone or in any derivative
   version, provided, however, that the BeOpen Python License is retained in the
   Software, alone or in any derivative version prepared by Licensee.

3. BeOpen is making the Software available to Licensee on an "AS IS" basis.
   BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF
   EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
   WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
   USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR
   ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,
   MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF
   ADVISED OF THE POSSIBILITY THEREOF.

5. This License Agreement will automatically terminate upon a material breach of
   its terms and conditions.

6. This License Agreement shall be governed by and interpreted in all respects
   by the law of the State of California, excluding conflict of law provisions.
   Nothing in this License Agreement shall be deemed to create any relationship of
   agency, partnership, or joint venture between BeOpen and Licensee.  This License
   Agreement does not grant permission to use BeOpen trademarks or trade names in a
   trademark sense to endorse or promote products or services of Licensee, or any
   third party.  As an exception, the "BeOpen Python" logos available at
   http://www.pythonlabs.com/logos.html may be used according to the permissions
   granted on that web page.

7. By copying, installing or otherwise using the software, Licensee agrees to be
   bound by the terms and conditions of this License Agreement.
```

================================================================================

### CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1¶

```
1. This LICENSE AGREEMENT is between the Corporation for National Research
   Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191
   ("CNRI"), and the Individual or Organization ("Licensee") accessing and
   otherwise using Python 1.6.1 software in source or binary form and its
   associated documentation.

2. Subject to the terms and conditions of this License Agreement, CNRI hereby
   grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
   analyze, test, perform and/or display publicly, prepare derivative works,
   distribute, and otherwise use Python 1.6.1 alone or in any derivative version,
   provided, however, that CNRI's License Agreement and CNRI's notice of copyright,
   i.e., "Copyright © 1995-2001 Corporation for National Research Initiatives; All
   Rights Reserved" are retained in Python 1.6.1 alone or in any derivative version
   prepared by Licensee.  Alternately, in lieu of CNRI's License Agreement,
   Licensee may substitute the following text (omitting the quotes): "Python 1.6.1
   is made available subject to the terms and conditions in CNRI's License
   Agreement.  This Agreement together with Python 1.6.1 may be located on the
   internet using the following unique, persistent identifier (known as a handle):
   1895.22/1013.  This Agreement may also be obtained from a proxy server on the
   internet using the following URL: http://hdl.handle.net/1895.22/1013".

3. In the event Licensee prepares a derivative work that is based on or
   incorporates Python 1.6.1 or any part thereof, and wants to make the derivative
   work available to others as provided herein, then Licensee hereby agrees to
   include in any such work a brief summary of the changes made to Python 1.6.1.

4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS" basis.  CNRI
   MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF EXAMPLE,
   BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY
   OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF
   PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR
   ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
   MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE
   THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.

6. This License Agreement will automatically terminate upon a material breach of
   its terms and conditions.

7. This License Agreement shall be governed by the federal intellectual property
   law of the United States, including without limitation the federal copyright
   law, and, to the extent such U.S. federal law does not apply, by the law of the
   Commonwealth of Virginia, excluding Virginia's conflict of law provisions.
   Notwithstanding the foregoing, with regard to derivative works based on Python
   1.6.1 that incorporate non-separable material that was previously distributed
   under the GNU General Public License (GPL), the law of the Commonwealth of
   Virginia shall govern this License Agreement only as to issues arising under or
   with respect to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in
   this License Agreement shall be deemed to create any relationship of agency,
   partnership, or joint venture between CNRI and Licensee.  This License Agreement
   does not grant permission to use CNRI trademarks or trade name in a trademark
   sense to endorse or promote products or services of Licensee, or any third
   party.

8. By clicking on the "ACCEPT" button where indicated, or by copying, installing
   or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and
   conditions of this License Agreement.
```

================================================================================

### CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2¶

```
Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
Netherlands.  All rights reserved.

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted, provided that
the above copyright notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting documentation, and that
the name of Stichting Mathematisch Centrum or CWI not be used in advertising or
publicity pertaining to distribution of the software without specific, written
prior permission.

STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT
OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.
```

================================================================================

### ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION¶

```
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
```

================================================================================

## Licenses and Acknowledgements for Incorporated Software¶

This section is an incomplete, but growing list of licenses and acknowledgements for third-party software incorporated in the Python distribution.

================================================================================

### Mersenne Twister¶

The_randomC extension underlying therandommodule includes code based on a download fromhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. The following are the verbatim comments from the original code:

```
A C-program for MT19937, with initialization improved 2002/1/26.
Coded by Takuji Nishimura and Makoto Matsumoto.

Before using, initialize the state by using init_genrand(seed)
or init_by_array(init_key, key_length).

Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

 1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

 3. The names of its contributors may not be used to endorse or promote
    products derived from this software without specific prior written
    permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Any feedback is very welcome.
http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
```

Thesocketmodule uses the functions,getaddrinfo(), andgetnameinfo(), which are coded in separate source files from the WIDE Project,https://www.wide.ad.jp/.

```
getaddrinfo()
```

```
getnameinfo()
```

```
Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. Neither the name of the project nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
```

================================================================================

### Asynchronous socket services¶

Thetest.support.asynchatandtest.support.asyncoremodules contain the following notice:

```
test.support.asynchat
```

```
test.support.asyncore
```

```
Copyright 1996 by Sam Rushing

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and
its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of Sam
Rushing not be used in advertising or publicity pertaining to
distribution of the software without specific, written prior
permission.

SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
```

================================================================================

### Cookie management¶

Thehttp.cookiesmodule contains the following notice:

```
http.cookies
```

```
Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>

               All Rights Reserved

Permission to use, copy, modify, and distribute this software
and its documentation for any purpose and without fee is hereby
granted, provided that the above copyright notice appear in all
copies and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Timothy O'Malley  not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.

Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
```

================================================================================

### Execution tracing¶

Thetracemodule contains the following notice:

```
portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
err...  reserved and offered to the public under the terms of the
Python 2.2 license.
Author: Zooko O'Whielacronx
http://zooko.com/
mailto:zooko@zooko.com

Copyright 2000, Mojam Media, Inc., all rights reserved.
Author: Skip Montanaro

Copyright 1999, Bioreason, Inc., all rights reserved.
Author: Andrew Dalke

Copyright 1995-1997, Automatrix, Inc., all rights reserved.
Author: Skip Montanaro

Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.

Permission to use, copy, modify, and distribute this Python software and
its associated documentation for any purpose without fee is hereby
granted, provided that the above copyright notice appears in all copies,
and that both that copyright notice and this permission notice appear in
supporting documentation, and that the name of neither Automatrix,
Bioreason or Mojam Media be used in advertising or publicity pertaining to
distribution of the software without specific, written prior permission.
```

================================================================================

### UUencode and UUdecode functions¶

Theuucodec contains the following notice:

```
Copyright 1994 by Lance Ellinghouse
Cathedral City, California Republic, United States of America.
                       All Rights Reserved
Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Lance Ellinghouse
not be used in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.
LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Modified by Jack Jansen, CWI, July 1995:
- Use binascii module to do the actual line-by-line conversion
  between ascii and binary. This results in a 1000-fold speedup. The C
  version is still 5 times faster, though.
- Arguments more compliant with Python standard
```

================================================================================

### XML Remote Procedure Calls¶

Thexmlrpc.clientmodule contains the following notice:

```
xmlrpc.client
```

```
The XML-RPC client interface is

Copyright (c) 1999-2002 by Secret Labs AB
Copyright (c) 1999-2002 by Fredrik Lundh

By obtaining, using, and/or copying this software and/or its
associated documentation, you agree that you have read, understood,
and will comply with the following terms and conditions:

Permission to use, copy, modify, and distribute this software and
its associated documentation for any purpose and without fee is
hereby granted, provided that the above copyright notice appears in
all copies, and that both that copyright notice and this permission
notice appear in supporting documentation, and that the name of
Secret Labs AB or the author not be used in advertising or publicity
pertaining to distribution of the software without specific, written
prior permission.

SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
OF THIS SOFTWARE.
```

================================================================================

### test_epoll¶

Thetest.test_epollmodule contains the following notice:

```
test.test_epoll
```

```
Copyright (c) 2001-2006 Twisted Matrix Laboratories.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```

================================================================================

### Select kqueue¶

Theselectmodule contains the following notice for the kqueue interface:

```
Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
```

================================================================================

### SipHash24¶

The filePython/pyhash.ccontains Marek Majkowski’ implementation of Dan Bernstein’s SipHash24 algorithm. It contains the following note:

```
Python/pyhash.c
```

```
<MIT License>
Copyright (c) 2013  Marek Majkowski <marek@popcount.org>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.
</MIT License>

Original location:
   https://github.com/majek/csiphash/

Solution inspired by code from:
   Samuel Neves (supercop/crypto_auth/siphash24/little)
   djb (supercop/crypto_auth/siphash24/little2)
   Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)
```

================================================================================

### strtod and dtoa¶

The filePython/dtoa.c, which supplies C functions dtoa and strtod for conversion of C doubles to and from strings, is derived from the file of the same name by David M. Gay, currently available fromhttps://web.archive.org/web/20220517033456/http://www.netlib.org/fp/dtoa.c. The original file, as retrieved on March 16, 2009, contains the following copyright and licensing notice:

```
Python/dtoa.c
```

```
/****************************************************************
 *
 * The author of this software is David M. Gay.
 *
 * Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose without fee is hereby granted, provided that this entire notice
 * is included in all copies of any software which is or includes a copy
 * or modification of this software and in all copies of the supporting
 * documentation for such software.
 *
 * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
 * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
 * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
 * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
 *
 ***************************************************************/
```

The moduleshashlib,posixandssluse the OpenSSL library for added performance if made available by the operating system. Additionally, the Windows and macOS installers for Python may include a copy of the OpenSSL libraries, so we include a copy of the OpenSSL license here. For the OpenSSL 3.0 release, and later releases derived from that, the Apache License v2 applies:

================================================================================

```
Apache License
                        Version 2.0, January 2004
                     https://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1. Definitions.

   "License" shall mean the terms and conditions for use, reproduction,
   and distribution as defined by Sections 1 through 9 of this document.

   "Licensor" shall mean the copyright owner or entity authorized by
   the copyright owner that is granting the License.

   "Legal Entity" shall mean the union of the acting entity and all
   other entities that control, are controlled by, or are under common
   control with that entity. For the purposes of this definition,
   "control" means (i) the power, direct or indirect, to cause the
   direction or management of such entity, whether by contract or
   otherwise, or (ii) ownership of fifty percent (50%) or more of the
   outstanding shares, or (iii) beneficial ownership of such entity.

   "You" (or "Your") shall mean an individual or Legal Entity
   exercising permissions granted by this License.

   "Source" form shall mean the preferred form for making modifications,
   including but not limited to software source code, documentation
   source, and configuration files.

   "Object" form shall mean any form resulting from mechanical
   transformation or translation of a Source form, including but
   not limited to compiled object code, generated documentation,
   and conversions to other media types.

   "Work" shall mean the work of authorship, whether in Source or
   Object form, made available under the License, as indicated by a
   copyright notice that is included in or attached to the work
   (an example is provided in the Appendix below).

   "Derivative Works" shall mean any work, whether in Source or Object
   form, that is based on (or derived from) the Work and for which the
   editorial revisions, annotations, elaborations, or other modifications
   represent, as a whole, an original work of authorship. For the purposes
   of this License, Derivative Works shall not include works that remain
   separable from, or merely link (or bind by name) to the interfaces of,
   the Work and Derivative Works thereof.

   "Contribution" shall mean any work of authorship, including
   the original version of the Work and any modifications or additions
   to that Work or Derivative Works thereof, that is intentionally
   submitted to Licensor for inclusion in the Work by the copyright owner
   or by an individual or Legal Entity authorized to submit on behalf of
   the copyright owner. For the purposes of this definition, "submitted"
   means any form of electronic, verbal, or written communication sent
   to the Licensor or its representatives, including but not limited to
   communication on electronic mailing lists, source code control systems,
   and issue tracking systems that are managed by, or on behalf of, the
   Licensor for the purpose of discussing and improving the Work, but
   excluding communication that is conspicuously marked or otherwise
   designated in writing by the copyright owner as "Not a Contribution."

   "Contributor" shall mean Licensor and any individual or Legal Entity
   on behalf of whom a Contribution has been received by Licensor and
   subsequently incorporated within the Work.

2. Grant of Copyright License. Subject to the terms and conditions of
   this License, each Contributor hereby grants to You a perpetual,
   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
   copyright license to reproduce, prepare Derivative Works of,
   publicly display, publicly perform, sublicense, and distribute the
   Work and such Derivative Works in Source or Object form.

3. Grant of Patent License. Subject to the terms and conditions of
   this License, each Contributor hereby grants to You a perpetual,
   worldwide, non-exclusive, no-charge, royalty-free, irrevocable
   (except as stated in this section) patent license to make, have made,
   use, offer to sell, sell, import, and otherwise transfer the Work,
   where such license applies only to those patent claims licensable
   by such Contributor that are necessarily infringed by their
   Contribution(s) alone or by combination of their Contribution(s)
   with the Work to which such Contribution(s) was submitted. If You
   institute patent litigation against any entity (including a
   cross-claim or counterclaim in a lawsuit) alleging that the Work
   or a Contribution incorporated within the Work constitutes direct
   or contributory patent infringement, then any patent licenses
   granted to You under this License for that Work shall terminate
   as of the date such litigation is filed.

4. Redistribution. You may reproduce and distribute copies of the
   Work or Derivative Works thereof in any medium, with or without
   modifications, and in Source or Object form, provided that You
   meet the following conditions:

   (a) You must give any other recipients of the Work or
       Derivative Works a copy of this License; and

   (b) You must cause any modified files to carry prominent notices
       stating that You changed the files; and

   (c) You must retain, in the Source form of any Derivative Works
       that You distribute, all copyright, patent, trademark, and
       attribution notices from the Source form of the Work,
       excluding those notices that do not pertain to any part of
       the Derivative Works; and

   (d) If the Work includes a "NOTICE" text file as part of its
       distribution, then any Derivative Works that You distribute must
       include a readable copy of the attribution notices contained
       within such NOTICE file, excluding those notices that do not
       pertain to any part of the Derivative Works, in at least one
       of the following places: within a NOTICE text file distributed
       as part of the Derivative Works; within the Source form or
       documentation, if provided along with the Derivative Works; or,
       within a display generated by the Derivative Works, if and
       wherever such third-party notices normally appear. The contents
       of the NOTICE file are for informational purposes only and
       do not modify the License. You may add Your own attribution
       notices within Derivative Works that You distribute, alongside
       or as an addendum to the NOTICE text from the Work, provided
       that such additional attribution notices cannot be construed
       as modifying the License.

   You may add Your own copyright statement to Your modifications and
   may provide additional or different license terms and conditions
   for use, reproduction, or distribution of Your modifications, or
   for any such Derivative Works as a whole, provided Your use,
   reproduction, and distribution of the Work otherwise complies with
   the conditions stated in this License.

5. Submission of Contributions. Unless You explicitly state otherwise,
   any Contribution intentionally submitted for inclusion in the Work
   by You to the Licensor shall be under the terms and conditions of
   this License, without any additional terms or conditions.
   Notwithstanding the above, nothing herein shall supersede or modify
   the terms of any separate license agreement you may have executed
   with Licensor regarding such Contributions.

6. Trademarks. This License does not grant permission to use the trade
   names, trademarks, service marks, or product names of the Licensor,
   except as required for reasonable and customary use in describing the
   origin of the Work and reproducing the content of the NOTICE file.

7. Disclaimer of Warranty. Unless required by applicable law or
   agreed to in writing, Licensor provides the Work (and each
   Contributor provides its Contributions) on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   implied, including, without limitation, any warranties or conditions
   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
   PARTICULAR PURPOSE. You are solely responsible for determining the
   appropriateness of using or redistributing the Work and assume any
   risks associated with Your exercise of permissions under this License.

8. Limitation of Liability. In no event and under no legal theory,
   whether in tort (including negligence), contract, or otherwise,
   unless required by applicable law (such as deliberate and grossly
   negligent acts) or agreed to in writing, shall any Contributor be
   liable to You for damages, including any direct, indirect, special,
   incidental, or consequential damages of any character arising as a
   result of this License or out of the use or inability to use the
   Work (including but not limited to damages for loss of goodwill,
   work stoppage, computer failure or malfunction, or any and all
   other commercial damages or losses), even if such Contributor
   has been advised of the possibility of such damages.

9. Accepting Warranty or Additional Liability. While redistributing
   the Work or Derivative Works thereof, You may choose to offer,
   and charge a fee for, acceptance of support, warranty, indemnity,
   or other liability obligations and/or rights consistent with this
   License. However, in accepting such obligations, You may act only
   on Your own behalf and on Your sole responsibility, not on behalf
   of any other Contributor, and only if You agree to indemnify,
   defend, and hold each Contributor harmless for any liability
   incurred by, or claims asserted against, such Contributor by reason
   of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS
```

Thepyexpatextension is built using an included copy of the expat sources unless the build is configured--with-system-expat:

```
--with-system-expat
```

================================================================================

```
Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
                               and Clark Cooper

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```

The_ctypesC extension underlying thectypesmodule is built using an included copy of the libffi sources unless the build is configured--with-system-libffi:

```
--with-system-libffi
```

```
Copyright (c) 1996-2008  Red Hat, Inc and others.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
```

Thezlibextension is built using an included copy of the zlib sources if the zlib version found on the system is too old to be used for the build:

```
Copyright (C) 1995-2011 Jean-loup Gailly and Mark Adler

This software is provided 'as-is', without any express or implied
warranty.  In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not
   claim that you wrote the original software. If you use this software
   in a product, an acknowledgment in the product documentation would be
   appreciated but is not required.

2. Altered source versions must be plainly marked as such, and must not be
   misrepresented as being the original software.

3. This notice may not be removed or altered from any source distribution.

Jean-loup Gailly        Mark Adler
jloup@gzip.org          madler@alumni.caltech.edu
```

The implementation of the hash table used by thetracemallocis based on the cfuhash project:

```
tracemalloc
```

```
Copyright (c) 2005 Don Owens
All rights reserved.

This code is released under the BSD license:

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above
    copyright notice, this list of conditions and the following
    disclaimer in the documentation and/or other materials provided
    with the distribution.

  * Neither the name of the author nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
```

The_decimalC extension underlying thedecimalmodule is built using an included copy of the libmpdec library unless the build is configured--with-system-libmpdec:

```
--with-system-libmpdec
```

```
Copyright (c) 2008-2020 Stefan Krah. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
```

================================================================================

### W3C C14N test suite¶

The C14N 2.0 test suite in thetestpackage (Lib/test/xmltestdata/c14n-20/) was retrieved from the W3C website athttps://www.w3.org/TR/xml-c14n2-testcases/and is distributed under the 3-clause BSD license:

```
Lib/test/xmltestdata/c14n-20/
```

```
Copyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),
All Rights Reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

* Redistributions of works must retain the original copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the original copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
* Neither the name of the W3C nor the names of its contributors may be
  used to endorse or promote products derived from this work without
  specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
```

MIT License:

```
Copyright (c) 2018-2021 Microsoft Corporation, Daan Leijen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

Parts of theasynciomodule are incorporated fromuvloop 0.16, which is distributed under the MIT license:

```
Copyright (c) 2015-2021 MagicStack Inc.  http://magic.io

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
```

================================================================================

### Global Unbounded Sequences (GUS)¶

The filePython/qsbr.cis adapted from FreeBSD’s “Global Unbounded Sequences” safe memory reclamation scheme insubr_smr.c. The file is distributed under the 2-Clause BSD License:

```
Python/qsbr.c
```

```
Copyright (c) 2019,2020 Jeffrey Roberson <jeff@FreeBSD.org>

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice unmodified, this list of conditions, and the following
   disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
```

================================================================================

================================================================================

# Python Documentation contents — Python 3.13.3 documentation
URL: https://docs.python.org/3/contents.html
Section: 1/2
Description: What’s New in Python- What’s New In Python 3.13- Summary – Release Highlights, New Features- A better interactive interpreter, Improved error messages, Free-threaded CPython, An experimental just-i...

Content:

================================================================================

# Python Documentation contents¶

- What’s New in PythonWhat’s New In Python 3.13Summary – Release HighlightsNew FeaturesA better interactive interpreterImproved error messagesFree-threaded CPythonAn experimental just-in-time (JIT) compilerDefined mutation semantics forlocals()Support for mobile platformsOther Language ChangesNew ModulesImproved Modulesargparsearrayastasynciobase64compileallconcurrent.futuresconfigparsercopyctypesdbmdisdoctestemailenumfractionsglobimportlibioipaddressitertoolsmarshalmathmimetypesmmapmultiprocessingosos.pathpathlibpdbqueuerandomreshutilsitesqlite3sslstatisticssubprocesssystempfiletimetkintertracebacktypestypingunicodedatavenvwarningsxmlzipimportOptimizationsRemoved Modules And APIsPEP 594: Remove “dead batteries” from the standard library2to3builtinsconfigparserimportlib.metadatalocaleopcodeoptparsepathlibretkinter.tixturtletypingunittesturllibwebbrowserNew DeprecationsPending Removal in Python 3.14Pending Removal in Python 3.15Pending removal in Python 3.16Pending Removal in Future VersionsCPython Bytecode ChangesC API ChangesNew FeaturesChanged C APIsLimited C API ChangesRemoved C APIsDeprecated C APIsPending Removal in Python 3.14Pending Removal in Python 3.15Pending Removal in Future VersionsBuild ChangesPorting to Python 3.13Changes in the Python APIChanges in the C APIRegression Test ChangesNotable changes in 3.13.1sysWhat’s New In Python 3.12Summary – Release highlightsNew FeaturesPEP 695: Type Parameter SyntaxPEP 701: Syntactic formalization of f-stringsPEP 684: A Per-Interpreter GILPEP 669: Low impact monitoring for CPythonPEP 688: Making the buffer protocol accessible in PythonPEP 709: Comprehension inliningImproved Error MessagesNew Features Related to Type HintsPEP 692: UsingTypedDictfor more precise**kwargstypingPEP 698: Override Decorator for Static TypingOther Language ChangesNew ModulesImproved Modulesarrayasynciocalendarcsvdisfractionsimportlib.resourcesinspectitertoolsmathosos.pathpathlibplatformpdbrandomshutilsqlite3statisticssystempfilethreadingtkintertokenizetypestypingunicodedataunittestuuidOptimizationsCPython bytecode changesDemos and ToolsDeprecatedPending Removal in Python 3.13Pending Removal in Python 3.14Pending Removal in Python 3.15Pending removal in Python 3.16Pending Removal in Future VersionsRemovedasynchat and asyncoreconfigparserdistutilsensurepipenumftplibgziphashlibimportlibimpiolocalesmtpdsqlite3sslunittestwebbrowserxml.etree.ElementTreezipimportOthersPorting to Python 3.12Changes in the Python APIBuild ChangesC API ChangesNew FeaturesPorting to Python 3.12DeprecatedPending Removal in Python 3.14Pending Removal in Python 3.15Pending Removal in Future VersionsRemovedWhat’s New In Python 3.11Summary – Release highlightsNew FeaturesPEP 657: Fine-grained error locations in tracebacksPEP 654: Exception Groups andexcept*PEP 678: Exceptions can be enriched with notesWindowspy.exelauncher improvementsNew Features Related to Type HintsPEP 646: Variadic genericsPEP 655: Marking individualTypedDictitems as required or not-requiredPEP 673:SelftypePEP 675: Arbitrary literal string typePEP 681: Data class transformsPEP 563 may not be the futureOther Language ChangesOther CPython Implementation ChangesNew ModulesImproved ModulesasynciocontextlibdataclassesdatetimeenumfcntlfractionsfunctoolsgziphashlibIDLE and idlelibinspectlocaleloggingmathoperatorospathlibreshutilsocketsqlite3stringsyssysconfigtempfilethreadingtimetkintertracebacktypingunicodedataunittestvenvwarningszipfileOptimizationsFaster CPythonFaster StartupFrozen imports / Static code objectsFaster RuntimeCheaper, lazy Python framesInlined Python function callsPEP 659: Specializing Adaptive InterpreterMiscFAQHow should I write my code to utilize these speedups?Will CPython 3.11 use more memory?I don’t see any speedups in my workload. Why?Is there a JIT compiler?AboutCPython bytecode changesNew opcodesReplaced opcodesChanged/removed opcodesDeprecatedLanguage/BuiltinsModulesStandard LibraryPending Removal in Python 3.12RemovedPorting to Python 3.11Build ChangesC API ChangesNew FeaturesPorting to Python 3.11DeprecatedPending Removal in Python 3.12RemovedNotable changes in 3.11.4tarfileNotable changes in 3.11.5OpenSSLWhat’s New In Python 3.10Summary – Release highlightsNew FeaturesParenthesized context managersBetter error messagesSyntaxErrorsIndentationErrorsAttributeErrorsNameErrorsPEP 626: Precise line numbers for debugging and other toolsPEP 634: Structural Pattern MatchingSyntax and operationsDeclarative approachSimple pattern: match to a literalBehavior without the wildcardPatterns with a literal and variablePatterns and classesPatterns with positional parametersNested patternsComplex patterns and the wildcardGuardOther Key FeaturesOptionalEncodingWarningandencoding="locale"optionNew Features Related to Type HintsPEP 604: New Type Union OperatorPEP 612: Parameter Specification VariablesPEP 613: TypeAliasPEP 647: User-Defined Type GuardsOther Language ChangesNew ModulesImproved Modulesasyncioargparsearrayasynchat, asyncore, smtpdbase64bdbbisectcodecscollections.abccontextlibcursesdataclasses__slots__Keyword-only fieldsdistutilsdoctestencodingsenumfileinputfaulthandlergcglobhashlibhmacIDLE and idlelibimportlib.metadatainspectitertoolslinecacheosos.pathpathlibplatformpprintpy_compilepyclbrshelvestatisticssitesocketsslsqlite3sys_threadthreadingtracebacktypestypingunittesturllib.parsexmlzipimportOptimizationsDeprecatedRemovedPorting to Python 3.10Changes in the Python syntaxChanges in the Python APIChanges in the C APICPython bytecode changesBuild ChangesC API ChangesPEP 652: Maintaining the Stable ABINew FeaturesPorting to Python 3.10DeprecatedRemovedNotable security feature in 3.10.7Notable security feature in 3.10.8Notable changes in 3.10.12tarfileWhat’s New In Python 3.9Summary – Release highlightsYou should check for DeprecationWarning in your codeNew FeaturesDictionary Merge & Update OperatorsNew String Methods to Remove Prefixes and SuffixesType Hinting Generics in Standard CollectionsNew ParserOther Language ChangesNew ModuleszoneinfographlibImproved Modulesastasynciocompileallconcurrent.futurescursesdatetimedistutilsfcntlftplibgchashlibhttpIDLE and idlelibimaplibimportlibinspectipaddressmathmultiprocessingnntplibospathlibpdbpoplibpprintpydocrandomsignalsmtplibsockettimesystracemalloctypingunicodedatavenvxmlOptimizationsDeprecatedRemovedPorting to Python 3.9Changes in the Python APIChanges in the C APICPython bytecode changesBuild ChangesC API ChangesNew FeaturesPorting to Python 3.9RemovedNotable changes in Python 3.9.1typingmacOS 11.0 (Big Sur) and Apple Silicon Mac supportNotable changes in Python 3.9.2collections.abcurllib.parseNotable changes in Python 3.9.3Notable changes in Python 3.9.5urllib.parseNotable security feature in 3.9.14Notable changes in 3.9.17tarfileWhat’s New In Python 3.8Summary – Release highlightsNew FeaturesAssignment expressionsPositional-only parametersParallel filesystem cache for compiled bytecode filesDebug build uses the same ABI as release buildf-strings support=for self-documenting expressions and debuggingPEP 578: Python Runtime Audit HooksPEP 587: Python Initialization ConfigurationPEP 590: Vectorcall: a fast calling protocol for CPythonPickle protocol 5 with out-of-band data buffersOther Language ChangesNew ModulesImproved ModulesastasynciobuiltinscollectionscProfilecsvcursesctypesdatetimefunctoolsgcgettextgzipIDLE and idlelibinspectioitertoolsjson.toolloggingmathmmapmultiprocessingosos.pathpathlibpickleplistlibpprintpy_compileshlexshutilsocketsslstatisticssystarfilethreadingtokenizetkintertimetypingunicodedataunittestvenvweakrefxmlxmlrpcOptimizationsBuild and C API ChangesDeprecatedAPI and Feature RemovalsPorting to Python 3.8Changes in Python behaviorChanges in the Python APIChanges in the C APICPython bytecode changesDemos and ToolsNotable changes in Python 3.8.1Notable changes in Python 3.8.2Notable changes in Python 3.8.3Notable changes in Python 3.8.8Notable changes in Python 3.8.9Notable changes in Python 3.8.10macOS 11.0 (Big Sur) and Apple Silicon Mac supportNotable changes in Python 3.8.10urllib.parseNotable changes in Python 3.8.12Changes in the Python APINotable security feature in 3.8.14Notable changes in 3.8.17tarfileWhat’s New In Python 3.7Summary – Release HighlightsNew FeaturesPEP 563: Postponed Evaluation of AnnotationsPEP 538: Legacy C Locale CoercionPEP 540: Forced UTF-8 Runtime ModePEP 553: Built-inbreakpoint()PEP 539: New C API for Thread-Local StoragePEP 562: Customization of Access to Module AttributesPEP 564: New Time Functions With Nanosecond ResolutionPEP 565: Show DeprecationWarning in__main__PEP 560: Core Support fortypingmodule and Generic TypesPEP 552: Hash-based .pyc FilesPEP 545: Python Documentation TranslationsPython Development Mode (-X dev)Other Language ChangesNew Modulescontextvarsdataclassesimportlib.resourcesImproved Modulesargparseasynciobinasciicalendarcollectionscompileallconcurrent.futurescontextlibcProfilecryptdatetimedbmdecimaldisdistutilsenumfunctoolsgchmachttp.clienthttp.serveridlelib and IDLEimportlibioipaddressitertoolslocaleloggingmathmimetypesmsilibmultiprocessingospathlibpdbpy_compilepydocqueueresignalsocketsocketserversqlite3sslstringsubprocesssystimetkintertracemalloctypesunicodedataunittestunittest.mockurllib.parseuuuuidwarningsxmlxml.etreexmlrpc.serverzipappzipfileC API ChangesBuild ChangesOptimizationsOther CPython Implementation ChangesDeprecated Python BehaviorDeprecated Python modules, functions and methodsaifcasynciocollectionsdbmenumgettextimportliblocalemacpaththreadingsocketsslsunausyswaveDeprecated functions and types of the C APIPlatform Support RemovalsAPI and Feature RemovalsModule RemovalsWindows-only ChangesPorting to Python 3.7Changes in Python BehaviorChanges in the Python APIChanges in the C APICPython bytecode changesWindows-only ChangesOther CPython implementation changesNotable changes in Python 3.7.1Notable changes in Python 3.7.2Notable changes in Python 3.7.6Notable changes in Python 3.7.10Notable changes in Python 3.7.11Notable security feature in 3.7.14What’s New In Python 3.6Summary – Release highlightsNew FeaturesPEP 498: Formatted string literalsPEP 526: Syntax for variable annotationsPEP 515: Underscores in Numeric LiteralsPEP 525: Asynchronous GeneratorsPEP 530: Asynchronous ComprehensionsPEP 487: Simpler customization of class creationPEP 487: Descriptor Protocol EnhancementsPEP 519: Adding a file system path protocolPEP 495: Local Time DisambiguationPEP 529: Change Windows filesystem encoding to UTF-8PEP 528: Change Windows console encoding to UTF-8PEP 520: Preserving Class Attribute Definition OrderPEP 468: Preserving Keyword Argument OrderNewdictimplementationPEP 523: Adding a frame evaluation API to CPythonPYTHONMALLOC environment variableDTrace and SystemTap probing supportOther Language ChangesNew ModulessecretsImproved Modulesarrayastasynciobinasciicmathcollectionsconcurrent.futurescontextlibdatetimedecimaldistutilsemailencodingsenumfaulthandlerfileinputhashlibhttp.clientidlelib and IDLEimportlibinspectjsonloggingmathmultiprocessingospathlibpdbpicklepickletoolspydocrandomrereadlinerlcompletershlexsitesqlite3socketsocketserversslstatisticsstructsubprocesssystelnetlibtimetimeittkintertracebacktracemalloctypingunicodedataunittest.mockurllib.requesturllib.robotparservenvwarningswinregwinsoundxmlrpc.clientzipfilezlibOptimizationsBuild and C API ChangesOther ImprovementsDeprecatedNew KeywordsDeprecated Python behaviorDeprecated Python modules, functions and methodsasynchatasyncoredbmdistutilsgrpimportlibosressltkintervenvxmlDeprecated functions and types of the C APIDeprecated Build OptionsRemovedAPI and Feature RemovalsPorting to Python 3.6Changes in ‘python’ Command BehaviorChanges in the Python APIChanges in the C APICPython bytecode changesNotable changes in Python 3.6.2Newmakeregen-allbuild targetRemoval ofmaketouchbuild targetNotable changes in Python 3.6.4Notable changes in Python 3.6.5Notable changes in Python 3.6.7Notable changes in Python 3.6.10Notable changes in Python 3.6.13Notable changes in Python 3.6.14What’s New In Python 3.5Summary – Release highlightsNew FeaturesPEP 492 - Coroutines with async and await syntaxPEP 465 - A dedicated infix operator for matrix multiplicationPEP 448 - Additional Unpacking GeneralizationsPEP 461 - percent formatting support for bytes and bytearrayPEP 484 - Type HintsPEP 471 - os.scandir() function – a better and faster directory iteratorPEP 475: Retry system calls failing with EINTRPEP 479: Change StopIteration handling inside generatorsPEP 485: A function for testing approximate equalityPEP 486: Make the Python Launcher aware of virtual environmentsPEP 488: Elimination of PYO filesPEP 489: Multi-phase extension module initializationOther Language ChangesNew ModulestypingzipappImproved Modulesargparseasynciobz2cgicmathcodecollectionscollections.abccompileallconcurrent.futuresconfigparsercontextlibcsvcursesdbmdifflibdistutilsdoctestemailenumfaulthandlerfunctoolsglobgzipheapqhttphttp.clientidlelib and IDLEimaplibimghdrimportlibinspectioipaddressjsonlinecachelocalelogginglzmamathmultiprocessingoperatorospathlibpicklepoplibrereadlineselectorsshutilsignalsmtpdsmtplibsndhdrsocketsslMemory BIO SupportApplication-Layer Protocol Negotiation SupportOther Changessqlite3subprocesssyssysconfigtarfilethreadingtimetimeittkintertracebacktypesunicodedataunittestunittest.mockurllibwsgirefxmlrpcxml.saxzipfileOther module-level changesOptimizationsBuild and C API ChangesDeprecatedNew KeywordsDeprecated Python BehaviorUnsupported Operating SystemsDeprecated Python modules, functions and methodsRemovedAPI and Feature RemovalsPorting to Python 3.5Changes in Python behaviorChanges in the Python APIChanges in the C APINotable changes in Python 3.5.4Newmakeregen-allbuild targetRemoval ofmaketouchbuild targetWhat’s New In Python 3.4Summary – Release HighlightsNew FeaturesPEP 453: Explicit Bootstrapping of PIP in Python InstallationsBootstrapping pip By DefaultDocumentation ChangesPEP 446: Newly Created File Descriptors Are Non-InheritableImprovements to Codec HandlingPEP 451: A ModuleSpec Type for the Import SystemOther Language ChangesNew ModulesasyncioensurepipenumpathlibselectorsstatisticstracemallocImproved Modulesabcaifcargparseaudioopbase64collectionscolorsyscontextlibdbmdisdoctestemailfilecmpfunctoolsgcglobhashlibhmachtmlhttpidlelib and IDLEimportlibinspectipaddressloggingmarshalmmapmultiprocessingoperatorospdbpickleplistlibpoplibpprintptypydocreresourceselectshelveshutilsmtpdsmtplibsocketsqlite3sslstatstructsubprocesssunausystarfiletextwrapthreadingtracebacktypesurllibunittestvenvwaveweakrefxml.etreezipfileCPython Implementation ChangesPEP 445: Customization of CPython Memory AllocatorsPEP 442: Safe Object FinalizationPEP 456: Secure and Interchangeable Hash AlgorithmPEP 436: Argument ClinicOther Build and C API ChangesOther ImprovementsSignificant OptimizationsDeprecatedDeprecations in the Python APIDeprecated FeaturesRemovedOperating Systems No Longer SupportedAPI and Feature RemovalsCode CleanupsPorting to Python 3.4Changes in ‘python’ Command BehaviorChanges in the Python APIChanges in the C APIChanged in 3.4.3PEP 476: Enabling certificate verification by default for stdlib http clientsWhat’s New In Python 3.3Summary – Release highlightsPEP 405: Virtual EnvironmentsPEP 420: Implicit Namespace PackagesPEP 3118: New memoryview implementation and buffer protocol documentationFeaturesAPI changesPEP 393: Flexible String RepresentationFunctionalityPerformance and resource usagePEP 397: Python Launcher for WindowsPEP 3151: Reworking the OS and IO exception hierarchyPEP 380: Syntax for Delegating to a SubgeneratorPEP 409: Suppressing exception contextPEP 414: Explicit Unicode literalsPEP 3155: Qualified name for classes and functionsPEP 412: Key-Sharing DictionaryPEP 362: Function Signature ObjectPEP 421: Adding sys.implementationSimpleNamespaceUsing importlib as the Implementation of ImportNew APIsVisible ChangesOther Language ChangesA Finer-Grained Import LockBuiltin functions and typesNew ModulesfaulthandleripaddresslzmaImproved Modulesabcarraybase64binasciibz2codecscollectionscontextlibcryptcursesdatetimedecimalFeaturesAPI changesemailPolicy FrameworkProvisional Policy with New Header APIOther API Changesftplibfunctoolsgchmachttphtmlimaplibinspectioitertoolsloggingmathmmapmultiprocessingnntplibospdbpicklepydocreschedselectshlexshutilsignalsmtpdsmtplibsocketsocketserversqlite3sslstatstructsubprocesssystarfiletempfiletextwrapthreadingtimetypesunittesturllibwebbrowserxml.etree.ElementTreezlibOptimizationsBuild and C API ChangesDeprecatedUnsupported Operating SystemsDeprecated Python modules, functions and methodsDeprecated functions and types of the C APIDeprecated featuresPorting to Python 3.3Porting Python codePorting C codeBuilding C extensionsCommand Line Switch ChangesWhat’s New In Python 3.2PEP 384: Defining a Stable ABIPEP 389: Argparse Command Line Parsing ModulePEP 391:  Dictionary Based Configuration for LoggingPEP 3148:  Theconcurrent.futuresmodulePEP 3147:  PYC Repository DirectoriesPEP 3149: ABI Version Tagged .so FilesPEP 3333: Python Web Server Gateway Interface v1.0.1Other Language ChangesNew, Improved, and Deprecated Modulesemailelementtreefunctoolsitertoolscollectionsthreadingdatetime and timemathabcioreprlibloggingcsvcontextlibdecimal and fractionsftppopenselectgzip and zipfiletarfilehashlibastosshutilsqlite3htmlsocketsslnntpcertificatesimaplibhttp.clientunittestrandompoplibasyncoretempfileinspectpydocdisdbmctypessitesysconfigpdbconfigparserurllib.parsemailboxturtledemoMulti-threadingOptimizationsUnicodeCodecsDocumentationIDLECode RepositoryBuild and C API ChangesPorting to Python 3.2What’s New In Python 3.1PEP 372: Ordered DictionariesPEP 378: Format Specifier for Thousands SeparatorOther Language ChangesNew, Improved, and Deprecated ModulesOptimizationsIDLEBuild and C API ChangesPorting to Python 3.1What’s New In Python 3.0Common Stumbling BlocksPrint Is A FunctionViews And Iterators Instead Of ListsOrdering ComparisonsIntegersText Vs. Data Instead Of Unicode Vs. 8-bitOverview Of Syntax ChangesNew SyntaxChanged SyntaxRemoved SyntaxChanges Already Present In Python 2.6Library ChangesPEP 3101: A New Approach To String FormattingChanges To ExceptionsMiscellaneous Other ChangesOperators And Special MethodsBuiltinsBuild and C API ChangesPerformancePorting To Python 3.0What’s New in Python 2.7The Future for Python 2.xChanges to the Handling of Deprecation WarningsPython 3.1 FeaturesPEP 372: Adding an Ordered Dictionary to collectionsPEP 378: Format Specifier for Thousands SeparatorPEP 389: The argparse Module for Parsing Command LinesPEP 391: Dictionary-Based Configuration For LoggingPEP 3106: Dictionary ViewsPEP 3137: The memoryview ObjectOther Language ChangesInterpreter ChangesOptimizationsNew and Improved ModulesNew module: importlibNew module: sysconfigttk: Themed Widgets for TkUpdated module: unittestUpdated module: ElementTree 1.3Build and C API ChangesCapsulesPort-Specific Changes: WindowsPort-Specific Changes: Mac OS XPort-Specific Changes: FreeBSDOther Changes and FixesPorting to Python 2.7New Features Added to Python 2.7 Maintenance ReleasesTwo new environment variables for debug modePEP 434: IDLE Enhancement Exception for All BranchesPEP 466: Network Security Enhancements for Python 2.7PEP 477: Backport ensurepip (PEP 453) to Python 2.7Bootstrapping pip By DefaultDocumentation ChangesPEP 476: Enabling certificate verification by default for stdlib http clientsPEP 493: HTTPS verification migration tools for Python 2.7Newmakeregen-allbuild targetRemoval ofmaketouchbuild targetAcknowledgementsWhat’s New in Python 2.6Python 3.0Changes to the Development ProcessNew Issue Tracker: RoundupNew Documentation Format: reStructuredText Using SphinxPEP 343: The ‘with’ statementWriting Context ManagersThe contextlib modulePEP 366: Explicit Relative Imports From a Main ModulePEP 370: Per-usersite-packagesDirectoryPEP 371: ThemultiprocessingPackagePEP 3101: Advanced String FormattingPEP 3105:printAs a FunctionPEP 3110: Exception-Handling ChangesPEP 3112: Byte LiteralsPEP 3116: New I/O LibraryPEP 3118: Revised Buffer ProtocolPEP 3119: Abstract Base ClassesPEP 3127: Integer Literal Support and SyntaxPEP 3129: Class DecoratorsPEP 3141: A Type Hierarchy for NumbersThefractionsModuleOther Language ChangesOptimizationsInterpreter ChangesNew and Improved ModulesTheastmoduleThefuture_builtinsmoduleThejsonmodule: JavaScript Object NotationTheplistlibmodule: A Property-List Parserctypes EnhancementsImproved SSL SupportDeprecations and RemovalsBuild and C API ChangesPort-Specific Changes: WindowsPort-Specific Changes: Mac OS XPort-Specific Changes: IRIXPorting to Python 2.6AcknowledgementsWhat’s New in Python 2.5PEP 308: Conditional ExpressionsPEP 309: Partial Function ApplicationPEP 314: Metadata for Python Software Packages v1.1PEP 328: Absolute and Relative ImportsPEP 338: Executing Modules as ScriptsPEP 341: Unified try/except/finallyPEP 342: New Generator FeaturesPEP 343: The ‘with’ statementWriting Context ManagersThe contextlib modulePEP 352: Exceptions as New-Style ClassesPEP 353: Using ssize_t as the index typePEP 357: The ‘__index__’ methodOther Language ChangesInteractive Interpreter ChangesOptimizationsNew, Improved, and Removed ModulesThe ctypes packageThe ElementTree packageThe hashlib packageThe sqlite3 packageThe wsgiref packageBuild and C API ChangesPort-Specific ChangesPorting to Python 2.5AcknowledgementsWhat’s New in Python 2.4PEP 218: Built-In Set ObjectsPEP 237: Unifying Long Integers and IntegersPEP 289: Generator ExpressionsPEP 292: Simpler String SubstitutionsPEP 318: Decorators for Functions and MethodsPEP 322: Reverse IterationPEP 324: New subprocess ModulePEP 327: Decimal Data TypeWhy is Decimal needed?TheDecimaltypeTheContexttypePEP 328: Multi-line ImportsPEP 331: Locale-Independent Float/String ConversionsOther Language ChangesOptimizationsNew, Improved, and Deprecated ModulescookielibdoctestBuild and C API ChangesPort-Specific ChangesPorting to Python 2.4AcknowledgementsWhat’s New in Python 2.3PEP 218: A Standard Set DatatypePEP 255: Simple GeneratorsPEP 263: Source Code EncodingsPEP 273: Importing Modules from ZIP ArchivesPEP 277: Unicode file name support for Windows NTPEP 278: Universal Newline SupportPEP 279: enumerate()PEP 282: The logging PackagePEP 285: A Boolean TypePEP 293: Codec Error Handling CallbacksPEP 301: Package Index and Metadata for DistutilsPEP 302: New Import HooksPEP 305: Comma-separated FilesPEP 307: Pickle EnhancementsExtended SlicesOther Language ChangesString ChangesOptimizationsNew, Improved, and Deprecated ModulesDate/Time TypeThe optparse ModulePymalloc: A Specialized Object AllocatorBuild and C API ChangesPort-Specific ChangesOther Changes and FixesPorting to Python 2.3AcknowledgementsWhat’s New in Python 2.2IntroductionPEPs 252 and 253: Type and Class ChangesOld and New ClassesDescriptorsMultiple Inheritance: The Diamond RuleAttribute AccessRelated LinksPEP 234: IteratorsPEP 255: Simple GeneratorsPEP 237: Unifying Long Integers and IntegersPEP 238: Changing the Division OperatorUnicode ChangesPEP 227: Nested ScopesNew and Improved ModulesInterpreter Changes and FixesOther Changes and FixesAcknowledgementsWhat’s New in Python 2.1IntroductionPEP 227: Nested ScopesPEP 236: __future__ DirectivesPEP 207: Rich ComparisonsPEP 230: Warning FrameworkPEP 229: New Build SystemPEP 205: Weak ReferencesPEP 232: Function AttributesPEP 235: Importing Modules on Case-Insensitive PlatformsPEP 217: Interactive Display HookPEP 208: New Coercion ModelPEP 241: Metadata in Python PackagesNew and Improved ModulesOther Changes and FixesAcknowledgementsWhat’s New in Python 2.0IntroductionWhat About Python 1.6?New Development ProcessUnicodeList ComprehensionsAugmented AssignmentString MethodsGarbage Collection of CyclesOther Core ChangesMinor Language ChangesChanges to Built-in FunctionsPorting to 2.0Extending/Embedding ChangesDistutils: Making Modules Easy to InstallXML ModulesSAX2 SupportDOM SupportRelationship to PyXMLModule changesNew modulesIDLE ImprovementsDeleted and Deprecated ModulesAcknowledgementsChangelogPython nextTestsLibraryCore and BuiltinsBuildPython 3.13.3 finalmacOSWindowsTools/DemosTestsSecurityLibraryIDLEDocumentationCore and BuiltinsC APIBuildPython 3.13.2 finalmacOSWindowsTools/DemosTestsSecurityLibraryDocumentationCore and BuiltinsC APIBuildPython 3.13.1 finalmacOSWindowsTools/DemosTestsSecurityLibraryIDLEDocumentationCore and BuiltinsC APIBuildPython 3.13.0 finalCore and BuiltinsPython 3.13.0 release candidate 3macOSWindowsTestsLibraryIDLEDocumentationCore and BuiltinsC APIBuildPython 3.13.0 release candidate 2macOSWindowsTools/DemosTestsSecurityLibraryIDLECore and BuiltinsC APIBuildPython 3.13.0 release candidate 1TestsSecurityLibraryIDLECore and BuiltinsC APIBuildPython 3.13.0 beta 4TestsLibraryIDLEDocumentationCore and BuiltinsC APIBuildPython 3.13.0 beta 3Core and BuiltinsLibraryBuildC APIPython 3.13.0 beta 2SecurityCore and BuiltinsLibraryTestsBuildWindowsC APIPython 3.13.0 beta 1SecurityCore and BuiltinsLibraryDocumentationBuildWindowsmacOSIDLEC APIPython 3.13.0 alpha 6Core and BuiltinsLibraryDocumentationTestsBuildWindowsC APIPython 3.13.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.13.0 alpha 4SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.13.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.13.0 alpha 2Core and BuiltinsLibraryTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.13.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.12.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.12.0 alpha 7Core and BuiltinsLibraryDocumentationTestsBuildWindowsTools/DemosC APIPython 3.12.0 alpha 6SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC APIPython 3.12.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsPython 3.12.0 alpha 4Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC APIPython 3.12.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC APIPython 3.12.0 alpha 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC APIPython 3.12.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.11.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC APIPython 3.11.0 alpha 7Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC APIPython 3.11.0 alpha 6Core and BuiltinsLibraryDocumentationTestsBuildWindowsIDLEC APIPython 3.11.0 alpha 5Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.11.0 alpha 4Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC APIPython 3.11.0 alpha 3Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC APIPython 3.11.0 alpha 2Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.11.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.10.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.10.0 alpha 7SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLEC APIPython 3.10.0 alpha 6SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.10.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.10.0 alpha 4Core and BuiltinsLibraryDocumentationTestsBuildmacOSTools/DemosC APIPython 3.10.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.10.0 alpha 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.10.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.9.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC APIPython 3.9.0 alpha 6SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.9.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.9.0 alpha 4SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLEC APIPython 3.9.0 alpha 3Core and BuiltinsLibraryDocumentationBuildIDLEC APIPython 3.9.0 alpha 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.9.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.8.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.8.0 alpha 4SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.8.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLETools/DemosC APIPython 3.8.0 alpha 2Core and BuiltinsLibraryDocumentationTestsWindowsIDLEPython 3.8.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.7.0 finalLibraryC APIPython 3.7.0 release candidate 1Core and BuiltinsLibraryDocumentationBuildWindowsIDLEPython 3.7.0 beta 5Core and BuiltinsLibraryDocumentationTestsBuildmacOSIDLEPython 3.7.0 beta 4Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosPython 3.7.0 beta 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.7.0 beta 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosPython 3.7.0 beta 1Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC APIPython 3.7.0 alpha 4Core and BuiltinsLibraryDocumentationTestsWindowsTools/DemosC APIPython 3.7.0 alpha 3Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.7.0 alpha 2Core and BuiltinsLibraryDocumentationBuildIDLEC APIPython 3.7.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLETools/DemosC APIPython 3.6.6 finalPython 3.6.6 release candidate 1Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.6.5 finalTestsBuildPython 3.6.5 release candidate 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.6.4 finalPython 3.6.4 release candidate 1Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.6.3 finalLibraryBuildPython 3.6.3 release candidate 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLETools/DemosPython 3.6.2 finalPython 3.6.2 release candidate 2SecurityPython 3.6.2 release candidate 1SecurityCore and BuiltinsLibraryIDLEC APIBuildDocumentationTools/DemosTestsWindowsPython 3.6.1 finalCore and BuiltinsBuildPython 3.6.1 release candidate 1Core and BuiltinsLibraryIDLEWindowsC APIDocumentationTestsBuildPython 3.6.0 finalPython 3.6.0 release candidate 2Core and BuiltinsTools/DemosWindowsBuildPython 3.6.0 release candidate 1Core and BuiltinsLibraryC APIDocumentationTools/DemosPython 3.6.0 beta 4Core and BuiltinsLibraryDocumentationTestsBuildPython 3.6.0 beta 3Core and BuiltinsLibraryWindowsBuildTestsPython 3.6.0 beta 2Core and BuiltinsLibraryWindowsC APIBuildTestsPython 3.6.0 beta 1Core and BuiltinsLibraryIDLEC APITestsBuildTools/DemosWindowsPython 3.6.0 alpha 4Core and BuiltinsLibraryIDLETestsWindowsBuildPython 3.6.0 alpha 3SecurityCore and BuiltinsLibraryIDLEC APIBuildTools/DemosDocumentationTestsPython 3.6.0 alpha 2SecurityCore and BuiltinsLibraryIDLEDocumentationTestsWindowsBuildC APITools/DemosPython 3.6.0 alpha 1SecurityCore and BuiltinsLibraryIDLEDocumentationTestsBuildWindowsTools/DemosC APIPython 3.5.5 finalPython 3.5.5 release candidate 1SecurityCore and BuiltinsLibraryPython 3.5.4 finalLibraryPython 3.5.4 release candidate 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsC APIPython 3.5.3 finalPython 3.5.3 release candidate 1SecurityCore and BuiltinsLibraryIDLEC APIDocumentationTestsTools/DemosWindowsBuildPython 3.5.2 finalCore and BuiltinsTestsIDLEPython 3.5.2 release candidate 1SecurityCore and BuiltinsLibraryIDLEDocumentationTestsBuildWindowsTools/DemosPython 3.5.1 finalCore and BuiltinsWindowsPython 3.5.1 release candidate 1Core and BuiltinsLibraryIDLEDocumentationTestsBuildWindowsTools/DemosPython 3.5.0 finalBuildPython 3.5.0 release candidate 4LibraryBuildPython 3.5.0 release candidate 3Core and BuiltinsLibraryPython 3.5.0 release candidate 2Core and BuiltinsLibraryPython 3.5.0 release candidate 1Core and BuiltinsLibraryIDLEDocumentationTestsPython 3.5.0 beta 4Core and BuiltinsLibraryBuildPython 3.5.0 beta 3Core and BuiltinsLibraryTestsDocumentationBuildPython 3.5.0 beta 2Core and BuiltinsLibraryPython 3.5.0 beta 1Core and BuiltinsLibraryIDLETestsDocumentationTools/DemosPython 3.5.0 alpha 4Core and BuiltinsLibraryBuildTestsTools/DemosC APIPython 3.5.0 alpha 3Core and BuiltinsLibraryBuildTestsTools/DemosPython 3.5.0 alpha 2Core and BuiltinsLibraryBuildC APIWindowsPython 3.5.0 alpha 1Core and BuiltinsLibraryIDLEBuildC APIDocumentationTestsTools/DemosWindows
- The Python Tutorial1. Whetting Your Appetite2. Using the Python Interpreter2.1. Invoking the Interpreter2.1.1. Argument Passing2.1.2. Interactive Mode2.2. The Interpreter and Its Environment2.2.1. Source Code Encoding3. An Informal Introduction to Python3.1. Using Python as a Calculator3.1.1. Numbers3.1.2. Text3.1.3. Lists3.2. First Steps Towards Programming4. More Control Flow Tools4.1.ifStatements4.2.forStatements4.3. Therange()Function4.4.breakandcontinueStatements4.5.elseClauses on Loops4.6.passStatements4.7.matchStatements4.8. Defining Functions4.9. More on Defining Functions4.9.1. Default Argument Values4.9.2. Keyword Arguments4.9.3. Special parameters4.9.3.1. Positional-or-Keyword Arguments4.9.3.2. Positional-Only Parameters4.9.3.3. Keyword-Only Arguments4.9.3.4. Function Examples4.9.3.5. Recap4.9.4. Arbitrary Argument Lists4.9.5. Unpacking Argument Lists4.9.6. Lambda Expressions4.9.7. Documentation Strings4.9.8. Function Annotations4.10. Intermezzo: Coding Style5. Data Structures5.1. More on Lists5.1.1. Using Lists as Stacks5.1.2. Using Lists as Queues5.1.3. List Comprehensions5.1.4. Nested List Comprehensions5.2. Thedelstatement5.3. Tuples and Sequences5.4. Sets5.5. Dictionaries5.6. Looping Techniques5.7. More on Conditions5.8. Comparing Sequences and Other Types6. Modules6.1. More on Modules6.1.1. Executing modules as scripts6.1.2. The Module Search Path6.1.3. “Compiled” Python files6.2. Standard Modules6.3. Thedir()Function6.4. Packages6.4.1. Importing * From a Package6.4.2. Intra-package References6.4.3. Packages in Multiple Directories7. Input and Output7.1. Fancier Output Formatting7.1.1. Formatted String Literals7.1.2. The String format() Method7.1.3. Manual String Formatting7.1.4. Old string formatting7.2. Reading and Writing Files7.2.1. Methods of File Objects7.2.2. Saving structured data withjson8. Errors and Exceptions8.1. Syntax Errors8.2. Exceptions8.3. Handling Exceptions8.4. Raising Exceptions8.5. Exception Chaining8.6. User-defined Exceptions8.7. Defining Clean-up Actions8.8. Predefined Clean-up Actions8.9. Raising and Handling Multiple Unrelated Exceptions8.10. Enriching Exceptions with Notes9. Classes9.1. A Word About Names and Objects9.2. Python Scopes and Namespaces9.2.1. Scopes and Namespaces Example9.3. A First Look at Classes9.3.1. Class Definition Syntax9.3.2. Class Objects9.3.3. Instance Objects9.3.4. Method Objects9.3.5. Class and Instance Variables9.4. Random Remarks9.5. Inheritance9.5.1. Multiple Inheritance9.6. Private Variables9.7. Odds and Ends9.8. Iterators9.9. Generators9.10. Generator Expressions10. Brief Tour of the Standard Library10.1. Operating System Interface10.2. File Wildcards10.3. Command Line Arguments10.4. Error Output Redirection and Program Termination10.5. String Pattern Matching10.6. Mathematics10.7. Internet Access10.8. Dates and Times10.9. Data Compression10.10. Performance Measurement10.11. Quality Control10.12. Batteries Included11. Brief Tour of the Standard Library — Part II11.1. Output Formatting11.2. Templating11.3. Working with Binary Data Record Layouts11.4. Multi-threading11.5. Logging11.6. Weak References11.7. Tools for Working with Lists11.8. Decimal Floating-Point Arithmetic12. Virtual Environments and Packages12.1. Introduction12.2. Creating Virtual Environments12.3. Managing Packages with pip13. What Now?14. Interactive Input Editing and History Substitution14.1. Tab Completion and History Editing14.2. Alternatives to the Interactive Interpreter15. Floating-Point Arithmetic:  Issues and Limitations15.1. Representation Error16. Appendix16.1. Interactive Mode16.1.1. Error Handling16.1.2. Executable Python Scripts16.1.3. The Interactive Startup File16.1.4. The Customization Modules
- Python Setup and Usage1. Command line and environment1.1. Command line1.1.1. Interface options1.1.2. Generic options1.1.3. Miscellaneous options1.1.4. Controlling color1.1.5. Options you shouldn’t use1.2. Environment variables1.2.1. Debug-mode variables2. Using Python on Unix platforms2.1. Getting and installing the latest version of Python2.1.1. On Linux2.1.1.1. Installing IDLE2.1.2. On FreeBSD and OpenBSD2.2. Building Python2.3. Python-related paths and files2.4. Miscellaneous2.5. Custom OpenSSL3. Configure Python3.1. Build Requirements3.2. Generated files3.2.1. configure script3.3. Configure Options3.3.1. General Options3.3.2. C compiler options3.3.3. Linker options3.3.4. Options for third-party dependencies3.3.5. WebAssembly Options3.3.6. Install Options3.3.7. Performance options3.3.8. Python Debug Build3.3.9. Debug options3.3.10. Linker options3.3.11. Libraries options3.3.12. Security Options3.3.13. macOS Options3.3.14. iOS Options3.3.15. Cross Compiling Options3.4. Python Build System3.4.1. Main files of the build system3.4.2. Main build steps3.4.3. Main Makefile targets3.4.3.1. make3.4.3.2. make platform3.4.3.3. make profile-opt3.4.3.4. make clean3.4.3.5. make distclean3.4.3.6. make install3.4.3.7. make test3.4.3.8. make buildbottest3.4.3.9. make regen-all3.4.4. C extensions3.5. Compiler and linker flags3.5.1. Preprocessor flags3.5.2. Compiler flags3.5.3. Linker flags4. Using Python on Windows4.1. The full installer4.1.1. Installation steps4.1.2. Removing the MAX_PATH Limitation4.1.3. Installing Without UI4.1.4. Installing Without Downloading4.1.5. Modifying an install4.1.6. Installing Free-threaded Binaries4.2. The Microsoft Store package4.2.1. Known issues4.2.1.1. Redirection of local data, registry, and temporary paths4.3. The nuget.org packages4.3.1. Free-threaded packages4.4. The embeddable package4.4.1. Python Application4.4.2. Embedding Python4.5. Alternative bundles4.6. Configuring Python4.6.1. Excursus: Setting environment variables4.6.2. Finding the Python executable4.7. UTF-8 mode4.8. Python Launcher for Windows4.8.1. Getting started4.8.1.1. From the command-line4.8.1.2. Virtual environments4.8.1.3. From a script4.8.1.4. From file associations4.8.2. Shebang Lines4.8.3. Arguments in shebang lines4.8.4. Customization4.8.4.1. Customization via INI files4.8.4.2. Customizing default Python versions4.8.5. Diagnostics4.8.6. Dry Run4.8.7. Install on demand4.8.8. Return codes4.9. Finding modules4.10. Additional modules4.10.1. PyWin324.10.2. cx_Freeze4.11. Compiling Python on Windows4.12. Other Platforms5. Using Python on macOS5.1. Using Python for macOS frompython.org5.1.1. Installation steps5.1.2. How to run a Python script5.2. Alternative Distributions5.3. Installing Additional Python Packages5.4. GUI Programming5.5. Advanced Topics5.5.1. Installing Free-threaded Binaries5.5.2. Installing using the command line5.5.3. Distributing Python Applications5.5.4. App Store Compliance5.6. Other Resources6. Using Python on Android6.1. Adding Python to an Android app7. Using Python on iOS7.1. Python at runtime on iOS7.1.1. iOS version compatibility7.1.2. Platform identification7.1.3. Standard library availability7.1.4. Binary extension modules7.1.5. Compiler stub binaries7.2. Installing Python on iOS7.2.1. Tools for building iOS apps7.2.2. Adding Python to an iOS project7.2.3. Testing a Python package7.3. App Store Compliance8. Editors and IDEs8.1. IDLE — Python editor and shell8.2. Other Editors and IDEs
- The Python Language Reference1. Introduction1.1. Alternate Implementations1.2. Notation2. Lexical analysis2.1. Line structure2.1.1. Logical lines2.1.2. Physical lines2.1.3. Comments2.1.4. Encoding declarations2.1.5. Explicit line joining2.1.6. Implicit line joining2.1.7. Blank lines2.1.8. Indentation2.1.9. Whitespace between tokens2.2. Other tokens2.3. Identifiers and keywords2.3.1. Keywords2.3.2. Soft Keywords2.3.3. Reserved classes of identifiers2.4. Literals2.4.1. String and Bytes literals2.4.1.1. Escape sequences2.4.2. String literal concatenation2.4.3. f-strings2.4.4. Numeric literals2.4.5. Integer literals2.4.6. Floating-point literals2.4.7. Imaginary literals2.5. Operators2.6. Delimiters3. Data model3.1. Objects, values and types3.2. The standard type hierarchy3.2.1. None3.2.2. NotImplemented3.2.3. Ellipsis3.2.4.numbers.Number3.2.4.1.numbers.Integral3.2.4.2.numbers.Real(float)3.2.4.3.numbers.Complex(complex)3.2.5. Sequences3.2.5.1. Immutable sequences3.2.5.2. Mutable sequences3.2.6. Set types3.2.7. Mappings3.2.7.1. Dictionaries3.2.8. Callable types3.2.8.1. User-defined functions3.2.8.1.1. Special read-only attributes3.2.8.1.2. Special writable attributes3.2.8.2. Instance methods3.2.8.3. Generator functions3.2.8.4. Coroutine functions3.2.8.5. Asynchronous generator functions3.2.8.6. Built-in functions3.2.8.7. Built-in methods3.2.8.8. Classes3.2.8.9. Class Instances3.2.9. Modules3.2.9.1. Import-related attributes on module objects3.2.9.2. Other writable attributes on module objects3.2.9.3. Module dictionaries3.2.10. Custom classes3.2.10.1. Special attributes3.2.10.2. Special methods3.2.11. Class instances3.2.11.1. Special attributes3.2.12. I/O objects (also known as file objects)3.2.13. Internal types3.2.13.1. Code objects3.2.13.1.1. Special read-only attributes3.2.13.1.2. Methods on code objects3.2.13.2. Frame objects3.2.13.2.1. Special read-only attributes3.2.13.2.2. Special writable attributes3.2.13.2.3. Frame object methods3.2.13.3. Traceback objects3.2.13.4. Slice objects3.2.13.5. Static method objects3.2.13.6. Class method objects3.3. Special method names3.3.1. Basic customization3.3.2. Customizing attribute access3.3.2.1. Customizing module attribute access3.3.2.2. Implementing Descriptors3.3.2.3. Invoking Descriptors3.3.2.4. __slots__3.3.3. Customizing class creation3.3.3.1. Metaclasses3.3.3.2. Resolving MRO entries3.3.3.3. Determining the appropriate metaclass3.3.3.4. Preparing the class namespace3.3.3.5. Executing the class body3.3.3.6. Creating the class object3.3.3.7. Uses for metaclasses3.3.4. Customizing instance and subclass checks3.3.5. Emulating generic types3.3.5.1. The purpose of__class_getitem__3.3.5.2.__class_getitem__versus__getitem__3.3.6. Emulating callable objects3.3.7. Emulating container types3.3.8. Emulating numeric types3.3.9. With Statement Context Managers3.3.10. Customizing positional arguments in class pattern matching3.3.11. Emulating buffer types3.3.12. Special method lookup3.4. Coroutines3.4.1. Awaitable Objects3.4.2. Coroutine Objects3.4.3. Asynchronous Iterators3.4.4. Asynchronous Context Managers4. Execution model4.1. Structure of a program4.2. Naming and binding4.2.1. Binding of names4.2.2. Resolution of names4.2.3. Annotation scopes4.2.4. Lazy evaluation4.2.5. Builtins and restricted execution4.2.6. Interaction with dynamic features4.3. Exceptions5. The import system5.1.importlib5.2. Packages5.2.1. Regular packages5.2.2. Namespace packages5.3. Searching5.3.1. The module cache5.3.2. Finders and loaders5.3.3. Import hooks5.3.4. The meta path5.4. Loading5.4.1. Loaders5.4.2. Submodules5.4.3. Module specs5.4.4. __path__ attributes on modules5.4.5. Module reprs5.4.6. Cached bytecode invalidation5.5. The Path Based Finder5.5.1. Path entry finders5.5.2. Path entry finder protocol5.6. Replacing the standard import system5.7. Package Relative Imports5.8. Special considerations for __main__5.8.1. __main__.__spec__5.9. References6. Expressions6.1. Arithmetic conversions6.2. Atoms6.2.1. Identifiers (Names)6.2.1.1. Private name mangling6.2.2. Literals6.2.3. Parenthesized forms6.2.4. Displays for lists, sets and dictionaries6.2.5. List displays6.2.6. Set displays6.2.7. Dictionary displays6.2.8. Generator expressions6.2.9. Yield expressions6.2.9.1. Generator-iterator methods6.2.9.2. Examples6.2.9.3. Asynchronous generator functions6.2.9.4. Asynchronous generator-iterator methods6.3. Primaries6.3.1. Attribute references6.3.2. Subscriptions6.3.3. Slicings6.3.4. Calls6.4. Await expression6.5. The power operator6.6. Unary arithmetic and bitwise operations6.7. Binary arithmetic operations6.8. Shifting operations6.9. Binary bitwise operations6.10. Comparisons6.10.1. Value comparisons6.10.2. Membership test operations6.10.3. Identity comparisons6.11. Boolean operations6.12. Assignment expressions6.13. Conditional expressions6.14. Lambdas6.15. Expression lists6.16. Evaluation order6.17. Operator precedence7. Simple statements7.1. Expression statements7.2. Assignment statements7.2.1. Augmented assignment statements7.2.2. Annotated assignment statements7.3. Theassertstatement7.4. Thepassstatement7.5. Thedelstatement7.6. Thereturnstatement7.7. Theyieldstatement7.8. Theraisestatement7.9. Thebreakstatement7.10. Thecontinuestatement7.11. Theimportstatement7.11.1. Future statements7.12. Theglobalstatement7.13. Thenonlocalstatement7.14. Thetypestatement8. Compound statements8.1. Theifstatement8.2. Thewhilestatement8.3. Theforstatement8.4. Thetrystatement8.4.1.exceptclause8.4.2.except*clause8.4.3.elseclause8.4.4.finallyclause8.5. Thewithstatement8.6. Thematchstatement8.6.1. Overview8.6.2. Guards8.6.3. Irrefutable Case Blocks8.6.4. Patterns8.6.4.1. OR Patterns8.6.4.2. AS Patterns8.6.4.3. Literal Patterns8.6.4.4. Capture Patterns8.6.4.5. Wildcard Patterns8.6.4.6. Value Patterns8.6.4.7. Group Patterns8.6.4.8. Sequence Patterns8.6.4.9. Mapping Patterns8.6.4.10. Class Patterns8.7. Function definitions8.8. Class definitions8.9. Coroutines8.9.1. Coroutine function definition8.9.2. Theasyncforstatement8.9.3. Theasyncwithstatement8.10. Type parameter lists8.10.1. Generic functions8.10.2. Generic classes8.10.3. Generic type aliases9. Top-level components9.1. Complete Python programs9.2. File input9.3. Interactive input9.4. Expression input10. Full Grammar specification
- The Python Standard LibraryIntroductionNotes on availabilityWebAssembly platformsMobile platformsBuilt-in FunctionsBuilt-in ConstantsConstants added by thesitemoduleBuilt-in TypesTruth Value TestingBoolean Operations —and,or,notComparisonsNumeric Types —int,float,complexBitwise Operations on Integer TypesAdditional Methods on Integer TypesAdditional Methods on FloatHashing of numeric typesBoolean Type -boolIterator TypesGenerator TypesSequence Types —list,tuple,rangeCommon Sequence OperationsImmutable Sequence TypesMutable Sequence TypesListsTuplesRangesText Sequence Type —strString MethodsFormatted String Literals (f-strings)printf-style String FormattingBinary Sequence Types —bytes,bytearray,memoryviewBytes ObjectsBytearray ObjectsBytes and Bytearray Operationsprintf-style Bytes FormattingMemory ViewsSet Types —set,frozensetMapping Types —dictDictionary view objectsContext Manager TypesType Annotation Types —Generic Alias,UnionGeneric Alias TypeStandard Generic ClassesSpecial Attributes ofGenericAliasobjectsUnion TypeOther Built-in TypesModulesClasses and Class InstancesFunctionsMethodsCode ObjectsType ObjectsThe Null ObjectThe Ellipsis ObjectThe NotImplemented ObjectInternal ObjectsSpecial AttributesInteger string conversion length limitationAffected APIsConfiguring the limitRecommended configurationBuilt-in ExceptionsException contextInheriting from built-in exceptionsBase classesConcrete exceptionsOS exceptionsWarningsException groupsException hierarchyText Processing Servicesstring— Common string operationsString constantsCustom String FormattingFormat String SyntaxFormat Specification Mini-LanguageFormat examplesTemplate stringsHelper functionsre— Regular expression operationsRegular Expression SyntaxModule ContentsFlagsFunctionsExceptionsRegular Expression ObjectsMatch ObjectsRegular Expression ExamplesChecking for a PairSimulating scanf()search() vs. match()Making a PhonebookText MungingFinding all AdverbsFinding all Adverbs and their PositionsRaw String NotationWriting a Tokenizerdifflib— Helpers for computing deltasSequenceMatcher ObjectsSequenceMatcher ExamplesDiffer ObjectsDiffer ExampleA command-line interface to difflibndiff exampletextwrap— Text wrapping and fillingunicodedata— Unicode Databasestringprep— Internet String Preparationreadline— GNU readline interfaceInit fileLine bufferHistory fileHistory listStartup hooksCompletionExamplerlcompleter— Completion function for GNU readlineBinary Data Servicesstruct— Interpret bytes as packed binary dataFunctions and ExceptionsFormat StringsByte Order, Size, and AlignmentFormat CharactersExamplesApplicationsNative FormatsStandard FormatsClassescodecs— Codec registry and base classesCodec Base ClassesError HandlersStateless Encoding and DecodingIncremental Encoding and DecodingIncrementalEncoder ObjectsIncrementalDecoder ObjectsStream Encoding and DecodingStreamWriter ObjectsStreamReader ObjectsStreamReaderWriter ObjectsStreamRecoder ObjectsEncodings and UnicodeStandard EncodingsPython Specific EncodingsText EncodingsBinary TransformsText Transformsencodings.idna— Internationalized Domain Names in Applicationsencodings.mbcs— Windows ANSI codepageencodings.utf_8_sig— UTF-8 codec with BOM signatureData Typesdatetime— Basic date and time typesAware and Naive ObjectsConstantsAvailable TypesCommon PropertiesDetermining if an Object is Aware or NaivetimedeltaObjectsExamples of usage:timedeltadateObjectsExamples of Usage:datedatetimeObjectsExamples of Usage:datetimetimeObjectsExamples of Usage:timetzinfoObjectstimezoneObjectsstrftime()andstrptime()Behaviorstrftime()andstrptime()Format CodesTechnical Detailzoneinfo— IANA time zone supportUsingZoneInfoData sourcesConfiguring the data sourcesCompile-time configurationEnvironment configurationRuntime configurationTheZoneInfoclassString representationsPickle serializationFunctionsGlobalsExceptions and warningscalendar— General calendar-related functionsCommand-Line Usagecollections— Container datatypesChainMapobjectsChainMapExamples and RecipesCounterobjectsdequeobjectsdequeRecipesdefaultdictobjectsdefaultdictExamplesnamedtuple()Factory Function for Tuples with Named FieldsOrderedDictobjectsOrderedDictExamples and RecipesUserDictobjectsUserListobjectsUserStringobjectscollections.abc— Abstract Base Classes for ContainersCollections Abstract Base ClassesCollections Abstract Base Classes – Detailed DescriptionsExamples and Recipesheapq— Heap queue algorithmBasic ExamplesPriority Queue Implementation NotesTheorybisect— Array bisection algorithmPerformance NotesSearching Sorted ListsExamplesarray— Efficient arrays of numeric valuesweakref— Weak referencesWeak Reference ObjectsExampleFinalizer ObjectsComparing finalizers with__del__()methodstypes— Dynamic type creation and names for built-in typesDynamic Type CreationStandard Interpreter TypesAdditional Utility Classes and FunctionsCoroutine Utility Functionscopy— Shallow and deep copy operationspprint— Data pretty printerFunctionsPrettyPrinter ObjectsExamplereprlib— Alternaterepr()implementationRepr ObjectsSubclassing Repr Objectsenum— Support for enumerationsModule ContentsData TypesSupported__dunder__namesSupported_sunder_namesUtilities and DecoratorsNotesgraphlib— Functionality to operate with graph-like structuresExceptionsNumeric and Mathematical Modulesnumbers— Numeric abstract base classesThe numeric towerNotes for type implementersAdding More Numeric ABCsImplementing the arithmetic operationsmath— Mathematical functionsNumber-theoretic functionsFloating point arithmeticFloating point manipulation functionsPower, exponential and logarithmic functionsSummation and product functionsAngular conversionTrigonometric functionsHyperbolic functionsSpecial functionsConstantscmath— Mathematical functions for complex numbersConversions to and from polar coordinatesPower and logarithmic functionsTrigonometric functionsHyperbolic functionsClassification functionsConstantsdecimal— Decimal fixed-point and floating-point arithmeticQuick-start TutorialDecimal objectsLogical operandsContext objectsConstantsRounding modesSignalsFloating-Point NotesMitigating round-off error with increased precisionSpecial valuesWorking with threadsRecipesDecimal FAQfractions— Rational numbersrandom— Generate pseudo-random numbersBookkeeping functionsFunctions for bytesFunctions for integersFunctions for sequencesDiscrete distributionsReal-valued distributionsAlternative GeneratorNotes on ReproducibilityExamplesRecipesCommand-line usageCommand-line examplestatistics— Mathematical statistics functionsAverages and measures of central locationMeasures of spreadStatistics for relations between two inputsFunction detailsExceptionsNormalDistobjectsExamples and RecipesClassic probability problemsMonte Carlo inputs for simulationsApproximating binomial distributionsNaive bayesian classifierFunctional Programming Modulesitertools— Functions creating iterators for efficient loopingItertool FunctionsItertools Recipesfunctools— Higher-order functions and operations on callable objectspartialObjectsoperator— Standard operators as functionsMapping Operators to FunctionsIn-place OperatorsFile and Directory Accesspathlib— Object-oriented filesystem pathsBasic useExceptionsPure pathsGeneral propertiesOperatorsAccessing individual partsMethods and propertiesConcrete pathsParsing and generating URIsExpanding and resolving pathsQuerying file type and statusReading and writing filesReading directoriesCreating files and directoriesRenaming and deletingPermissions and ownershipPattern languageComparison to theglobmoduleComparison to theosandos.pathmodulesCorresponding toolsos.path— Common pathname manipulationsstat— Interpretingstat()resultsfilecmp— File and Directory ComparisonsThedircmpclasstempfile— Generate temporary files and directoriesExamplesDeprecated functions and variablesglob— Unix style pathname pattern expansionExamplesfnmatch— Unix filename pattern matchinglinecache— Random access to text linesshutil— High-level file operationsDirectory and files operationsPlatform-dependent efficient copy operationscopytree examplermtree exampleArchiving operationsArchiving exampleArchiving example withbase_dirQuerying the size of the output terminalData Persistencepickle— Python object serializationRelationship to other Python modulesComparison withmarshalComparison withjsonData stream formatModule InterfaceWhat can be pickled and unpickled?Pickling Class InstancesPersistence of External ObjectsDispatch TablesHandling Stateful ObjectsCustom Reduction for Types, Functions, and Other ObjectsOut-of-band BuffersProvider APIConsumer APIExampleRestricting GlobalsPerformanceExamplescopyreg— Registerpicklesupport functionsExampleshelve— Python object persistenceRestrictionsExamplemarshal— Internal Python object serializationdbm— Interfaces to Unix “databases”dbm.sqlite3— SQLite backend for dbmdbm.gnu— GNU database managerdbm.ndbm— New Database Managerdbm.dumb— Portable DBM implementationsqlite3— DB-API 2.0 interface for SQLite databasesTutorialReferenceModule functionsModule constantsConnection objectsCursor objectsRow objectsBlob objectsPrepareProtocol objectsExceptionsSQLite and Python typesDefault adapters and converters (deprecated)Command-line interfaceHow-to guidesHow to use placeholders to bind values in SQL queriesHow to adapt custom Python types to SQLite valuesHow to write adaptable objectsHow to register adapter callablesHow to convert SQLite values to custom Python typesAdapter and converter recipesHow to use connection shortcut methodsHow to use the connection context managerHow to work with SQLite URIsHow to create and use row factoriesHow to handle non-UTF-8 text encodingsExplanationTransaction controlTransaction control via theautocommitattributeTransaction control via theisolation_levelattributeData Compression and Archivingzlib— Compression compatible withgzipgzip— Support forgzipfilesExamples of usageCommand Line InterfaceCommand line optionsbz2— Support forbzip2compression(De)compression of filesIncremental (de)compressionOne-shot (de)compressionExamples of usagelzma— Compression using the LZMA algorithmReading and writing compressed filesCompressing and decompressing data in memoryMiscellaneousSpecifying custom filter chainsExampleszipfile— Work with ZIP archivesZipFile ObjectsPath ObjectsPyZipFile ObjectsZipInfo ObjectsCommand-Line InterfaceCommand-line optionsDecompression pitfallsFrom file itselfFile System limitationsResources limitationsInterruptionDefault behaviors of extractiontarfile— Read and write tar archive filesTarFile ObjectsTarInfo ObjectsExtraction filtersDefault named filtersFilter errorsHints for further verificationSupporting older Python versionsStateful extraction filter exampleCommand-Line InterfaceCommand-line optionsExamplesSupported tar formatsUnicode issuesFile Formatscsv— CSV File Reading and WritingModule ContentsDialects and Formatting ParametersReader ObjectsWriter ObjectsExamplesconfigparser— Configuration file parserQuick StartSupported DatatypesFallback ValuesSupported INI File StructureUnnamed SectionsInterpolation of valuesMapping Protocol AccessCustomizing Parser BehaviourLegacy API ExamplesConfigParser ObjectsRawConfigParser ObjectsExceptionstomllib— Parse TOML filesExamplesConversion Tablenetrc— netrc file processingnetrc Objectsplistlib— Generate and parse Apple.plistfilesExamplesCryptographic Serviceshashlib— Secure hashes and message digestsHash algorithmsUsageConstructorsAttributesHash ObjectsSHAKE variable length digestsFile hashingKey derivationBLAKE2Creating hash objectsConstantsExamplesSimple hashingUsing different digest sizesKeyed hashingRandomized hashingPersonalizationTree modeCreditshmac— Keyed-Hashing for Message Authenticationsecrets— Generate secure random numbers for managing secretsRandom numbersGenerating tokensHow many bytes should tokens use?Other functionsRecipes and best practicesGeneric Operating System Servicesos— Miscellaneous operating system interfacesFile Names, Command Line Arguments, and Environment VariablesPython UTF-8 ModeProcess ParametersFile Object CreationFile Descriptor OperationsQuerying the size of a terminalInheritance of File DescriptorsFiles and DirectoriesTimer File DescriptorsLinux extended attributesProcess ManagementInterface to the schedulerMiscellaneous System InformationRandom numbersio— Core tools for working with streamsOverviewText I/OBinary I/ORaw I/OText EncodingOpt-in EncodingWarningHigh-level Module InterfaceClass hierarchyI/O Base ClassesRaw File I/OBuffered StreamsText I/OPerformanceBinary I/OText I/OMulti-threadingReentrancytime— Time access and conversionsFunctionsClock ID ConstantsTimezone Constantslogging— Logging facility for PythonLogger ObjectsLogging LevelsHandler ObjectsFormatter ObjectsFilter ObjectsLogRecord ObjectsLogRecord attributesLoggerAdapter ObjectsThread SafetyModule-Level FunctionsModule-Level AttributesIntegration with the warnings modulelogging.config— Logging configurationConfiguration functionsSecurity considerationsConfiguration dictionary schemaDictionary Schema DetailsIncremental ConfigurationObject connectionsUser-defined objectsHandler configuration orderAccess to external objectsAccess to internal objectsImport resolution and custom importersConfiguring QueueHandler and QueueListenerConfiguration file formatlogging.handlers— Logging handlersStreamHandlerFileHandlerNullHandlerWatchedFileHandlerBaseRotatingHandlerRotatingFileHandlerTimedRotatingFileHandlerSocketHandlerDatagramHandlerSysLogHandlerNTEventLogHandlerSMTPHandlerMemoryHandlerHTTPHandlerQueueHandlerQueueListenerplatform—  Access to underlying platform’s identifying dataCross PlatformJava PlatformWindows PlatformmacOS PlatformiOS PlatformUnix PlatformsLinux PlatformsAndroid Platformerrno— Standard errno system symbolsctypes— A foreign function library for Pythonctypes tutorialLoading dynamic link librariesAccessing functions from loaded dllsCalling functionsFundamental data typesCalling functions, continuedCalling variadic functionsCalling functions with your own custom data typesSpecifying the required argument types (function prototypes)Return typesPassing pointers (or: passing parameters by reference)Structures and unionsStructure/union alignment and byte orderBit fields in structures and unionsArraysPointersType conversionsIncomplete TypesCallback functionsAccessing values exported from dllsSurprisesVariable-sized data typesctypes referenceFinding shared librariesLoading shared librariesForeign functionsFunction prototypesUtility functionsData typesFundamental data typesStructured data typesArrays and pointersCommand Line Interface Librariesargparse— Parser for command-line options, arguments and subcommandsArgumentParser objectsprogusagedescriptionepilogparentsformatter_classprefix_charsfromfile_prefix_charsargument_defaultallow_abbrevconflict_handleradd_helpexit_on_errorThe add_argument() methodname or flagsactionnargsconstdefaulttypechoicesrequiredhelpmetavardestdeprecatedAction classesThe parse_args() methodOption value syntaxInvalid argumentsArguments containing-Argument abbreviations (prefix matching)Beyondsys.argvThe Namespace objectOther utilitiesSub-commandsFileType objectsArgument groupsMutual exclusionParser defaultsPrinting helpPartial parsingCustomizing file parsingExiting methodsIntermixed parsingRegistering custom types or actionsExceptionsArgparse TutorialConceptsThe basicsIntroducing Positional argumentsIntroducing Optional argumentsShort optionsCombining Positional and Optional argumentsGetting a little more advancedSpecifying ambiguous argumentsConflicting optionsHow to translate the argparse outputCustom type convertersConclusionMigratingoptparsecode toargparseoptparse— Parser for command line optionsChoosing an argument parsing libraryIntroductionBackgroundTerminologyWhat are options for?What are positional arguments for?TutorialUnderstanding option actionsThe store actionHandling boolean (flag) optionsOther actionsDefault valuesGenerating helpGrouping OptionsPrinting a version stringHowoptparsehandles errorsPutting it all togetherReference GuideCreating the parserPopulating the parserDefining optionsOption attributesStandard option actionsStandard option typesParsing argumentsQuerying and manipulating your option parserConflicts between optionsCleanupOther methodsOption CallbacksDefining a callback optionHow callbacks are calledRaising errors in a callbackCallback example 1: trivial callbackCallback example 2: check option orderCallback example 3: check option order (generalized)Callback example 4: check arbitrary conditionCallback example 5: fixed argumentsCallback example 6: variable argumentsExtendingoptparseAdding new typesAdding new actionsExceptionsgetpass— Portable password inputfileinput— Iterate over lines from multiple input streamscurses— Terminal handling for character-cell displaysFunctionsWindow ObjectsConstantscurses.textpad— Text input widget for curses programsTextbox objectscurses.ascii— Utilities for ASCII characterscurses.panel— A panel stack extension for cursesFunctionsPanel ObjectsConcurrent Executionthreading— Thread-based parallelismThread-Local DataThread ObjectsLock ObjectsRLock ObjectsCondition ObjectsSemaphore ObjectsSemaphoreExampleEvent ObjectsTimer ObjectsBarrier ObjectsUsing locks, conditions, and semaphores in thewithstatementmultiprocessing— Process-based parallelismIntroductionTheProcessclassContexts and start methodsExchanging objects between processesSynchronization between processesSharing state between processesUsing a pool of workersReferenceProcessand exceptionsPipes and QueuesMiscellaneousConnection ObjectsSynchronization primitivesSharedctypesObjectsThemultiprocessing.sharedctypesmoduleManagersCustomized managersUsing a remote managerProxy ObjectsCleanupProcess PoolsListeners and ClientsAddress FormatsAuthentication keysLoggingThemultiprocessing.dummymoduleProgramming guidelinesAll start methodsThespawnandforkserverstart methodsExamplesmultiprocessing.shared_memory— Shared memory for direct access across processesTheconcurrentpackageconcurrent.futures— Launching parallel tasksExecutor ObjectsThreadPoolExecutorThreadPoolExecutor ExampleProcessPoolExecutorProcessPoolExecutor ExampleFuture ObjectsModule FunctionsException classessubprocess— Subprocess managementUsing thesubprocessModuleFrequently Used ArgumentsPopen ConstructorExceptionsSecurity ConsiderationsPopen ObjectsWindows Popen HelpersWindows ConstantsOlder high-level APIReplacing Older Functions with thesubprocessModuleReplacing/bin/shshell command substitutionReplacing shell pipelineReplacingos.system()Replacing theos.spawnfamilyReplacingos.popen(),os.popen2(),os.popen3()Replacing functions from thepopen2moduleLegacy Shell Invocation FunctionsNotesConverting an argument sequence to a string on WindowsDisabling use ofvfork()orposix_spawn()sched— Event schedulerScheduler Objectsqueue— A synchronized queue classQueue ObjectsTerminating queuesSimpleQueue Objectscontextvars— Context VariablesContext VariablesManual Context Managementasyncio support_thread— Low-level threading APINetworking and Interprocess Communicationasyncio— Asynchronous I/ORunnersRunning an asyncio ProgramRunner context managerHandling Keyboard InterruptionCoroutines and TasksCoroutinesAwaitablesCreating TasksTask CancellationTask GroupsTerminating a Task GroupSleepingRunning Tasks ConcurrentlyEager Task FactoryShielding From CancellationTimeoutsWaiting PrimitivesRunning in ThreadsScheduling From Other ThreadsIntrospectionTask ObjectStreamsStreamReaderStreamWriterExamplesTCP echo client using streamsTCP echo server using streamsGet HTTP headersRegister an open socket to wait for data using streamsSynchronization PrimitivesLockEventConditionSemaphoreBoundedSemaphoreBarrierSubprocessesCreating SubprocessesConstantsInteracting with SubprocessesSubprocess and ThreadsExamplesQueuesQueuePriority QueueLIFO QueueExceptionsExamplesExceptionsEvent LoopEvent Loop MethodsRunning and stopping the loopScheduling callbacksScheduling delayed callbacksCreating Futures and TasksOpening network connectionsCreating network serversTransferring filesTLS UpgradeWatching file descriptorsWorking with socket objects directlyDNSWorking with pipesUnix signalsExecuting code in thread or process poolsError Handling APIEnabling debug modeRunning SubprocessesCallback HandlesServer ObjectsEvent Loop ImplementationsExamplesHello World with call_soon()Display the current date with call_later()Watch a file descriptor for read eventsSet signal handlers for SIGINT and SIGTERMFuturesFuture FunctionsFuture ObjectTransports and ProtocolsTransportsTransports HierarchyBase TransportRead-only TransportsWrite-only TransportsDatagram TransportsSubprocess TransportsProtocolsBase ProtocolsBase ProtocolStreaming ProtocolsBuffered Streaming ProtocolsDatagram ProtocolsSubprocess ProtocolsExamplesTCP Echo ServerTCP Echo ClientUDP Echo ServerUDP Echo ClientConnecting Existing Socketsloop.subprocess_exec() and SubprocessProtocolPoliciesGetting and Setting the PolicyPolicy ObjectsProcess WatchersCustom PoliciesPlatform SupportAll PlatformsWindowsSubprocess Support on WindowsmacOSExtendingWriting a Custom Event LoopFuture and Task private constructorsTask lifetime supportHigh-level API IndexTasksQueuesSubprocessesStreamsSynchronizationExceptionsLow-level API IndexObtaining the Event LoopEvent Loop MethodsTransportsProtocolsEvent Loop PoliciesDeveloping with asyncioDebug ModeConcurrency and MultithreadingRunning Blocking CodeLoggingDetect never-awaited coroutinesDetect never-retrieved exceptionssocket— Low-level networking interfaceSocket familiesModule contentsExceptionsConstantsFunctionsCreating socketsOther functionsSocket ObjectsNotes on socket timeoutsTimeouts and theconnectmethodTimeouts and theacceptmethodExamplessl— TLS/SSL wrapper for socket objectsFunctions, Constants, and ExceptionsSocket creationContext creationExceptionsRandom generationCertificate handlingConstantsSSL SocketsSSL ContextsCertificatesCertificate chainsCA certificatesCombined key and certificateSelf-signed certificatesExamplesTesting for SSL supportClient-side operationServer-side operationNotes on non-blocking socketsMemory BIO SupportSSL sessionSecurity considerationsBest defaultsManual settingsVerifying certificatesProtocol versionsCipher selectionMulti-processingTLS 1.3select— Waiting for I/O completion/dev/pollPolling ObjectsEdge and Level Trigger Polling (epoll) ObjectsPolling ObjectsKqueue ObjectsKevent Objectsselectors— High-level I/O multiplexingIntroductionClassesExamplessignal— Set handlers for asynchronous eventsGeneral rulesExecution of Python signal handlersSignals and threadsModule contentsExamplesNote on SIGPIPENote on Signal Handlers and Exceptionsmmap— Memory-mapped file supportMADV_* ConstantsMAP_* ConstantsInternet Data Handlingemail— An email and MIME handling packageemail.message: Representing an email messageemail.parser: Parsing email messagesFeedParser APIParser APIAdditional notesemail.generator: Generating MIME documentsemail.policy: Policy Objectsemail.errors: Exception and Defect classesemail.headerregistry: Custom Header Objectsemail.contentmanager: Managing MIME ContentContent Manager Instancesemail: Examplesemail.message.Message: Representing an email message using thecompat32APIemail.mime: Creating email and MIME objects from scratchemail.header: Internationalized headersemail.charset: Representing character setsemail.encoders: Encodersemail.utils: Miscellaneous utilitiesemail.iterators: Iteratorsjson— JSON encoder and decoderBasic UsageEncoders and DecodersExceptionsStandard Compliance and InteroperabilityCharacter EncodingsInfinite and NaN Number ValuesRepeated Names Within an ObjectTop-level Non-Object, Non-Array ValuesImplementation LimitationsCommand Line InterfaceCommand line optionsmailbox— Manipulate mailboxes in various formatsMailboxobjectsMaildirobjectsmboxobjectsMHobjectsBabylobjectsMMDFobjectsMessageobjectsMaildirMessageobjectsmboxMessageobjectsMHMessageobjectsBabylMessageobjectsMMDFMessageobjectsExceptionsExamplesmimetypes— Map filenames to MIME typesMimeTypes Objectsbase64— Base16, Base32, Base64, Base85 Data EncodingsSecurity Considerationsbinascii— Convert between binary and ASCIIquopri— Encode and decode MIME quoted-printable dataStructured Markup Processing Toolshtml— HyperText Markup Language supporthtml.parser— Simple HTML and XHTML parserExample HTML Parser ApplicationHTMLParserMethodsExampleshtml.entities— Definitions of HTML general entitiesXML Processing ModulesXML vulnerabilitiesThedefusedxmlPackagexml.etree.ElementTree— The ElementTree XML APITutorialXML tree and elementsParsing XMLPull API for non-blocking parsingFinding interesting elementsModifying an XML FileBuilding XML documentsParsing XML with NamespacesXPath supportExampleSupported XPath syntaxReferenceFunctionsXInclude supportExampleReferenceFunctionsElement ObjectsElementTree ObjectsQName ObjectsTreeBuilder ObjectsXMLParser ObjectsXMLPullParser ObjectsExceptionsxml.dom— The Document Object Model APIModule ContentsObjects in the DOMDOMImplementation ObjectsNode ObjectsNodeList ObjectsDocumentType ObjectsDocument ObjectsElement ObjectsAttr ObjectsNamedNodeMap ObjectsComment ObjectsText and CDATASection ObjectsProcessingInstruction ObjectsExceptionsConformanceType MappingAccessor Methodsxml.dom.minidom— Minimal DOM implementationDOM ObjectsDOM Exampleminidom and the DOM standardxml.dom.pulldom— Support for building partial DOM treesDOMEventStream Objectsxml.sax— Support for SAX2 parsersSAXException Objectsxml.sax.handler— Base classes for SAX handlersContentHandler ObjectsDTDHandler ObjectsEntityResolver ObjectsErrorHandler ObjectsLexicalHandler Objectsxml.sax.saxutils— SAX Utilitiesxml.sax.xmlreader— Interface for XML parsersXMLReader ObjectsIncrementalParser ObjectsLocator ObjectsInputSource ObjectsTheAttributesInterfaceTheAttributesNSInterfacexml.parsers.expat— Fast XML parsing using ExpatXMLParser ObjectsExpatError ExceptionsExampleContent Model DescriptionsExpat error constantsInternet Protocols and Supportwebbrowser— Convenient web-browser controllerBrowser Controller Objectswsgiref— WSGI Utilities and Reference Implementationwsgiref.util– WSGI environment utilitieswsgiref.headers– WSGI response header toolswsgiref.simple_server– a simple WSGI HTTP serverwsgiref.validate— WSGI conformance checkerwsgiref.handlers– server/gateway base classeswsgiref.types– WSGI types for static type checkingExamplesurllib— URL handling modulesurllib.request— Extensible library for opening URLsRequest ObjectsOpenerDirector ObjectsBaseHandler ObjectsHTTPRedirectHandler ObjectsHTTPCookieProcessor ObjectsProxyHandler ObjectsHTTPPasswordMgr ObjectsHTTPPasswordMgrWithPriorAuth ObjectsAbstractBasicAuthHandler ObjectsHTTPBasicAuthHandler ObjectsProxyBasicAuthHandler ObjectsAbstractDigestAuthHandler ObjectsHTTPDigestAuthHandler ObjectsProxyDigestAuthHandler ObjectsHTTPHandler ObjectsHTTPSHandler ObjectsFileHandler ObjectsDataHandler ObjectsFTPHandler ObjectsCacheFTPHandler ObjectsUnknownHandler ObjectsHTTPErrorProcessor ObjectsExamplesLegacy interfaceurllib.requestRestrictionsurllib.response— Response classes used by urlliburllib.parse— Parse URLs into componentsURL ParsingURL parsing securityParsing ASCII Encoded BytesStructured Parse ResultsURL Quotingurllib.error— Exception classes raised by urllib.requesturllib.robotparser—  Parser for robots.txthttp— HTTP modulesHTTP status codesHTTP status categoryHTTP methodshttp.client— HTTP protocol clientHTTPConnection ObjectsHTTPResponse ObjectsExamplesHTTPMessage Objectsftplib— FTP protocol clientReferenceFTP objectsFTP_TLS objectsModule variablespoplib— POP3 protocol clientPOP3 ObjectsPOP3 Exampleimaplib— IMAP4 protocol clientIMAP4 ObjectsIMAP4 Examplesmtplib— SMTP protocol clientSMTP ObjectsSMTP Exampleuuid— UUID objects according toRFC 4122Command-Line UsageExampleCommand-Line Examplesocketserver— A framework for network serversServer Creation NotesServer ObjectsRequest Handler ObjectsExamplessocketserver.TCPServerExamplesocketserver.UDPServerExampleAsynchronous Mixinshttp.server— HTTP serversCommand-line interfaceSecurity considerationshttp.cookies— HTTP state managementCookie ObjectsMorsel ObjectsExamplehttp.cookiejar— Cookie handling for HTTP clientsCookieJar and FileCookieJar ObjectsFileCookieJar subclasses and co-operation with web browsersCookiePolicy ObjectsDefaultCookiePolicy ObjectsCookie ObjectsExamplesxmlrpc— XMLRPC server and client modulesxmlrpc.client— XML-RPC client accessServerProxy ObjectsDateTime ObjectsBinary ObjectsFault ObjectsProtocolError ObjectsMultiCall ObjectsConvenience FunctionsExample of Client UsageExample of Client and Server Usagexmlrpc.server— Basic XML-RPC serversSimpleXMLRPCServer ObjectsSimpleXMLRPCServer ExampleCGIXMLRPCRequestHandlerDocumenting XMLRPC serverDocXMLRPCServer ObjectsDocCGIXMLRPCRequestHandleripaddress— IPv4/IPv6 manipulation libraryConvenience factory functionsIP AddressesAddress objectsConversion to Strings and IntegersOperatorsComparison operatorsArithmetic operatorsIP Network definitionsPrefix, net mask and host maskNetwork objectsOperatorsLogical operatorsIterationNetworks as containers of addressesInterface objectsOperatorsLogical operatorsOther Module Level FunctionsCustom ExceptionsMultimedia Serviceswave— Read and write WAV filesWave_read ObjectsWave_write Objectscolorsys— Conversions between color systemsInternationalizationgettext— Multilingual internationalization servicesGNUgettextAPIClass-based APITheNullTranslationsclassTheGNUTranslationsclassSolaris message catalog supportThe Catalog constructorInternationalizing your programs and modulesLocalizing your moduleLocalizing your applicationChanging languages on the flyDeferred translationsAcknowledgementslocale— Internationalization servicesBackground, details, hints, tips and caveatsFor extension writers and programs that embed PythonAccess to message catalogsProgram Frameworksturtle— Turtle graphicsIntroductionGet startedTutorialStarting a turtle environmentBasic drawingPen controlThe turtle’s positionMaking algorithmic patternsHow to…Get started as quickly as possibleUse theturtlemodule namespaceUse turtle graphics in a scriptUse object-oriented turtle graphicsTurtle graphics referenceTurtle methodsMethods of TurtleScreen/ScreenMethods of RawTurtle/Turtle and corresponding functionsTurtle motionTell Turtle’s stateSettings for measurementPen controlDrawing stateColor controlFillingMore drawing controlTurtle stateVisibilityAppearanceUsing eventsSpecial Turtle methodsCompound shapesMethods of TurtleScreen/Screen and corresponding functionsWindow controlAnimation controlUsing screen eventsInput methodsSettings and special methodsMethods specific to Screen, not inherited from TurtleScreenPublic classesExplanationHelp and configurationHow to use helpTranslation of docstrings into different languagesHow to configure Screen and Turtlesturtledemo— Demo scriptsChanges since Python 2.6Changes since Python 3.0cmd— Support for line-oriented command interpretersCmd ObjectsCmd Exampleshlex— Simple lexical analysisshlex ObjectsParsing RulesImproved Compatibility with ShellsGraphical User Interfaces with Tktkinter— Python interface to Tcl/TkArchitectureTkinter ModulesTkinter Life PreserverA Hello World ProgramImportant Tk ConceptsUnderstanding How Tkinter Wraps Tcl/TkHow do I…? What option does…?Navigating the Tcl/Tk Reference ManualThreading modelHandy ReferenceSetting OptionsThe PackerPacker OptionsCoupling Widget VariablesThe Window ManagerTk Option Data TypesBindings and EventsThe index ParameterImagesFile Handlerstkinter.colorchooser— Color choosing dialogtkinter.font— Tkinter font wrapperTkinter Dialogstkinter.simpledialog— Standard Tkinter input dialogstkinter.filedialog— File selection dialogsNative Load/Save Dialogstkinter.commondialog— Dialog window templatestkinter.messagebox— Tkinter message promptstkinter.scrolledtext— Scrolled Text Widgettkinter.dnd— Drag and drop supporttkinter.ttk— Tk themed widgetsUsing TtkTtk WidgetsWidgetStandard OptionsScrollable Widget OptionsLabel OptionsCompatibility OptionsWidget Statesttk.WidgetComboboxOptionsVirtual eventsttk.ComboboxSpinboxOptionsVirtual eventsttk.SpinboxNotebookOptionsTab OptionsTab IdentifiersVirtual Eventsttk.NotebookProgressbarOptionsttk.ProgressbarSeparatorOptionsSizegripPlatform-specific notesBugsTreeviewOptionsItem OptionsTag OptionsColumn IdentifiersVirtual Eventsttk.TreeviewTtk StylingLayoutsIDLE — Python editor and shellMenusFile menu (Shell and Editor)Edit menu (Shell and Editor)Format menu (Editor window only)Run menu (Editor window only)Shell menu (Shell window only)Debug menu (Shell window only)Options menu (Shell and Editor)Window menu (Shell and Editor)Help menu (Shell and Editor)Context menusEditing and NavigationEditor windowsKey bindingsAutomatic indentationSearch and ReplaceCompletionsCalltipsCode ContextShell windowText colorsStartup and Code ExecutionCommand line usageStartup failureRunning user codeUser output in ShellDeveloping tkinter applicationsRunning without a subprocessHelp and PreferencesHelp sourcesSetting preferencesIDLE on macOSExtensionsidlelib — implementation of IDLE applicationDevelopment Toolstyping— Support for type hintsSpecification for the Python Type SystemType aliasesNewTypeAnnotating callable objectsGenericsAnnotating tuplesThe type of class objectsAnnotating generators and coroutinesUser-defined generic typesTheAnytypeNominal vs structural subtypingModule contentsSpecial typing primitivesSpecial typesSpecial formsBuilding generic types and type aliasesOther special directivesProtocolsABCs for working with IOFunctions and decoratorsIntrospection helpersConstantDeprecated aliasesAliases to built-in typesAliases to types incollectionsAliases to other concrete typesAliases to container ABCs incollections.abcAliases to asynchronous ABCs incollections.abcAliases to other ABCs incollections.abcAliases tocontextlibABCsDeprecation Timeline of Major Featurespydoc— Documentation generator and online help systemPython Development ModeEffects of the Python Development ModeResourceWarning ExampleBad file descriptor error exampledoctest— Test interactive Python examplesSimple Usage: Checking Examples in DocstringsSimple Usage: Checking Examples in a Text FileCommand-line UsageHow It WorksWhich Docstrings Are Examined?How are Docstring Examples Recognized?What’s the Execution Context?What About Exceptions?Option FlagsDirectivesWarningsBasic APIUnittest APIAdvanced APIDocTest ObjectsExample ObjectsDocTestFinder objectsDocTestParser objectsTestResults objectsDocTestRunner objectsOutputChecker objectsDebuggingSoapboxunittest— Unit testing frameworkBasic exampleCommand-Line InterfaceCommand-line optionsTest DiscoveryOrganizing test codeRe-using old test codeSkipping tests and expected failuresDistinguishing test iterations using subtestsClasses and functionsTest casesGrouping testsLoading and running testsload_tests ProtocolClass and Module FixturessetUpClass and tearDownClasssetUpModule and tearDownModuleSignal Handlingunittest.mock— mock object libraryQuick GuideThe Mock ClassCallingDeleting AttributesMock names and the name attributeAttaching Mocks as AttributesThe patcherspatchpatch.objectpatch.dictpatch.multiplepatch methods: start and stoppatch builtinsTEST_PREFIXNesting Patch DecoratorsWhere to patchPatching Descriptors and Proxy ObjectsMagicMock and magic method supportMocking Magic MethodsMagic MockHelperssentinelDEFAULTcallcreate_autospecANYFILTER_DIRmock_openAutospeccingSealing mocksOrder of precedence ofside_effect,return_valueandwrapsunittest.mock— getting startedUsing MockMock Patching MethodsMock for Method Calls on an ObjectMocking ClassesNaming your mocksTracking all CallsSetting Return Values and AttributesRaising exceptions with mocksSide effect functions and iterablesMocking asynchronous iteratorsMocking asynchronous context managerCreating a Mock from an Existing ObjectUsing side_effect to return per file contentPatch DecoratorsFurther ExamplesMocking chained callsPartial mockingMocking a Generator MethodApplying the same patch to every test methodMocking Unbound MethodsChecking multiple calls with mockCoping with mutable argumentsNesting PatchesMocking a dictionary with MagicMockMock subclasses and their attributesMocking imports with patch.dictTracking order of calls and less verbose call assertionsMore complex argument matchingtest— Regression tests package for PythonWriting Unit Tests for thetestpackageRunning tests using the command-line interfacetest.support— Utilities for the Python test suitetest.support.socket_helper— Utilities for socket teststest.support.script_helper— Utilities for the Python execution teststest.support.bytecode_helper— Support tools for testing correct bytecode generationtest.support.threading_helper— Utilities for threading teststest.support.os_helper— Utilities for os teststest.support.import_helper— Utilities for import teststest.support.warnings_helper— Utilities for warnings testsDebugging and ProfilingAudit events tablebdb— Debugger frameworkfaulthandler— Dump the Python tracebackDumping the tracebackFault handler stateDumping the tracebacks after a timeoutDumping the traceback on a user signalIssue with file descriptorsExamplepdb— The Python DebuggerDebugger CommandsThe Python ProfilersIntroduction to the profilersInstant User’s ManualprofileandcProfileModule ReferenceTheStatsClassWhat Is Deterministic Profiling?LimitationsCalibrationUsing a custom timertimeit— Measure execution time of small code snippetsBasic ExamplesPython InterfaceCommand-Line InterfaceExamplestrace— Trace or track Python statement executionCommand-Line UsageMain optionsModifiersFiltersProgrammatic Interfacetracemalloc— Trace memory allocationsExamplesDisplay the top 10Compute differencesGet the traceback of a memory blockPretty topRecord the current and peak size of all traced memory blocksAPIFunctionsDomainFilterFilterFrameSnapshotStatisticStatisticDiffTraceTracebackSoftware Packaging and Distributionensurepip— Bootstrapping thepipinstallerCommand line interfaceModule APIvenv— Creation of virtual environmentsCreating virtual environmentsHow venvs workAPIAn example of extendingEnvBuilderzipapp— Manage executable Python zip archivesBasic ExampleCommand-Line InterfacePython APIExamplesSpecifying the InterpreterCreating Standalone Applications with zipappCaveatsThe Python Zip Application Archive FormatPython Runtime Servicessys— System-specific parameters and functionssys.monitoring— Execution event monitoringTool identifiersRegistering and using toolsEventsLocal eventsAncillary eventsOther eventsThe STOP_ITERATION eventTurning events on and offSetting events globallyPer code object eventsDisabling eventsRegistering callback functionsCallback function argumentssysconfig— Provide access to Python’s configuration informationConfiguration variablesInstallation pathsUser schemeposix_usernt_userosx_framework_userHome schemeposix_homePrefix schemeposix_prefixntInstallation path functionsOther functionsUsingsysconfigas a scriptbuiltins— Built-in objects__main__— Top-level code environment__name__=='__main__'What is the “top-level code environment”?Idiomatic UsagePackaging Considerations__main__.pyin Python PackagesIdiomatic Usageimport__main__warnings— Warning controlWarning CategoriesThe Warnings FilterRepeated Warning Suppression CriteriaDescribing Warning FiltersDefault Warning FilterOverriding the default filterTemporarily Suppressing WarningsTesting WarningsUpdating Code For New Versions of DependenciesAvailable FunctionsAvailable Context Managersdataclasses— Data ClassesModule contentsPost-init processingClass variablesInit-only variablesFrozen instancesInheritanceRe-ordering of keyword-only parameters in__init__()Default factory functionsMutable default valuesDescriptor-typed fieldscontextlib— Utilities forwith-statement contextsUtilitiesExamples and RecipesSupporting a variable number of context managersCatching exceptions from__enter__methodsCleaning up in an__enter__implementationReplacing any use oftry-finallyand flag variablesUsing a context manager as a function decoratorSingle use, reusable and reentrant context managersReentrant context managersReusable context managersabc— Abstract Base Classesatexit— Exit handlersatexitExampletraceback— Print or retrieve a stack tracebackModule-Level FunctionsTracebackExceptionObjectsStackSummaryObjectsFrameSummaryObjectsExamples of Using the Module-Level FunctionsExamples of UsingTracebackException__future__— Future statement definitionsModule Contentsgc— Garbage Collector interfaceinspect— Inspect live objectsTypes and membersRetrieving source codeIntrospecting callables with the Signature objectClasses and functionsThe interpreter stackFetching attributes staticallyCurrent State of Generators, Coroutines, and Asynchronous GeneratorsCode Objects Bit FlagsBuffer flagsCommand Line Interfacesite— Site-specific configuration hooksitecustomizeusercustomizeReadline configurationModule contentsCommand Line InterfaceCustom Python Interpreterscode— Interpreter base classesInteractive Interpreter ObjectsInteractive Console Objectscodeop— Compile Python codeImporting Moduleszipimport— Import modules from Zip archiveszipimporter ObjectsExamplespkgutil— Package extension utilitymodulefinder— Find modules used by a scriptExample usage ofModuleFinderrunpy— Locating and executing Python modulesimportlib— The implementation ofimportIntroductionFunctionsimportlib.abc– Abstract base classes related to importimportlib.machinery– Importers and path hooksimportlib.util– Utility code for importersExamplesImporting programmaticallyChecking if a module can be importedImporting a source file directlyImplementing lazy importsSetting up an importerApproximatingimportlib.import_module()importlib.resources– Package resource reading, opening and accessFunctional APIimportlib.resources.abc– Abstract base classes for resourcesimportlib.metadata– Accessing package metadataOverviewFunctional APIEntry pointsDistribution metadataDistribution versionsDistribution filesDistribution requirementsMapping import to distribution packagesDistributionsDistribution DiscoveryExtending the search algorithmExampleThe initialization of thesys.pathmodule search pathVirtual environments_pth filesEmbedded PythonPython Language Servicesast— Abstract Syntax TreesAbstract GrammarNode classesRoot nodesLiteralsVariablesExpressionsSubscriptingComprehensionsStatementsImportsControl flowPattern matchingType parametersFunction and class definitionsAsync and awaitastHelpersCompiler FlagsCommand-Line Usagesymtable— Access to the compiler’s symbol tablesGenerating Symbol TablesExamining Symbol TablesCommand-Line Usagetoken— Constants used with Python parse treeskeyword— Testing for Python keywordstokenize— Tokenizer for Python sourceTokenizing InputCommand-Line UsageExamplestabnanny— Detection of ambiguous indentationpyclbr— Python module browser supportFunction ObjectsClass Objectspy_compile— Compile Python source filesCommand-Line Interfacecompileall— Byte-compile Python librariesCommand-line usePublic functionsdis— Disassembler for Python bytecodeCommand-line interfaceBytecode analysisAnalysis functionsPython Bytecode InstructionsOpcode collectionspickletools— Tools for pickle developersCommand line usageCommand line optionsProgrammatic InterfaceMS Windows Specific Servicesmsvcrt— Useful routines from the MS VC++ runtimeFile OperationsConsole I/OOther Functionswinreg— Windows registry accessFunctionsConstantsHKEY_* ConstantsAccess Rights64-bit SpecificValue TypesRegistry Handle Objectswinsound— Sound-playing interface for WindowsUnix Specific Servicesposix— The most common POSIX system callsLarge File SupportNotable Module Contentspwd— The password databasegrp— The group databasetermios— POSIX style tty controlExampletty— Terminal control functionspty— Pseudo-terminal utilitiesExamplefcntl— Thefcntlandioctlsystem callsresource— Resource usage informationResource LimitsResource Usagesyslog— Unix syslog library routinesExamplesSimple exampleModules command-line interface (CLI)Superseded Modulesgetopt— C-style parser for command line optionsRemoved ModulesSecurity Considerations
- Extending and Embedding the Python InterpreterRecommended third party toolsCreating extensions without third party tools1. Extending Python with C or C++1.1. A Simple Example1.2. Intermezzo: Errors and Exceptions1.3. Back to the Example1.4. The Module’s Method Table and Initialization Function1.5. Compilation and Linkage1.6. Calling Python Functions from C1.7. Extracting Parameters in Extension Functions1.8. Keyword Parameters for Extension Functions1.9. Building Arbitrary Values1.10. Reference Counts1.10.1. Reference Counting in Python1.10.2. Ownership Rules1.10.3. Thin Ice1.10.4. NULL Pointers1.11. Writing Extensions in C++1.12. Providing a C API for an Extension Module2. Defining Extension Types: Tutorial2.1. The Basics2.2. Adding data and methods to the Basic example2.3. Providing finer control over data attributes2.4. Supporting cyclic garbage collection2.5. Subclassing other types3. Defining Extension Types: Assorted Topics3.1. Finalization and De-allocation3.2. Object Presentation3.3. Attribute Management3.3.1. Generic Attribute Management3.3.2. Type-specific Attribute Management3.4. Object Comparison3.5. Abstract Protocol Support3.6. Weak Reference Support3.7. More Suggestions4. Building C and C++ Extensions4.1. Building C and C++ Extensions with setuptools5. Building C and C++ Extensions on Windows5.1. A Cookbook Approach5.2. Differences Between Unix and Windows5.3. Using DLLs in PracticeEmbedding the CPython runtime in a larger application1. Embedding Python in Another Application1.1. Very High Level Embedding1.2. Beyond Very High Level Embedding: An overview1.3. Pure Embedding1.4. Extending Embedded Python1.5. Embedding Python in C++1.6. Compiling and Linking under Unix-like systems
- Python/C API Reference ManualIntroductionCoding standardsInclude FilesUseful macrosObjects, Types and Reference CountsReference CountsReference Count DetailsTypesExceptionsEmbedding PythonDebugging BuildsC API StabilityUnstable C APIStable Application Binary InterfaceLimited C APIStable ABILimited API Scope and PerformanceLimited API CaveatsPlatform ConsiderationsContents of Limited APIThe Very High Level LayerReference CountingException HandlingPrinting and clearingRaising exceptionsIssuing warningsQuerying the error indicatorSignal HandlingException ClassesException ObjectsUnicode Exception ObjectsRecursion ControlStandard ExceptionsStandard Warning CategoriesUtilitiesOperating System UtilitiesSystem FunctionsProcess ControlImporting ModulesData marshalling supportParsing arguments and building valuesParsing argumentsStrings and buffersNumbersOther objectsAPI FunctionsBuilding valuesString conversion and formattingPyHash APIReflectionCodec registry and support functionsCodec lookup APIRegistry API for Unicode encoding error handlersPyTime C APITypesClock FunctionsRaw Clock FunctionsConversion functionsSupport for Perf MapsAbstract Objects LayerObject ProtocolCall ProtocolThetp_callProtocolThe Vectorcall ProtocolRecursion ControlVectorcall Support APIObject Calling APICall Support APINumber ProtocolSequence ProtocolMapping ProtocolIterator ProtocolBuffer ProtocolBuffer structureBuffer request typesrequest-independent fieldsreadonly, formatshape, strides, suboffsetscontiguity requestscompound requestsComplex arraysNumPy-style: shape and stridesPIL-style: shape, strides and suboffsetsBuffer-related functionsConcrete Objects LayerFundamental ObjectsType ObjectsCreating Heap-Allocated TypesTheNoneObjectNumeric ObjectsInteger ObjectsBoolean ObjectsFloating-Point ObjectsPack and Unpack functionsPack functionsUnpack functionsComplex Number ObjectsComplex Numbers as C StructuresComplex Numbers as Python ObjectsSequence ObjectsBytes ObjectsByte Array ObjectsType check macrosDirect API functionsMacrosUnicode Objects and CodecsUnicode ObjectsUnicode TypeUnicode Character PropertiesCreating and accessing Unicode stringsLocale EncodingFile System Encodingwchar_t SupportBuilt-in CodecsGeneric CodecsUTF-8 CodecsUTF-32 CodecsUTF-16 CodecsUTF-7 CodecsUnicode-Escape CodecsRaw-Unicode-Escape CodecsLatin-1 CodecsASCII CodecsCharacter Map CodecsMBCS codecs for WindowsMethods & SlotsMethods and Slot FunctionsTuple ObjectsStruct Sequence ObjectsList ObjectsContainer ObjectsDictionary ObjectsSet ObjectsFunction ObjectsFunction ObjectsInstance Method ObjectsMethod ObjectsCell ObjectsCode ObjectsExtra informationOther ObjectsFile ObjectsModule ObjectsInitializing C modulesSingle-phase initializationMulti-phase initializationLow-level module creation functionsSupport functionsModule lookupIterator ObjectsDescriptor ObjectsSlice ObjectsEllipsis ObjectMemoryView objectsWeak Reference ObjectsCapsulesFrame ObjectsFrame Locals ProxiesInternal FramesGenerator ObjectsCoroutine ObjectsContext Variables ObjectsDateTime ObjectsObjects for Type HintingInitialization, Finalization, and ThreadsBefore Python InitializationGlobal configuration variablesInitializing and finalizing the interpreterProcess-wide parametersThread State and the Global Interpreter LockReleasing the GIL from extension codeNon-Python created threadsCautions about fork()High-level APILow-level APISub-interpreter supportA Per-Interpreter GILBugs and caveatsAsynchronous NotificationsProfiling and TracingReference tracingAdvanced Debugger SupportThread Local Storage SupportThread Specific Storage (TSS) APIDynamic AllocationMethodsThread Local Storage (TLS) APISynchronization PrimitivesPython Critical Section APIPython Initialization ConfigurationExamplePyWideStringListPyStatusPyPreConfigPreinitialize Python with PyPreConfigPyConfigInitialization with PyConfigIsolated ConfigurationPython ConfigurationPython Path ConfigurationPy_GetArgcArgv()Multi-Phase Initialization Private Provisional APIMemory ManagementOverviewAllocator DomainsRaw Memory InterfaceMemory InterfaceObject allocatorsDefault Memory AllocatorsCustomize Memory AllocatorsDebug hooks on the Python memory allocatorsThe pymalloc allocatorCustomize pymalloc Arena AllocatorThe mimalloc allocatortracemalloc C APIExamplesObject Implementation SupportAllocating Objects on the HeapCommon Object StructuresBase object types and macrosImplementing functions and methodsAccessing attributes of extension typesMember flagsMember typesDefining Getters and SettersType Object StructuresQuick Reference“tp slots”sub-slotsslot typedefsPyTypeObject DefinitionPyObject SlotsPyVarObject SlotsPyTypeObject SlotsStatic TypesHeap TypesNumber Object StructuresMapping Object StructuresSequence Object StructuresBuffer Object StructuresAsync Object StructuresSlot Type typedefsExamplesSupporting Cyclic Garbage CollectionControlling the Garbage Collector StateQuerying Garbage Collector StateAPI and ABI VersioningMonitoring C APIGenerating Execution EventsManaging the Monitoring State
- Installing Python ModulesKey termsBasic usageHow do I …?… installpipin versions of Python prior to Python 3.4?… install packages just for the current user?… install scientific Python packages?… work with multiple versions of Python installed in parallel?Common installation issuesInstalling into the system Python on LinuxPip not installedInstalling binary extensions
- Python HOWTOs
- Python Frequently Asked QuestionsGeneral Python FAQGeneral InformationPython in the real worldProgramming FAQGeneral QuestionsCore LanguageNumbers and stringsPerformanceSequences (Tuples/Lists)ObjectsModulesDesign and History FAQWhy does Python use indentation for grouping of statements?Why am I getting strange results with simple arithmetic operations?Why are floating-point calculations so inaccurate?Why are Python strings immutable?Why must ‘self’ be used explicitly in method definitions and calls?Why can’t I use an assignment in an expression?Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?Why is join() a string method instead of a list or tuple method?How fast are exceptions?Why isn’t there a switch or case statement in Python?Can’t you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?Why can’t lambda expressions contain statements?Can Python be compiled to machine code, C or some other language?How does Python manage memory?Why doesn’t CPython use a more traditional garbage collection scheme?Why isn’t all memory freed when CPython exits?Why are there separate tuple and list data types?How are lists implemented in CPython?How are dictionaries implemented in CPython?Why must dictionary keys be immutable?Why doesn’t list.sort() return the sorted list?How do you specify and enforce an interface spec in Python?Why is there no goto?Why can’t raw strings (r-strings) end with a backslash?Why doesn’t Python have a “with” statement for attribute assignments?Why don’t generators support the with statement?Why are colons required for the if/while/def/class statements?Why does Python allow commas at the end of lists and tuples?Library and Extension FAQGeneral Library QuestionsCommon tasksThreadsInput and OutputNetwork/Internet ProgrammingDatabasesMathematics and NumericsExtending/Embedding FAQCan I create my own functions in C?Can I create my own functions in C++?Writing C is hard; are there any alternatives?How can I execute arbitrary Python statements from C?How can I evaluate an arbitrary Python expression from C?How do I extract C values from a Python object?How do I use Py_BuildValue() to create a tuple of arbitrary length?How do I call an object’s method from C?How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?How do I access a module written in Python from C?How do I interface to C++ objects from Python?I added a module using the Setup file and the make fails; why?How do I debug an extension?I want to compile a Python module on my Linux system, but some files are missing. Why?How do I tell “incomplete input” from “invalid input”?How do I find undefined g++ symbols __builtin_new or __pure_virtual?Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?Python on Windows FAQHow do I run a Python program under Windows?How do I make Python scripts executable?Why does Python sometimes take so long to start?How do I make an executable from a Python script?Is a*.pydfile the same as a DLL?How can I embed Python into a Windows application?How do I keep editors from inserting tabs into my Python source?How do I check for a keypress without blocking?How do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll error?Graphic User Interface FAQGeneral GUI QuestionsWhat GUI toolkits exist for Python?Tkinter questions“Why is Python Installed on my Computer?” FAQWhat is Python?Why is Python installed on my machine?Can I delete Python?
- DeprecationsPending Removal in Python 3.14Pending Removal in Python 3.15Pending removal in Python 3.16Pending Removal in Future VersionsC API DeprecationsPending Removal in Python 3.14Pending Removal in Python 3.15Pending Removal in Future Versions
- About this documentationContributors to the Python documentation
- Dealing with BugsDocumentation bugsUsing the Python issue trackerGetting started contributing to Python yourself
- History and LicenseHistory of the softwareTerms and conditions for accessing or otherwise using PythonPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATIONLicenses and Acknowledgements for Incorporated SoftwareMersenne TwisterSocketsAsynchronous socket servicesCookie managementExecution tracingUUencode and UUdecode functionsXML Remote Procedure Callstest_epollSelect kqueueSipHash24strtod and dtoaOpenSSLexpatlibffizlibcfuhashlibmpdecW3C C14N test suitemimallocasyncioGlobal Unbounded Sequences (GUS)

- What’s New In Python 3.13Summary – Release HighlightsNew FeaturesA better interactive interpreterImproved error messagesFree-threaded CPythonAn experimental just-in-time (JIT) compilerDefined mutation semantics forlocals()Support for mobile platformsOther Language ChangesNew ModulesImproved Modulesargparsearrayastasynciobase64compileallconcurrent.futuresconfigparsercopyctypesdbmdisdoctestemailenumfractionsglobimportlibioipaddressitertoolsmarshalmathmimetypesmmapmultiprocessingosos.pathpathlibpdbqueuerandomreshutilsitesqlite3sslstatisticssubprocesssystempfiletimetkintertracebacktypestypingunicodedatavenvwarningsxmlzipimportOptimizationsRemoved Modules And APIsPEP 594: Remove “dead batteries” from the standard library2to3builtinsconfigparserimportlib.metadatalocaleopcodeoptparsepathlibretkinter.tixturtletypingunittesturllibwebbrowserNew DeprecationsPending Removal in Python 3.14Pending Removal in Python 3.15Pending removal in Python 3.16Pending Removal in Future VersionsCPython Bytecode ChangesC API ChangesNew FeaturesChanged C APIsLimited C API ChangesRemoved C APIsDeprecated C APIsPending Removal in Python 3.14Pending Removal in Python 3.15Pending Removal in Future VersionsBuild ChangesPorting to Python 3.13Changes in the Python APIChanges in the C APIRegression Test ChangesNotable changes in 3.13.1sys
- What’s New In Python 3.12Summary – Release highlightsNew FeaturesPEP 695: Type Parameter SyntaxPEP 701: Syntactic formalization of f-stringsPEP 684: A Per-Interpreter GILPEP 669: Low impact monitoring for CPythonPEP 688: Making the buffer protocol accessible in PythonPEP 709: Comprehension inliningImproved Error MessagesNew Features Related to Type HintsPEP 692: UsingTypedDictfor more precise**kwargstypingPEP 698: Override Decorator for Static TypingOther Language ChangesNew ModulesImproved Modulesarrayasynciocalendarcsvdisfractionsimportlib.resourcesinspectitertoolsmathosos.pathpathlibplatformpdbrandomshutilsqlite3statisticssystempfilethreadingtkintertokenizetypestypingunicodedataunittestuuidOptimizationsCPython bytecode changesDemos and ToolsDeprecatedPending Removal in Python 3.13Pending Removal in Python 3.14Pending Removal in Python 3.15Pending removal in Python 3.16Pending Removal in Future VersionsRemovedasynchat and asyncoreconfigparserdistutilsensurepipenumftplibgziphashlibimportlibimpiolocalesmtpdsqlite3sslunittestwebbrowserxml.etree.ElementTreezipimportOthersPorting to Python 3.12Changes in the Python APIBuild ChangesC API ChangesNew FeaturesPorting to Python 3.12DeprecatedPending Removal in Python 3.14Pending Removal in Python 3.15Pending Removal in Future VersionsRemoved
- What’s New In Python 3.11Summary – Release highlightsNew FeaturesPEP 657: Fine-grained error locations in tracebacksPEP 654: Exception Groups andexcept*PEP 678: Exceptions can be enriched with notesWindowspy.exelauncher improvementsNew Features Related to Type HintsPEP 646: Variadic genericsPEP 655: Marking individualTypedDictitems as required or not-requiredPEP 673:SelftypePEP 675: Arbitrary literal string typePEP 681: Data class transformsPEP 563 may not be the futureOther Language ChangesOther CPython Implementation ChangesNew ModulesImproved ModulesasynciocontextlibdataclassesdatetimeenumfcntlfractionsfunctoolsgziphashlibIDLE and idlelibinspectlocaleloggingmathoperatorospathlibreshutilsocketsqlite3stringsyssysconfigtempfilethreadingtimetkintertracebacktypingunicodedataunittestvenvwarningszipfileOptimizationsFaster CPythonFaster StartupFrozen imports / Static code objectsFaster RuntimeCheaper, lazy Python framesInlined Python function callsPEP 659: Specializing Adaptive InterpreterMiscFAQHow should I write my code to utilize these speedups?Will CPython 3.11 use more memory?I don’t see any speedups in my workload. Why?Is there a JIT compiler?AboutCPython bytecode changesNew opcodesReplaced opcodesChanged/removed opcodesDeprecatedLanguage/BuiltinsModulesStandard LibraryPending Removal in Python 3.12RemovedPorting to Python 3.11Build ChangesC API ChangesNew FeaturesPorting to Python 3.11DeprecatedPending Removal in Python 3.12RemovedNotable changes in 3.11.4tarfileNotable changes in 3.11.5OpenSSL
- What’s New In Python 3.10Summary – Release highlightsNew FeaturesParenthesized context managersBetter error messagesSyntaxErrorsIndentationErrorsAttributeErrorsNameErrorsPEP 626: Precise line numbers for debugging and other toolsPEP 634: Structural Pattern MatchingSyntax and operationsDeclarative approachSimple pattern: match to a literalBehavior without the wildcardPatterns with a literal and variablePatterns and classesPatterns with positional parametersNested patternsComplex patterns and the wildcardGuardOther Key FeaturesOptionalEncodingWarningandencoding="locale"optionNew Features Related to Type HintsPEP 604: New Type Union OperatorPEP 612: Parameter Specification VariablesPEP 613: TypeAliasPEP 647: User-Defined Type GuardsOther Language ChangesNew ModulesImproved Modulesasyncioargparsearrayasynchat, asyncore, smtpdbase64bdbbisectcodecscollections.abccontextlibcursesdataclasses__slots__Keyword-only fieldsdistutilsdoctestencodingsenumfileinputfaulthandlergcglobhashlibhmacIDLE and idlelibimportlib.metadatainspectitertoolslinecacheosos.pathpathlibplatformpprintpy_compilepyclbrshelvestatisticssitesocketsslsqlite3sys_threadthreadingtracebacktypestypingunittesturllib.parsexmlzipimportOptimizationsDeprecatedRemovedPorting to Python 3.10Changes in the Python syntaxChanges in the Python APIChanges in the C APICPython bytecode changesBuild ChangesC API ChangesPEP 652: Maintaining the Stable ABINew FeaturesPorting to Python 3.10DeprecatedRemovedNotable security feature in 3.10.7Notable security feature in 3.10.8Notable changes in 3.10.12tarfile
- What’s New In Python 3.9Summary – Release highlightsYou should check for DeprecationWarning in your codeNew FeaturesDictionary Merge & Update OperatorsNew String Methods to Remove Prefixes and SuffixesType Hinting Generics in Standard CollectionsNew ParserOther Language ChangesNew ModuleszoneinfographlibImproved Modulesastasynciocompileallconcurrent.futurescursesdatetimedistutilsfcntlftplibgchashlibhttpIDLE and idlelibimaplibimportlibinspectipaddressmathmultiprocessingnntplibospathlibpdbpoplibpprintpydocrandomsignalsmtplibsockettimesystracemalloctypingunicodedatavenvxmlOptimizationsDeprecatedRemovedPorting to Python 3.9Changes in the Python APIChanges in the C APICPython bytecode changesBuild ChangesC API ChangesNew FeaturesPorting to Python 3.9RemovedNotable changes in Python 3.9.1typingmacOS 11.0 (Big Sur) and Apple Silicon Mac supportNotable changes in Python 3.9.2collections.abcurllib.parseNotable changes in Python 3.9.3Notable changes in Python 3.9.5urllib.parseNotable security feature in 3.9.14Notable changes in 3.9.17tarfile
- What’s New In Python 3.8Summary – Release highlightsNew FeaturesAssignment expressionsPositional-only parametersParallel filesystem cache for compiled bytecode filesDebug build uses the same ABI as release buildf-strings support=for self-documenting expressions and debuggingPEP 578: Python Runtime Audit HooksPEP 587: Python Initialization ConfigurationPEP 590: Vectorcall: a fast calling protocol for CPythonPickle protocol 5 with out-of-band data buffersOther Language ChangesNew ModulesImproved ModulesastasynciobuiltinscollectionscProfilecsvcursesctypesdatetimefunctoolsgcgettextgzipIDLE and idlelibinspectioitertoolsjson.toolloggingmathmmapmultiprocessingosos.pathpathlibpickleplistlibpprintpy_compileshlexshutilsocketsslstatisticssystarfilethreadingtokenizetkintertimetypingunicodedataunittestvenvweakrefxmlxmlrpcOptimizationsBuild and C API ChangesDeprecatedAPI and Feature RemovalsPorting to Python 3.8Changes in Python behaviorChanges in the Python APIChanges in the C APICPython bytecode changesDemos and ToolsNotable changes in Python 3.8.1Notable changes in Python 3.8.2Notable changes in Python 3.8.3Notable changes in Python 3.8.8Notable changes in Python 3.8.9Notable changes in Python 3.8.10macOS 11.0 (Big Sur) and Apple Silicon Mac supportNotable changes in Python 3.8.10urllib.parseNotable changes in Python 3.8.12Changes in the Python APINotable security feature in 3.8.14Notable changes in 3.8.17tarfile
- What’s New In Python 3.7Summary – Release HighlightsNew FeaturesPEP 563: Postponed Evaluation of AnnotationsPEP 538: Legacy C Locale CoercionPEP 540: Forced UTF-8 Runtime ModePEP 553: Built-inbreakpoint()PEP 539: New C API for Thread-Local StoragePEP 562: Customization of Access to Module AttributesPEP 564: New Time Functions With Nanosecond ResolutionPEP 565: Show DeprecationWarning in__main__PEP 560: Core Support fortypingmodule and Generic TypesPEP 552: Hash-based .pyc FilesPEP 545: Python Documentation TranslationsPython Development Mode (-X dev)Other Language ChangesNew Modulescontextvarsdataclassesimportlib.resourcesImproved Modulesargparseasynciobinasciicalendarcollectionscompileallconcurrent.futurescontextlibcProfilecryptdatetimedbmdecimaldisdistutilsenumfunctoolsgchmachttp.clienthttp.serveridlelib and IDLEimportlibioipaddressitertoolslocaleloggingmathmimetypesmsilibmultiprocessingospathlibpdbpy_compilepydocqueueresignalsocketsocketserversqlite3sslstringsubprocesssystimetkintertracemalloctypesunicodedataunittestunittest.mockurllib.parseuuuuidwarningsxmlxml.etreexmlrpc.serverzipappzipfileC API ChangesBuild ChangesOptimizationsOther CPython Implementation ChangesDeprecated Python BehaviorDeprecated Python modules, functions and methodsaifcasynciocollectionsdbmenumgettextimportliblocalemacpaththreadingsocketsslsunausyswaveDeprecated functions and types of the C APIPlatform Support RemovalsAPI and Feature RemovalsModule RemovalsWindows-only ChangesPorting to Python 3.7Changes in Python BehaviorChanges in the Python APIChanges in the C APICPython bytecode changesWindows-only ChangesOther CPython implementation changesNotable changes in Python 3.7.1Notable changes in Python 3.7.2Notable changes in Python 3.7.6Notable changes in Python 3.7.10Notable changes in Python 3.7.11Notable security feature in 3.7.14
- What’s New In Python 3.6Summary – Release highlightsNew FeaturesPEP 498: Formatted string literalsPEP 526: Syntax for variable annotationsPEP 515: Underscores in Numeric LiteralsPEP 525: Asynchronous GeneratorsPEP 530: Asynchronous ComprehensionsPEP 487: Simpler customization of class creationPEP 487: Descriptor Protocol EnhancementsPEP 519: Adding a file system path protocolPEP 495: Local Time DisambiguationPEP 529: Change Windows filesystem encoding to UTF-8PEP 528: Change Windows console encoding to UTF-8PEP 520: Preserving Class Attribute Definition OrderPEP 468: Preserving Keyword Argument OrderNewdictimplementationPEP 523: Adding a frame evaluation API to CPythonPYTHONMALLOC environment variableDTrace and SystemTap probing supportOther Language ChangesNew ModulessecretsImproved Modulesarrayastasynciobinasciicmathcollectionsconcurrent.futurescontextlibdatetimedecimaldistutilsemailencodingsenumfaulthandlerfileinputhashlibhttp.clientidlelib and IDLEimportlibinspectjsonloggingmathmultiprocessingospathlibpdbpicklepickletoolspydocrandomrereadlinerlcompletershlexsitesqlite3socketsocketserversslstatisticsstructsubprocesssystelnetlibtimetimeittkintertracebacktracemalloctypingunicodedataunittest.mockurllib.requesturllib.robotparservenvwarningswinregwinsoundxmlrpc.clientzipfilezlibOptimizationsBuild and C API ChangesOther ImprovementsDeprecatedNew KeywordsDeprecated Python behaviorDeprecated Python modules, functions and methodsasynchatasyncoredbmdistutilsgrpimportlibosressltkintervenvxmlDeprecated functions and types of the C APIDeprecated Build OptionsRemovedAPI and Feature RemovalsPorting to Python 3.6Changes in ‘python’ Command BehaviorChanges in the Python APIChanges in the C APICPython bytecode changesNotable changes in Python 3.6.2Newmakeregen-allbuild targetRemoval ofmaketouchbuild targetNotable changes in Python 3.6.4Notable changes in Python 3.6.5Notable changes in Python 3.6.7Notable changes in Python 3.6.10Notable changes in Python 3.6.13Notable changes in Python 3.6.14
- What’s New In Python 3.5Summary – Release highlightsNew FeaturesPEP 492 - Coroutines with async and await syntaxPEP 465 - A dedicated infix operator for matrix multiplicationPEP 448 - Additional Unpacking GeneralizationsPEP 461 - percent formatting support for bytes and bytearrayPEP 484 - Type HintsPEP 471 - os.scandir() function – a better and faster directory iteratorPEP 475: Retry system calls failing with EINTRPEP 479: Change StopIteration handling inside generatorsPEP 485: A function for testing approximate equalityPEP 486: Make the Python Launcher aware of virtual environmentsPEP 488: Elimination of PYO filesPEP 489: Multi-phase extension module initializationOther Language ChangesNew ModulestypingzipappImproved Modulesargparseasynciobz2cgicmathcodecollectionscollections.abccompileallconcurrent.futuresconfigparsercontextlibcsvcursesdbmdifflibdistutilsdoctestemailenumfaulthandlerfunctoolsglobgzipheapqhttphttp.clientidlelib and IDLEimaplibimghdrimportlibinspectioipaddressjsonlinecachelocalelogginglzmamathmultiprocessingoperatorospathlibpicklepoplibrereadlineselectorsshutilsignalsmtpdsmtplibsndhdrsocketsslMemory BIO SupportApplication-Layer Protocol Negotiation SupportOther Changessqlite3subprocesssyssysconfigtarfilethreadingtimetimeittkintertracebacktypesunicodedataunittestunittest.mockurllibwsgirefxmlrpcxml.saxzipfileOther module-level changesOptimizationsBuild and C API ChangesDeprecatedNew KeywordsDeprecated Python BehaviorUnsupported Operating SystemsDeprecated Python modules, functions and methodsRemovedAPI and Feature RemovalsPorting to Python 3.5Changes in Python behaviorChanges in the Python APIChanges in the C APINotable changes in Python 3.5.4Newmakeregen-allbuild targetRemoval ofmaketouchbuild target
- What’s New In Python 3.4Summary – Release HighlightsNew FeaturesPEP 453: Explicit Bootstrapping of PIP in Python InstallationsBootstrapping pip By DefaultDocumentation ChangesPEP 446: Newly Created File Descriptors Are Non-InheritableImprovements to Codec HandlingPEP 451: A ModuleSpec Type for the Import SystemOther Language ChangesNew ModulesasyncioensurepipenumpathlibselectorsstatisticstracemallocImproved Modulesabcaifcargparseaudioopbase64collectionscolorsyscontextlibdbmdisdoctestemailfilecmpfunctoolsgcglobhashlibhmachtmlhttpidlelib and IDLEimportlibinspectipaddressloggingmarshalmmapmultiprocessingoperatorospdbpickleplistlibpoplibpprintptypydocreresourceselectshelveshutilsmtpdsmtplibsocketsqlite3sslstatstructsubprocesssunausystarfiletextwrapthreadingtracebacktypesurllibunittestvenvwaveweakrefxml.etreezipfileCPython Implementation ChangesPEP 445: Customization of CPython Memory AllocatorsPEP 442: Safe Object FinalizationPEP 456: Secure and Interchangeable Hash AlgorithmPEP 436: Argument ClinicOther Build and C API ChangesOther ImprovementsSignificant OptimizationsDeprecatedDeprecations in the Python APIDeprecated FeaturesRemovedOperating Systems No Longer SupportedAPI and Feature RemovalsCode CleanupsPorting to Python 3.4Changes in ‘python’ Command BehaviorChanges in the Python APIChanges in the C APIChanged in 3.4.3PEP 476: Enabling certificate verification by default for stdlib http clients
- What’s New In Python 3.3Summary – Release highlightsPEP 405: Virtual EnvironmentsPEP 420: Implicit Namespace PackagesPEP 3118: New memoryview implementation and buffer protocol documentationFeaturesAPI changesPEP 393: Flexible String RepresentationFunctionalityPerformance and resource usagePEP 397: Python Launcher for WindowsPEP 3151: Reworking the OS and IO exception hierarchyPEP 380: Syntax for Delegating to a SubgeneratorPEP 409: Suppressing exception contextPEP 414: Explicit Unicode literalsPEP 3155: Qualified name for classes and functionsPEP 412: Key-Sharing DictionaryPEP 362: Function Signature ObjectPEP 421: Adding sys.implementationSimpleNamespaceUsing importlib as the Implementation of ImportNew APIsVisible ChangesOther Language ChangesA Finer-Grained Import LockBuiltin functions and typesNew ModulesfaulthandleripaddresslzmaImproved Modulesabcarraybase64binasciibz2codecscollectionscontextlibcryptcursesdatetimedecimalFeaturesAPI changesemailPolicy FrameworkProvisional Policy with New Header APIOther API Changesftplibfunctoolsgchmachttphtmlimaplibinspectioitertoolsloggingmathmmapmultiprocessingnntplibospdbpicklepydocreschedselectshlexshutilsignalsmtpdsmtplibsocketsocketserversqlite3sslstatstructsubprocesssystarfiletempfiletextwrapthreadingtimetypesunittesturllibwebbrowserxml.etree.ElementTreezlibOptimizationsBuild and C API ChangesDeprecatedUnsupported Operating SystemsDeprecated Python modules, functions and methodsDeprecated functions and types of the C APIDeprecated featuresPorting to Python 3.3Porting Python codePorting C codeBuilding C extensionsCommand Line Switch Changes
- What’s New In Python 3.2PEP 384: Defining a Stable ABIPEP 389: Argparse Command Line Parsing ModulePEP 391:  Dictionary Based Configuration for LoggingPEP 3148:  Theconcurrent.futuresmodulePEP 3147:  PYC Repository DirectoriesPEP 3149: ABI Version Tagged .so FilesPEP 3333: Python Web Server Gateway Interface v1.0.1Other Language ChangesNew, Improved, and Deprecated Modulesemailelementtreefunctoolsitertoolscollectionsthreadingdatetime and timemathabcioreprlibloggingcsvcontextlibdecimal and fractionsftppopenselectgzip and zipfiletarfilehashlibastosshutilsqlite3htmlsocketsslnntpcertificatesimaplibhttp.clientunittestrandompoplibasyncoretempfileinspectpydocdisdbmctypessitesysconfigpdbconfigparserurllib.parsemailboxturtledemoMulti-threadingOptimizationsUnicodeCodecsDocumentationIDLECode RepositoryBuild and C API ChangesPorting to Python 3.2
- What’s New In Python 3.1PEP 372: Ordered DictionariesPEP 378: Format Specifier for Thousands SeparatorOther Language ChangesNew, Improved, and Deprecated ModulesOptimizationsIDLEBuild and C API ChangesPorting to Python 3.1
- What’s New In Python 3.0Common Stumbling BlocksPrint Is A FunctionViews And Iterators Instead Of ListsOrdering ComparisonsIntegersText Vs. Data Instead Of Unicode Vs. 8-bitOverview Of Syntax ChangesNew SyntaxChanged SyntaxRemoved SyntaxChanges Already Present In Python 2.6Library ChangesPEP 3101: A New Approach To String FormattingChanges To ExceptionsMiscellaneous Other ChangesOperators And Special MethodsBuiltinsBuild and C API ChangesPerformancePorting To Python 3.0
- What’s New in Python 2.7The Future for Python 2.xChanges to the Handling of Deprecation WarningsPython 3.1 FeaturesPEP 372: Adding an Ordered Dictionary to collectionsPEP 378: Format Specifier for Thousands SeparatorPEP 389: The argparse Module for Parsing Command LinesPEP 391: Dictionary-Based Configuration For LoggingPEP 3106: Dictionary ViewsPEP 3137: The memoryview ObjectOther Language ChangesInterpreter ChangesOptimizationsNew and Improved ModulesNew module: importlibNew module: sysconfigttk: Themed Widgets for TkUpdated module: unittestUpdated module: ElementTree 1.3Build and C API ChangesCapsulesPort-Specific Changes: WindowsPort-Specific Changes: Mac OS XPort-Specific Changes: FreeBSDOther Changes and FixesPorting to Python 2.7New Features Added to Python 2.7 Maintenance ReleasesTwo new environment variables for debug modePEP 434: IDLE Enhancement Exception for All BranchesPEP 466: Network Security Enhancements for Python 2.7PEP 477: Backport ensurepip (PEP 453) to Python 2.7Bootstrapping pip By DefaultDocumentation ChangesPEP 476: Enabling certificate verification by default for stdlib http clientsPEP 493: HTTPS verification migration tools for Python 2.7Newmakeregen-allbuild targetRemoval ofmaketouchbuild targetAcknowledgements
- What’s New in Python 2.6Python 3.0Changes to the Development ProcessNew Issue Tracker: RoundupNew Documentation Format: reStructuredText Using SphinxPEP 343: The ‘with’ statementWriting Context ManagersThe contextlib modulePEP 366: Explicit Relative Imports From a Main ModulePEP 370: Per-usersite-packagesDirectoryPEP 371: ThemultiprocessingPackagePEP 3101: Advanced String FormattingPEP 3105:printAs a FunctionPEP 3110: Exception-Handling ChangesPEP 3112: Byte LiteralsPEP 3116: New I/O LibraryPEP 3118: Revised Buffer ProtocolPEP 3119: Abstract Base ClassesPEP 3127: Integer Literal Support and SyntaxPEP 3129: Class DecoratorsPEP 3141: A Type Hierarchy for NumbersThefractionsModuleOther Language ChangesOptimizationsInterpreter ChangesNew and Improved ModulesTheastmoduleThefuture_builtinsmoduleThejsonmodule: JavaScript Object NotationTheplistlibmodule: A Property-List Parserctypes EnhancementsImproved SSL SupportDeprecations and RemovalsBuild and C API ChangesPort-Specific Changes: WindowsPort-Specific Changes: Mac OS XPort-Specific Changes: IRIXPorting to Python 2.6Acknowledgements
- What’s New in Python 2.5PEP 308: Conditional ExpressionsPEP 309: Partial Function ApplicationPEP 314: Metadata for Python Software Packages v1.1PEP 328: Absolute and Relative ImportsPEP 338: Executing Modules as ScriptsPEP 341: Unified try/except/finallyPEP 342: New Generator FeaturesPEP 343: The ‘with’ statementWriting Context ManagersThe contextlib modulePEP 352: Exceptions as New-Style ClassesPEP 353: Using ssize_t as the index typePEP 357: The ‘__index__’ methodOther Language ChangesInteractive Interpreter ChangesOptimizationsNew, Improved, and Removed ModulesThe ctypes packageThe ElementTree packageThe hashlib packageThe sqlite3 packageThe wsgiref packageBuild and C API ChangesPort-Specific ChangesPorting to Python 2.5Acknowledgements
- What’s New in Python 2.4PEP 218: Built-In Set ObjectsPEP 237: Unifying Long Integers and IntegersPEP 289: Generator ExpressionsPEP 292: Simpler String SubstitutionsPEP 318: Decorators for Functions and MethodsPEP 322: Reverse IterationPEP 324: New subprocess ModulePEP 327: Decimal Data TypeWhy is Decimal needed?TheDecimaltypeTheContexttypePEP 328: Multi-line ImportsPEP 331: Locale-Independent Float/String ConversionsOther Language ChangesOptimizationsNew, Improved, and Deprecated ModulescookielibdoctestBuild and C API ChangesPort-Specific ChangesPorting to Python 2.4Acknowledgements
- What’s New in Python 2.3PEP 218: A Standard Set DatatypePEP 255: Simple GeneratorsPEP 263: Source Code EncodingsPEP 273: Importing Modules from ZIP ArchivesPEP 277: Unicode file name support for Windows NTPEP 278: Universal Newline SupportPEP 279: enumerate()PEP 282: The logging PackagePEP 285: A Boolean TypePEP 293: Codec Error Handling CallbacksPEP 301: Package Index and Metadata for DistutilsPEP 302: New Import HooksPEP 305: Comma-separated FilesPEP 307: Pickle EnhancementsExtended SlicesOther Language ChangesString ChangesOptimizationsNew, Improved, and Deprecated ModulesDate/Time TypeThe optparse ModulePymalloc: A Specialized Object AllocatorBuild and C API ChangesPort-Specific ChangesOther Changes and FixesPorting to Python 2.3Acknowledgements
- What’s New in Python 2.2IntroductionPEPs 252 and 253: Type and Class ChangesOld and New ClassesDescriptorsMultiple Inheritance: The Diamond RuleAttribute AccessRelated LinksPEP 234: IteratorsPEP 255: Simple GeneratorsPEP 237: Unifying Long Integers and IntegersPEP 238: Changing the Division OperatorUnicode ChangesPEP 227: Nested ScopesNew and Improved ModulesInterpreter Changes and FixesOther Changes and FixesAcknowledgements
- What’s New in Python 2.1IntroductionPEP 227: Nested ScopesPEP 236: __future__ DirectivesPEP 207: Rich ComparisonsPEP 230: Warning FrameworkPEP 229: New Build SystemPEP 205: Weak ReferencesPEP 232: Function AttributesPEP 235: Importing Modules on Case-Insensitive PlatformsPEP 217: Interactive Display HookPEP 208: New Coercion ModelPEP 241: Metadata in Python PackagesNew and Improved ModulesOther Changes and FixesAcknowledgements
- What’s New in Python 2.0IntroductionWhat About Python 1.6?New Development ProcessUnicodeList ComprehensionsAugmented AssignmentString MethodsGarbage Collection of CyclesOther Core ChangesMinor Language ChangesChanges to Built-in FunctionsPorting to 2.0Extending/Embedding ChangesDistutils: Making Modules Easy to InstallXML ModulesSAX2 SupportDOM SupportRelationship to PyXMLModule changesNew modulesIDLE ImprovementsDeleted and Deprecated ModulesAcknowledgements
- ChangelogPython nextTestsLibraryCore and BuiltinsBuildPython 3.13.3 finalmacOSWindowsTools/DemosTestsSecurityLibraryIDLEDocumentationCore and BuiltinsC APIBuildPython 3.13.2 finalmacOSWindowsTools/DemosTestsSecurityLibraryDocumentationCore and BuiltinsC APIBuildPython 3.13.1 finalmacOSWindowsTools/DemosTestsSecurityLibraryIDLEDocumentationCore and BuiltinsC APIBuildPython 3.13.0 finalCore and BuiltinsPython 3.13.0 release candidate 3macOSWindowsTestsLibraryIDLEDocumentationCore and BuiltinsC APIBuildPython 3.13.0 release candidate 2macOSWindowsTools/DemosTestsSecurityLibraryIDLECore and BuiltinsC APIBuildPython 3.13.0 release candidate 1TestsSecurityLibraryIDLECore and BuiltinsC APIBuildPython 3.13.0 beta 4TestsLibraryIDLEDocumentationCore and BuiltinsC APIBuildPython 3.13.0 beta 3Core and BuiltinsLibraryBuildC APIPython 3.13.0 beta 2SecurityCore and BuiltinsLibraryTestsBuildWindowsC APIPython 3.13.0 beta 1SecurityCore and BuiltinsLibraryDocumentationBuildWindowsmacOSIDLEC APIPython 3.13.0 alpha 6Core and BuiltinsLibraryDocumentationTestsBuildWindowsC APIPython 3.13.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.13.0 alpha 4SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.13.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.13.0 alpha 2Core and BuiltinsLibraryTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.13.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.12.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.12.0 alpha 7Core and BuiltinsLibraryDocumentationTestsBuildWindowsTools/DemosC APIPython 3.12.0 alpha 6SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC APIPython 3.12.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsPython 3.12.0 alpha 4Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC APIPython 3.12.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC APIPython 3.12.0 alpha 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC APIPython 3.12.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.11.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC APIPython 3.11.0 alpha 7Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC APIPython 3.11.0 alpha 6Core and BuiltinsLibraryDocumentationTestsBuildWindowsIDLEC APIPython 3.11.0 alpha 5Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.11.0 alpha 4Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC APIPython 3.11.0 alpha 3Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC APIPython 3.11.0 alpha 2Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.11.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.10.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.10.0 alpha 7SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLEC APIPython 3.10.0 alpha 6SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.10.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.10.0 alpha 4Core and BuiltinsLibraryDocumentationTestsBuildmacOSTools/DemosC APIPython 3.10.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.10.0 alpha 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.10.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.9.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC APIPython 3.9.0 alpha 6SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.9.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.9.0 alpha 4SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLEC APIPython 3.9.0 alpha 3Core and BuiltinsLibraryDocumentationBuildIDLEC APIPython 3.9.0 alpha 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC APIPython 3.9.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.8.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.8.0 alpha 4SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.8.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLETools/DemosC APIPython 3.8.0 alpha 2Core and BuiltinsLibraryDocumentationTestsWindowsIDLEPython 3.8.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.7.0 finalLibraryC APIPython 3.7.0 release candidate 1Core and BuiltinsLibraryDocumentationBuildWindowsIDLEPython 3.7.0 beta 5Core and BuiltinsLibraryDocumentationTestsBuildmacOSIDLEPython 3.7.0 beta 4Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosPython 3.7.0 beta 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.7.0 beta 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosPython 3.7.0 beta 1Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC APIPython 3.7.0 alpha 4Core and BuiltinsLibraryDocumentationTestsWindowsTools/DemosC APIPython 3.7.0 alpha 3Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.7.0 alpha 2Core and BuiltinsLibraryDocumentationBuildIDLEC APIPython 3.7.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLETools/DemosC APIPython 3.6.6 finalPython 3.6.6 release candidate 1Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.6.5 finalTestsBuildPython 3.6.5 release candidate 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.6.4 finalPython 3.6.4 release candidate 1Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC APIPython 3.6.3 finalLibraryBuildPython 3.6.3 release candidate 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLETools/DemosPython 3.6.2 finalPython 3.6.2 release candidate 2SecurityPython 3.6.2 release candidate 1SecurityCore and BuiltinsLibraryIDLEC APIBuildDocumentationTools/DemosTestsWindowsPython 3.6.1 finalCore and BuiltinsBuildPython 3.6.1 release candidate 1Core and BuiltinsLibraryIDLEWindowsC APIDocumentationTestsBuildPython 3.6.0 finalPython 3.6.0 release candidate 2Core and BuiltinsTools/DemosWindowsBuildPython 3.6.0 release candidate 1Core and BuiltinsLibraryC APIDocumentationTools/DemosPython 3.6.0 beta 4Core and BuiltinsLibraryDocumentationTestsBuildPython 3.6.0 beta 3Core and BuiltinsLibraryWindowsBuildTestsPython 3.6.0 beta 2Core and BuiltinsLibraryWindowsC APIBuildTestsPython 3.6.0 beta 1Core and BuiltinsLibraryIDLEC APITestsBuildTools/DemosWindowsPython 3.6.0 alpha 4Core and BuiltinsLibraryIDLETestsWindowsBuildPython 3.6.0 alpha 3SecurityCore and BuiltinsLibraryIDLEC APIBuildTools/DemosDocumentationTestsPython 3.6.0 alpha 2SecurityCore and BuiltinsLibraryIDLEDocumentationTestsWindowsBuildC APITools/DemosPython 3.6.0 alpha 1SecurityCore and BuiltinsLibraryIDLEDocumentationTestsBuildWindowsTools/DemosC APIPython 3.5.5 finalPython 3.5.5 release candidate 1SecurityCore and BuiltinsLibraryPython 3.5.4 finalLibraryPython 3.5.4 release candidate 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsC APIPython 3.5.3 finalPython 3.5.3 release candidate 1SecurityCore and BuiltinsLibraryIDLEC APIDocumentationTestsTools/DemosWindowsBuildPython 3.5.2 finalCore and BuiltinsTestsIDLEPython 3.5.2 release candidate 1SecurityCore and BuiltinsLibraryIDLEDocumentationTestsBuildWindowsTools/DemosPython 3.5.1 finalCore and BuiltinsWindowsPython 3.5.1 release candidate 1Core and BuiltinsLibraryIDLEDocumentationTestsBuildWindowsTools/DemosPython 3.5.0 finalBuildPython 3.5.0 release candidate 4LibraryBuildPython 3.5.0 release candidate 3Core and BuiltinsLibraryPython 3.5.0 release candidate 2Core and BuiltinsLibraryPython 3.5.0 release candidate 1Core and BuiltinsLibraryIDLEDocumentationTestsPython 3.5.0 beta 4Core and BuiltinsLibraryBuildPython 3.5.0 beta 3Core and BuiltinsLibraryTestsDocumentationBuildPython 3.5.0 beta 2Core and BuiltinsLibraryPython 3.5.0 beta 1Core and BuiltinsLibraryIDLETestsDocumentationTools/DemosPython 3.5.0 alpha 4Core and BuiltinsLibraryBuildTestsTools/DemosC APIPython 3.5.0 alpha 3Core and BuiltinsLibraryBuildTestsTools/DemosPython 3.5.0 alpha 2Core and BuiltinsLibraryBuildC APIWindowsPython 3.5.0 alpha 1Core and BuiltinsLibraryIDLEBuildC APIDocumentationTestsTools/DemosWindows

- Summary – Release Highlights
- New FeaturesA better interactive interpreterImproved error messagesFree-threaded CPythonAn experimental just-in-time (JIT) compilerDefined mutation semantics forlocals()Support for mobile platforms
- Other Language Changes
- New Modules
- Improved Modulesargparsearrayastasynciobase64compileallconcurrent.futuresconfigparsercopyctypesdbmdisdoctestemailenumfractionsglobimportlibioipaddressitertoolsmarshalmathmimetypesmmapmultiprocessingosos.pathpathlibpdbqueuerandomreshutilsitesqlite3sslstatisticssubprocesssystempfiletimetkintertracebacktypestypingunicodedatavenvwarningsxmlzipimport
- Optimizations
- Removed Modules And APIsPEP 594: Remove “dead batteries” from the standard library2to3builtinsconfigparserimportlib.metadatalocaleopcodeoptparsepathlibretkinter.tixturtletypingunittesturllibwebbrowser
- New DeprecationsPending Removal in Python 3.14Pending Removal in Python 3.15Pending removal in Python 3.16Pending Removal in Future Versions
- CPython Bytecode Changes
- C API ChangesNew FeaturesChanged C APIsLimited C API ChangesRemoved C APIsDeprecated C APIsPending Removal in Python 3.14Pending Removal in Python 3.15Pending Removal in Future Versions
- Build Changes
- Porting to Python 3.13Changes in the Python APIChanges in the C API
- Regression Test Changes
- Notable changes in 3.13.1sys

- A better interactive interpreter
- Improved error messages
- Free-threaded CPython
- An experimental just-in-time (JIT) compiler
- Defined mutation semantics forlocals()
- Support for mobile platforms

- concurrent.futures
- configparser
- multiprocessing
- unicodedata

- PEP 594: Remove “dead batteries” from the standard library
- importlib.metadata
- tkinter.tix

- Pending Removal in Python 3.14
- Pending Removal in Python 3.15
- Pending removal in Python 3.16
- Pending Removal in Future Versions

- New Features
- Changed C APIs
- Limited C API Changes
- Removed C APIs
- Deprecated C APIsPending Removal in Python 3.14Pending Removal in Python 3.15Pending Removal in Future Versions

- Changes in the Python API
- Changes in the C API

- Summary – Release highlights
- New FeaturesPEP 695: Type Parameter SyntaxPEP 701: Syntactic formalization of f-stringsPEP 684: A Per-Interpreter GILPEP 669: Low impact monitoring for CPythonPEP 688: Making the buffer protocol accessible in PythonPEP 709: Comprehension inliningImproved Error Messages
- New Features Related to Type HintsPEP 692: UsingTypedDictfor more precise**kwargstypingPEP 698: Override Decorator for Static Typing
- Improved Modulesarrayasynciocalendarcsvdisfractionsimportlib.resourcesinspectitertoolsmathosos.pathpathlibplatformpdbrandomshutilsqlite3statisticssystempfilethreadingtkintertokenizetypestypingunicodedataunittestuuid
- CPython bytecode changes
- Demos and Tools
- DeprecatedPending Removal in Python 3.13Pending Removal in Python 3.14Pending Removal in Python 3.15Pending removal in Python 3.16Pending Removal in Future Versions
- Removedasynchat and asyncoreconfigparserdistutilsensurepipenumftplibgziphashlibimportlibimpiolocalesmtpdsqlite3sslunittestwebbrowserxml.etree.ElementTreezipimportOthers
- Porting to Python 3.12Changes in the Python API
- C API ChangesNew FeaturesPorting to Python 3.12DeprecatedPending Removal in Python 3.14Pending Removal in Python 3.15Pending Removal in Future VersionsRemoved

- PEP 695: Type Parameter Syntax
- PEP 701: Syntactic formalization of f-strings
- PEP 684: A Per-Interpreter GIL
- PEP 669: Low impact monitoring for CPython
- PEP 688: Making the buffer protocol accessible in Python
- PEP 709: Comprehension inlining
- Improved Error Messages

- PEP 692: UsingTypedDictfor more precise**kwargstyping
- PEP 698: Override Decorator for Static Typing

- importlib.resources

- Pending Removal in Python 3.13

- asynchat and asyncore
- xml.etree.ElementTree

- Porting to Python 3.12
- DeprecatedPending Removal in Python 3.14Pending Removal in Python 3.15Pending Removal in Future Versions

- New FeaturesPEP 657: Fine-grained error locations in tracebacksPEP 654: Exception Groups andexcept*PEP 678: Exceptions can be enriched with notesWindowspy.exelauncher improvements
- New Features Related to Type HintsPEP 646: Variadic genericsPEP 655: Marking individualTypedDictitems as required or not-requiredPEP 673:SelftypePEP 675: Arbitrary literal string typePEP 681: Data class transformsPEP 563 may not be the future
- Other CPython Implementation Changes
- Improved ModulesasynciocontextlibdataclassesdatetimeenumfcntlfractionsfunctoolsgziphashlibIDLE and idlelibinspectlocaleloggingmathoperatorospathlibreshutilsocketsqlite3stringsyssysconfigtempfilethreadingtimetkintertracebacktypingunicodedataunittestvenvwarningszipfile
- Faster CPythonFaster StartupFrozen imports / Static code objectsFaster RuntimeCheaper, lazy Python framesInlined Python function callsPEP 659: Specializing Adaptive InterpreterMiscFAQHow should I write my code to utilize these speedups?Will CPython 3.11 use more memory?I don’t see any speedups in my workload. Why?Is there a JIT compiler?About
- CPython bytecode changesNew opcodesReplaced opcodesChanged/removed opcodes
- DeprecatedLanguage/BuiltinsModulesStandard Library
- Pending Removal in Python 3.12
- Porting to Python 3.11
- C API ChangesNew FeaturesPorting to Python 3.11DeprecatedPending Removal in Python 3.12Removed
- Notable changes in 3.11.4tarfile
- Notable changes in 3.11.5OpenSSL

- PEP 657: Fine-grained error locations in tracebacks
- PEP 654: Exception Groups andexcept*
- PEP 678: Exceptions can be enriched with notes
- Windowspy.exelauncher improvements

- PEP 646: Variadic generics
- PEP 655: Marking individualTypedDictitems as required or not-required
- PEP 673:Selftype
- PEP 675: Arbitrary literal string type
- PEP 681: Data class transforms
- PEP 563 may not be the future

- dataclasses
- IDLE and idlelib

- Faster StartupFrozen imports / Static code objects
- Faster RuntimeCheaper, lazy Python framesInlined Python function callsPEP 659: Specializing Adaptive Interpreter
- FAQHow should I write my code to utilize these speedups?Will CPython 3.11 use more memory?I don’t see any speedups in my workload. Why?Is there a JIT compiler?

- Frozen imports / Static code objects

- Cheaper, lazy Python frames
- Inlined Python function calls
- PEP 659: Specializing Adaptive Interpreter

- How should I write my code to utilize these speedups?
- Will CPython 3.11 use more memory?
- I don’t see any speedups in my workload. Why?
- Is there a JIT compiler?

- New opcodes
- Replaced opcodes
- Changed/removed opcodes

- Language/Builtins
- Standard Library

- New FeaturesParenthesized context managersBetter error messagesSyntaxErrorsIndentationErrorsAttributeErrorsNameErrorsPEP 626: Precise line numbers for debugging and other toolsPEP 634: Structural Pattern MatchingSyntax and operationsDeclarative approachSimple pattern: match to a literalBehavior without the wildcardPatterns with a literal and variablePatterns and classesPatterns with positional parametersNested patternsComplex patterns and the wildcardGuardOther Key FeaturesOptionalEncodingWarningandencoding="locale"option
- New Features Related to Type HintsPEP 604: New Type Union OperatorPEP 612: Parameter Specification VariablesPEP 613: TypeAliasPEP 647: User-Defined Type Guards
- Improved Modulesasyncioargparsearrayasynchat, asyncore, smtpdbase64bdbbisectcodecscollections.abccontextlibcursesdataclasses__slots__Keyword-only fieldsdistutilsdoctestencodingsenumfileinputfaulthandlergcglobhashlibhmacIDLE and idlelibimportlib.metadatainspectitertoolslinecacheosos.pathpathlibplatformpprintpy_compilepyclbrshelvestatisticssitesocketsslsqlite3sys_threadthreadingtracebacktypestypingunittesturllib.parsexmlzipimport
- Porting to Python 3.10Changes in the Python syntaxChanges in the Python APIChanges in the C API
- C API ChangesPEP 652: Maintaining the Stable ABINew FeaturesPorting to Python 3.10DeprecatedRemoved
- Notable security feature in 3.10.7
- Notable security feature in 3.10.8
- Notable changes in 3.10.12tarfile

- Parenthesized context managers
- Better error messagesSyntaxErrorsIndentationErrorsAttributeErrorsNameErrors
- PEP 626: Precise line numbers for debugging and other tools
- PEP 634: Structural Pattern MatchingSyntax and operationsDeclarative approachSimple pattern: match to a literalBehavior without the wildcardPatterns with a literal and variablePatterns and classesPatterns with positional parametersNested patternsComplex patterns and the wildcardGuardOther Key Features
- OptionalEncodingWarningandencoding="locale"option

- SyntaxErrors
- IndentationErrors
- AttributeErrors

- Syntax and operations
- Declarative approach
- Simple pattern: match to a literalBehavior without the wildcard
- Patterns with a literal and variable
- Patterns and classesPatterns with positional parameters
- Nested patterns
- Complex patterns and the wildcard
- Other Key Features

- Behavior without the wildcard

- Patterns with positional parameters

================================================================================

```
EncodingWarning
```

```
encoding="locale"
```

- PEP 604: New Type Union Operator
- PEP 612: Parameter Specification Variables
- PEP 613: TypeAlias
- PEP 647: User-Defined Type Guards

- asynchat, asyncore, smtpd
- collections.abc
- dataclasses__slots__Keyword-only fields
- faulthandler
- urllib.parse

- Keyword-only fields

- Changes in the Python syntax

- PEP 652: Maintaining the Stable ABI
- Porting to Python 3.10

- You should check for DeprecationWarning in your code
- New FeaturesDictionary Merge & Update OperatorsNew String Methods to Remove Prefixes and SuffixesType Hinting Generics in Standard CollectionsNew Parser
- New Moduleszoneinfographlib
- Improved Modulesastasynciocompileallconcurrent.futurescursesdatetimedistutilsfcntlftplibgchashlibhttpIDLE and idlelibimaplibimportlibinspectipaddressmathmultiprocessingnntplibospathlibpdbpoplibpprintpydocrandomsignalsmtplibsockettimesystracemalloctypingunicodedatavenvxml
- Porting to Python 3.9Changes in the Python APIChanges in the C APICPython bytecode changes
- C API ChangesNew FeaturesPorting to Python 3.9Removed
- Notable changes in Python 3.9.1typingmacOS 11.0 (Big Sur) and Apple Silicon Mac support
- Notable changes in Python 3.9.2collections.abcurllib.parse
- Notable changes in Python 3.9.3
- Notable changes in Python 3.9.5urllib.parse
- Notable security feature in 3.9.14
- Notable changes in 3.9.17tarfile

- Dictionary Merge & Update Operators
- New String Methods to Remove Prefixes and Suffixes
- Type Hinting Generics in Standard Collections

- tracemalloc

- Porting to Python 3.9

- macOS 11.0 (Big Sur) and Apple Silicon Mac support

- New FeaturesAssignment expressionsPositional-only parametersParallel filesystem cache for compiled bytecode filesDebug build uses the same ABI as release buildf-strings support=for self-documenting expressions and debuggingPEP 578: Python Runtime Audit HooksPEP 587: Python Initialization ConfigurationPEP 590: Vectorcall: a fast calling protocol for CPythonPickle protocol 5 with out-of-band data buffers
- Improved ModulesastasynciobuiltinscollectionscProfilecsvcursesctypesdatetimefunctoolsgcgettextgzipIDLE and idlelibinspectioitertoolsjson.toolloggingmathmmapmultiprocessingosos.pathpathlibpickleplistlibpprintpy_compileshlexshutilsocketsslstatisticssystarfilethreadingtokenizetkintertimetypingunicodedataunittestvenvweakrefxmlxmlrpc
- Build and C API Changes
- API and Feature Removals
- Porting to Python 3.8Changes in Python behaviorChanges in the Python APIChanges in the C APICPython bytecode changesDemos and Tools
- Notable changes in Python 3.8.1
- Notable changes in Python 3.8.2
- Notable changes in Python 3.8.3
- Notable changes in Python 3.8.8
- Notable changes in Python 3.8.9
- Notable changes in Python 3.8.10macOS 11.0 (Big Sur) and Apple Silicon Mac support
- Notable changes in Python 3.8.10urllib.parse
- Notable changes in Python 3.8.12Changes in the Python API
- Notable security feature in 3.8.14
- Notable changes in 3.8.17tarfile

- Assignment expressions
- Positional-only parameters
- Parallel filesystem cache for compiled bytecode files
- Debug build uses the same ABI as release build
- f-strings support=for self-documenting expressions and debugging
- PEP 578: Python Runtime Audit Hooks
- PEP 587: Python Initialization Configuration
- PEP 590: Vectorcall: a fast calling protocol for CPython
- Pickle protocol 5 with out-of-band data buffers

- collections

- Changes in Python behavior

- New FeaturesPEP 563: Postponed Evaluation of AnnotationsPEP 538: Legacy C Locale CoercionPEP 540: Forced UTF-8 Runtime ModePEP 553: Built-inbreakpoint()PEP 539: New C API for Thread-Local StoragePEP 562: Customization of Access to Module AttributesPEP 564: New Time Functions With Nanosecond ResolutionPEP 565: Show DeprecationWarning in__main__PEP 560: Core Support fortypingmodule and Generic TypesPEP 552: Hash-based .pyc FilesPEP 545: Python Documentation TranslationsPython Development Mode (-X dev)
- New Modulescontextvarsdataclassesimportlib.resources
- Improved Modulesargparseasynciobinasciicalendarcollectionscompileallconcurrent.futurescontextlibcProfilecryptdatetimedbmdecimaldisdistutilsenumfunctoolsgchmachttp.clienthttp.serveridlelib and IDLEimportlibioipaddressitertoolslocaleloggingmathmimetypesmsilibmultiprocessingospathlibpdbpy_compilepydocqueueresignalsocketsocketserversqlite3sslstringsubprocesssystimetkintertracemalloctypesunicodedataunittestunittest.mockurllib.parseuuuuidwarningsxmlxml.etreexmlrpc.serverzipappzipfile
- C API Changes
- Deprecated Python Behavior
- Deprecated Python modules, functions and methodsaifcasynciocollectionsdbmenumgettextimportliblocalemacpaththreadingsocketsslsunausyswave
- Deprecated functions and types of the C API
- Platform Support Removals
- Module Removals
- Windows-only Changes
- Porting to Python 3.7Changes in Python BehaviorChanges in the Python APIChanges in the C APICPython bytecode changesWindows-only ChangesOther CPython implementation changes
- Notable changes in Python 3.7.1
- Notable changes in Python 3.7.2
- Notable changes in Python 3.7.6
- Notable changes in Python 3.7.10
- Notable changes in Python 3.7.11
- Notable security feature in 3.7.14

- PEP 563: Postponed Evaluation of Annotations
- PEP 538: Legacy C Locale Coercion
- PEP 540: Forced UTF-8 Runtime Mode
- PEP 553: Built-inbreakpoint()
- PEP 539: New C API for Thread-Local Storage
- PEP 562: Customization of Access to Module Attributes
- PEP 564: New Time Functions With Nanosecond Resolution
- PEP 565: Show DeprecationWarning in__main__
- PEP 560: Core Support fortypingmodule and Generic Types
- PEP 552: Hash-based .pyc Files
- PEP 545: Python Documentation Translations
- Python Development Mode (-X dev)

```
breakpoint()
```

- contextvars

- http.client
- http.server
- idlelib and IDLE
- socketserver
- unittest.mock
- xmlrpc.server

- Changes in Python Behavior
- Other CPython implementation changes

- New FeaturesPEP 498: Formatted string literalsPEP 526: Syntax for variable annotationsPEP 515: Underscores in Numeric LiteralsPEP 525: Asynchronous GeneratorsPEP 530: Asynchronous ComprehensionsPEP 487: Simpler customization of class creationPEP 487: Descriptor Protocol EnhancementsPEP 519: Adding a file system path protocolPEP 495: Local Time DisambiguationPEP 529: Change Windows filesystem encoding to UTF-8PEP 528: Change Windows console encoding to UTF-8PEP 520: Preserving Class Attribute Definition OrderPEP 468: Preserving Keyword Argument OrderNewdictimplementationPEP 523: Adding a frame evaluation API to CPythonPYTHONMALLOC environment variableDTrace and SystemTap probing support
- New Modulessecrets
- Improved Modulesarrayastasynciobinasciicmathcollectionsconcurrent.futurescontextlibdatetimedecimaldistutilsemailencodingsenumfaulthandlerfileinputhashlibhttp.clientidlelib and IDLEimportlibinspectjsonloggingmathmultiprocessingospathlibpdbpicklepickletoolspydocrandomrereadlinerlcompletershlexsitesqlite3socketsocketserversslstatisticsstructsubprocesssystelnetlibtimetimeittkintertracebacktracemalloctypingunicodedataunittest.mockurllib.requesturllib.robotparservenvwarningswinregwinsoundxmlrpc.clientzipfilezlib
- Other Improvements
- DeprecatedNew KeywordsDeprecated Python behaviorDeprecated Python modules, functions and methodsasynchatasyncoredbmdistutilsgrpimportlibosressltkintervenvxmlDeprecated functions and types of the C APIDeprecated Build Options
- RemovedAPI and Feature Removals
- Porting to Python 3.6Changes in ‘python’ Command BehaviorChanges in the Python APIChanges in the C APICPython bytecode changes
- Notable changes in Python 3.6.2Newmakeregen-allbuild targetRemoval ofmaketouchbuild target
- Notable changes in Python 3.6.4
- Notable changes in Python 3.6.5
- Notable changes in Python 3.6.7
- Notable changes in Python 3.6.10
- Notable changes in Python 3.6.13
- Notable changes in Python 3.6.14

- PEP 498: Formatted string literals
- PEP 526: Syntax for variable annotations
- PEP 515: Underscores in Numeric Literals
- PEP 525: Asynchronous Generators
- PEP 530: Asynchronous Comprehensions
- PEP 487: Simpler customization of class creation
- PEP 487: Descriptor Protocol Enhancements
- PEP 519: Adding a file system path protocol
- PEP 495: Local Time Disambiguation
- PEP 529: Change Windows filesystem encoding to UTF-8
- PEP 528: Change Windows console encoding to UTF-8
- PEP 520: Preserving Class Attribute Definition Order
- PEP 468: Preserving Keyword Argument Order
- Newdictimplementation
- PEP 523: Adding a frame evaluation API to CPython
- PYTHONMALLOC environment variable
- DTrace and SystemTap probing support

- pickletools
- rlcompleter
- urllib.request
- urllib.robotparser
- xmlrpc.client

- New Keywords
- Deprecated Python behavior
- Deprecated Python modules, functions and methodsasynchatasyncoredbmdistutilsgrpimportlibosressltkintervenv
- Deprecated Build Options

- Changes in ‘python’ Command Behavior

- Newmakeregen-allbuild target
- Removal ofmaketouchbuild target

```
makeregen-all
```

- New FeaturesPEP 492 - Coroutines with async and await syntaxPEP 465 - A dedicated infix operator for matrix multiplicationPEP 448 - Additional Unpacking GeneralizationsPEP 461 - percent formatting support for bytes and bytearrayPEP 484 - Type HintsPEP 471 - os.scandir() function – a better and faster directory iteratorPEP 475: Retry system calls failing with EINTRPEP 479: Change StopIteration handling inside generatorsPEP 485: A function for testing approximate equalityPEP 486: Make the Python Launcher aware of virtual environmentsPEP 488: Elimination of PYO filesPEP 489: Multi-phase extension module initialization
- New Modulestypingzipapp
- Improved Modulesargparseasynciobz2cgicmathcodecollectionscollections.abccompileallconcurrent.futuresconfigparsercontextlibcsvcursesdbmdifflibdistutilsdoctestemailenumfaulthandlerfunctoolsglobgzipheapqhttphttp.clientidlelib and IDLEimaplibimghdrimportlibinspectioipaddressjsonlinecachelocalelogginglzmamathmultiprocessingoperatorospathlibpicklepoplibrereadlineselectorsshutilsignalsmtpdsmtplibsndhdrsocketsslMemory BIO SupportApplication-Layer Protocol Negotiation SupportOther Changessqlite3subprocesssyssysconfigtarfilethreadingtimetimeittkintertracebacktypesunicodedataunittestunittest.mockurllibwsgirefxmlrpcxml.saxzipfile
- Other module-level changes
- DeprecatedNew KeywordsDeprecated Python BehaviorUnsupported Operating SystemsDeprecated Python modules, functions and methods
- Porting to Python 3.5Changes in Python behaviorChanges in the Python APIChanges in the C API
- Notable changes in Python 3.5.4Newmakeregen-allbuild targetRemoval ofmaketouchbuild target

- PEP 492 - Coroutines with async and await syntax
- PEP 465 - A dedicated infix operator for matrix multiplication
- PEP 448 - Additional Unpacking Generalizations
- PEP 461 - percent formatting support for bytes and bytearray
- PEP 484 - Type Hints
- PEP 471 - os.scandir() function – a better and faster directory iterator
- PEP 475: Retry system calls failing with EINTR
- PEP 479: Change StopIteration handling inside generators
- PEP 485: A function for testing approximate equality
- PEP 486: Make the Python Launcher aware of virtual environments
- PEP 488: Elimination of PYO files
- PEP 489: Multi-phase extension module initialization

- sslMemory BIO SupportApplication-Layer Protocol Negotiation SupportOther Changes

- Memory BIO Support
- Application-Layer Protocol Negotiation Support
- Other Changes

- Unsupported Operating Systems
- Deprecated Python modules, functions and methods

- New FeaturesPEP 453: Explicit Bootstrapping of PIP in Python InstallationsBootstrapping pip By DefaultDocumentation ChangesPEP 446: Newly Created File Descriptors Are Non-InheritableImprovements to Codec HandlingPEP 451: A ModuleSpec Type for the Import SystemOther Language Changes
- New Modulesasyncioensurepipenumpathlibselectorsstatisticstracemalloc
- Improved Modulesabcaifcargparseaudioopbase64collectionscolorsyscontextlibdbmdisdoctestemailfilecmpfunctoolsgcglobhashlibhmachtmlhttpidlelib and IDLEimportlibinspectipaddressloggingmarshalmmapmultiprocessingoperatorospdbpickleplistlibpoplibpprintptypydocreresourceselectshelveshutilsmtpdsmtplibsocketsqlite3sslstatstructsubprocesssunausystarfiletextwrapthreadingtracebacktypesurllibunittestvenvwaveweakrefxml.etreezipfile
- CPython Implementation ChangesPEP 445: Customization of CPython Memory AllocatorsPEP 442: Safe Object FinalizationPEP 456: Secure and Interchangeable Hash AlgorithmPEP 436: Argument ClinicOther Build and C API ChangesOther ImprovementsSignificant Optimizations
- DeprecatedDeprecations in the Python APIDeprecated Features
- RemovedOperating Systems No Longer SupportedAPI and Feature RemovalsCode Cleanups
- Porting to Python 3.4Changes in ‘python’ Command BehaviorChanges in the Python APIChanges in the C API
- Changed in 3.4.3PEP 476: Enabling certificate verification by default for stdlib http clients

- PEP 453: Explicit Bootstrapping of PIP in Python InstallationsBootstrapping pip By DefaultDocumentation Changes
- PEP 446: Newly Created File Descriptors Are Non-Inheritable
- Improvements to Codec Handling
- PEP 451: A ModuleSpec Type for the Import System

- Bootstrapping pip By Default
- Documentation Changes

- PEP 445: Customization of CPython Memory Allocators
- PEP 442: Safe Object Finalization
- PEP 456: Secure and Interchangeable Hash Algorithm
- PEP 436: Argument Clinic
- Other Build and C API Changes
- Significant Optimizations

- Deprecations in the Python API
- Deprecated Features

- Operating Systems No Longer Supported
- Code Cleanups

- PEP 476: Enabling certificate verification by default for stdlib http clients

- PEP 405: Virtual Environments
- PEP 420: Implicit Namespace Packages
- PEP 3118: New memoryview implementation and buffer protocol documentationFeaturesAPI changes
- PEP 393: Flexible String RepresentationFunctionalityPerformance and resource usage
- PEP 397: Python Launcher for Windows
- PEP 3151: Reworking the OS and IO exception hierarchy
- PEP 380: Syntax for Delegating to a Subgenerator
- PEP 409: Suppressing exception context
- PEP 414: Explicit Unicode literals
- PEP 3155: Qualified name for classes and functions
- PEP 412: Key-Sharing Dictionary
- PEP 362: Function Signature Object
- PEP 421: Adding sys.implementationSimpleNamespace
- Using importlib as the Implementation of ImportNew APIsVisible Changes
- A Finer-Grained Import Lock
- Builtin functions and types
- New Modulesfaulthandleripaddresslzma
- Improved Modulesabcarraybase64binasciibz2codecscollectionscontextlibcryptcursesdatetimedecimalFeaturesAPI changesemailPolicy FrameworkProvisional Policy with New Header APIOther API Changesftplibfunctoolsgchmachttphtmlimaplibinspectioitertoolsloggingmathmmapmultiprocessingnntplibospdbpicklepydocreschedselectshlexshutilsignalsmtpdsmtplibsocketsocketserversqlite3sslstatstructsubprocesssystarfiletempfiletextwrapthreadingtimetypesunittesturllibwebbrowserxml.etree.ElementTreezlib
- DeprecatedUnsupported Operating SystemsDeprecated Python modules, functions and methodsDeprecated functions and types of the C APIDeprecated features
- Porting to Python 3.3Porting Python codePorting C codeBuilding C extensionsCommand Line Switch Changes

- API changes

- Functionality
- Performance and resource usage

- SimpleNamespace

- Visible Changes

- decimalFeaturesAPI changes
- emailPolicy FrameworkProvisional Policy with New Header APIOther API Changes

- Policy Framework
- Provisional Policy with New Header API
- Other API Changes

- Deprecated features

- Porting Python code
- Porting C code
- Building C extensions
- Command Line Switch Changes

- PEP 384: Defining a Stable ABI
- PEP 389: Argparse Command Line Parsing Module
- PEP 391:  Dictionary Based Configuration for Logging
- PEP 3148:  Theconcurrent.futuresmodule
- PEP 3147:  PYC Repository Directories
- PEP 3149: ABI Version Tagged .so Files
- PEP 3333: Python Web Server Gateway Interface v1.0.1
- New, Improved, and Deprecated Modulesemailelementtreefunctoolsitertoolscollectionsthreadingdatetime and timemathabcioreprlibloggingcsvcontextlibdecimal and fractionsftppopenselectgzip and zipfiletarfilehashlibastosshutilsqlite3htmlsocketsslnntpcertificatesimaplibhttp.clientunittestrandompoplibasyncoretempfileinspectpydocdisdbmctypessitesysconfigpdbconfigparserurllib.parsemailboxturtledemo
- Multi-threading
- Documentation
- Code Repository
- Porting to Python 3.2

- elementtree
- datetime and time
- decimal and fractions
- gzip and zipfile
- certificates

- PEP 372: Ordered Dictionaries
- PEP 378: Format Specifier for Thousands Separator
- New, Improved, and Deprecated Modules
- Porting to Python 3.1

- Common Stumbling BlocksPrint Is A FunctionViews And Iterators Instead Of ListsOrdering ComparisonsIntegersText Vs. Data Instead Of Unicode Vs. 8-bit
- Overview Of Syntax ChangesNew SyntaxChanged SyntaxRemoved Syntax
- Changes Already Present In Python 2.6
- Library Changes
- PEP 3101: A New Approach To String Formatting
- Changes To Exceptions
- Miscellaneous Other ChangesOperators And Special MethodsBuiltins
- Performance
- Porting To Python 3.0

- Print Is A Function
- Views And Iterators Instead Of Lists
- Ordering Comparisons
- Text Vs. Data Instead Of Unicode Vs. 8-bit

- Changed Syntax
- Removed Syntax

- Operators And Special Methods

- The Future for Python 2.x
- Changes to the Handling of Deprecation Warnings
- Python 3.1 Features
- PEP 372: Adding an Ordered Dictionary to collections
- PEP 389: The argparse Module for Parsing Command Lines
- PEP 391: Dictionary-Based Configuration For Logging
- PEP 3106: Dictionary Views
- PEP 3137: The memoryview Object
- Other Language ChangesInterpreter ChangesOptimizations
- New and Improved ModulesNew module: importlibNew module: sysconfigttk: Themed Widgets for TkUpdated module: unittestUpdated module: ElementTree 1.3
- Build and C API ChangesCapsulesPort-Specific Changes: WindowsPort-Specific Changes: Mac OS XPort-Specific Changes: FreeBSD
- Other Changes and Fixes
- Porting to Python 2.7
- New Features Added to Python 2.7 Maintenance ReleasesTwo new environment variables for debug modePEP 434: IDLE Enhancement Exception for All BranchesPEP 466: Network Security Enhancements for Python 2.7PEP 477: Backport ensurepip (PEP 453) to Python 2.7Bootstrapping pip By DefaultDocumentation ChangesPEP 476: Enabling certificate verification by default for stdlib http clientsPEP 493: HTTPS verification migration tools for Python 2.7Newmakeregen-allbuild targetRemoval ofmaketouchbuild target
- Acknowledgements

- Interpreter Changes

- New module: importlib
- New module: sysconfig
- ttk: Themed Widgets for Tk
- Updated module: unittest
- Updated module: ElementTree 1.3

- Port-Specific Changes: Windows
- Port-Specific Changes: Mac OS X
- Port-Specific Changes: FreeBSD

- Two new environment variables for debug mode
- PEP 434: IDLE Enhancement Exception for All Branches
- PEP 466: Network Security Enhancements for Python 2.7
- PEP 477: Backport ensurepip (PEP 453) to Python 2.7Bootstrapping pip By DefaultDocumentation Changes
- PEP 493: HTTPS verification migration tools for Python 2.7

- Changes to the Development ProcessNew Issue Tracker: RoundupNew Documentation Format: reStructuredText Using Sphinx
- PEP 343: The ‘with’ statementWriting Context ManagersThe contextlib module
- PEP 366: Explicit Relative Imports From a Main Module
- PEP 370: Per-usersite-packagesDirectory
- PEP 371: ThemultiprocessingPackage
- PEP 3101: Advanced String Formatting
- PEP 3105:printAs a Function
- PEP 3110: Exception-Handling Changes
- PEP 3112: Byte Literals
- PEP 3116: New I/O Library
- PEP 3118: Revised Buffer Protocol
- PEP 3119: Abstract Base Classes
- PEP 3127: Integer Literal Support and Syntax
- PEP 3129: Class Decorators
- PEP 3141: A Type Hierarchy for NumbersThefractionsModule
- Other Language ChangesOptimizationsInterpreter Changes
- New and Improved ModulesTheastmoduleThefuture_builtinsmoduleThejsonmodule: JavaScript Object NotationTheplistlibmodule: A Property-List Parserctypes EnhancementsImproved SSL Support
- Deprecations and Removals
- Build and C API ChangesPort-Specific Changes: WindowsPort-Specific Changes: Mac OS XPort-Specific Changes: IRIX
- Porting to Python 2.6

- New Issue Tracker: Roundup
- New Documentation Format: reStructuredText Using Sphinx

- Writing Context Managers
- The contextlib module

================================================================================

```
site-packages
```

- ThefractionsModule

- Theastmodule
- Thefuture_builtinsmodule
- Thejsonmodule: JavaScript Object Notation
- Theplistlibmodule: A Property-List Parser
- ctypes Enhancements
- Improved SSL Support

```
future_builtins
```

- Port-Specific Changes: IRIX

- PEP 308: Conditional Expressions
- PEP 309: Partial Function Application
- PEP 314: Metadata for Python Software Packages v1.1
- PEP 328: Absolute and Relative Imports
- PEP 338: Executing Modules as Scripts
- PEP 341: Unified try/except/finally
- PEP 342: New Generator Features
- PEP 352: Exceptions as New-Style Classes
- PEP 353: Using ssize_t as the index type
- PEP 357: The ‘__index__’ method
- Other Language ChangesInteractive Interpreter ChangesOptimizations
- New, Improved, and Removed ModulesThe ctypes packageThe ElementTree packageThe hashlib packageThe sqlite3 packageThe wsgiref package
- Build and C API ChangesPort-Specific Changes
- Porting to Python 2.5

- Interactive Interpreter Changes

- The ctypes package
- The ElementTree package
- The hashlib package
- The sqlite3 package
- The wsgiref package

- Port-Specific Changes

- PEP 218: Built-In Set Objects
- PEP 237: Unifying Long Integers and Integers
- PEP 289: Generator Expressions
- PEP 292: Simpler String Substitutions
- PEP 318: Decorators for Functions and Methods
- PEP 322: Reverse Iteration
- PEP 324: New subprocess Module
- PEP 327: Decimal Data TypeWhy is Decimal needed?TheDecimaltypeTheContexttype
- PEP 328: Multi-line Imports
- PEP 331: Locale-Independent Float/String Conversions
- Other Language ChangesOptimizations
- New, Improved, and Deprecated Modulescookielibdoctest
- Porting to Python 2.4

- Why is Decimal needed?
- TheDecimaltype
- TheContexttype

- PEP 218: A Standard Set Datatype
- PEP 255: Simple Generators
- PEP 263: Source Code Encodings
- PEP 273: Importing Modules from ZIP Archives
- PEP 277: Unicode file name support for Windows NT
- PEP 278: Universal Newline Support
- PEP 279: enumerate()
- PEP 282: The logging Package
- PEP 285: A Boolean Type
- PEP 293: Codec Error Handling Callbacks
- PEP 301: Package Index and Metadata for Distutils
- PEP 302: New Import Hooks
- PEP 305: Comma-separated Files
- PEP 307: Pickle Enhancements
- Extended Slices
- Other Language ChangesString ChangesOptimizations
- New, Improved, and Deprecated ModulesDate/Time TypeThe optparse Module
- Pymalloc: A Specialized Object Allocator
- Porting to Python 2.3

- String Changes

- Date/Time Type
- The optparse Module

- Introduction
- PEPs 252 and 253: Type and Class ChangesOld and New ClassesDescriptorsMultiple Inheritance: The Diamond RuleAttribute AccessRelated Links
- PEP 234: Iterators
- PEP 238: Changing the Division Operator
- Unicode Changes
- PEP 227: Nested Scopes
- New and Improved Modules
- Interpreter Changes and Fixes

- Old and New Classes
- Descriptors
- Multiple Inheritance: The Diamond Rule
- Attribute Access
- Related Links

- PEP 236: __future__ Directives
- PEP 207: Rich Comparisons
- PEP 230: Warning Framework
- PEP 229: New Build System
- PEP 205: Weak References
- PEP 232: Function Attributes
- PEP 235: Importing Modules on Case-Insensitive Platforms
- PEP 217: Interactive Display Hook
- PEP 208: New Coercion Model
- PEP 241: Metadata in Python Packages

- What About Python 1.6?
- New Development Process
- List Comprehensions
- Augmented Assignment
- String Methods
- Garbage Collection of Cycles
- Other Core ChangesMinor Language ChangesChanges to Built-in Functions
- Porting to 2.0
- Extending/Embedding Changes
- Distutils: Making Modules Easy to Install
- XML ModulesSAX2 SupportDOM SupportRelationship to PyXML
- Module changes
- New modules
- IDLE Improvements
- Deleted and Deprecated Modules

- Minor Language Changes
- Changes to Built-in Functions

- SAX2 Support
- DOM Support
- Relationship to PyXML

- Python nextTestsLibraryCore and BuiltinsBuild
- Python 3.13.3 finalmacOSWindowsTools/DemosTestsSecurityLibraryIDLEDocumentationCore and BuiltinsC APIBuild
- Python 3.13.2 finalmacOSWindowsTools/DemosTestsSecurityLibraryDocumentationCore and BuiltinsC APIBuild
- Python 3.13.1 finalmacOSWindowsTools/DemosTestsSecurityLibraryIDLEDocumentationCore and BuiltinsC APIBuild
- Python 3.13.0 finalCore and Builtins
- Python 3.13.0 release candidate 3macOSWindowsTestsLibraryIDLEDocumentationCore and BuiltinsC APIBuild
- Python 3.13.0 release candidate 2macOSWindowsTools/DemosTestsSecurityLibraryIDLECore and BuiltinsC APIBuild
- Python 3.13.0 release candidate 1TestsSecurityLibraryIDLECore and BuiltinsC APIBuild
- Python 3.13.0 beta 4TestsLibraryIDLEDocumentationCore and BuiltinsC APIBuild
- Python 3.13.0 beta 3Core and BuiltinsLibraryBuildC API
- Python 3.13.0 beta 2SecurityCore and BuiltinsLibraryTestsBuildWindowsC API
- Python 3.13.0 beta 1SecurityCore and BuiltinsLibraryDocumentationBuildWindowsmacOSIDLEC API
- Python 3.13.0 alpha 6Core and BuiltinsLibraryDocumentationTestsBuildWindowsC API
- Python 3.13.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.13.0 alpha 4SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.13.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC API
- Python 3.13.0 alpha 2Core and BuiltinsLibraryTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.13.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.12.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.12.0 alpha 7Core and BuiltinsLibraryDocumentationTestsBuildWindowsTools/DemosC API
- Python 3.12.0 alpha 6SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC API
- Python 3.12.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindows
- Python 3.12.0 alpha 4Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC API
- Python 3.12.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC API
- Python 3.12.0 alpha 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC API
- Python 3.12.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.11.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC API
- Python 3.11.0 alpha 7Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC API
- Python 3.11.0 alpha 6Core and BuiltinsLibraryDocumentationTestsBuildWindowsIDLEC API
- Python 3.11.0 alpha 5Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC API
- Python 3.11.0 alpha 4Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC API
- Python 3.11.0 alpha 3Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC API
- Python 3.11.0 alpha 2Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC API
- Python 3.11.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.10.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC API
- Python 3.10.0 alpha 7SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLEC API
- Python 3.10.0 alpha 6SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC API
- Python 3.10.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC API
- Python 3.10.0 alpha 4Core and BuiltinsLibraryDocumentationTestsBuildmacOSTools/DemosC API
- Python 3.10.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.10.0 alpha 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC API
- Python 3.10.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC API
- Python 3.9.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSTools/DemosC API
- Python 3.9.0 alpha 6SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.9.0 alpha 5SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.9.0 alpha 4SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLEC API
- Python 3.9.0 alpha 3Core and BuiltinsLibraryDocumentationBuildIDLEC API
- Python 3.9.0 alpha 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLEC API
- Python 3.9.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.8.0 beta 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.8.0 alpha 4SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.8.0 alpha 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLETools/DemosC API
- Python 3.8.0 alpha 2Core and BuiltinsLibraryDocumentationTestsWindowsIDLE
- Python 3.8.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.7.0 finalLibraryC API
- Python 3.7.0 release candidate 1Core and BuiltinsLibraryDocumentationBuildWindowsIDLE
- Python 3.7.0 beta 5Core and BuiltinsLibraryDocumentationTestsBuildmacOSIDLE
- Python 3.7.0 beta 4Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/Demos
- Python 3.7.0 beta 3SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.7.0 beta 2SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/Demos
- Python 3.7.0 beta 1Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSC API
- Python 3.7.0 alpha 4Core and BuiltinsLibraryDocumentationTestsWindowsTools/DemosC API
- Python 3.7.0 alpha 3Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.7.0 alpha 2Core and BuiltinsLibraryDocumentationBuildIDLEC API
- Python 3.7.0 alpha 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLETools/DemosC API
- Python 3.6.6 final
- Python 3.6.6 release candidate 1Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.6.5 finalTestsBuild
- Python 3.6.5 release candidate 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.6.4 final
- Python 3.6.4 release candidate 1Core and BuiltinsLibraryDocumentationTestsBuildWindowsmacOSIDLETools/DemosC API
- Python 3.6.3 finalLibraryBuild
- Python 3.6.3 release candidate 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsIDLETools/Demos
- Python 3.6.2 final
- Python 3.6.2 release candidate 2Security
- Python 3.6.2 release candidate 1SecurityCore and BuiltinsLibraryIDLEC APIBuildDocumentationTools/DemosTestsWindows
- Python 3.6.1 finalCore and BuiltinsBuild
- Python 3.6.1 release candidate 1Core and BuiltinsLibraryIDLEWindowsC APIDocumentationTestsBuild
- Python 3.6.0 final
- Python 3.6.0 release candidate 2Core and BuiltinsTools/DemosWindowsBuild
- Python 3.6.0 release candidate 1Core and BuiltinsLibraryC APIDocumentationTools/Demos
- Python 3.6.0 beta 4Core and BuiltinsLibraryDocumentationTestsBuild
- Python 3.6.0 beta 3Core and BuiltinsLibraryWindowsBuildTests
- Python 3.6.0 beta 2Core and BuiltinsLibraryWindowsC APIBuildTests
- Python 3.6.0 beta 1Core and BuiltinsLibraryIDLEC APITestsBuildTools/DemosWindows
- Python 3.6.0 alpha 4Core and BuiltinsLibraryIDLETestsWindowsBuild
- Python 3.6.0 alpha 3SecurityCore and BuiltinsLibraryIDLEC APIBuildTools/DemosDocumentationTests
- Python 3.6.0 alpha 2SecurityCore and BuiltinsLibraryIDLEDocumentationTestsWindowsBuildC APITools/Demos
- Python 3.6.0 alpha 1SecurityCore and BuiltinsLibraryIDLEDocumentationTestsBuildWindowsTools/DemosC API
- Python 3.5.5 final
- Python 3.5.5 release candidate 1SecurityCore and BuiltinsLibrary
- Python 3.5.4 finalLibrary
- Python 3.5.4 release candidate 1SecurityCore and BuiltinsLibraryDocumentationTestsBuildWindowsC API
- Python 3.5.3 final
- Python 3.5.3 release candidate 1SecurityCore and BuiltinsLibraryIDLEC APIDocumentationTestsTools/DemosWindowsBuild
- Python 3.5.2 finalCore and BuiltinsTestsIDLE
- Python 3.5.2 release candidate 1SecurityCore and BuiltinsLibraryIDLEDocumentationTestsBuildWindowsTools/Demos
- Python 3.5.1 finalCore and BuiltinsWindows
- Python 3.5.1 release candidate 1Core and BuiltinsLibraryIDLEDocumentationTestsBuildWindowsTools/Demos
- Python 3.5.0 finalBuild
- Python 3.5.0 release candidate 4LibraryBuild
- Python 3.5.0 release candidate 3Core and BuiltinsLibrary
- Python 3.5.0 release candidate 2Core and BuiltinsLibrary
- Python 3.5.0 release candidate 1Core and BuiltinsLibraryIDLEDocumentationTests
- Python 3.5.0 beta 4Core and BuiltinsLibraryBuild
- Python 3.5.0 beta 3Core and BuiltinsLibraryTestsDocumentationBuild
- Python 3.5.0 beta 2Core and BuiltinsLibrary
- Python 3.5.0 beta 1Core and BuiltinsLibraryIDLETestsDocumentationTools/Demos
- Python 3.5.0 alpha 4Core and BuiltinsLibraryBuildTestsTools/DemosC API
- Python 3.5.0 alpha 3Core and BuiltinsLibraryBuildTestsTools/Demos
- Python 3.5.0 alpha 2Core and BuiltinsLibraryBuildC APIWindows
- Python 3.5.0 alpha 1Core and BuiltinsLibraryIDLEBuildC APIDocumentationTestsTools/DemosWindows

- Core and Builtins

- Tools/Demos

- 1. Whetting Your Appetite
- 2. Using the Python Interpreter2.1. Invoking the Interpreter2.1.1. Argument Passing2.1.2. Interactive Mode2.2. The Interpreter and Its Environment2.2.1. Source Code Encoding
- 3. An Informal Introduction to Python3.1. Using Python as a Calculator3.1.1. Numbers3.1.2. Text3.1.3. Lists3.2. First Steps Towards Programming
- 4. More Control Flow Tools4.1.ifStatements4.2.forStatements4.3. Therange()Function4.4.breakandcontinueStatements4.5.elseClauses on Loops4.6.passStatements4.7.matchStatements4.8. Defining Functions4.9. More on Defining Functions4.9.1. Default Argument Values4.9.2. Keyword Arguments4.9.3. Special parameters4.9.3.1. Positional-or-Keyword Arguments4.9.3.2. Positional-Only Parameters4.9.3.3. Keyword-Only Arguments4.9.3.4. Function Examples4.9.3.5. Recap4.9.4. Arbitrary Argument Lists4.9.5. Unpacking Argument Lists4.9.6. Lambda Expressions4.9.7. Documentation Strings4.9.8. Function Annotations4.10. Intermezzo: Coding Style
- 5. Data Structures5.1. More on Lists5.1.1. Using Lists as Stacks5.1.2. Using Lists as Queues5.1.3. List Comprehensions5.1.4. Nested List Comprehensions5.2. Thedelstatement5.3. Tuples and Sequences5.4. Sets5.5. Dictionaries5.6. Looping Techniques5.7. More on Conditions5.8. Comparing Sequences and Other Types
- 6. Modules6.1. More on Modules6.1.1. Executing modules as scripts6.1.2. The Module Search Path6.1.3. “Compiled” Python files6.2. Standard Modules6.3. Thedir()Function6.4. Packages6.4.1. Importing * From a Package6.4.2. Intra-package References6.4.3. Packages in Multiple Directories
- 7. Input and Output7.1. Fancier Output Formatting7.1.1. Formatted String Literals7.1.2. The String format() Method7.1.3. Manual String Formatting7.1.4. Old string formatting7.2. Reading and Writing Files7.2.1. Methods of File Objects7.2.2. Saving structured data withjson
- 8. Errors and Exceptions8.1. Syntax Errors8.2. Exceptions8.3. Handling Exceptions8.4. Raising Exceptions8.5. Exception Chaining8.6. User-defined Exceptions8.7. Defining Clean-up Actions8.8. Predefined Clean-up Actions8.9. Raising and Handling Multiple Unrelated Exceptions8.10. Enriching Exceptions with Notes
- 9. Classes9.1. A Word About Names and Objects9.2. Python Scopes and Namespaces9.2.1. Scopes and Namespaces Example9.3. A First Look at Classes9.3.1. Class Definition Syntax9.3.2. Class Objects9.3.3. Instance Objects9.3.4. Method Objects9.3.5. Class and Instance Variables9.4. Random Remarks9.5. Inheritance9.5.1. Multiple Inheritance9.6. Private Variables9.7. Odds and Ends9.8. Iterators9.9. Generators9.10. Generator Expressions
- 10. Brief Tour of the Standard Library10.1. Operating System Interface10.2. File Wildcards10.3. Command Line Arguments10.4. Error Output Redirection and Program Termination10.5. String Pattern Matching10.6. Mathematics10.7. Internet Access10.8. Dates and Times10.9. Data Compression10.10. Performance Measurement10.11. Quality Control10.12. Batteries Included
- 11. Brief Tour of the Standard Library — Part II11.1. Output Formatting11.2. Templating11.3. Working with Binary Data Record Layouts11.4. Multi-threading11.5. Logging11.6. Weak References11.7. Tools for Working with Lists11.8. Decimal Floating-Point Arithmetic
- 12. Virtual Environments and Packages12.1. Introduction12.2. Creating Virtual Environments12.3. Managing Packages with pip
- 13. What Now?
- 14. Interactive Input Editing and History Substitution14.1. Tab Completion and History Editing14.2. Alternatives to the Interactive Interpreter
- 15. Floating-Point Arithmetic:  Issues and Limitations15.1. Representation Error
- 16. Appendix16.1. Interactive Mode16.1.1. Error Handling16.1.2. Executable Python Scripts16.1.3. The Interactive Startup File16.1.4. The Customization Modules

- 2.1. Invoking the Interpreter2.1.1. Argument Passing2.1.2. Interactive Mode
- 2.2. The Interpreter and Its Environment2.2.1. Source Code Encoding

- 2.1.1. Argument Passing
- 2.1.2. Interactive Mode

- 2.2.1. Source Code Encoding

- 3.1. Using Python as a Calculator3.1.1. Numbers3.1.2. Text3.1.3. Lists
- 3.2. First Steps Towards Programming

- 3.1.1. Numbers
- 3.1.2. Text
- 3.1.3. Lists

- 4.1.ifStatements
- 4.2.forStatements
- 4.3. Therange()Function
- 4.4.breakandcontinueStatements
- 4.5.elseClauses on Loops
- 4.6.passStatements
- 4.7.matchStatements
- 4.8. Defining Functions
- 4.9. More on Defining Functions4.9.1. Default Argument Values4.9.2. Keyword Arguments4.9.3. Special parameters4.9.3.1. Positional-or-Keyword Arguments4.9.3.2. Positional-Only Parameters4.9.3.3. Keyword-Only Arguments4.9.3.4. Function Examples4.9.3.5. Recap4.9.4. Arbitrary Argument Lists4.9.5. Unpacking Argument Lists4.9.6. Lambda Expressions4.9.7. Documentation Strings4.9.8. Function Annotations
- 4.10. Intermezzo: Coding Style

- 4.9.1. Default Argument Values
- 4.9.2. Keyword Arguments
- 4.9.3. Special parameters4.9.3.1. Positional-or-Keyword Arguments4.9.3.2. Positional-Only Parameters4.9.3.3. Keyword-Only Arguments4.9.3.4. Function Examples4.9.3.5. Recap
- 4.9.4. Arbitrary Argument Lists
- 4.9.5. Unpacking Argument Lists
- 4.9.6. Lambda Expressions
- 4.9.7. Documentation Strings
- 4.9.8. Function Annotations

- 4.9.3.1. Positional-or-Keyword Arguments
- 4.9.3.2. Positional-Only Parameters
- 4.9.3.3. Keyword-Only Arguments
- 4.9.3.4. Function Examples
- 4.9.3.5. Recap

- 5.1. More on Lists5.1.1. Using Lists as Stacks5.1.2. Using Lists as Queues5.1.3. List Comprehensions5.1.4. Nested List Comprehensions
- 5.2. Thedelstatement
- 5.3. Tuples and Sequences
- 5.5. Dictionaries
- 5.6. Looping Techniques
- 5.7. More on Conditions
- 5.8. Comparing Sequences and Other Types

- 5.1.1. Using Lists as Stacks
- 5.1.2. Using Lists as Queues
- 5.1.3. List Comprehensions
- 5.1.4. Nested List Comprehensions

- 6.1. More on Modules6.1.1. Executing modules as scripts6.1.2. The Module Search Path6.1.3. “Compiled” Python files
- 6.2. Standard Modules
- 6.3. Thedir()Function
- 6.4. Packages6.4.1. Importing * From a Package6.4.2. Intra-package References6.4.3. Packages in Multiple Directories

- 6.1.1. Executing modules as scripts
- 6.1.2. The Module Search Path
- 6.1.3. “Compiled” Python files

- 6.4.1. Importing * From a Package
- 6.4.2. Intra-package References
- 6.4.3. Packages in Multiple Directories

- 7.1. Fancier Output Formatting7.1.1. Formatted String Literals7.1.2. The String format() Method7.1.3. Manual String Formatting7.1.4. Old string formatting
- 7.2. Reading and Writing Files7.2.1. Methods of File Objects7.2.2. Saving structured data withjson

- 7.1.1. Formatted String Literals
- 7.1.2. The String format() Method
- 7.1.3. Manual String Formatting
- 7.1.4. Old string formatting

- 7.2.1. Methods of File Objects
- 7.2.2. Saving structured data withjson

- 8.1. Syntax Errors
- 8.2. Exceptions
- 8.3. Handling Exceptions
- 8.4. Raising Exceptions
- 8.5. Exception Chaining
- 8.6. User-defined Exceptions
- 8.7. Defining Clean-up Actions
- 8.8. Predefined Clean-up Actions
- 8.9. Raising and Handling Multiple Unrelated Exceptions
- 8.10. Enriching Exceptions with Notes

- 9.1. A Word About Names and Objects
- 9.2. Python Scopes and Namespaces9.2.1. Scopes and Namespaces Example
- 9.3. A First Look at Classes9.3.1. Class Definition Syntax9.3.2. Class Objects9.3.3. Instance Objects9.3.4. Method Objects9.3.5. Class and Instance Variables
- 9.4. Random Remarks
- 9.5. Inheritance9.5.1. Multiple Inheritance
- 9.6. Private Variables
- 9.7. Odds and Ends
- 9.8. Iterators
- 9.9. Generators
- 9.10. Generator Expressions

- 9.2.1. Scopes and Namespaces Example

- 9.3.1. Class Definition Syntax
- 9.3.2. Class Objects
- 9.3.3. Instance Objects
- 9.3.4. Method Objects
- 9.3.5. Class and Instance Variables

- 9.5.1. Multiple Inheritance

- 10.1. Operating System Interface
- 10.2. File Wildcards
- 10.3. Command Line Arguments
- 10.4. Error Output Redirection and Program Termination
- 10.5. String Pattern Matching
- 10.6. Mathematics
- 10.7. Internet Access
- 10.8. Dates and Times
- 10.9. Data Compression
- 10.10. Performance Measurement
- 10.11. Quality Control
- 10.12. Batteries Included

- 11.1. Output Formatting
- 11.2. Templating
- 11.3. Working with Binary Data Record Layouts
- 11.4. Multi-threading
- 11.5. Logging
- 11.6. Weak References
- 11.7. Tools for Working with Lists
- 11.8. Decimal Floating-Point Arithmetic

- 12.1. Introduction
- 12.2. Creating Virtual Environments
- 12.3. Managing Packages with pip

- 14.1. Tab Completion and History Editing
- 14.2. Alternatives to the Interactive Interpreter

- 15.1. Representation Error

- 16.1. Interactive Mode16.1.1. Error Handling16.1.2. Executable Python Scripts16.1.3. The Interactive Startup File16.1.4. The Customization Modules

- 16.1.1. Error Handling
- 16.1.2. Executable Python Scripts
- 16.1.3. The Interactive Startup File
- 16.1.4. The Customization Modules

- 1. Command line and environment1.1. Command line1.1.1. Interface options1.1.2. Generic options1.1.3. Miscellaneous options1.1.4. Controlling color1.1.5. Options you shouldn’t use1.2. Environment variables1.2.1. Debug-mode variables
- 2. Using Python on Unix platforms2.1. Getting and installing the latest version of Python2.1.1. On Linux2.1.1.1. Installing IDLE2.1.2. On FreeBSD and OpenBSD2.2. Building Python2.3. Python-related paths and files2.4. Miscellaneous2.5. Custom OpenSSL
- 3. Configure Python3.1. Build Requirements3.2. Generated files3.2.1. configure script3.3. Configure Options3.3.1. General Options3.3.2. C compiler options3.3.3. Linker options3.3.4. Options for third-party dependencies3.3.5. WebAssembly Options3.3.6. Install Options3.3.7. Performance options3.3.8. Python Debug Build3.3.9. Debug options3.3.10. Linker options3.3.11. Libraries options3.3.12. Security Options3.3.13. macOS Options3.3.14. iOS Options3.3.15. Cross Compiling Options3.4. Python Build System3.4.1. Main files of the build system3.4.2. Main build steps3.4.3. Main Makefile targets3.4.3.1. make3.4.3.2. make platform3.4.3.3. make profile-opt3.4.3.4. make clean3.4.3.5. make distclean3.4.3.6. make install3.4.3.7. make test3.4.3.8. make buildbottest3.4.3.9. make regen-all3.4.4. C extensions3.5. Compiler and linker flags3.5.1. Preprocessor flags3.5.2. Compiler flags3.5.3. Linker flags
- 4. Using Python on Windows4.1. The full installer4.1.1. Installation steps4.1.2. Removing the MAX_PATH Limitation4.1.3. Installing Without UI4.1.4. Installing Without Downloading4.1.5. Modifying an install4.1.6. Installing Free-threaded Binaries4.2. The Microsoft Store package4.2.1. Known issues4.2.1.1. Redirection of local data, registry, and temporary paths4.3. The nuget.org packages4.3.1. Free-threaded packages4.4. The embeddable package4.4.1. Python Application4.4.2. Embedding Python4.5. Alternative bundles4.6. Configuring Python4.6.1. Excursus: Setting environment variables4.6.2. Finding the Python executable4.7. UTF-8 mode4.8. Python Launcher for Windows4.8.1. Getting started4.8.1.1. From the command-line4.8.1.2. Virtual environments4.8.1.3. From a script4.8.1.4. From file associations4.8.2. Shebang Lines4.8.3. Arguments in shebang lines4.8.4. Customization4.8.4.1. Customization via INI files4.8.4.2. Customizing default Python versions4.8.5. Diagnostics4.8.6. Dry Run4.8.7. Install on demand4.8.8. Return codes4.9. Finding modules4.10. Additional modules4.10.1. PyWin324.10.2. cx_Freeze4.11. Compiling Python on Windows4.12. Other Platforms
- 5. Using Python on macOS5.1. Using Python for macOS frompython.org5.1.1. Installation steps5.1.2. How to run a Python script5.2. Alternative Distributions5.3. Installing Additional Python Packages5.4. GUI Programming5.5. Advanced Topics5.5.1. Installing Free-threaded Binaries5.5.2. Installing using the command line5.5.3. Distributing Python Applications5.5.4. App Store Compliance5.6. Other Resources
- 6. Using Python on Android6.1. Adding Python to an Android app
- 7. Using Python on iOS7.1. Python at runtime on iOS7.1.1. iOS version compatibility7.1.2. Platform identification7.1.3. Standard library availability7.1.4. Binary extension modules7.1.5. Compiler stub binaries7.2. Installing Python on iOS7.2.1. Tools for building iOS apps7.2.2. Adding Python to an iOS project7.2.3. Testing a Python package7.3. App Store Compliance
- 8. Editors and IDEs8.1. IDLE — Python editor and shell8.2. Other Editors and IDEs

- 1.1. Command line1.1.1. Interface options1.1.2. Generic options1.1.3. Miscellaneous options1.1.4. Controlling color1.1.5. Options you shouldn’t use
- 1.2. Environment variables1.2.1. Debug-mode variables

- 1.1.1. Interface options
- 1.1.2. Generic options
- 1.1.3. Miscellaneous options
- 1.1.4. Controlling color
- 1.1.5. Options you shouldn’t use

- 1.2.1. Debug-mode variables

- 2.1. Getting and installing the latest version of Python2.1.1. On Linux2.1.1.1. Installing IDLE2.1.2. On FreeBSD and OpenBSD
- 2.2. Building Python
- 2.3. Python-related paths and files
- 2.4. Miscellaneous
- 2.5. Custom OpenSSL

- 2.1.1. On Linux2.1.1.1. Installing IDLE
- 2.1.2. On FreeBSD and OpenBSD

- 2.1.1.1. Installing IDLE

- 3.1. Build Requirements
- 3.2. Generated files3.2.1. configure script
- 3.3. Configure Options3.3.1. General Options3.3.2. C compiler options3.3.3. Linker options3.3.4. Options for third-party dependencies3.3.5. WebAssembly Options3.3.6. Install Options3.3.7. Performance options3.3.8. Python Debug Build3.3.9. Debug options3.3.10. Linker options3.3.11. Libraries options3.3.12. Security Options3.3.13. macOS Options3.3.14. iOS Options3.3.15. Cross Compiling Options
- 3.4. Python Build System3.4.1. Main files of the build system3.4.2. Main build steps3.4.3. Main Makefile targets3.4.3.1. make3.4.3.2. make platform3.4.3.3. make profile-opt3.4.3.4. make clean3.4.3.5. make distclean3.4.3.6. make install3.4.3.7. make test3.4.3.8. make buildbottest3.4.3.9. make regen-all3.4.4. C extensions
- 3.5. Compiler and linker flags3.5.1. Preprocessor flags3.5.2. Compiler flags3.5.3. Linker flags

- 3.2.1. configure script

- 3.3.1. General Options
- 3.3.2. C compiler options
- 3.3.3. Linker options
- 3.3.4. Options for third-party dependencies
- 3.3.5. WebAssembly Options
- 3.3.6. Install Options
- 3.3.7. Performance options
- 3.3.8. Python Debug Build
- 3.3.9. Debug options
- 3.3.10. Linker options
- 3.3.11. Libraries options
- 3.3.12. Security Options
- 3.3.13. macOS Options
- 3.3.14. iOS Options
- 3.3.15. Cross Compiling Options

- 3.4.1. Main files of the build system
- 3.4.2. Main build steps
- 3.4.3. Main Makefile targets3.4.3.1. make3.4.3.2. make platform3.4.3.3. make profile-opt3.4.3.4. make clean3.4.3.5. make distclean3.4.3.6. make install3.4.3.7. make test3.4.3.8. make buildbottest3.4.3.9. make regen-all
- 3.4.4. C extensions

- 3.4.3.1. make
- 3.4.3.2. make platform
- 3.4.3.3. make profile-opt
- 3.4.3.4. make clean
- 3.4.3.5. make distclean
- 3.4.3.6. make install
- 3.4.3.7. make test
- 3.4.3.8. make buildbottest
- 3.4.3.9. make regen-all

- 3.5.1. Preprocessor flags
- 3.5.2. Compiler flags
- 3.5.3. Linker flags

- 4.1. The full installer4.1.1. Installation steps4.1.2. Removing the MAX_PATH Limitation4.1.3. Installing Without UI4.1.4. Installing Without Downloading4.1.5. Modifying an install4.1.6. Installing Free-threaded Binaries
- 4.2. The Microsoft Store package4.2.1. Known issues4.2.1.1. Redirection of local data, registry, and temporary paths
- 4.3. The nuget.org packages4.3.1. Free-threaded packages
- 4.4. The embeddable package4.4.1. Python Application4.4.2. Embedding Python
- 4.5. Alternative bundles
- 4.6. Configuring Python4.6.1. Excursus: Setting environment variables4.6.2. Finding the Python executable
- 4.7. UTF-8 mode
- 4.8. Python Launcher for Windows4.8.1. Getting started4.8.1.1. From the command-line4.8.1.2. Virtual environments4.8.1.3. From a script4.8.1.4. From file associations4.8.2. Shebang Lines4.8.3. Arguments in shebang lines4.8.4. Customization4.8.4.1. Customization via INI files4.8.4.2. Customizing default Python versions4.8.5. Diagnostics4.8.6. Dry Run4.8.7. Install on demand4.8.8. Return codes
- 4.9. Finding modules
- 4.10. Additional modules4.10.1. PyWin324.10.2. cx_Freeze
- 4.11. Compiling Python on Windows
- 4.12. Other Platforms

- 4.1.1. Installation steps
- 4.1.2. Removing the MAX_PATH Limitation
- 4.1.3. Installing Without UI
- 4.1.4. Installing Without Downloading
- 4.1.5. Modifying an install
- 4.1.6. Installing Free-threaded Binaries

- 4.2.1. Known issues4.2.1.1. Redirection of local data, registry, and temporary paths

- 4.2.1.1. Redirection of local data, registry, and temporary paths

- 4.3.1. Free-threaded packages

- 4.4.1. Python Application
- 4.4.2. Embedding Python

- 4.6.1. Excursus: Setting environment variables
- 4.6.2. Finding the Python executable

- 4.8.1. Getting started4.8.1.1. From the command-line4.8.1.2. Virtual environments4.8.1.3. From a script4.8.1.4. From file associations
- 4.8.2. Shebang Lines
- 4.8.3. Arguments in shebang lines
- 4.8.4. Customization4.8.4.1. Customization via INI files4.8.4.2. Customizing default Python versions
- 4.8.5. Diagnostics
- 4.8.6. Dry Run
- 4.8.7. Install on demand
- 4.8.8. Return codes

- 4.8.1.1. From the command-line
- 4.8.1.2. Virtual environments
- 4.8.1.3. From a script
- 4.8.1.4. From file associations

- 4.8.4.1. Customization via INI files
- 4.8.4.2. Customizing default Python versions

- 4.10.1. PyWin32
- 4.10.2. cx_Freeze

- 5.1. Using Python for macOS frompython.org5.1.1. Installation steps5.1.2. How to run a Python script
- 5.2. Alternative Distributions
- 5.3. Installing Additional Python Packages
- 5.4. GUI Programming
- 5.5. Advanced Topics5.5.1. Installing Free-threaded Binaries5.5.2. Installing using the command line5.5.3. Distributing Python Applications5.5.4. App Store Compliance
- 5.6. Other Resources

================================================================================

```
python.org
```

- 5.1.1. Installation steps
- 5.1.2. How to run a Python script

- 5.5.1. Installing Free-threaded Binaries
- 5.5.2. Installing using the command line
- 5.5.3. Distributing Python Applications
- 5.5.4. App Store Compliance

- 6.1. Adding Python to an Android app

- 7.1. Python at runtime on iOS7.1.1. iOS version compatibility7.1.2. Platform identification7.1.3. Standard library availability7.1.4. Binary extension modules7.1.5. Compiler stub binaries
- 7.2. Installing Python on iOS7.2.1. Tools for building iOS apps7.2.2. Adding Python to an iOS project7.2.3. Testing a Python package
- 7.3. App Store Compliance

- 7.1.1. iOS version compatibility
- 7.1.2. Platform identification
- 7.1.3. Standard library availability
- 7.1.4. Binary extension modules
- 7.1.5. Compiler stub binaries

- 7.2.1. Tools for building iOS apps
- 7.2.2. Adding Python to an iOS project
- 7.2.3. Testing a Python package

- 8.1. IDLE — Python editor and shell
- 8.2. Other Editors and IDEs

- 1. Introduction1.1. Alternate Implementations1.2. Notation
- 2. Lexical analysis2.1. Line structure2.1.1. Logical lines2.1.2. Physical lines2.1.3. Comments2.1.4. Encoding declarations2.1.5. Explicit line joining2.1.6. Implicit line joining2.1.7. Blank lines2.1.8. Indentation2.1.9. Whitespace between tokens2.2. Other tokens2.3. Identifiers and keywords2.3.1. Keywords2.3.2. Soft Keywords2.3.3. Reserved classes of identifiers2.4. Literals2.4.1. String and Bytes literals2.4.1.1. Escape sequences2.4.2. String literal concatenation2.4.3. f-strings2.4.4. Numeric literals2.4.5. Integer literals2.4.6. Floating-point literals2.4.7. Imaginary literals2.5. Operators2.6. Delimiters
- 3. Data model3.1. Objects, values and types3.2. The standard type hierarchy3.2.1. None3.2.2. NotImplemented3.2.3. Ellipsis3.2.4.numbers.Number3.2.4.1.numbers.Integral3.2.4.2.numbers.Real(float)3.2.4.3.numbers.Complex(complex)3.2.5. Sequences3.2.5.1. Immutable sequences3.2.5.2. Mutable sequences3.2.6. Set types3.2.7. Mappings3.2.7.1. Dictionaries3.2.8. Callable types3.2.8.1. User-defined functions3.2.8.1.1. Special read-only attributes3.2.8.1.2. Special writable attributes3.2.8.2. Instance methods3.2.8.3. Generator functions3.2.8.4. Coroutine functions3.2.8.5. Asynchronous generator functions3.2.8.6. Built-in functions3.2.8.7. Built-in methods3.2.8.8. Classes3.2.8.9. Class Instances3.2.9. Modules3.2.9.1. Import-related attributes on module objects3.2.9.2. Other writable attributes on module objects3.2.9.3. Module dictionaries3.2.10. Custom classes3.2.10.1. Special attributes3.2.10.2. Special methods3.2.11. Class instances3.2.11.1. Special attributes3.2.12. I/O objects (also known as file objects)3.2.13. Internal types3.2.13.1. Code objects3.2.13.1.1. Special read-only attributes3.2.13.1.2. Methods on code objects3.2.13.2. Frame objects3.2.13.2.1. Special read-only attributes3.2.13.2.2. Special writable attributes3.2.13.2.3. Frame object methods3.2.13.3. Traceback objects3.2.13.4. Slice objects3.2.13.5. Static method objects3.2.13.6. Class method objects3.3. Special method names3.3.1. Basic customization3.3.2. Customizing attribute access3.3.2.1. Customizing module attribute access3.3.2.2. Implementing Descriptors3.3.2.3. Invoking Descriptors3.3.2.4. __slots__3.3.3. Customizing class creation3.3.3.1. Metaclasses3.3.3.2. Resolving MRO entries3.3.3.3. Determining the appropriate metaclass3.3.3.4. Preparing the class namespace3.3.3.5. Executing the class body3.3.3.6. Creating the class object3.3.3.7. Uses for metaclasses3.3.4. Customizing instance and subclass checks3.3.5. Emulating generic types3.3.5.1. The purpose of__class_getitem__3.3.5.2.__class_getitem__versus__getitem__3.3.6. Emulating callable objects3.3.7. Emulating container types3.3.8. Emulating numeric types3.3.9. With Statement Context Managers3.3.10. Customizing positional arguments in class pattern matching3.3.11. Emulating buffer types3.3.12. Special method lookup3.4. Coroutines3.4.1. Awaitable Objects3.4.2. Coroutine Objects3.4.3. Asynchronous Iterators3.4.4. Asynchronous Context Managers
- 4. Execution model4.1. Structure of a program4.2. Naming and binding4.2.1. Binding of names4.2.2. Resolution of names4.2.3. Annotation scopes4.2.4. Lazy evaluation4.2.5. Builtins and restricted execution4.2.6. Interaction with dynamic features4.3. Exceptions
- 5. The import system5.1.importlib5.2. Packages5.2.1. Regular packages5.2.2. Namespace packages5.3. Searching5.3.1. The module cache5.3.2. Finders and loaders5.3.3. Import hooks5.3.4. The meta path5.4. Loading5.4.1. Loaders5.4.2. Submodules5.4.3. Module specs5.4.4. __path__ attributes on modules5.4.5. Module reprs5.4.6. Cached bytecode invalidation5.5. The Path Based Finder5.5.1. Path entry finders5.5.2. Path entry finder protocol5.6. Replacing the standard import system5.7. Package Relative Imports5.8. Special considerations for __main__5.8.1. __main__.__spec__5.9. References
- 6. Expressions6.1. Arithmetic conversions6.2. Atoms6.2.1. Identifiers (Names)6.2.1.1. Private name mangling6.2.2. Literals6.2.3. Parenthesized forms6.2.4. Displays for lists, sets and dictionaries6.2.5. List displays6.2.6. Set displays6.2.7. Dictionary displays6.2.8. Generator expressions6.2.9. Yield expressions6.2.9.1. Generator-iterator methods6.2.9.2. Examples6.2.9.3. Asynchronous generator functions6.2.9.4. Asynchronous generator-iterator methods6.3. Primaries6.3.1. Attribute references6.3.2. Subscriptions6.3.3. Slicings6.3.4. Calls6.4. Await expression6.5. The power operator6.6. Unary arithmetic and bitwise operations6.7. Binary arithmetic operations6.8. Shifting operations6.9. Binary bitwise operations6.10. Comparisons6.10.1. Value comparisons6.10.2. Membership test operations6.10.3. Identity comparisons6.11. Boolean operations6.12. Assignment expressions6.13. Conditional expressions6.14. Lambdas6.15. Expression lists6.16. Evaluation order6.17. Operator precedence
- 7. Simple statements7.1. Expression statements7.2. Assignment statements7.2.1. Augmented assignment statements7.2.2. Annotated assignment statements7.3. Theassertstatement7.4. Thepassstatement7.5. Thedelstatement7.6. Thereturnstatement7.7. Theyieldstatement7.8. Theraisestatement7.9. Thebreakstatement7.10. Thecontinuestatement7.11. Theimportstatement7.11.1. Future statements7.12. Theglobalstatement7.13. Thenonlocalstatement7.14. Thetypestatement
- 8. Compound statements8.1. Theifstatement8.2. Thewhilestatement8.3. Theforstatement8.4. Thetrystatement8.4.1.exceptclause8.4.2.except*clause8.4.3.elseclause8.4.4.finallyclause8.5. Thewithstatement8.6. Thematchstatement8.6.1. Overview8.6.2. Guards8.6.3. Irrefutable Case Blocks8.6.4. Patterns8.6.4.1. OR Patterns8.6.4.2. AS Patterns8.6.4.3. Literal Patterns8.6.4.4. Capture Patterns8.6.4.5. Wildcard Patterns8.6.4.6. Value Patterns8.6.4.7. Group Patterns8.6.4.8. Sequence Patterns8.6.4.9. Mapping Patterns8.6.4.10. Class Patterns8.7. Function definitions8.8. Class definitions8.9. Coroutines8.9.1. Coroutine function definition8.9.2. Theasyncforstatement8.9.3. Theasyncwithstatement8.10. Type parameter lists8.10.1. Generic functions8.10.2. Generic classes8.10.3. Generic type aliases
- 9. Top-level components9.1. Complete Python programs9.2. File input9.3. Interactive input9.4. Expression input
- 10. Full Grammar specification

- 1.1. Alternate Implementations
- 1.2. Notation

- 2.1. Line structure2.1.1. Logical lines2.1.2. Physical lines2.1.3. Comments2.1.4. Encoding declarations2.1.5. Explicit line joining2.1.6. Implicit line joining2.1.7. Blank lines2.1.8. Indentation2.1.9. Whitespace between tokens
- 2.2. Other tokens
- 2.3. Identifiers and keywords2.3.1. Keywords2.3.2. Soft Keywords2.3.3. Reserved classes of identifiers
- 2.4. Literals2.4.1. String and Bytes literals2.4.1.1. Escape sequences2.4.2. String literal concatenation2.4.3. f-strings2.4.4. Numeric literals2.4.5. Integer literals2.4.6. Floating-point literals2.4.7. Imaginary literals
- 2.5. Operators
- 2.6. Delimiters

- 2.1.1. Logical lines
- 2.1.2. Physical lines
- 2.1.3. Comments
- 2.1.4. Encoding declarations
- 2.1.5. Explicit line joining
- 2.1.6. Implicit line joining
- 2.1.7. Blank lines
- 2.1.8. Indentation
- 2.1.9. Whitespace between tokens

- 2.3.1. Keywords
- 2.3.2. Soft Keywords
- 2.3.3. Reserved classes of identifiers

- 2.4.1. String and Bytes literals2.4.1.1. Escape sequences
- 2.4.2. String literal concatenation
- 2.4.3. f-strings
- 2.4.4. Numeric literals
- 2.4.5. Integer literals
- 2.4.6. Floating-point literals
- 2.4.7. Imaginary literals

- 2.4.1.1. Escape sequences

- 3.1. Objects, values and types
- 3.2. The standard type hierarchy3.2.1. None3.2.2. NotImplemented3.2.3. Ellipsis3.2.4.numbers.Number3.2.4.1.numbers.Integral3.2.4.2.numbers.Real(float)3.2.4.3.numbers.Complex(complex)3.2.5. Sequences3.2.5.1. Immutable sequences3.2.5.2. Mutable sequences3.2.6. Set types3.2.7. Mappings3.2.7.1. Dictionaries3.2.8. Callable types3.2.8.1. User-defined functions3.2.8.1.1. Special read-only attributes3.2.8.1.2. Special writable attributes3.2.8.2. Instance methods3.2.8.3. Generator functions3.2.8.4. Coroutine functions3.2.8.5. Asynchronous generator functions3.2.8.6. Built-in functions3.2.8.7. Built-in methods3.2.8.8. Classes3.2.8.9. Class Instances3.2.9. Modules3.2.9.1. Import-related attributes on module objects3.2.9.2. Other writable attributes on module objects3.2.9.3. Module dictionaries3.2.10. Custom classes3.2.10.1. Special attributes3.2.10.2. Special methods3.2.11. Class instances3.2.11.1. Special attributes3.2.12. I/O objects (also known as file objects)3.2.13. Internal types3.2.13.1. Code objects3.2.13.1.1. Special read-only attributes3.2.13.1.2. Methods on code objects3.2.13.2. Frame objects3.2.13.2.1. Special read-only attributes3.2.13.2.2. Special writable attributes3.2.13.2.3. Frame object methods3.2.13.3. Traceback objects3.2.13.4. Slice objects3.2.13.5. Static method objects3.2.13.6. Class method objects
- 3.3. Special method names3.3.1. Basic customization3.3.2. Customizing attribute access3.3.2.1. Customizing module attribute access3.3.2.2. Implementing Descriptors3.3.2.3. Invoking Descriptors3.3.2.4. __slots__3.3.3. Customizing class creation3.3.3.1. Metaclasses3.3.3.2. Resolving MRO entries3.3.3.3. Determining the appropriate metaclass3.3.3.4. Preparing the class namespace3.3.3.5. Executing the class body3.3.3.6. Creating the class object3.3.3.7. Uses for metaclasses3.3.4. Customizing instance and subclass checks3.3.5. Emulating generic types3.3.5.1. The purpose of__class_getitem__3.3.5.2.__class_getitem__versus__getitem__3.3.6. Emulating callable objects3.3.7. Emulating container types3.3.8. Emulating numeric types3.3.9. With Statement Context Managers3.3.10. Customizing positional arguments in class pattern matching3.3.11. Emulating buffer types3.3.12. Special method lookup
- 3.4. Coroutines3.4.1. Awaitable Objects3.4.2. Coroutine Objects3.4.3. Asynchronous Iterators3.4.4. Asynchronous Context Managers

- 3.2.1. None
- 3.2.2. NotImplemented
- 3.2.3. Ellipsis
- 3.2.4.numbers.Number3.2.4.1.numbers.Integral3.2.4.2.numbers.Real(float)3.2.4.3.numbers.Complex(complex)
- 3.2.5. Sequences3.2.5.1. Immutable sequences3.2.5.2. Mutable sequences
- 3.2.6. Set types
- 3.2.7. Mappings3.2.7.1. Dictionaries
- 3.2.8. Callable types3.2.8.1. User-defined functions3.2.8.1.1. Special read-only attributes3.2.8.1.2. Special writable attributes3.2.8.2. Instance methods3.2.8.3. Generator functions3.2.8.4. Coroutine functions3.2.8.5. Asynchronous generator functions3.2.8.6. Built-in functions3.2.8.7. Built-in methods3.2.8.8. Classes3.2.8.9. Class Instances
- 3.2.9. Modules3.2.9.1. Import-related attributes on module objects3.2.9.2. Other writable attributes on module objects3.2.9.3. Module dictionaries
- 3.2.10. Custom classes3.2.10.1. Special attributes3.2.10.2. Special methods
- 3.2.11. Class instances3.2.11.1. Special attributes
- 3.2.12. I/O objects (also known as file objects)
- 3.2.13. Internal types3.2.13.1. Code objects3.2.13.1.1. Special read-only attributes3.2.13.1.2. Methods on code objects3.2.13.2. Frame objects3.2.13.2.1. Special read-only attributes3.2.13.2.2. Special writable attributes3.2.13.2.3. Frame object methods3.2.13.3. Traceback objects3.2.13.4. Slice objects3.2.13.5. Static method objects3.2.13.6. Class method objects

```
numbers.Number
```

- 3.2.4.1.numbers.Integral
- 3.2.4.2.numbers.Real(float)
- 3.2.4.3.numbers.Complex(complex)

```
numbers.Integral
```

```
numbers.Real
```

```
numbers.Complex
```

- 3.2.5.1. Immutable sequences
- 3.2.5.2. Mutable sequences

- 3.2.7.1. Dictionaries

- 3.2.8.1. User-defined functions3.2.8.1.1. Special read-only attributes3.2.8.1.2. Special writable attributes
- 3.2.8.2. Instance methods
- 3.2.8.3. Generator functions
- 3.2.8.4. Coroutine functions
- 3.2.8.5. Asynchronous generator functions
- 3.2.8.6. Built-in functions
- 3.2.8.7. Built-in methods
- 3.2.8.8. Classes
- 3.2.8.9. Class Instances

- 3.2.8.1.1. Special read-only attributes
- 3.2.8.1.2. Special writable attributes

- 3.2.9.1. Import-related attributes on module objects
- 3.2.9.2. Other writable attributes on module objects
- 3.2.9.3. Module dictionaries

- 3.2.10.1. Special attributes
- 3.2.10.2. Special methods

- 3.2.11.1. Special attributes

- 3.2.13.1. Code objects3.2.13.1.1. Special read-only attributes3.2.13.1.2. Methods on code objects
- 3.2.13.2. Frame objects3.2.13.2.1. Special read-only attributes3.2.13.2.2. Special writable attributes3.2.13.2.3. Frame object methods
- 3.2.13.3. Traceback objects
- 3.2.13.4. Slice objects
- 3.2.13.5. Static method objects
- 3.2.13.6. Class method objects

- 3.2.13.1.1. Special read-only attributes
- 3.2.13.1.2. Methods on code objects

- 3.2.13.2.1. Special read-only attributes
- 3.2.13.2.2. Special writable attributes
- 3.2.13.2.3. Frame object methods

- 3.3.1. Basic customization
- 3.3.2. Customizing attribute access3.3.2.1. Customizing module attribute access3.3.2.2. Implementing Descriptors3.3.2.3. Invoking Descriptors3.3.2.4. __slots__
- 3.3.3. Customizing class creation3.3.3.1. Metaclasses3.3.3.2. Resolving MRO entries3.3.3.3. Determining the appropriate metaclass3.3.3.4. Preparing the class namespace3.3.3.5. Executing the class body3.3.3.6. Creating the class object3.3.3.7. Uses for metaclasses
- 3.3.4. Customizing instance and subclass checks
- 3.3.5. Emulating generic types3.3.5.1. The purpose of__class_getitem__3.3.5.2.__class_getitem__versus__getitem__
- 3.3.6. Emulating callable objects
- 3.3.7. Emulating container types
- 3.3.8. Emulating numeric types
- 3.3.9. With Statement Context Managers
- 3.3.10. Customizing positional arguments in class pattern matching
- 3.3.11. Emulating buffer types
- 3.3.12. Special method lookup

- 3.3.2.1. Customizing module attribute access
- 3.3.2.2. Implementing Descriptors
- 3.3.2.3. Invoking Descriptors
- 3.3.2.4. __slots__

- 3.3.3.1. Metaclasses
- 3.3.3.2. Resolving MRO entries
- 3.3.3.3. Determining the appropriate metaclass
- 3.3.3.4. Preparing the class namespace
- 3.3.3.5. Executing the class body
- 3.3.3.6. Creating the class object
- 3.3.3.7. Uses for metaclasses

- 3.3.5.1. The purpose of__class_getitem__
- 3.3.5.2.__class_getitem__versus__getitem__

- 3.4.1. Awaitable Objects
- 3.4.2. Coroutine Objects
- 3.4.3. Asynchronous Iterators
- 3.4.4. Asynchronous Context Managers

- 4.1. Structure of a program
- 4.2. Naming and binding4.2.1. Binding of names4.2.2. Resolution of names4.2.3. Annotation scopes4.2.4. Lazy evaluation4.2.5. Builtins and restricted execution4.2.6. Interaction with dynamic features
- 4.3. Exceptions

- 4.2.1. Binding of names
- 4.2.2. Resolution of names
- 4.2.3. Annotation scopes
- 4.2.4. Lazy evaluation
- 4.2.5. Builtins and restricted execution
- 4.2.6. Interaction with dynamic features

- 5.1.importlib
- 5.2. Packages5.2.1. Regular packages5.2.2. Namespace packages
- 5.3. Searching5.3.1. The module cache5.3.2. Finders and loaders5.3.3. Import hooks5.3.4. The meta path
- 5.4. Loading5.4.1. Loaders5.4.2. Submodules5.4.3. Module specs5.4.4. __path__ attributes on modules5.4.5. Module reprs5.4.6. Cached bytecode invalidation
- 5.5. The Path Based Finder5.5.1. Path entry finders5.5.2. Path entry finder protocol
- 5.6. Replacing the standard import system
- 5.7. Package Relative Imports
- 5.8. Special considerations for __main__5.8.1. __main__.__spec__
- 5.9. References

- 5.2.1. Regular packages
- 5.2.2. Namespace packages

- 5.3.1. The module cache
- 5.3.2. Finders and loaders
- 5.3.3. Import hooks
- 5.3.4. The meta path

- 5.4.1. Loaders
- 5.4.2. Submodules
- 5.4.3. Module specs
- 5.4.4. __path__ attributes on modules
- 5.4.5. Module reprs
- 5.4.6. Cached bytecode invalidation

- 5.5.1. Path entry finders
- 5.5.2. Path entry finder protocol

- 5.8.1. __main__.__spec__

- 6.1. Arithmetic conversions
- 6.2. Atoms6.2.1. Identifiers (Names)6.2.1.1. Private name mangling6.2.2. Literals6.2.3. Parenthesized forms6.2.4. Displays for lists, sets and dictionaries6.2.5. List displays6.2.6. Set displays6.2.7. Dictionary displays6.2.8. Generator expressions6.2.9. Yield expressions6.2.9.1. Generator-iterator methods6.2.9.2. Examples6.2.9.3. Asynchronous generator functions6.2.9.4. Asynchronous generator-iterator methods
- 6.3. Primaries6.3.1. Attribute references6.3.2. Subscriptions6.3.3. Slicings6.3.4. Calls
- 6.4. Await expression
- 6.5. The power operator
- 6.6. Unary arithmetic and bitwise operations
- 6.7. Binary arithmetic operations
- 6.8. Shifting operations
- 6.9. Binary bitwise operations
- 6.10. Comparisons6.10.1. Value comparisons6.10.2. Membership test operations6.10.3. Identity comparisons
- 6.11. Boolean operations
- 6.12. Assignment expressions
- 6.13. Conditional expressions
- 6.14. Lambdas
- 6.15. Expression lists
- 6.16. Evaluation order
- 6.17. Operator precedence

- 6.2.1. Identifiers (Names)6.2.1.1. Private name mangling
- 6.2.2. Literals
- 6.2.3. Parenthesized forms
- 6.2.4. Displays for lists, sets and dictionaries
- 6.2.5. List displays
- 6.2.6. Set displays
- 6.2.7. Dictionary displays
- 6.2.8. Generator expressions
- 6.2.9. Yield expressions6.2.9.1. Generator-iterator methods6.2.9.2. Examples6.2.9.3. Asynchronous generator functions6.2.9.4. Asynchronous generator-iterator methods

- 6.2.1.1. Private name mangling

- 6.2.9.1. Generator-iterator methods
- 6.2.9.2. Examples
- 6.2.9.3. Asynchronous generator functions
- 6.2.9.4. Asynchronous generator-iterator methods

- 6.3.1. Attribute references
- 6.3.2. Subscriptions
- 6.3.3. Slicings
- 6.3.4. Calls

- 6.10.1. Value comparisons
- 6.10.2. Membership test operations
- 6.10.3. Identity comparisons

- 7.1. Expression statements
- 7.2. Assignment statements7.2.1. Augmented assignment statements7.2.2. Annotated assignment statements
- 7.3. Theassertstatement
- 7.4. Thepassstatement
- 7.5. Thedelstatement
- 7.6. Thereturnstatement
- 7.7. Theyieldstatement
- 7.8. Theraisestatement
- 7.9. Thebreakstatement
- 7.10. Thecontinuestatement
- 7.11. Theimportstatement7.11.1. Future statements
- 7.12. Theglobalstatement
- 7.13. Thenonlocalstatement
- 7.14. Thetypestatement

- 7.2.1. Augmented assignment statements
- 7.2.2. Annotated assignment statements

- 7.11.1. Future statements

- 8.1. Theifstatement
- 8.2. Thewhilestatement
- 8.3. Theforstatement
- 8.4. Thetrystatement8.4.1.exceptclause8.4.2.except*clause8.4.3.elseclause8.4.4.finallyclause
- 8.5. Thewithstatement
- 8.6. Thematchstatement8.6.1. Overview8.6.2. Guards8.6.3. Irrefutable Case Blocks8.6.4. Patterns8.6.4.1. OR Patterns8.6.4.2. AS Patterns8.6.4.3. Literal Patterns8.6.4.4. Capture Patterns8.6.4.5. Wildcard Patterns8.6.4.6. Value Patterns8.6.4.7. Group Patterns8.6.4.8. Sequence Patterns8.6.4.9. Mapping Patterns8.6.4.10. Class Patterns
- 8.7. Function definitions
- 8.8. Class definitions
- 8.9. Coroutines8.9.1. Coroutine function definition8.9.2. Theasyncforstatement8.9.3. Theasyncwithstatement
- 8.10. Type parameter lists8.10.1. Generic functions8.10.2. Generic classes8.10.3. Generic type aliases

- 8.4.1.exceptclause
- 8.4.2.except*clause
- 8.4.3.elseclause
- 8.4.4.finallyclause

- 8.6.1. Overview
- 8.6.2. Guards
- 8.6.3. Irrefutable Case Blocks
- 8.6.4. Patterns8.6.4.1. OR Patterns8.6.4.2. AS Patterns8.6.4.3. Literal Patterns8.6.4.4. Capture Patterns8.6.4.5. Wildcard Patterns8.6.4.6. Value Patterns8.6.4.7. Group Patterns8.6.4.8. Sequence Patterns8.6.4.9. Mapping Patterns8.6.4.10. Class Patterns

- 8.6.4.1. OR Patterns
- 8.6.4.2. AS Patterns
- 8.6.4.3. Literal Patterns
- 8.6.4.4. Capture Patterns
- 8.6.4.5. Wildcard Patterns
- 8.6.4.6. Value Patterns
- 8.6.4.7. Group Patterns
- 8.6.4.8. Sequence Patterns
- 8.6.4.9. Mapping Patterns
- 8.6.4.10. Class Patterns

- 8.9.1. Coroutine function definition
- 8.9.2. Theasyncforstatement
- 8.9.3. Theasyncwithstatement

- 8.10.1. Generic functions
- 8.10.2. Generic classes
- 8.10.3. Generic type aliases

- 9.1. Complete Python programs
- 9.2. File input
- 9.3. Interactive input
- 9.4. Expression input

- IntroductionNotes on availabilityWebAssembly platformsMobile platforms
- Built-in Functions
- Built-in ConstantsConstants added by thesitemodule
- Built-in TypesTruth Value TestingBoolean Operations —and,or,notComparisonsNumeric Types —int,float,complexBitwise Operations on Integer TypesAdditional Methods on Integer TypesAdditional Methods on FloatHashing of numeric typesBoolean Type -boolIterator TypesGenerator TypesSequence Types —list,tuple,rangeCommon Sequence OperationsImmutable Sequence TypesMutable Sequence TypesListsTuplesRangesText Sequence Type —strString MethodsFormatted String Literals (f-strings)printf-style String FormattingBinary Sequence Types —bytes,bytearray,memoryviewBytes ObjectsBytearray ObjectsBytes and Bytearray Operationsprintf-style Bytes FormattingMemory ViewsSet Types —set,frozensetMapping Types —dictDictionary view objectsContext Manager TypesType Annotation Types —Generic Alias,UnionGeneric Alias TypeStandard Generic ClassesSpecial Attributes ofGenericAliasobjectsUnion TypeOther Built-in TypesModulesClasses and Class InstancesFunctionsMethodsCode ObjectsType ObjectsThe Null ObjectThe Ellipsis ObjectThe NotImplemented ObjectInternal ObjectsSpecial AttributesInteger string conversion length limitationAffected APIsConfiguring the limitRecommended configuration
- Built-in ExceptionsException contextInheriting from built-in exceptionsBase classesConcrete exceptionsOS exceptionsWarningsException groupsException hierarchy
- Text Processing Servicesstring— Common string operationsString constantsCustom String FormattingFormat String SyntaxFormat Specification Mini-LanguageFormat examplesTemplate stringsHelper functionsre— Regular expression operationsRegular Expression SyntaxModule ContentsFlagsFunctionsExceptionsRegular Expression ObjectsMatch ObjectsRegular Expression ExamplesChecking for a PairSimulating scanf()search() vs. match()Making a PhonebookText MungingFinding all AdverbsFinding all Adverbs and their PositionsRaw String NotationWriting a Tokenizerdifflib— Helpers for computing deltasSequenceMatcher ObjectsSequenceMatcher ExamplesDiffer ObjectsDiffer ExampleA command-line interface to difflibndiff exampletextwrap— Text wrapping and fillingunicodedata— Unicode Databasestringprep— Internet String Preparationreadline— GNU readline interfaceInit fileLine bufferHistory fileHistory listStartup hooksCompletionExamplerlcompleter— Completion function for GNU readline
- Binary Data Servicesstruct— Interpret bytes as packed binary dataFunctions and ExceptionsFormat StringsByte Order, Size, and AlignmentFormat CharactersExamplesApplicationsNative FormatsStandard FormatsClassescodecs— Codec registry and base classesCodec Base ClassesError HandlersStateless Encoding and DecodingIncremental Encoding and DecodingIncrementalEncoder ObjectsIncrementalDecoder ObjectsStream Encoding and DecodingStreamWriter ObjectsStreamReader ObjectsStreamReaderWriter ObjectsStreamRecoder ObjectsEncodings and UnicodeStandard EncodingsPython Specific EncodingsText EncodingsBinary TransformsText Transformsencodings.idna— Internationalized Domain Names in Applicationsencodings.mbcs— Windows ANSI codepageencodings.utf_8_sig— UTF-8 codec with BOM signature
- Data Typesdatetime— Basic date and time typesAware and Naive ObjectsConstantsAvailable TypesCommon PropertiesDetermining if an Object is Aware or NaivetimedeltaObjectsExamples of usage:timedeltadateObjectsExamples of Usage:datedatetimeObjectsExamples of Usage:datetimetimeObjectsExamples of Usage:timetzinfoObjectstimezoneObjectsstrftime()andstrptime()Behaviorstrftime()andstrptime()Format CodesTechnical Detailzoneinfo— IANA time zone supportUsingZoneInfoData sourcesConfiguring the data sourcesCompile-time configurationEnvironment configurationRuntime configurationTheZoneInfoclassString representationsPickle serializationFunctionsGlobalsExceptions and warningscalendar— General calendar-related functionsCommand-Line Usagecollections— Container datatypesChainMapobjectsChainMapExamples and RecipesCounterobjectsdequeobjectsdequeRecipesdefaultdictobjectsdefaultdictExamplesnamedtuple()Factory Function for Tuples with Named FieldsOrderedDictobjectsOrderedDictExamples and RecipesUserDictobjectsUserListobjectsUserStringobjectscollections.abc— Abstract Base Classes for ContainersCollections Abstract Base ClassesCollections Abstract Base Classes – Detailed DescriptionsExamples and Recipesheapq— Heap queue algorithmBasic ExamplesPriority Queue Implementation NotesTheorybisect— Array bisection algorithmPerformance NotesSearching Sorted ListsExamplesarray— Efficient arrays of numeric valuesweakref— Weak referencesWeak Reference ObjectsExampleFinalizer ObjectsComparing finalizers with__del__()methodstypes— Dynamic type creation and names for built-in typesDynamic Type CreationStandard Interpreter TypesAdditional Utility Classes and FunctionsCoroutine Utility Functionscopy— Shallow and deep copy operationspprint— Data pretty printerFunctionsPrettyPrinter ObjectsExamplereprlib— Alternaterepr()implementationRepr ObjectsSubclassing Repr Objectsenum— Support for enumerationsModule ContentsData TypesSupported__dunder__namesSupported_sunder_namesUtilities and DecoratorsNotesgraphlib— Functionality to operate with graph-like structuresExceptions
- Numeric and Mathematical Modulesnumbers— Numeric abstract base classesThe numeric towerNotes for type implementersAdding More Numeric ABCsImplementing the arithmetic operationsmath— Mathematical functionsNumber-theoretic functionsFloating point arithmeticFloating point manipulation functionsPower, exponential and logarithmic functionsSummation and product functionsAngular conversionTrigonometric functionsHyperbolic functionsSpecial functionsConstantscmath— Mathematical functions for complex numbersConversions to and from polar coordinatesPower and logarithmic functionsTrigonometric functionsHyperbolic functionsClassification functionsConstantsdecimal— Decimal fixed-point and floating-point arithmeticQuick-start TutorialDecimal objectsLogical operandsContext objectsConstantsRounding modesSignalsFloating-Point NotesMitigating round-off error with increased precisionSpecial valuesWorking with threadsRecipesDecimal FAQfractions— Rational numbersrandom— Generate pseudo-random numbersBookkeeping functionsFunctions for bytesFunctions for integersFunctions for sequencesDiscrete distributionsReal-valued distributionsAlternative GeneratorNotes on ReproducibilityExamplesRecipesCommand-line usageCommand-line examplestatistics— Mathematical statistics functionsAverages and measures of central locationMeasures of spreadStatistics for relations between two inputsFunction detailsExceptionsNormalDistobjectsExamples and RecipesClassic probability problemsMonte Carlo inputs for simulationsApproximating binomial distributionsNaive bayesian classifier
- Functional Programming Modulesitertools— Functions creating iterators for efficient loopingItertool FunctionsItertools Recipesfunctools— Higher-order functions and operations on callable objectspartialObjectsoperator— Standard operators as functionsMapping Operators to FunctionsIn-place Operators
- File and Directory Accesspathlib— Object-oriented filesystem pathsBasic useExceptionsPure pathsGeneral propertiesOperatorsAccessing individual partsMethods and propertiesConcrete pathsParsing and generating URIsExpanding and resolving pathsQuerying file type and statusReading and writing filesReading directoriesCreating files and directoriesRenaming and deletingPermissions and ownershipPattern languageComparison to theglobmoduleComparison to theosandos.pathmodulesCorresponding toolsos.path— Common pathname manipulationsstat— Interpretingstat()resultsfilecmp— File and Directory ComparisonsThedircmpclasstempfile— Generate temporary files and directoriesExamplesDeprecated functions and variablesglob— Unix style pathname pattern expansionExamplesfnmatch— Unix filename pattern matchinglinecache— Random access to text linesshutil— High-level file operationsDirectory and files operationsPlatform-dependent efficient copy operationscopytree examplermtree exampleArchiving operationsArchiving exampleArchiving example withbase_dirQuerying the size of the output terminal
- Data Persistencepickle— Python object serializationRelationship to other Python modulesComparison withmarshalComparison withjsonData stream formatModule InterfaceWhat can be pickled and unpickled?Pickling Class InstancesPersistence of External ObjectsDispatch TablesHandling Stateful ObjectsCustom Reduction for Types, Functions, and Other ObjectsOut-of-band BuffersProvider APIConsumer APIExampleRestricting GlobalsPerformanceExamplescopyreg— Registerpicklesupport functionsExampleshelve— Python object persistenceRestrictionsExamplemarshal— Internal Python object serializationdbm— Interfaces to Unix “databases”dbm.sqlite3— SQLite backend for dbmdbm.gnu— GNU database managerdbm.ndbm— New Database Managerdbm.dumb— Portable DBM implementationsqlite3— DB-API 2.0 interface for SQLite databasesTutorialReferenceModule functionsModule constantsConnection objectsCursor objectsRow objectsBlob objectsPrepareProtocol objectsExceptionsSQLite and Python typesDefault adapters and converters (deprecated)Command-line interfaceHow-to guidesHow to use placeholders to bind values in SQL queriesHow to adapt custom Python types to SQLite valuesHow to write adaptable objectsHow to register adapter callablesHow to convert SQLite values to custom Python typesAdapter and converter recipesHow to use connection shortcut methodsHow to use the connection context managerHow to work with SQLite URIsHow to create and use row factoriesHow to handle non-UTF-8 text encodingsExplanationTransaction controlTransaction control via theautocommitattributeTransaction control via theisolation_levelattribute
- Data Compression and Archivingzlib— Compression compatible withgzipgzip— Support forgzipfilesExamples of usageCommand Line InterfaceCommand line optionsbz2— Support forbzip2compression(De)compression of filesIncremental (de)compressionOne-shot (de)compressionExamples of usagelzma— Compression using the LZMA algorithmReading and writing compressed filesCompressing and decompressing data in memoryMiscellaneousSpecifying custom filter chainsExampleszipfile— Work with ZIP archivesZipFile ObjectsPath ObjectsPyZipFile ObjectsZipInfo ObjectsCommand-Line InterfaceCommand-line optionsDecompression pitfallsFrom file itselfFile System limitationsResources limitationsInterruptionDefault behaviors of extractiontarfile— Read and write tar archive filesTarFile ObjectsTarInfo ObjectsExtraction filtersDefault named filtersFilter errorsHints for further verificationSupporting older Python versionsStateful extraction filter exampleCommand-Line InterfaceCommand-line optionsExamplesSupported tar formatsUnicode issues
- File Formatscsv— CSV File Reading and WritingModule ContentsDialects and Formatting ParametersReader ObjectsWriter ObjectsExamplesconfigparser— Configuration file parserQuick StartSupported DatatypesFallback ValuesSupported INI File StructureUnnamed SectionsInterpolation of valuesMapping Protocol AccessCustomizing Parser BehaviourLegacy API ExamplesConfigParser ObjectsRawConfigParser ObjectsExceptionstomllib— Parse TOML filesExamplesConversion Tablenetrc— netrc file processingnetrc Objectsplistlib— Generate and parse Apple.plistfilesExamples
- Cryptographic Serviceshashlib— Secure hashes and message digestsHash algorithmsUsageConstructorsAttributesHash ObjectsSHAKE variable length digestsFile hashingKey derivationBLAKE2Creating hash objectsConstantsExamplesSimple hashingUsing different digest sizesKeyed hashingRandomized hashingPersonalizationTree modeCreditshmac— Keyed-Hashing for Message Authenticationsecrets— Generate secure random numbers for managing secretsRandom numbersGenerating tokensHow many bytes should tokens use?Other functionsRecipes and best practices
- Generic Operating System Servicesos— Miscellaneous operating system interfacesFile Names, Command Line Arguments, and Environment VariablesPython UTF-8 ModeProcess ParametersFile Object CreationFile Descriptor OperationsQuerying the size of a terminalInheritance of File DescriptorsFiles and DirectoriesTimer File DescriptorsLinux extended attributesProcess ManagementInterface to the schedulerMiscellaneous System InformationRandom numbersio— Core tools for working with streamsOverviewText I/OBinary I/ORaw I/OText EncodingOpt-in EncodingWarningHigh-level Module InterfaceClass hierarchyI/O Base ClassesRaw File I/OBuffered StreamsText I/OPerformanceBinary I/OText I/OMulti-threadingReentrancytime— Time access and conversionsFunctionsClock ID ConstantsTimezone Constantslogging— Logging facility for PythonLogger ObjectsLogging LevelsHandler ObjectsFormatter ObjectsFilter ObjectsLogRecord ObjectsLogRecord attributesLoggerAdapter ObjectsThread SafetyModule-Level FunctionsModule-Level AttributesIntegration with the warnings modulelogging.config— Logging configurationConfiguration functionsSecurity considerationsConfiguration dictionary schemaDictionary Schema DetailsIncremental ConfigurationObject connectionsUser-defined objectsHandler configuration orderAccess to external objectsAccess to internal objectsImport resolution and custom importersConfiguring QueueHandler and QueueListenerConfiguration file formatlogging.handlers— Logging handlersStreamHandlerFileHandlerNullHandlerWatchedFileHandlerBaseRotatingHandlerRotatingFileHandlerTimedRotatingFileHandlerSocketHandlerDatagramHandlerSysLogHandlerNTEventLogHandlerSMTPHandlerMemoryHandlerHTTPHandlerQueueHandlerQueueListenerplatform—  Access to underlying platform’s identifying dataCross PlatformJava PlatformWindows PlatformmacOS PlatformiOS PlatformUnix PlatformsLinux PlatformsAndroid Platformerrno— Standard errno system symbolsctypes— A foreign function library for Pythonctypes tutorialLoading dynamic link librariesAccessing functions from loaded dllsCalling functionsFundamental data typesCalling functions, continuedCalling variadic functionsCalling functions with your own custom data typesSpecifying the required argument types (function prototypes)Return typesPassing pointers (or: passing parameters by reference)Structures and unionsStructure/union alignment and byte orderBit fields in structures and unionsArraysPointersType conversionsIncomplete TypesCallback functionsAccessing values exported from dllsSurprisesVariable-sized data typesctypes referenceFinding shared librariesLoading shared librariesForeign functionsFunction prototypesUtility functionsData typesFundamental data typesStructured data typesArrays and pointers
- Command Line Interface Librariesargparse— Parser for command-line options, arguments and subcommandsArgumentParser objectsprogusagedescriptionepilogparentsformatter_classprefix_charsfromfile_prefix_charsargument_defaultallow_abbrevconflict_handleradd_helpexit_on_errorThe add_argument() methodname or flagsactionnargsconstdefaulttypechoicesrequiredhelpmetavardestdeprecatedAction classesThe parse_args() methodOption value syntaxInvalid argumentsArguments containing-Argument abbreviations (prefix matching)Beyondsys.argvThe Namespace objectOther utilitiesSub-commandsFileType objectsArgument groupsMutual exclusionParser defaultsPrinting helpPartial parsingCustomizing file parsingExiting methodsIntermixed parsingRegistering custom types or actionsExceptionsArgparse TutorialConceptsThe basicsIntroducing Positional argumentsIntroducing Optional argumentsShort optionsCombining Positional and Optional argumentsGetting a little more advancedSpecifying ambiguous argumentsConflicting optionsHow to translate the argparse outputCustom type convertersConclusionMigratingoptparsecode toargparseoptparse— Parser for command line optionsChoosing an argument parsing libraryIntroductionBackgroundTerminologyWhat are options for?What are positional arguments for?TutorialUnderstanding option actionsThe store actionHandling boolean (flag) optionsOther actionsDefault valuesGenerating helpGrouping OptionsPrinting a version stringHowoptparsehandles errorsPutting it all togetherReference GuideCreating the parserPopulating the parserDefining optionsOption attributesStandard option actionsStandard option typesParsing argumentsQuerying and manipulating your option parserConflicts between optionsCleanupOther methodsOption CallbacksDefining a callback optionHow callbacks are calledRaising errors in a callbackCallback example 1: trivial callbackCallback example 2: check option orderCallback example 3: check option order (generalized)Callback example 4: check arbitrary conditionCallback example 5: fixed argumentsCallback example 6: variable argumentsExtendingoptparseAdding new typesAdding new actionsExceptionsgetpass— Portable password inputfileinput— Iterate over lines from multiple input streamscurses— Terminal handling for character-cell displaysFunctionsWindow ObjectsConstantscurses.textpad— Text input widget for curses programsTextbox objectscurses.ascii— Utilities for ASCII characterscurses.panel— A panel stack extension for cursesFunctionsPanel Objects
- Concurrent Executionthreading— Thread-based parallelismThread-Local DataThread ObjectsLock ObjectsRLock ObjectsCondition ObjectsSemaphore ObjectsSemaphoreExampleEvent ObjectsTimer ObjectsBarrier ObjectsUsing locks, conditions, and semaphores in thewithstatementmultiprocessing— Process-based parallelismIntroductionTheProcessclassContexts and start methodsExchanging objects between processesSynchronization between processesSharing state between processesUsing a pool of workersReferenceProcessand exceptionsPipes and QueuesMiscellaneousConnection ObjectsSynchronization primitivesSharedctypesObjectsThemultiprocessing.sharedctypesmoduleManagersCustomized managersUsing a remote managerProxy ObjectsCleanupProcess PoolsListeners and ClientsAddress FormatsAuthentication keysLoggingThemultiprocessing.dummymoduleProgramming guidelinesAll start methodsThespawnandforkserverstart methodsExamplesmultiprocessing.shared_memory— Shared memory for direct access across processesTheconcurrentpackageconcurrent.futures— Launching parallel tasksExecutor ObjectsThreadPoolExecutorThreadPoolExecutor ExampleProcessPoolExecutorProcessPoolExecutor ExampleFuture ObjectsModule FunctionsException classessubprocess— Subprocess managementUsing thesubprocessModuleFrequently Used ArgumentsPopen ConstructorExceptionsSecurity ConsiderationsPopen ObjectsWindows Popen HelpersWindows ConstantsOlder high-level APIReplacing Older Functions with thesubprocessModuleReplacing/bin/shshell command substitutionReplacing shell pipelineReplacingos.system()Replacing theos.spawnfamilyReplacingos.popen(),os.popen2(),os.popen3()Replacing functions from thepopen2moduleLegacy Shell Invocation FunctionsNotesConverting an argument sequence to a string on WindowsDisabling use ofvfork()orposix_spawn()sched— Event schedulerScheduler Objectsqueue— A synchronized queue classQueue ObjectsTerminating queuesSimpleQueue Objectscontextvars— Context VariablesContext VariablesManual Context Managementasyncio support_thread— Low-level threading API
- Networking and Interprocess Communicationasyncio— Asynchronous I/ORunnersRunning an asyncio ProgramRunner context managerHandling Keyboard InterruptionCoroutines and TasksCoroutinesAwaitablesCreating TasksTask CancellationTask GroupsTerminating a Task GroupSleepingRunning Tasks ConcurrentlyEager Task FactoryShielding From CancellationTimeoutsWaiting PrimitivesRunning in ThreadsScheduling From Other ThreadsIntrospectionTask ObjectStreamsStreamReaderStreamWriterExamplesTCP echo client using streamsTCP echo server using streamsGet HTTP headersRegister an open socket to wait for data using streamsSynchronization PrimitivesLockEventConditionSemaphoreBoundedSemaphoreBarrierSubprocessesCreating SubprocessesConstantsInteracting with SubprocessesSubprocess and ThreadsExamplesQueuesQueuePriority QueueLIFO QueueExceptionsExamplesExceptionsEvent LoopEvent Loop MethodsRunning and stopping the loopScheduling callbacksScheduling delayed callbacksCreating Futures and TasksOpening network connectionsCreating network serversTransferring filesTLS UpgradeWatching file descriptorsWorking with socket objects directlyDNSWorking with pipesUnix signalsExecuting code in thread or process poolsError Handling APIEnabling debug modeRunning SubprocessesCallback HandlesServer ObjectsEvent Loop ImplementationsExamplesHello World with call_soon()Display the current date with call_later()Watch a file descriptor for read eventsSet signal handlers for SIGINT and SIGTERMFuturesFuture FunctionsFuture ObjectTransports and ProtocolsTransportsTransports HierarchyBase TransportRead-only TransportsWrite-only TransportsDatagram TransportsSubprocess TransportsProtocolsBase ProtocolsBase ProtocolStreaming ProtocolsBuffered Streaming ProtocolsDatagram ProtocolsSubprocess ProtocolsExamplesTCP Echo ServerTCP Echo ClientUDP Echo ServerUDP Echo ClientConnecting Existing Socketsloop.subprocess_exec() and SubprocessProtocolPoliciesGetting and Setting the PolicyPolicy ObjectsProcess WatchersCustom PoliciesPlatform SupportAll PlatformsWindowsSubprocess Support on WindowsmacOSExtendingWriting a Custom Event LoopFuture and Task private constructorsTask lifetime supportHigh-level API IndexTasksQueuesSubprocessesStreamsSynchronizationExceptionsLow-level API IndexObtaining the Event LoopEvent Loop MethodsTransportsProtocolsEvent Loop PoliciesDeveloping with asyncioDebug ModeConcurrency and MultithreadingRunning Blocking CodeLoggingDetect never-awaited coroutinesDetect never-retrieved exceptionssocket— Low-level networking interfaceSocket familiesModule contentsExceptionsConstantsFunctionsCreating socketsOther functionsSocket ObjectsNotes on socket timeoutsTimeouts and theconnectmethodTimeouts and theacceptmethodExamplessl— TLS/SSL wrapper for socket objectsFunctions, Constants, and ExceptionsSocket creationContext creationExceptionsRandom generationCertificate handlingConstantsSSL SocketsSSL ContextsCertificatesCertificate chainsCA certificatesCombined key and certificateSelf-signed certificatesExamplesTesting for SSL supportClient-side operationServer-side operationNotes on non-blocking socketsMemory BIO SupportSSL sessionSecurity considerationsBest defaultsManual settingsVerifying certificatesProtocol versionsCipher selectionMulti-processingTLS 1.3select— Waiting for I/O completion/dev/pollPolling ObjectsEdge and Level Trigger Polling (epoll) ObjectsPolling ObjectsKqueue ObjectsKevent Objectsselectors— High-level I/O multiplexingIntroductionClassesExamplessignal— Set handlers for asynchronous eventsGeneral rulesExecution of Python signal handlersSignals and threadsModule contentsExamplesNote on SIGPIPENote on Signal Handlers and Exceptionsmmap— Memory-mapped file supportMADV_* ConstantsMAP_* Constants
- Internet Data Handlingemail— An email and MIME handling packageemail.message: Representing an email messageemail.parser: Parsing email messagesFeedParser APIParser APIAdditional notesemail.generator: Generating MIME documentsemail.policy: Policy Objectsemail.errors: Exception and Defect classesemail.headerregistry: Custom Header Objectsemail.contentmanager: Managing MIME ContentContent Manager Instancesemail: Examplesemail.message.Message: Representing an email message using thecompat32APIemail.mime: Creating email and MIME objects from scratchemail.header: Internationalized headersemail.charset: Representing character setsemail.encoders: Encodersemail.utils: Miscellaneous utilitiesemail.iterators: Iteratorsjson— JSON encoder and decoderBasic UsageEncoders and DecodersExceptionsStandard Compliance and InteroperabilityCharacter EncodingsInfinite and NaN Number ValuesRepeated Names Within an ObjectTop-level Non-Object, Non-Array ValuesImplementation LimitationsCommand Line InterfaceCommand line optionsmailbox— Manipulate mailboxes in various formatsMailboxobjectsMaildirobjectsmboxobjectsMHobjectsBabylobjectsMMDFobjectsMessageobjectsMaildirMessageobjectsmboxMessageobjectsMHMessageobjectsBabylMessageobjectsMMDFMessageobjectsExceptionsExamplesmimetypes— Map filenames to MIME typesMimeTypes Objectsbase64— Base16, Base32, Base64, Base85 Data EncodingsSecurity Considerationsbinascii— Convert between binary and ASCIIquopri— Encode and decode MIME quoted-printable data
- Structured Markup Processing Toolshtml— HyperText Markup Language supporthtml.parser— Simple HTML and XHTML parserExample HTML Parser ApplicationHTMLParserMethodsExampleshtml.entities— Definitions of HTML general entitiesXML Processing ModulesXML vulnerabilitiesThedefusedxmlPackagexml.etree.ElementTree— The ElementTree XML APITutorialXML tree and elementsParsing XMLPull API for non-blocking parsingFinding interesting elementsModifying an XML FileBuilding XML documentsParsing XML with NamespacesXPath supportExampleSupported XPath syntaxReferenceFunctionsXInclude supportExampleReferenceFunctionsElement ObjectsElementTree ObjectsQName ObjectsTreeBuilder ObjectsXMLParser ObjectsXMLPullParser ObjectsExceptionsxml.dom— The Document Object Model APIModule ContentsObjects in the DOMDOMImplementation ObjectsNode ObjectsNodeList ObjectsDocumentType ObjectsDocument ObjectsElement ObjectsAttr ObjectsNamedNodeMap ObjectsComment ObjectsText and CDATASection ObjectsProcessingInstruction ObjectsExceptionsConformanceType MappingAccessor Methodsxml.dom.minidom— Minimal DOM implementationDOM ObjectsDOM Exampleminidom and the DOM standardxml.dom.pulldom— Support for building partial DOM treesDOMEventStream Objectsxml.sax— Support for SAX2 parsersSAXException Objectsxml.sax.handler— Base classes for SAX handlersContentHandler ObjectsDTDHandler ObjectsEntityResolver ObjectsErrorHandler ObjectsLexicalHandler Objectsxml.sax.saxutils— SAX Utilitiesxml.sax.xmlreader— Interface for XML parsersXMLReader ObjectsIncrementalParser ObjectsLocator ObjectsInputSource ObjectsTheAttributesInterfaceTheAttributesNSInterfacexml.parsers.expat— Fast XML parsing using ExpatXMLParser ObjectsExpatError ExceptionsExampleContent Model DescriptionsExpat error constants
- Internet Protocols and Supportwebbrowser— Convenient web-browser controllerBrowser Controller Objectswsgiref— WSGI Utilities and Reference Implementationwsgiref.util– WSGI environment utilitieswsgiref.headers– WSGI response header toolswsgiref.simple_server– a simple WSGI HTTP serverwsgiref.validate— WSGI conformance checkerwsgiref.handlers– server/gateway base classeswsgiref.types– WSGI types for static type checkingExamplesurllib— URL handling modulesurllib.request— Extensible library for opening URLsRequest ObjectsOpenerDirector ObjectsBaseHandler ObjectsHTTPRedirectHandler ObjectsHTTPCookieProcessor ObjectsProxyHandler ObjectsHTTPPasswordMgr ObjectsHTTPPasswordMgrWithPriorAuth ObjectsAbstractBasicAuthHandler ObjectsHTTPBasicAuthHandler ObjectsProxyBasicAuthHandler ObjectsAbstractDigestAuthHandler ObjectsHTTPDigestAuthHandler ObjectsProxyDigestAuthHandler ObjectsHTTPHandler ObjectsHTTPSHandler ObjectsFileHandler ObjectsDataHandler ObjectsFTPHandler ObjectsCacheFTPHandler ObjectsUnknownHandler ObjectsHTTPErrorProcessor ObjectsExamplesLegacy interfaceurllib.requestRestrictionsurllib.response— Response classes used by urlliburllib.parse— Parse URLs into componentsURL ParsingURL parsing securityParsing ASCII Encoded BytesStructured Parse ResultsURL Quotingurllib.error— Exception classes raised by urllib.requesturllib.robotparser—  Parser for robots.txthttp— HTTP modulesHTTP status codesHTTP status categoryHTTP methodshttp.client— HTTP protocol clientHTTPConnection ObjectsHTTPResponse ObjectsExamplesHTTPMessage Objectsftplib— FTP protocol clientReferenceFTP objectsFTP_TLS objectsModule variablespoplib— POP3 protocol clientPOP3 ObjectsPOP3 Exampleimaplib— IMAP4 protocol clientIMAP4 ObjectsIMAP4 Examplesmtplib— SMTP protocol clientSMTP ObjectsSMTP Exampleuuid— UUID objects according toRFC 4122Command-Line UsageExampleCommand-Line Examplesocketserver— A framework for network serversServer Creation NotesServer ObjectsRequest Handler ObjectsExamplessocketserver.TCPServerExamplesocketserver.UDPServerExampleAsynchronous Mixinshttp.server— HTTP serversCommand-line interfaceSecurity considerationshttp.cookies— HTTP state managementCookie ObjectsMorsel ObjectsExamplehttp.cookiejar— Cookie handling for HTTP clientsCookieJar and FileCookieJar ObjectsFileCookieJar subclasses and co-operation with web browsersCookiePolicy ObjectsDefaultCookiePolicy ObjectsCookie ObjectsExamplesxmlrpc— XMLRPC server and client modulesxmlrpc.client— XML-RPC client accessServerProxy ObjectsDateTime ObjectsBinary ObjectsFault ObjectsProtocolError ObjectsMultiCall ObjectsConvenience FunctionsExample of Client UsageExample of Client and Server Usagexmlrpc.server— Basic XML-RPC serversSimpleXMLRPCServer ObjectsSimpleXMLRPCServer ExampleCGIXMLRPCRequestHandlerDocumenting XMLRPC serverDocXMLRPCServer ObjectsDocCGIXMLRPCRequestHandleripaddress— IPv4/IPv6 manipulation libraryConvenience factory functionsIP AddressesAddress objectsConversion to Strings and IntegersOperatorsComparison operatorsArithmetic operatorsIP Network definitionsPrefix, net mask and host maskNetwork objectsOperatorsLogical operatorsIterationNetworks as containers of addressesInterface objectsOperatorsLogical operatorsOther Module Level FunctionsCustom Exceptions
- Multimedia Serviceswave— Read and write WAV filesWave_read ObjectsWave_write Objectscolorsys— Conversions between color systems
- Internationalizationgettext— Multilingual internationalization servicesGNUgettextAPIClass-based APITheNullTranslationsclassTheGNUTranslationsclassSolaris message catalog supportThe Catalog constructorInternationalizing your programs and modulesLocalizing your moduleLocalizing your applicationChanging languages on the flyDeferred translationsAcknowledgementslocale— Internationalization servicesBackground, details, hints, tips and caveatsFor extension writers and programs that embed PythonAccess to message catalogs
- Program Frameworksturtle— Turtle graphicsIntroductionGet startedTutorialStarting a turtle environmentBasic drawingPen controlThe turtle’s positionMaking algorithmic patternsHow to…Get started as quickly as possibleUse theturtlemodule namespaceUse turtle graphics in a scriptUse object-oriented turtle graphicsTurtle graphics referenceTurtle methodsMethods of TurtleScreen/ScreenMethods of RawTurtle/Turtle and corresponding functionsTurtle motionTell Turtle’s stateSettings for measurementPen controlDrawing stateColor controlFillingMore drawing controlTurtle stateVisibilityAppearanceUsing eventsSpecial Turtle methodsCompound shapesMethods of TurtleScreen/Screen and corresponding functionsWindow controlAnimation controlUsing screen eventsInput methodsSettings and special methodsMethods specific to Screen, not inherited from TurtleScreenPublic classesExplanationHelp and configurationHow to use helpTranslation of docstrings into different languagesHow to configure Screen and Turtlesturtledemo— Demo scriptsChanges since Python 2.6Changes since Python 3.0cmd— Support for line-oriented command interpretersCmd ObjectsCmd Exampleshlex— Simple lexical analysisshlex ObjectsParsing RulesImproved Compatibility with Shells
- Graphical User Interfaces with Tktkinter— Python interface to Tcl/TkArchitectureTkinter ModulesTkinter Life PreserverA Hello World ProgramImportant Tk ConceptsUnderstanding How Tkinter Wraps Tcl/TkHow do I…? What option does…?Navigating the Tcl/Tk Reference ManualThreading modelHandy ReferenceSetting OptionsThe PackerPacker OptionsCoupling Widget VariablesThe Window ManagerTk Option Data TypesBindings and EventsThe index ParameterImagesFile Handlerstkinter.colorchooser— Color choosing dialogtkinter.font— Tkinter font wrapperTkinter Dialogstkinter.simpledialog— Standard Tkinter input dialogstkinter.filedialog— File selection dialogsNative Load/Save Dialogstkinter.commondialog— Dialog window templatestkinter.messagebox— Tkinter message promptstkinter.scrolledtext— Scrolled Text Widgettkinter.dnd— Drag and drop supporttkinter.ttk— Tk themed widgetsUsing TtkTtk WidgetsWidgetStandard OptionsScrollable Widget OptionsLabel OptionsCompatibility OptionsWidget Statesttk.WidgetComboboxOptionsVirtual eventsttk.ComboboxSpinboxOptionsVirtual eventsttk.SpinboxNotebookOptionsTab OptionsTab IdentifiersVirtual Eventsttk.NotebookProgressbarOptionsttk.ProgressbarSeparatorOptionsSizegripPlatform-specific notesBugsTreeviewOptionsItem OptionsTag OptionsColumn IdentifiersVirtual Eventsttk.TreeviewTtk StylingLayoutsIDLE — Python editor and shellMenusFile menu (Shell and Editor)Edit menu (Shell and Editor)Format menu (Editor window only)Run menu (Editor window only)Shell menu (Shell window only)Debug menu (Shell window only)Options menu (Shell and Editor)Window menu (Shell and Editor)Help menu (Shell and Editor)Context menusEditing and NavigationEditor windowsKey bindingsAutomatic indentationSearch and ReplaceCompletionsCalltipsCode ContextShell windowText colorsStartup and Code ExecutionCommand line usageStartup failureRunning user codeUser output in ShellDeveloping tkinter applicationsRunning without a subprocessHelp and PreferencesHelp sourcesSetting preferencesIDLE on macOSExtensionsidlelib — implementation of IDLE application
- Development Toolstyping— Support for type hintsSpecification for the Python Type SystemType aliasesNewTypeAnnotating callable objectsGenericsAnnotating tuplesThe type of class objectsAnnotating generators and coroutinesUser-defined generic typesTheAnytypeNominal vs structural subtypingModule contentsSpecial typing primitivesSpecial typesSpecial formsBuilding generic types and type aliasesOther special directivesProtocolsABCs for working with IOFunctions and decoratorsIntrospection helpersConstantDeprecated aliasesAliases to built-in typesAliases to types incollectionsAliases to other concrete typesAliases to container ABCs incollections.abcAliases to asynchronous ABCs incollections.abcAliases to other ABCs incollections.abcAliases tocontextlibABCsDeprecation Timeline of Major Featurespydoc— Documentation generator and online help systemPython Development ModeEffects of the Python Development ModeResourceWarning ExampleBad file descriptor error exampledoctest— Test interactive Python examplesSimple Usage: Checking Examples in DocstringsSimple Usage: Checking Examples in a Text FileCommand-line UsageHow It WorksWhich Docstrings Are Examined?How are Docstring Examples Recognized?What’s the Execution Context?What About Exceptions?Option FlagsDirectivesWarningsBasic APIUnittest APIAdvanced APIDocTest ObjectsExample ObjectsDocTestFinder objectsDocTestParser objectsTestResults objectsDocTestRunner objectsOutputChecker objectsDebuggingSoapboxunittest— Unit testing frameworkBasic exampleCommand-Line InterfaceCommand-line optionsTest DiscoveryOrganizing test codeRe-using old test codeSkipping tests and expected failuresDistinguishing test iterations using subtestsClasses and functionsTest casesGrouping testsLoading and running testsload_tests ProtocolClass and Module FixturessetUpClass and tearDownClasssetUpModule and tearDownModuleSignal Handlingunittest.mock— mock object libraryQuick GuideThe Mock ClassCallingDeleting AttributesMock names and the name attributeAttaching Mocks as AttributesThe patcherspatchpatch.objectpatch.dictpatch.multiplepatch methods: start and stoppatch builtinsTEST_PREFIXNesting Patch DecoratorsWhere to patchPatching Descriptors and Proxy ObjectsMagicMock and magic method supportMocking Magic MethodsMagic MockHelperssentinelDEFAULTcallcreate_autospecANYFILTER_DIRmock_openAutospeccingSealing mocksOrder of precedence ofside_effect,return_valueandwrapsunittest.mock— getting startedUsing MockMock Patching MethodsMock for Method Calls on an ObjectMocking ClassesNaming your mocksTracking all CallsSetting Return Values and AttributesRaising exceptions with mocksSide effect functions and iterablesMocking asynchronous iteratorsMocking asynchronous context managerCreating a Mock from an Existing ObjectUsing side_effect to return per file contentPatch DecoratorsFurther ExamplesMocking chained callsPartial mockingMocking a Generator MethodApplying the same patch to every test methodMocking Unbound MethodsChecking multiple calls with mockCoping with mutable argumentsNesting PatchesMocking a dictionary with MagicMockMock subclasses and their attributesMocking imports with patch.dictTracking order of calls and less verbose call assertionsMore complex argument matchingtest— Regression tests package for PythonWriting Unit Tests for thetestpackageRunning tests using the command-line interfacetest.support— Utilities for the Python test suitetest.support.socket_helper— Utilities for socket teststest.support.script_helper— Utilities for the Python execution teststest.support.bytecode_helper— Support tools for testing correct bytecode generationtest.support.threading_helper— Utilities for threading teststest.support.os_helper— Utilities for os teststest.support.import_helper— Utilities for import teststest.support.warnings_helper— Utilities for warnings tests
- Debugging and ProfilingAudit events tablebdb— Debugger frameworkfaulthandler— Dump the Python tracebackDumping the tracebackFault handler stateDumping the tracebacks after a timeoutDumping the traceback on a user signalIssue with file descriptorsExamplepdb— The Python DebuggerDebugger CommandsThe Python ProfilersIntroduction to the profilersInstant User’s ManualprofileandcProfileModule ReferenceTheStatsClassWhat Is Deterministic Profiling?LimitationsCalibrationUsing a custom timertimeit— Measure execution time of small code snippetsBasic ExamplesPython InterfaceCommand-Line InterfaceExamplestrace— Trace or track Python statement executionCommand-Line UsageMain optionsModifiersFiltersProgrammatic Interfacetracemalloc— Trace memory allocationsExamplesDisplay the top 10Compute differencesGet the traceback of a memory blockPretty topRecord the current and peak size of all traced memory blocksAPIFunctionsDomainFilterFilterFrameSnapshotStatisticStatisticDiffTraceTraceback
- Software Packaging and Distributionensurepip— Bootstrapping thepipinstallerCommand line interfaceModule APIvenv— Creation of virtual environmentsCreating virtual environmentsHow venvs workAPIAn example of extendingEnvBuilderzipapp— Manage executable Python zip archivesBasic ExampleCommand-Line InterfacePython APIExamplesSpecifying the InterpreterCreating Standalone Applications with zipappCaveatsThe Python Zip Application Archive Format
- Python Runtime Servicessys— System-specific parameters and functionssys.monitoring— Execution event monitoringTool identifiersRegistering and using toolsEventsLocal eventsAncillary eventsOther eventsThe STOP_ITERATION eventTurning events on and offSetting events globallyPer code object eventsDisabling eventsRegistering callback functionsCallback function argumentssysconfig— Provide access to Python’s configuration informationConfiguration variablesInstallation pathsUser schemeposix_usernt_userosx_framework_userHome schemeposix_homePrefix schemeposix_prefixntInstallation path functionsOther functionsUsingsysconfigas a scriptbuiltins— Built-in objects__main__— Top-level code environment__name__=='__main__'What is the “top-level code environment”?Idiomatic UsagePackaging Considerations__main__.pyin Python PackagesIdiomatic Usageimport__main__warnings— Warning controlWarning CategoriesThe Warnings FilterRepeated Warning Suppression CriteriaDescribing Warning FiltersDefault Warning FilterOverriding the default filterTemporarily Suppressing WarningsTesting WarningsUpdating Code For New Versions of DependenciesAvailable FunctionsAvailable Context Managersdataclasses— Data ClassesModule contentsPost-init processingClass variablesInit-only variablesFrozen instancesInheritanceRe-ordering of keyword-only parameters in__init__()Default factory functionsMutable default valuesDescriptor-typed fieldscontextlib— Utilities forwith-statement contextsUtilitiesExamples and RecipesSupporting a variable number of context managersCatching exceptions from__enter__methodsCleaning up in an__enter__implementationReplacing any use oftry-finallyand flag variablesUsing a context manager as a function decoratorSingle use, reusable and reentrant context managersReentrant context managersReusable context managersabc— Abstract Base Classesatexit— Exit handlersatexitExampletraceback— Print or retrieve a stack tracebackModule-Level FunctionsTracebackExceptionObjectsStackSummaryObjectsFrameSummaryObjectsExamples of Using the Module-Level FunctionsExamples of UsingTracebackException__future__— Future statement definitionsModule Contentsgc— Garbage Collector interfaceinspect— Inspect live objectsTypes and membersRetrieving source codeIntrospecting callables with the Signature objectClasses and functionsThe interpreter stackFetching attributes staticallyCurrent State of Generators, Coroutines, and Asynchronous GeneratorsCode Objects Bit FlagsBuffer flagsCommand Line Interfacesite— Site-specific configuration hooksitecustomizeusercustomizeReadline configurationModule contentsCommand Line Interface
- Custom Python Interpreterscode— Interpreter base classesInteractive Interpreter ObjectsInteractive Console Objectscodeop— Compile Python code
- Importing Moduleszipimport— Import modules from Zip archiveszipimporter ObjectsExamplespkgutil— Package extension utilitymodulefinder— Find modules used by a scriptExample usage ofModuleFinderrunpy— Locating and executing Python modulesimportlib— The implementation ofimportIntroductionFunctionsimportlib.abc– Abstract base classes related to importimportlib.machinery– Importers and path hooksimportlib.util– Utility code for importersExamplesImporting programmaticallyChecking if a module can be importedImporting a source file directlyImplementing lazy importsSetting up an importerApproximatingimportlib.import_module()importlib.resources– Package resource reading, opening and accessFunctional APIimportlib.resources.abc– Abstract base classes for resourcesimportlib.metadata– Accessing package metadataOverviewFunctional APIEntry pointsDistribution metadataDistribution versionsDistribution filesDistribution requirementsMapping import to distribution packagesDistributionsDistribution DiscoveryExtending the search algorithmExampleThe initialization of thesys.pathmodule search pathVirtual environments_pth filesEmbedded Python
- Python Language Servicesast— Abstract Syntax TreesAbstract GrammarNode classesRoot nodesLiteralsVariablesExpressionsSubscriptingComprehensionsStatementsImportsControl flowPattern matchingType parametersFunction and class definitionsAsync and awaitastHelpersCompiler FlagsCommand-Line Usagesymtable— Access to the compiler’s symbol tablesGenerating Symbol TablesExamining Symbol TablesCommand-Line Usagetoken— Constants used with Python parse treeskeyword— Testing for Python keywordstokenize— Tokenizer for Python sourceTokenizing InputCommand-Line UsageExamplestabnanny— Detection of ambiguous indentationpyclbr— Python module browser supportFunction ObjectsClass Objectspy_compile— Compile Python source filesCommand-Line Interfacecompileall— Byte-compile Python librariesCommand-line usePublic functionsdis— Disassembler for Python bytecodeCommand-line interfaceBytecode analysisAnalysis functionsPython Bytecode InstructionsOpcode collectionspickletools— Tools for pickle developersCommand line usageCommand line optionsProgrammatic Interface
- MS Windows Specific Servicesmsvcrt— Useful routines from the MS VC++ runtimeFile OperationsConsole I/OOther Functionswinreg— Windows registry accessFunctionsConstantsHKEY_* ConstantsAccess Rights64-bit SpecificValue TypesRegistry Handle Objectswinsound— Sound-playing interface for Windows
- Unix Specific Servicesposix— The most common POSIX system callsLarge File SupportNotable Module Contentspwd— The password databasegrp— The group databasetermios— POSIX style tty controlExampletty— Terminal control functionspty— Pseudo-terminal utilitiesExamplefcntl— Thefcntlandioctlsystem callsresource— Resource usage informationResource LimitsResource Usagesyslog— Unix syslog library routinesExamplesSimple example
- Modules command-line interface (CLI)
- Superseded Modulesgetopt— C-style parser for command line options
- Removed Modules
- Security Considerations

- Notes on availabilityWebAssembly platformsMobile platforms

- WebAssembly platforms
- Mobile platforms

- Constants added by thesitemodule

- Truth Value Testing
- Boolean Operations —and,or,not
- Comparisons
- Numeric Types —int,float,complexBitwise Operations on Integer TypesAdditional Methods on Integer TypesAdditional Methods on FloatHashing of numeric types
- Boolean Type -bool
- Iterator TypesGenerator Types
- Sequence Types —list,tuple,rangeCommon Sequence OperationsImmutable Sequence TypesMutable Sequence TypesListsTuplesRanges
- Text Sequence Type —strString MethodsFormatted String Literals (f-strings)printf-style String Formatting
- Binary Sequence Types —bytes,bytearray,memoryviewBytes ObjectsBytearray ObjectsBytes and Bytearray Operationsprintf-style Bytes FormattingMemory Views
- Set Types —set,frozenset
- Mapping Types —dictDictionary view objects
- Context Manager Types
- Type Annotation Types —Generic Alias,UnionGeneric Alias TypeStandard Generic ClassesSpecial Attributes ofGenericAliasobjectsUnion Type
- Other Built-in TypesModulesClasses and Class InstancesFunctionsMethodsCode ObjectsType ObjectsThe Null ObjectThe Ellipsis ObjectThe NotImplemented ObjectInternal Objects
- Special Attributes
- Integer string conversion length limitationAffected APIsConfiguring the limitRecommended configuration

- Bitwise Operations on Integer Types
- Additional Methods on Integer Types
- Additional Methods on Float
- Hashing of numeric types

- Generator Types

- Common Sequence Operations
- Immutable Sequence Types
- Mutable Sequence Types

- Formatted String Literals (f-strings)
- printf-style String Formatting

================================================================================

```
memoryview
```

- Bytes Objects
- Bytearray Objects
- Bytes and Bytearray Operations
- printf-style Bytes Formatting
- Memory Views

- Dictionary view objects

- Generic Alias TypeStandard Generic ClassesSpecial Attributes ofGenericAliasobjects

- Standard Generic Classes
- Special Attributes ofGenericAliasobjects

```
GenericAlias
```

- Classes and Class Instances
- Code Objects
- Type Objects
- The Null Object
- The Ellipsis Object
- The NotImplemented Object
- Internal Objects

- Affected APIs
- Configuring the limit
- Recommended configuration

- Exception context
- Inheriting from built-in exceptions
- Base classes
- Concrete exceptionsOS exceptions
- Exception groups
- Exception hierarchy

- OS exceptions

- string— Common string operationsString constantsCustom String FormattingFormat String SyntaxFormat Specification Mini-LanguageFormat examplesTemplate stringsHelper functions
- re— Regular expression operationsRegular Expression SyntaxModule ContentsFlagsFunctionsExceptionsRegular Expression ObjectsMatch ObjectsRegular Expression ExamplesChecking for a PairSimulating scanf()search() vs. match()Making a PhonebookText MungingFinding all AdverbsFinding all Adverbs and their PositionsRaw String NotationWriting a Tokenizer
- difflib— Helpers for computing deltasSequenceMatcher ObjectsSequenceMatcher ExamplesDiffer ObjectsDiffer ExampleA command-line interface to difflibndiff example
- textwrap— Text wrapping and filling
- unicodedata— Unicode Database
- stringprep— Internet String Preparation
- readline— GNU readline interfaceInit fileLine bufferHistory fileHistory listStartup hooksCompletionExample
- rlcompleter— Completion function for GNU readline

- String constants
- Custom String Formatting
- Format String SyntaxFormat Specification Mini-LanguageFormat examples
- Template strings
- Helper functions

- Format Specification Mini-Language
- Format examples

- Regular Expression Syntax
- Module ContentsFlagsFunctionsExceptions
- Regular Expression Objects
- Match Objects
- Regular Expression ExamplesChecking for a PairSimulating scanf()search() vs. match()Making a PhonebookText MungingFinding all AdverbsFinding all Adverbs and their PositionsRaw String NotationWriting a Tokenizer

- Checking for a Pair
- Simulating scanf()
- search() vs. match()
- Making a Phonebook
- Text Munging
- Finding all Adverbs
- Finding all Adverbs and their Positions
- Raw String Notation
- Writing a Tokenizer

- SequenceMatcher Objects
- SequenceMatcher Examples
- Differ Objects
- Differ Example
- A command-line interface to difflib
- ndiff example

```
stringprep
```

- Line buffer
- History file
- History list
- Startup hooks

- struct— Interpret bytes as packed binary dataFunctions and ExceptionsFormat StringsByte Order, Size, and AlignmentFormat CharactersExamplesApplicationsNative FormatsStandard FormatsClasses
- codecs— Codec registry and base classesCodec Base ClassesError HandlersStateless Encoding and DecodingIncremental Encoding and DecodingIncrementalEncoder ObjectsIncrementalDecoder ObjectsStream Encoding and DecodingStreamWriter ObjectsStreamReader ObjectsStreamReaderWriter ObjectsStreamRecoder ObjectsEncodings and UnicodeStandard EncodingsPython Specific EncodingsText EncodingsBinary TransformsText Transformsencodings.idna— Internationalized Domain Names in Applicationsencodings.mbcs— Windows ANSI codepageencodings.utf_8_sig— UTF-8 codec with BOM signature

- Functions and Exceptions
- Format StringsByte Order, Size, and AlignmentFormat CharactersExamples
- ApplicationsNative FormatsStandard Formats

- Byte Order, Size, and Alignment
- Format Characters

- Native Formats
- Standard Formats

- Codec Base ClassesError HandlersStateless Encoding and DecodingIncremental Encoding and DecodingIncrementalEncoder ObjectsIncrementalDecoder ObjectsStream Encoding and DecodingStreamWriter ObjectsStreamReader ObjectsStreamReaderWriter ObjectsStreamRecoder Objects
- Encodings and Unicode
- Standard Encodings
- Python Specific EncodingsText EncodingsBinary TransformsText Transforms
- encodings.idna— Internationalized Domain Names in Applications
- encodings.mbcs— Windows ANSI codepage
- encodings.utf_8_sig— UTF-8 codec with BOM signature

- Error Handlers
- Stateless Encoding and Decoding
- Incremental Encoding and DecodingIncrementalEncoder ObjectsIncrementalDecoder Objects
- Stream Encoding and DecodingStreamWriter ObjectsStreamReader ObjectsStreamReaderWriter ObjectsStreamRecoder Objects

- IncrementalEncoder Objects
- IncrementalDecoder Objects

- StreamWriter Objects
- StreamReader Objects
- StreamReaderWriter Objects
- StreamRecoder Objects

- Text Encodings
- Binary Transforms
- Text Transforms

```
encodings.idna
```

```
encodings.mbcs
```

```
encodings.utf_8_sig
```

- datetime— Basic date and time typesAware and Naive ObjectsConstantsAvailable TypesCommon PropertiesDetermining if an Object is Aware or NaivetimedeltaObjectsExamples of usage:timedeltadateObjectsExamples of Usage:datedatetimeObjectsExamples of Usage:datetimetimeObjectsExamples of Usage:timetzinfoObjectstimezoneObjectsstrftime()andstrptime()Behaviorstrftime()andstrptime()Format CodesTechnical Detail
- zoneinfo— IANA time zone supportUsingZoneInfoData sourcesConfiguring the data sourcesCompile-time configurationEnvironment configurationRuntime configurationTheZoneInfoclassString representationsPickle serializationFunctionsGlobalsExceptions and warnings
- calendar— General calendar-related functionsCommand-Line Usage
- collections— Container datatypesChainMapobjectsChainMapExamples and RecipesCounterobjectsdequeobjectsdequeRecipesdefaultdictobjectsdefaultdictExamplesnamedtuple()Factory Function for Tuples with Named FieldsOrderedDictobjectsOrderedDictExamples and RecipesUserDictobjectsUserListobjectsUserStringobjects
- collections.abc— Abstract Base Classes for ContainersCollections Abstract Base ClassesCollections Abstract Base Classes – Detailed DescriptionsExamples and Recipes
- heapq— Heap queue algorithmBasic ExamplesPriority Queue Implementation NotesTheory
- bisect— Array bisection algorithmPerformance NotesSearching Sorted ListsExamples
- array— Efficient arrays of numeric values
- weakref— Weak referencesWeak Reference ObjectsExampleFinalizer ObjectsComparing finalizers with__del__()methods
- types— Dynamic type creation and names for built-in typesDynamic Type CreationStandard Interpreter TypesAdditional Utility Classes and FunctionsCoroutine Utility Functions
- copy— Shallow and deep copy operations
- pprint— Data pretty printerFunctionsPrettyPrinter ObjectsExample
- reprlib— Alternaterepr()implementationRepr ObjectsSubclassing Repr Objects
- enum— Support for enumerationsModule ContentsData TypesSupported__dunder__namesSupported_sunder_namesUtilities and DecoratorsNotes
- graphlib— Functionality to operate with graph-like structuresExceptions

- Aware and Naive Objects
- Available TypesCommon PropertiesDetermining if an Object is Aware or Naive
- timedeltaObjectsExamples of usage:timedelta
- dateObjectsExamples of Usage:date
- datetimeObjectsExamples of Usage:datetime
- timeObjectsExamples of Usage:time
- tzinfoObjects
- timezoneObjects
- strftime()andstrptime()Behaviorstrftime()andstrptime()Format CodesTechnical Detail

- Common Properties
- Determining if an Object is Aware or Naive

- Examples of usage:timedelta

- Examples of Usage:date

- Examples of Usage:datetime

- Examples of Usage:time

```
strftime()
```

```
strptime()
```

- strftime()andstrptime()Format Codes
- Technical Detail

- UsingZoneInfo
- Data sourcesConfiguring the data sourcesCompile-time configurationEnvironment configurationRuntime configuration
- TheZoneInfoclassString representationsPickle serialization
- Exceptions and warnings

- Configuring the data sourcesCompile-time configurationEnvironment configurationRuntime configuration

- Compile-time configuration
- Environment configuration
- Runtime configuration

- String representations
- Pickle serialization

- Command-Line Usage

- ChainMapobjectsChainMapExamples and Recipes
- Counterobjects
- dequeobjectsdequeRecipes
- defaultdictobjectsdefaultdictExamples
- namedtuple()Factory Function for Tuples with Named Fields
- OrderedDictobjectsOrderedDictExamples and Recipes
- UserDictobjects
- UserListobjects
- UserStringobjects

- ChainMapExamples and Recipes

- dequeRecipes

```
defaultdict
```

- defaultdictExamples

```
namedtuple()
```

```
OrderedDict
```

- OrderedDictExamples and Recipes

```
UserString
```

- Collections Abstract Base Classes
- Collections Abstract Base Classes – Detailed Descriptions
- Examples and Recipes

- Basic Examples
- Priority Queue Implementation Notes

- Performance Notes
- Searching Sorted Lists

- Weak Reference Objects
- Finalizer Objects
- Comparing finalizers with__del__()methods

- Dynamic Type Creation
- Standard Interpreter Types
- Additional Utility Classes and Functions
- Coroutine Utility Functions

- PrettyPrinter Objects

- Repr Objects
- Subclassing Repr Objects

- Module Contents
- Data TypesSupported__dunder__namesSupported_sunder_names
- Utilities and Decorators

- Supported__dunder__names
- Supported_sunder_names

```
__dunder__
```

- numbers— Numeric abstract base classesThe numeric towerNotes for type implementersAdding More Numeric ABCsImplementing the arithmetic operations
- math— Mathematical functionsNumber-theoretic functionsFloating point arithmeticFloating point manipulation functionsPower, exponential and logarithmic functionsSummation and product functionsAngular conversionTrigonometric functionsHyperbolic functionsSpecial functionsConstants
- cmath— Mathematical functions for complex numbersConversions to and from polar coordinatesPower and logarithmic functionsTrigonometric functionsHyperbolic functionsClassification functionsConstants
- decimal— Decimal fixed-point and floating-point arithmeticQuick-start TutorialDecimal objectsLogical operandsContext objectsConstantsRounding modesSignalsFloating-Point NotesMitigating round-off error with increased precisionSpecial valuesWorking with threadsRecipesDecimal FAQ
- fractions— Rational numbers
- random— Generate pseudo-random numbersBookkeeping functionsFunctions for bytesFunctions for integersFunctions for sequencesDiscrete distributionsReal-valued distributionsAlternative GeneratorNotes on ReproducibilityExamplesRecipesCommand-line usageCommand-line example
- statistics— Mathematical statistics functionsAverages and measures of central locationMeasures of spreadStatistics for relations between two inputsFunction detailsExceptionsNormalDistobjectsExamples and RecipesClassic probability problemsMonte Carlo inputs for simulationsApproximating binomial distributionsNaive bayesian classifier

- The numeric tower
- Notes for type implementersAdding More Numeric ABCsImplementing the arithmetic operations

- Adding More Numeric ABCs
- Implementing the arithmetic operations

- Number-theoretic functions
- Floating point arithmetic
- Floating point manipulation functions
- Power, exponential and logarithmic functions
- Summation and product functions
- Angular conversion
- Trigonometric functions
- Hyperbolic functions
- Special functions

- Conversions to and from polar coordinates
- Power and logarithmic functions
- Classification functions

- Quick-start Tutorial
- Decimal objectsLogical operands
- Context objects
- Rounding modes
- Floating-Point NotesMitigating round-off error with increased precisionSpecial values
- Working with threads
- Decimal FAQ

- Logical operands

- Mitigating round-off error with increased precision
- Special values

- Bookkeeping functions
- Functions for bytes
- Functions for integers
- Functions for sequences
- Discrete distributions
- Real-valued distributions
- Alternative Generator
- Notes on Reproducibility
- Command-line usage
- Command-line example

```
statistics
```

- Averages and measures of central location
- Measures of spread
- Statistics for relations between two inputs
- Function details
- NormalDistobjects
- Examples and RecipesClassic probability problemsMonte Carlo inputs for simulationsApproximating binomial distributionsNaive bayesian classifier

```
NormalDist
```

- Classic probability problems
- Monte Carlo inputs for simulations
- Approximating binomial distributions
- Naive bayesian classifier

- itertools— Functions creating iterators for efficient loopingItertool FunctionsItertools Recipes
- functools— Higher-order functions and operations on callable objectspartialObjects
- operator— Standard operators as functionsMapping Operators to FunctionsIn-place Operators

- Itertool Functions
- Itertools Recipes

- partialObjects

- Mapping Operators to Functions
- In-place Operators

- pathlib— Object-oriented filesystem pathsBasic useExceptionsPure pathsGeneral propertiesOperatorsAccessing individual partsMethods and propertiesConcrete pathsParsing and generating URIsExpanding and resolving pathsQuerying file type and statusReading and writing filesReading directoriesCreating files and directoriesRenaming and deletingPermissions and ownershipPattern languageComparison to theglobmoduleComparison to theosandos.pathmodulesCorresponding tools
- os.path— Common pathname manipulations
- stat— Interpretingstat()results
- filecmp— File and Directory ComparisonsThedircmpclass
- tempfile— Generate temporary files and directoriesExamplesDeprecated functions and variables
- glob— Unix style pathname pattern expansionExamples
- fnmatch— Unix filename pattern matching
- linecache— Random access to text lines
- shutil— High-level file operationsDirectory and files operationsPlatform-dependent efficient copy operationscopytree examplermtree exampleArchiving operationsArchiving exampleArchiving example withbase_dirQuerying the size of the output terminal

- Pure pathsGeneral propertiesOperatorsAccessing individual partsMethods and properties
- Concrete pathsParsing and generating URIsExpanding and resolving pathsQuerying file type and statusReading and writing filesReading directoriesCreating files and directoriesRenaming and deletingPermissions and ownership
- Pattern language
- Comparison to theglobmodule
- Comparison to theosandos.pathmodulesCorresponding tools

- General properties
- Accessing individual parts
- Methods and properties

- Parsing and generating URIs
- Expanding and resolving paths
- Querying file type and status
- Reading and writing files
- Reading directories
- Creating files and directories
- Renaming and deleting
- Permissions and ownership

- Corresponding tools

- Thedircmpclass

- Deprecated functions and variables

- Directory and files operationsPlatform-dependent efficient copy operationscopytree examplermtree example
- Archiving operationsArchiving exampleArchiving example withbase_dir
- Querying the size of the output terminal

- Platform-dependent efficient copy operations
- copytree example
- rmtree example

- Archiving example
- Archiving example withbase_dir

- pickle— Python object serializationRelationship to other Python modulesComparison withmarshalComparison withjsonData stream formatModule InterfaceWhat can be pickled and unpickled?Pickling Class InstancesPersistence of External ObjectsDispatch TablesHandling Stateful ObjectsCustom Reduction for Types, Functions, and Other ObjectsOut-of-band BuffersProvider APIConsumer APIExampleRestricting GlobalsPerformanceExamples
- copyreg— Registerpicklesupport functionsExample
- shelve— Python object persistenceRestrictionsExample
- marshal— Internal Python object serialization
- dbm— Interfaces to Unix “databases”dbm.sqlite3— SQLite backend for dbmdbm.gnu— GNU database managerdbm.ndbm— New Database Managerdbm.dumb— Portable DBM implementation
- sqlite3— DB-API 2.0 interface for SQLite databasesTutorialReferenceModule functionsModule constantsConnection objectsCursor objectsRow objectsBlob objectsPrepareProtocol objectsExceptionsSQLite and Python typesDefault adapters and converters (deprecated)Command-line interfaceHow-to guidesHow to use placeholders to bind values in SQL queriesHow to adapt custom Python types to SQLite valuesHow to write adaptable objectsHow to register adapter callablesHow to convert SQLite values to custom Python typesAdapter and converter recipesHow to use connection shortcut methodsHow to use the connection context managerHow to work with SQLite URIsHow to create and use row factoriesHow to handle non-UTF-8 text encodingsExplanationTransaction controlTransaction control via theautocommitattributeTransaction control via theisolation_levelattribute

- Relationship to other Python modulesComparison withmarshalComparison withjson
- Data stream format
- Module Interface
- What can be pickled and unpickled?
- Pickling Class InstancesPersistence of External ObjectsDispatch TablesHandling Stateful Objects
- Custom Reduction for Types, Functions, and Other Objects
- Out-of-band BuffersProvider APIConsumer APIExample
- Restricting Globals

- Comparison withmarshal
- Comparison withjson

- Persistence of External Objects
- Dispatch Tables
- Handling Stateful Objects

- Provider API
- Consumer API

- Restrictions

- dbm.sqlite3— SQLite backend for dbm
- dbm.gnu— GNU database manager
- dbm.ndbm— New Database Manager
- dbm.dumb— Portable DBM implementation

================================================================================

```
dbm.sqlite3
```

- ReferenceModule functionsModule constantsConnection objectsCursor objectsRow objectsBlob objectsPrepareProtocol objectsExceptionsSQLite and Python typesDefault adapters and converters (deprecated)Command-line interface
- How-to guidesHow to use placeholders to bind values in SQL queriesHow to adapt custom Python types to SQLite valuesHow to write adaptable objectsHow to register adapter callablesHow to convert SQLite values to custom Python typesAdapter and converter recipesHow to use connection shortcut methodsHow to use the connection context managerHow to work with SQLite URIsHow to create and use row factoriesHow to handle non-UTF-8 text encodings
- ExplanationTransaction controlTransaction control via theautocommitattributeTransaction control via theisolation_levelattribute

- Module functions
- Module constants
- Connection objects
- Cursor objects
- Row objects
- Blob objects
- PrepareProtocol objects
- SQLite and Python types
- Default adapters and converters (deprecated)
- Command-line interface

- How to use placeholders to bind values in SQL queries
- How to adapt custom Python types to SQLite valuesHow to write adaptable objectsHow to register adapter callables
- How to convert SQLite values to custom Python types
- Adapter and converter recipes
- How to use connection shortcut methods
- How to use the connection context manager
- How to work with SQLite URIs
- How to create and use row factories
- How to handle non-UTF-8 text encodings

- How to write adaptable objects
- How to register adapter callables

- Transaction controlTransaction control via theautocommitattributeTransaction control via theisolation_levelattribute

- Transaction control via theautocommitattribute
- Transaction control via theisolation_levelattribute

```
autocommit
```

```
isolation_level
```

- zlib— Compression compatible withgzip
- gzip— Support forgzipfilesExamples of usageCommand Line InterfaceCommand line options
- bz2— Support forbzip2compression(De)compression of filesIncremental (de)compressionOne-shot (de)compressionExamples of usage
- lzma— Compression using the LZMA algorithmReading and writing compressed filesCompressing and decompressing data in memoryMiscellaneousSpecifying custom filter chainsExamples
- zipfile— Work with ZIP archivesZipFile ObjectsPath ObjectsPyZipFile ObjectsZipInfo ObjectsCommand-Line InterfaceCommand-line optionsDecompression pitfallsFrom file itselfFile System limitationsResources limitationsInterruptionDefault behaviors of extraction
- tarfile— Read and write tar archive filesTarFile ObjectsTarInfo ObjectsExtraction filtersDefault named filtersFilter errorsHints for further verificationSupporting older Python versionsStateful extraction filter exampleCommand-Line InterfaceCommand-line optionsExamplesSupported tar formatsUnicode issues

- Examples of usage
- Command Line InterfaceCommand line options

- Command line options

- (De)compression of files
- Incremental (de)compression
- One-shot (de)compression

- Reading and writing compressed files
- Compressing and decompressing data in memory
- Miscellaneous
- Specifying custom filter chains

- ZipFile Objects
- Path Objects
- PyZipFile Objects
- ZipInfo Objects
- Command-Line InterfaceCommand-line options
- Decompression pitfallsFrom file itselfFile System limitationsResources limitationsInterruptionDefault behaviors of extraction

- Command-line options

- From file itself
- File System limitations
- Resources limitations
- Interruption
- Default behaviors of extraction

- TarFile Objects
- TarInfo Objects
- Extraction filtersDefault named filtersFilter errorsHints for further verificationSupporting older Python versionsStateful extraction filter example
- Supported tar formats
- Unicode issues

- Default named filters
- Filter errors
- Hints for further verification
- Supporting older Python versions
- Stateful extraction filter example

- csv— CSV File Reading and WritingModule ContentsDialects and Formatting ParametersReader ObjectsWriter ObjectsExamples
- configparser— Configuration file parserQuick StartSupported DatatypesFallback ValuesSupported INI File StructureUnnamed SectionsInterpolation of valuesMapping Protocol AccessCustomizing Parser BehaviourLegacy API ExamplesConfigParser ObjectsRawConfigParser ObjectsExceptions
- tomllib— Parse TOML filesExamplesConversion Table
- netrc— netrc file processingnetrc Objects
- plistlib— Generate and parse Apple.plistfilesExamples

- Dialects and Formatting Parameters
- Reader Objects
- Writer Objects

- Quick Start
- Supported Datatypes
- Fallback Values
- Supported INI File Structure
- Unnamed Sections
- Interpolation of values
- Mapping Protocol Access
- Customizing Parser Behaviour
- Legacy API Examples
- ConfigParser Objects
- RawConfigParser Objects

- Conversion Table

- netrc Objects

- hashlib— Secure hashes and message digestsHash algorithmsUsageConstructorsAttributesHash ObjectsSHAKE variable length digestsFile hashingKey derivationBLAKE2Creating hash objectsConstantsExamplesSimple hashingUsing different digest sizesKeyed hashingRandomized hashingPersonalizationTree modeCredits
- hmac— Keyed-Hashing for Message Authentication
- secrets— Generate secure random numbers for managing secretsRandom numbersGenerating tokensHow many bytes should tokens use?Other functionsRecipes and best practices

- Hash algorithms
- Constructors
- Hash Objects
- SHAKE variable length digests
- File hashing
- Key derivation
- BLAKE2Creating hash objectsConstantsExamplesSimple hashingUsing different digest sizesKeyed hashingRandomized hashingPersonalizationTree modeCredits

- Creating hash objects
- ExamplesSimple hashingUsing different digest sizesKeyed hashingRandomized hashingPersonalizationTree mode

- Simple hashing
- Using different digest sizes
- Keyed hashing
- Randomized hashing
- Personalization

- Random numbers
- Generating tokensHow many bytes should tokens use?
- Other functions
- Recipes and best practices

- How many bytes should tokens use?

- os— Miscellaneous operating system interfacesFile Names, Command Line Arguments, and Environment VariablesPython UTF-8 ModeProcess ParametersFile Object CreationFile Descriptor OperationsQuerying the size of a terminalInheritance of File DescriptorsFiles and DirectoriesTimer File DescriptorsLinux extended attributesProcess ManagementInterface to the schedulerMiscellaneous System InformationRandom numbers
- io— Core tools for working with streamsOverviewText I/OBinary I/ORaw I/OText EncodingOpt-in EncodingWarningHigh-level Module InterfaceClass hierarchyI/O Base ClassesRaw File I/OBuffered StreamsText I/OPerformanceBinary I/OText I/OMulti-threadingReentrancy
- time— Time access and conversionsFunctionsClock ID ConstantsTimezone Constants
- logging— Logging facility for PythonLogger ObjectsLogging LevelsHandler ObjectsFormatter ObjectsFilter ObjectsLogRecord ObjectsLogRecord attributesLoggerAdapter ObjectsThread SafetyModule-Level FunctionsModule-Level AttributesIntegration with the warnings module
- logging.config— Logging configurationConfiguration functionsSecurity considerationsConfiguration dictionary schemaDictionary Schema DetailsIncremental ConfigurationObject connectionsUser-defined objectsHandler configuration orderAccess to external objectsAccess to internal objectsImport resolution and custom importersConfiguring QueueHandler and QueueListenerConfiguration file format
- logging.handlers— Logging handlersStreamHandlerFileHandlerNullHandlerWatchedFileHandlerBaseRotatingHandlerRotatingFileHandlerTimedRotatingFileHandlerSocketHandlerDatagramHandlerSysLogHandlerNTEventLogHandlerSMTPHandlerMemoryHandlerHTTPHandlerQueueHandlerQueueListener
- platform—  Access to underlying platform’s identifying dataCross PlatformJava PlatformWindows PlatformmacOS PlatformiOS PlatformUnix PlatformsLinux PlatformsAndroid Platform
- errno— Standard errno system symbols
- ctypes— A foreign function library for Pythonctypes tutorialLoading dynamic link librariesAccessing functions from loaded dllsCalling functionsFundamental data typesCalling functions, continuedCalling variadic functionsCalling functions with your own custom data typesSpecifying the required argument types (function prototypes)Return typesPassing pointers (or: passing parameters by reference)Structures and unionsStructure/union alignment and byte orderBit fields in structures and unionsArraysPointersType conversionsIncomplete TypesCallback functionsAccessing values exported from dllsSurprisesVariable-sized data typesctypes referenceFinding shared librariesLoading shared librariesForeign functionsFunction prototypesUtility functionsData typesFundamental data typesStructured data typesArrays and pointers

- File Names, Command Line Arguments, and Environment Variables
- Python UTF-8 Mode
- Process Parameters
- File Object Creation
- File Descriptor OperationsQuerying the size of a terminalInheritance of File Descriptors
- Files and DirectoriesTimer File DescriptorsLinux extended attributes
- Process Management
- Interface to the scheduler
- Miscellaneous System Information

- Querying the size of a terminal
- Inheritance of File Descriptors

- Timer File Descriptors
- Linux extended attributes

- OverviewText I/OBinary I/ORaw I/O
- Text EncodingOpt-in EncodingWarning
- High-level Module Interface
- Class hierarchyI/O Base ClassesRaw File I/OBuffered StreamsText I/O
- PerformanceBinary I/OText I/OMulti-threadingReentrancy

- Opt-in EncodingWarning

- I/O Base Classes
- Raw File I/O
- Buffered Streams

- Clock ID Constants
- Timezone Constants

- Logger Objects
- Logging Levels
- Handler Objects
- Formatter Objects
- Filter Objects
- LogRecord Objects
- LogRecord attributes
- LoggerAdapter Objects
- Thread Safety
- Module-Level Functions
- Module-Level Attributes
- Integration with the warnings module

```
logging.config
```

- Configuration functions
- Security considerations
- Configuration dictionary schemaDictionary Schema DetailsIncremental ConfigurationObject connectionsUser-defined objectsHandler configuration orderAccess to external objectsAccess to internal objectsImport resolution and custom importersConfiguring QueueHandler and QueueListener
- Configuration file format

- Dictionary Schema Details
- Incremental Configuration
- Object connections
- User-defined objects
- Handler configuration order
- Access to external objects
- Access to internal objects
- Import resolution and custom importers
- Configuring QueueHandler and QueueListener

```
logging.handlers
```

- StreamHandler
- FileHandler
- NullHandler
- WatchedFileHandler
- BaseRotatingHandler
- RotatingFileHandler
- TimedRotatingFileHandler
- SocketHandler
- DatagramHandler
- SysLogHandler
- NTEventLogHandler
- SMTPHandler
- MemoryHandler
- HTTPHandler
- QueueHandler
- QueueListener

- Cross Platform
- Java Platform
- Windows Platform
- macOS Platform
- iOS Platform
- Unix Platforms
- Linux Platforms
- Android Platform

- ctypes tutorialLoading dynamic link librariesAccessing functions from loaded dllsCalling functionsFundamental data typesCalling functions, continuedCalling variadic functionsCalling functions with your own custom data typesSpecifying the required argument types (function prototypes)Return typesPassing pointers (or: passing parameters by reference)Structures and unionsStructure/union alignment and byte orderBit fields in structures and unionsArraysPointersType conversionsIncomplete TypesCallback functionsAccessing values exported from dllsSurprisesVariable-sized data types
- ctypes referenceFinding shared librariesLoading shared librariesForeign functionsFunction prototypesUtility functionsData typesFundamental data typesStructured data typesArrays and pointers

- Loading dynamic link libraries
- Accessing functions from loaded dlls
- Calling functions
- Fundamental data types
- Calling functions, continued
- Calling variadic functions
- Calling functions with your own custom data types
- Specifying the required argument types (function prototypes)
- Return types
- Passing pointers (or: passing parameters by reference)
- Structures and unions
- Structure/union alignment and byte order
- Bit fields in structures and unions
- Type conversions
- Incomplete Types
- Callback functions
- Accessing values exported from dlls
- Variable-sized data types

- Finding shared libraries
- Loading shared libraries
- Foreign functions
- Function prototypes
- Utility functions
- Structured data types
- Arrays and pointers

- argparse— Parser for command-line options, arguments and subcommandsArgumentParser objectsprogusagedescriptionepilogparentsformatter_classprefix_charsfromfile_prefix_charsargument_defaultallow_abbrevconflict_handleradd_helpexit_on_errorThe add_argument() methodname or flagsactionnargsconstdefaulttypechoicesrequiredhelpmetavardestdeprecatedAction classesThe parse_args() methodOption value syntaxInvalid argumentsArguments containing-Argument abbreviations (prefix matching)Beyondsys.argvThe Namespace objectOther utilitiesSub-commandsFileType objectsArgument groupsMutual exclusionParser defaultsPrinting helpPartial parsingCustomizing file parsingExiting methodsIntermixed parsingRegistering custom types or actionsExceptionsArgparse TutorialConceptsThe basicsIntroducing Positional argumentsIntroducing Optional argumentsShort optionsCombining Positional and Optional argumentsGetting a little more advancedSpecifying ambiguous argumentsConflicting optionsHow to translate the argparse outputCustom type convertersConclusionMigratingoptparsecode toargparse
- optparse— Parser for command line optionsChoosing an argument parsing libraryIntroductionBackgroundTerminologyWhat are options for?What are positional arguments for?TutorialUnderstanding option actionsThe store actionHandling boolean (flag) optionsOther actionsDefault valuesGenerating helpGrouping OptionsPrinting a version stringHowoptparsehandles errorsPutting it all togetherReference GuideCreating the parserPopulating the parserDefining optionsOption attributesStandard option actionsStandard option typesParsing argumentsQuerying and manipulating your option parserConflicts between optionsCleanupOther methodsOption CallbacksDefining a callback optionHow callbacks are calledRaising errors in a callbackCallback example 1: trivial callbackCallback example 2: check option orderCallback example 3: check option order (generalized)Callback example 4: check arbitrary conditionCallback example 5: fixed argumentsCallback example 6: variable argumentsExtendingoptparseAdding new typesAdding new actionsExceptions
- getpass— Portable password input
- fileinput— Iterate over lines from multiple input streams
- curses— Terminal handling for character-cell displaysFunctionsWindow ObjectsConstants
- curses.textpad— Text input widget for curses programsTextbox objects
- curses.ascii— Utilities for ASCII characters
- curses.panel— A panel stack extension for cursesFunctionsPanel Objects

- ArgumentParser objectsprogusagedescriptionepilogparentsformatter_classprefix_charsfromfile_prefix_charsargument_defaultallow_abbrevconflict_handleradd_helpexit_on_error
- The add_argument() methodname or flagsactionnargsconstdefaulttypechoicesrequiredhelpmetavardestdeprecatedAction classes
- The parse_args() methodOption value syntaxInvalid argumentsArguments containing-Argument abbreviations (prefix matching)Beyondsys.argvThe Namespace object
- Other utilitiesSub-commandsFileType objectsArgument groupsMutual exclusionParser defaultsPrinting helpPartial parsingCustomizing file parsingExiting methodsIntermixed parsingRegistering custom types or actions
- ExceptionsArgparse TutorialConceptsThe basicsIntroducing Positional argumentsIntroducing Optional argumentsShort optionsCombining Positional and Optional argumentsGetting a little more advancedSpecifying ambiguous argumentsConflicting optionsHow to translate the argparse outputCustom type convertersConclusionMigratingoptparsecode toargparse

- description
- formatter_class
- prefix_chars
- fromfile_prefix_chars
- argument_default
- allow_abbrev
- conflict_handler
- exit_on_error

- name or flags
- Action classes

- Option value syntax
- Invalid arguments
- Arguments containing-
- Argument abbreviations (prefix matching)
- Beyondsys.argv
- The Namespace object

- Sub-commands
- FileType objects
- Argument groups
- Mutual exclusion
- Parser defaults
- Printing help
- Partial parsing
- Customizing file parsing
- Exiting methods
- Intermixed parsing
- Registering custom types or actions

- Argparse TutorialConceptsThe basicsIntroducing Positional argumentsIntroducing Optional argumentsShort optionsCombining Positional and Optional argumentsGetting a little more advancedSpecifying ambiguous argumentsConflicting optionsHow to translate the argparse outputCustom type convertersConclusion
- Migratingoptparsecode toargparse

- Introducing Positional arguments
- Introducing Optional argumentsShort options
- Combining Positional and Optional arguments
- Getting a little more advancedSpecifying ambiguous argumentsConflicting options
- How to translate the argparse output
- Custom type converters

- Short options

- Specifying ambiguous arguments
- Conflicting options

- Choosing an argument parsing library
- BackgroundTerminologyWhat are options for?What are positional arguments for?
- TutorialUnderstanding option actionsThe store actionHandling boolean (flag) optionsOther actionsDefault valuesGenerating helpGrouping OptionsPrinting a version stringHowoptparsehandles errorsPutting it all together
- Reference GuideCreating the parserPopulating the parserDefining optionsOption attributesStandard option actionsStandard option typesParsing argumentsQuerying and manipulating your option parserConflicts between optionsCleanupOther methods
- Option CallbacksDefining a callback optionHow callbacks are calledRaising errors in a callbackCallback example 1: trivial callbackCallback example 2: check option orderCallback example 3: check option order (generalized)Callback example 4: check arbitrary conditionCallback example 5: fixed argumentsCallback example 6: variable arguments
- ExtendingoptparseAdding new typesAdding new actions

- Terminology
- What are options for?
- What are positional arguments for?

- Understanding option actions
- The store action
- Handling boolean (flag) options
- Other actions
- Default values
- Generating helpGrouping Options
- Printing a version string
- Howoptparsehandles errors
- Putting it all together

- Grouping Options

- Creating the parser
- Populating the parser
- Defining options
- Option attributes
- Standard option actions
- Standard option types
- Parsing arguments
- Querying and manipulating your option parser
- Conflicts between options
- Other methods

- Defining a callback option
- How callbacks are called
- Raising errors in a callback
- Callback example 1: trivial callback
- Callback example 2: check option order
- Callback example 3: check option order (generalized)
- Callback example 4: check arbitrary condition
- Callback example 5: fixed arguments
- Callback example 6: variable arguments

- Adding new types
- Adding new actions

- Window Objects

================================================================================

```
curses.textpad
```

- Textbox objects

```
curses.ascii
```

```
curses.panel
```

- Panel Objects

- threading— Thread-based parallelismThread-Local DataThread ObjectsLock ObjectsRLock ObjectsCondition ObjectsSemaphore ObjectsSemaphoreExampleEvent ObjectsTimer ObjectsBarrier ObjectsUsing locks, conditions, and semaphores in thewithstatement
- multiprocessing— Process-based parallelismIntroductionTheProcessclassContexts and start methodsExchanging objects between processesSynchronization between processesSharing state between processesUsing a pool of workersReferenceProcessand exceptionsPipes and QueuesMiscellaneousConnection ObjectsSynchronization primitivesSharedctypesObjectsThemultiprocessing.sharedctypesmoduleManagersCustomized managersUsing a remote managerProxy ObjectsCleanupProcess PoolsListeners and ClientsAddress FormatsAuthentication keysLoggingThemultiprocessing.dummymoduleProgramming guidelinesAll start methodsThespawnandforkserverstart methodsExamples
- multiprocessing.shared_memory— Shared memory for direct access across processes
- Theconcurrentpackage
- concurrent.futures— Launching parallel tasksExecutor ObjectsThreadPoolExecutorThreadPoolExecutor ExampleProcessPoolExecutorProcessPoolExecutor ExampleFuture ObjectsModule FunctionsException classes
- subprocess— Subprocess managementUsing thesubprocessModuleFrequently Used ArgumentsPopen ConstructorExceptionsSecurity ConsiderationsPopen ObjectsWindows Popen HelpersWindows ConstantsOlder high-level APIReplacing Older Functions with thesubprocessModuleReplacing/bin/shshell command substitutionReplacing shell pipelineReplacingos.system()Replacing theos.spawnfamilyReplacingos.popen(),os.popen2(),os.popen3()Replacing functions from thepopen2moduleLegacy Shell Invocation FunctionsNotesConverting an argument sequence to a string on WindowsDisabling use ofvfork()orposix_spawn()
- sched— Event schedulerScheduler Objects
- queue— A synchronized queue classQueue ObjectsTerminating queuesSimpleQueue Objects
- contextvars— Context VariablesContext VariablesManual Context Managementasyncio support
- _thread— Low-level threading API

- Thread-Local Data
- Thread Objects
- Lock Objects
- RLock Objects
- Condition Objects
- Semaphore ObjectsSemaphoreExample
- Event Objects
- Timer Objects
- Barrier Objects
- Using locks, conditions, and semaphores in thewithstatement

- SemaphoreExample

- IntroductionTheProcessclassContexts and start methodsExchanging objects between processesSynchronization between processesSharing state between processesUsing a pool of workers
- ReferenceProcessand exceptionsPipes and QueuesMiscellaneousConnection ObjectsSynchronization primitivesSharedctypesObjectsThemultiprocessing.sharedctypesmoduleManagersCustomized managersUsing a remote managerProxy ObjectsCleanupProcess PoolsListeners and ClientsAddress FormatsAuthentication keysLoggingThemultiprocessing.dummymodule
- Programming guidelinesAll start methodsThespawnandforkserverstart methods

- TheProcessclass
- Contexts and start methods
- Exchanging objects between processes
- Synchronization between processes
- Sharing state between processes
- Using a pool of workers

- Processand exceptions
- Pipes and Queues
- Connection Objects
- Synchronization primitives
- SharedctypesObjectsThemultiprocessing.sharedctypesmodule
- ManagersCustomized managersUsing a remote manager
- Proxy ObjectsCleanup
- Process Pools
- Listeners and ClientsAddress Formats
- Authentication keys
- Themultiprocessing.dummymodule

- Themultiprocessing.sharedctypesmodule

```
multiprocessing.sharedctypes
```

- Customized managers
- Using a remote manager

- Address Formats

```
multiprocessing.dummy
```

- All start methods
- Thespawnandforkserverstart methods

```
multiprocessing.shared_memory
```

```
concurrent
```

- Executor Objects
- ThreadPoolExecutorThreadPoolExecutor Example
- ProcessPoolExecutorProcessPoolExecutor Example
- Future Objects
- Module Functions
- Exception classes

- ThreadPoolExecutor Example

- ProcessPoolExecutor Example

```
subprocess
```

- Using thesubprocessModuleFrequently Used ArgumentsPopen ConstructorExceptions
- Popen Objects
- Windows Popen HelpersWindows Constants
- Older high-level API
- Replacing Older Functions with thesubprocessModuleReplacing/bin/shshell command substitutionReplacing shell pipelineReplacingos.system()Replacing theos.spawnfamilyReplacingos.popen(),os.popen2(),os.popen3()Replacing functions from thepopen2module
- Legacy Shell Invocation Functions
- NotesConverting an argument sequence to a string on WindowsDisabling use ofvfork()orposix_spawn()

- Frequently Used Arguments
- Popen Constructor

- Windows Constants

- Replacing/bin/shshell command substitution
- Replacing shell pipeline
- Replacingos.system()
- Replacing theos.spawnfamily
- Replacingos.popen(),os.popen2(),os.popen3()
- Replacing functions from thepopen2module

```
os.system()
```

```
os.popen()
```

```
os.popen2()
```

```
os.popen3()
```

- Converting an argument sequence to a string on Windows
- Disabling use ofvfork()orposix_spawn()

```
posix_spawn()
```

- Scheduler Objects

- Queue ObjectsTerminating queues
- SimpleQueue Objects

- Terminating queues

- Context Variables
- Manual Context Management
- asyncio support

- asyncio— Asynchronous I/ORunnersRunning an asyncio ProgramRunner context managerHandling Keyboard InterruptionCoroutines and TasksCoroutinesAwaitablesCreating TasksTask CancellationTask GroupsTerminating a Task GroupSleepingRunning Tasks ConcurrentlyEager Task FactoryShielding From CancellationTimeoutsWaiting PrimitivesRunning in ThreadsScheduling From Other ThreadsIntrospectionTask ObjectStreamsStreamReaderStreamWriterExamplesTCP echo client using streamsTCP echo server using streamsGet HTTP headersRegister an open socket to wait for data using streamsSynchronization PrimitivesLockEventConditionSemaphoreBoundedSemaphoreBarrierSubprocessesCreating SubprocessesConstantsInteracting with SubprocessesSubprocess and ThreadsExamplesQueuesQueuePriority QueueLIFO QueueExceptionsExamplesExceptionsEvent LoopEvent Loop MethodsRunning and stopping the loopScheduling callbacksScheduling delayed callbacksCreating Futures and TasksOpening network connectionsCreating network serversTransferring filesTLS UpgradeWatching file descriptorsWorking with socket objects directlyDNSWorking with pipesUnix signalsExecuting code in thread or process poolsError Handling APIEnabling debug modeRunning SubprocessesCallback HandlesServer ObjectsEvent Loop ImplementationsExamplesHello World with call_soon()Display the current date with call_later()Watch a file descriptor for read eventsSet signal handlers for SIGINT and SIGTERMFuturesFuture FunctionsFuture ObjectTransports and ProtocolsTransportsTransports HierarchyBase TransportRead-only TransportsWrite-only TransportsDatagram TransportsSubprocess TransportsProtocolsBase ProtocolsBase ProtocolStreaming ProtocolsBuffered Streaming ProtocolsDatagram ProtocolsSubprocess ProtocolsExamplesTCP Echo ServerTCP Echo ClientUDP Echo ServerUDP Echo ClientConnecting Existing Socketsloop.subprocess_exec() and SubprocessProtocolPoliciesGetting and Setting the PolicyPolicy ObjectsProcess WatchersCustom PoliciesPlatform SupportAll PlatformsWindowsSubprocess Support on WindowsmacOSExtendingWriting a Custom Event LoopFuture and Task private constructorsTask lifetime supportHigh-level API IndexTasksQueuesSubprocessesStreamsSynchronizationExceptionsLow-level API IndexObtaining the Event LoopEvent Loop MethodsTransportsProtocolsEvent Loop PoliciesDeveloping with asyncioDebug ModeConcurrency and MultithreadingRunning Blocking CodeLoggingDetect never-awaited coroutinesDetect never-retrieved exceptions
- socket— Low-level networking interfaceSocket familiesModule contentsExceptionsConstantsFunctionsCreating socketsOther functionsSocket ObjectsNotes on socket timeoutsTimeouts and theconnectmethodTimeouts and theacceptmethodExample
- ssl— TLS/SSL wrapper for socket objectsFunctions, Constants, and ExceptionsSocket creationContext creationExceptionsRandom generationCertificate handlingConstantsSSL SocketsSSL ContextsCertificatesCertificate chainsCA certificatesCombined key and certificateSelf-signed certificatesExamplesTesting for SSL supportClient-side operationServer-side operationNotes on non-blocking socketsMemory BIO SupportSSL sessionSecurity considerationsBest defaultsManual settingsVerifying certificatesProtocol versionsCipher selectionMulti-processingTLS 1.3
- select— Waiting for I/O completion/dev/pollPolling ObjectsEdge and Level Trigger Polling (epoll) ObjectsPolling ObjectsKqueue ObjectsKevent Objects
- selectors— High-level I/O multiplexingIntroductionClassesExamples
- signal— Set handlers for asynchronous eventsGeneral rulesExecution of Python signal handlersSignals and threadsModule contentsExamplesNote on SIGPIPENote on Signal Handlers and Exceptions
- mmap— Memory-mapped file supportMADV_* ConstantsMAP_* Constants

- RunnersRunning an asyncio ProgramRunner context managerHandling Keyboard Interruption
- Coroutines and TasksCoroutinesAwaitablesCreating TasksTask CancellationTask GroupsTerminating a Task GroupSleepingRunning Tasks ConcurrentlyEager Task FactoryShielding From CancellationTimeoutsWaiting PrimitivesRunning in ThreadsScheduling From Other ThreadsIntrospectionTask Object
- StreamsStreamReaderStreamWriterExamplesTCP echo client using streamsTCP echo server using streamsGet HTTP headersRegister an open socket to wait for data using streams
- Synchronization PrimitivesLockEventConditionSemaphoreBoundedSemaphoreBarrier
- SubprocessesCreating SubprocessesConstantsInteracting with SubprocessesSubprocess and ThreadsExamples
- QueuesQueuePriority QueueLIFO QueueExceptionsExamples
- Event LoopEvent Loop MethodsRunning and stopping the loopScheduling callbacksScheduling delayed callbacksCreating Futures and TasksOpening network connectionsCreating network serversTransferring filesTLS UpgradeWatching file descriptorsWorking with socket objects directlyDNSWorking with pipesUnix signalsExecuting code in thread or process poolsError Handling APIEnabling debug modeRunning SubprocessesCallback HandlesServer ObjectsEvent Loop ImplementationsExamplesHello World with call_soon()Display the current date with call_later()Watch a file descriptor for read eventsSet signal handlers for SIGINT and SIGTERM
- FuturesFuture FunctionsFuture Object
- Transports and ProtocolsTransportsTransports HierarchyBase TransportRead-only TransportsWrite-only TransportsDatagram TransportsSubprocess TransportsProtocolsBase ProtocolsBase ProtocolStreaming ProtocolsBuffered Streaming ProtocolsDatagram ProtocolsSubprocess ProtocolsExamplesTCP Echo ServerTCP Echo ClientUDP Echo ServerUDP Echo ClientConnecting Existing Socketsloop.subprocess_exec() and SubprocessProtocol
- PoliciesGetting and Setting the PolicyPolicy ObjectsProcess WatchersCustom Policies
- Platform SupportAll PlatformsWindowsSubprocess Support on WindowsmacOS
- ExtendingWriting a Custom Event LoopFuture and Task private constructorsTask lifetime support
- High-level API IndexTasksQueuesSubprocessesStreamsSynchronizationExceptions
- Low-level API IndexObtaining the Event LoopEvent Loop MethodsTransportsProtocolsEvent Loop Policies
- Developing with asyncioDebug ModeConcurrency and MultithreadingRunning Blocking CodeLoggingDetect never-awaited coroutinesDetect never-retrieved exceptions

- Running an asyncio Program
- Runner context manager
- Handling Keyboard Interruption

- Creating Tasks
- Task Cancellation
- Task GroupsTerminating a Task Group
- Running Tasks Concurrently
- Eager Task Factory
- Shielding From Cancellation
- Waiting Primitives
- Running in Threads
- Scheduling From Other Threads
- Introspection
- Task Object

- Terminating a Task Group

- StreamReader
- StreamWriter
- ExamplesTCP echo client using streamsTCP echo server using streamsGet HTTP headersRegister an open socket to wait for data using streams

- TCP echo client using streams
- TCP echo server using streams
- Get HTTP headers
- Register an open socket to wait for data using streams

- BoundedSemaphore

- Creating Subprocesses
- Interacting with SubprocessesSubprocess and ThreadsExamples

- Subprocess and Threads

- Priority Queue

- Event Loop MethodsRunning and stopping the loopScheduling callbacksScheduling delayed callbacksCreating Futures and TasksOpening network connectionsCreating network serversTransferring filesTLS UpgradeWatching file descriptorsWorking with socket objects directlyDNSWorking with pipesUnix signalsExecuting code in thread or process poolsError Handling APIEnabling debug modeRunning Subprocesses
- Callback Handles
- Server Objects
- Event Loop Implementations
- ExamplesHello World with call_soon()Display the current date with call_later()Watch a file descriptor for read eventsSet signal handlers for SIGINT and SIGTERM

- Running and stopping the loop
- Scheduling callbacks
- Scheduling delayed callbacks
- Creating Futures and Tasks
- Opening network connections
- Creating network servers
- Transferring files
- TLS Upgrade
- Watching file descriptors
- Working with socket objects directly
- Working with pipes
- Unix signals
- Executing code in thread or process pools
- Error Handling API
- Enabling debug mode
- Running Subprocesses

- Hello World with call_soon()
- Display the current date with call_later()
- Watch a file descriptor for read events
- Set signal handlers for SIGINT and SIGTERM

- Future Functions
- Future Object

- TransportsTransports HierarchyBase TransportRead-only TransportsWrite-only TransportsDatagram TransportsSubprocess Transports
- ProtocolsBase ProtocolsBase ProtocolStreaming ProtocolsBuffered Streaming ProtocolsDatagram ProtocolsSubprocess Protocols
- ExamplesTCP Echo ServerTCP Echo ClientUDP Echo ServerUDP Echo ClientConnecting Existing Socketsloop.subprocess_exec() and SubprocessProtocol

- Transports Hierarchy
- Base Transport
- Read-only Transports
- Write-only Transports
- Datagram Transports
- Subprocess Transports

- Base Protocols
- Base Protocol
- Streaming Protocols
- Buffered Streaming Protocols
- Datagram Protocols
- Subprocess Protocols

- TCP Echo Server
- TCP Echo Client
- UDP Echo Server
- UDP Echo Client
- Connecting Existing Sockets
- loop.subprocess_exec() and SubprocessProtocol

- Getting and Setting the Policy
- Policy Objects
- Process Watchers
- Custom Policies

- All Platforms
- WindowsSubprocess Support on Windows

- Subprocess Support on Windows

- Writing a Custom Event Loop
- Future and Task private constructors
- Task lifetime support

- Subprocesses
- Synchronization

- Obtaining the Event Loop
- Event Loop Methods
- Event Loop Policies

- Concurrency and Multithreading
- Running Blocking Code
- Detect never-awaited coroutines
- Detect never-retrieved exceptions

- Socket families
- Module contentsExceptionsConstantsFunctionsCreating socketsOther functions
- Socket Objects
- Notes on socket timeoutsTimeouts and theconnectmethodTimeouts and theacceptmethod

- FunctionsCreating socketsOther functions

- Creating sockets

- Timeouts and theconnectmethod
- Timeouts and theacceptmethod

- Functions, Constants, and ExceptionsSocket creationContext creationExceptionsRandom generationCertificate handlingConstants
- SSL Sockets
- SSL Contexts
- CertificatesCertificate chainsCA certificatesCombined key and certificateSelf-signed certificates
- ExamplesTesting for SSL supportClient-side operationServer-side operation
- Notes on non-blocking sockets
- SSL session
- Security considerationsBest defaultsManual settingsVerifying certificatesProtocol versionsCipher selectionMulti-processing

- Socket creation
- Context creation
- Random generation
- Certificate handling

- Certificate chains
- CA certificates
- Combined key and certificate
- Self-signed certificates

- Testing for SSL support
- Client-side operation
- Server-side operation

- Best defaults
- Manual settingsVerifying certificatesProtocol versionsCipher selection
- Multi-processing

- Verifying certificates
- Protocol versions
- Cipher selection

- /dev/pollPolling Objects
- Edge and Level Trigger Polling (epoll) Objects
- Polling Objects
- Kqueue Objects
- Kevent Objects

- General rulesExecution of Python signal handlersSignals and threads
- Module contents
- Note on SIGPIPE
- Note on Signal Handlers and Exceptions

- Execution of Python signal handlers
- Signals and threads

- MADV_* Constants
- MAP_* Constants

- email— An email and MIME handling packageemail.message: Representing an email messageemail.parser: Parsing email messagesFeedParser APIParser APIAdditional notesemail.generator: Generating MIME documentsemail.policy: Policy Objectsemail.errors: Exception and Defect classesemail.headerregistry: Custom Header Objectsemail.contentmanager: Managing MIME ContentContent Manager Instancesemail: Examplesemail.message.Message: Representing an email message using thecompat32APIemail.mime: Creating email and MIME objects from scratchemail.header: Internationalized headersemail.charset: Representing character setsemail.encoders: Encodersemail.utils: Miscellaneous utilitiesemail.iterators: Iterators
- json— JSON encoder and decoderBasic UsageEncoders and DecodersExceptionsStandard Compliance and InteroperabilityCharacter EncodingsInfinite and NaN Number ValuesRepeated Names Within an ObjectTop-level Non-Object, Non-Array ValuesImplementation LimitationsCommand Line InterfaceCommand line options
- mailbox— Manipulate mailboxes in various formatsMailboxobjectsMaildirobjectsmboxobjectsMHobjectsBabylobjectsMMDFobjectsMessageobjectsMaildirMessageobjectsmboxMessageobjectsMHMessageobjectsBabylMessageobjectsMMDFMessageobjectsExceptionsExamples
- mimetypes— Map filenames to MIME typesMimeTypes Objects
- base64— Base16, Base32, Base64, Base85 Data EncodingsSecurity Considerations
- binascii— Convert between binary and ASCII
- quopri— Encode and decode MIME quoted-printable data

- email.message: Representing an email message
- email.parser: Parsing email messagesFeedParser APIParser APIAdditional notes
- email.generator: Generating MIME documents
- email.policy: Policy Objects
- email.errors: Exception and Defect classes
- email.headerregistry: Custom Header Objects
- email.contentmanager: Managing MIME ContentContent Manager Instances
- email: Examples
- email.message.Message: Representing an email message using thecompat32API
- email.mime: Creating email and MIME objects from scratch
- email.header: Internationalized headers
- email.charset: Representing character sets
- email.encoders: Encoders
- email.utils: Miscellaneous utilities
- email.iterators: Iterators

================================================================================

```
email.message
```

```
email.parser
```

- FeedParser API
- Additional notes

```
email.generator
```

```
email.policy
```

```
email.errors
```

```
email.headerregistry
```

```
email.contentmanager
```

- Content Manager Instances

```
email.message.Message
```

```
email.mime
```

```
email.header
```

```
email.charset
```

```
email.encoders
```

```
email.utils
```

```
email.iterators
```

- Basic Usage
- Encoders and Decoders
- Standard Compliance and InteroperabilityCharacter EncodingsInfinite and NaN Number ValuesRepeated Names Within an ObjectTop-level Non-Object, Non-Array ValuesImplementation Limitations

- Character Encodings
- Infinite and NaN Number Values
- Repeated Names Within an Object
- Top-level Non-Object, Non-Array Values
- Implementation Limitations

- MailboxobjectsMaildirobjectsmboxobjectsMHobjectsBabylobjectsMMDFobjects
- MessageobjectsMaildirMessageobjectsmboxMessageobjectsMHMessageobjectsBabylMessageobjectsMMDFMessageobjects

- Maildirobjects
- mboxobjects
- Babylobjects
- MMDFobjects

- MaildirMessageobjects
- mboxMessageobjects
- MHMessageobjects
- BabylMessageobjects
- MMDFMessageobjects

```
MaildirMessage
```

```
mboxMessage
```

```
BabylMessage
```

```
MMDFMessage
```

- MimeTypes Objects

- html— HyperText Markup Language support
- html.parser— Simple HTML and XHTML parserExample HTML Parser ApplicationHTMLParserMethodsExamples
- html.entities— Definitions of HTML general entities
- XML Processing ModulesXML vulnerabilitiesThedefusedxmlPackage
- xml.etree.ElementTree— The ElementTree XML APITutorialXML tree and elementsParsing XMLPull API for non-blocking parsingFinding interesting elementsModifying an XML FileBuilding XML documentsParsing XML with NamespacesXPath supportExampleSupported XPath syntaxReferenceFunctionsXInclude supportExampleReferenceFunctionsElement ObjectsElementTree ObjectsQName ObjectsTreeBuilder ObjectsXMLParser ObjectsXMLPullParser ObjectsExceptions
- xml.dom— The Document Object Model APIModule ContentsObjects in the DOMDOMImplementation ObjectsNode ObjectsNodeList ObjectsDocumentType ObjectsDocument ObjectsElement ObjectsAttr ObjectsNamedNodeMap ObjectsComment ObjectsText and CDATASection ObjectsProcessingInstruction ObjectsExceptionsConformanceType MappingAccessor Methods
- xml.dom.minidom— Minimal DOM implementationDOM ObjectsDOM Exampleminidom and the DOM standard
- xml.dom.pulldom— Support for building partial DOM treesDOMEventStream Objects
- xml.sax— Support for SAX2 parsersSAXException Objects
- xml.sax.handler— Base classes for SAX handlersContentHandler ObjectsDTDHandler ObjectsEntityResolver ObjectsErrorHandler ObjectsLexicalHandler Objects
- xml.sax.saxutils— SAX Utilities
- xml.sax.xmlreader— Interface for XML parsersXMLReader ObjectsIncrementalParser ObjectsLocator ObjectsInputSource ObjectsTheAttributesInterfaceTheAttributesNSInterface
- xml.parsers.expat— Fast XML parsing using ExpatXMLParser ObjectsExpatError ExceptionsExampleContent Model DescriptionsExpat error constants

```
html.parser
```

- Example HTML Parser Application
- HTMLParserMethods

```
HTMLParser
```

```
html.entities
```

- XML vulnerabilities
- ThedefusedxmlPackage

```
defusedxml
```

- TutorialXML tree and elementsParsing XMLPull API for non-blocking parsingFinding interesting elementsModifying an XML FileBuilding XML documentsParsing XML with Namespaces
- XPath supportExampleSupported XPath syntax
- ReferenceFunctions
- XInclude supportExample
- ReferenceFunctionsElement ObjectsElementTree ObjectsQName ObjectsTreeBuilder ObjectsXMLParser ObjectsXMLPullParser ObjectsExceptions

- XML tree and elements
- Parsing XML
- Pull API for non-blocking parsing
- Finding interesting elements
- Modifying an XML File
- Building XML documents
- Parsing XML with Namespaces

- Supported XPath syntax

- Element Objects
- ElementTree Objects
- QName Objects
- TreeBuilder Objects
- XMLParser Objects
- XMLPullParser Objects

- Objects in the DOMDOMImplementation ObjectsNode ObjectsNodeList ObjectsDocumentType ObjectsDocument ObjectsElement ObjectsAttr ObjectsNamedNodeMap ObjectsComment ObjectsText and CDATASection ObjectsProcessingInstruction ObjectsExceptions
- ConformanceType MappingAccessor Methods

- DOMImplementation Objects
- Node Objects
- NodeList Objects
- DocumentType Objects
- Document Objects
- Attr Objects
- NamedNodeMap Objects
- Comment Objects
- Text and CDATASection Objects
- ProcessingInstruction Objects

- Type Mapping
- Accessor Methods

```
xml.dom.minidom
```

- DOM Objects
- DOM Example
- minidom and the DOM standard

```
xml.dom.pulldom
```

- DOMEventStream Objects

- SAXException Objects

```
xml.sax.handler
```

- ContentHandler Objects
- DTDHandler Objects
- EntityResolver Objects
- ErrorHandler Objects
- LexicalHandler Objects

```
xml.sax.saxutils
```

```
xml.sax.xmlreader
```

- XMLReader Objects
- IncrementalParser Objects
- Locator Objects
- InputSource Objects
- TheAttributesInterface
- TheAttributesNSInterface

```
Attributes
```

```
AttributesNS
```

```
xml.parsers.expat
```

- ExpatError Exceptions
- Content Model Descriptions
- Expat error constants

- webbrowser— Convenient web-browser controllerBrowser Controller Objects
- wsgiref— WSGI Utilities and Reference Implementationwsgiref.util– WSGI environment utilitieswsgiref.headers– WSGI response header toolswsgiref.simple_server– a simple WSGI HTTP serverwsgiref.validate— WSGI conformance checkerwsgiref.handlers– server/gateway base classeswsgiref.types– WSGI types for static type checkingExamples
- urllib— URL handling modules
- urllib.request— Extensible library for opening URLsRequest ObjectsOpenerDirector ObjectsBaseHandler ObjectsHTTPRedirectHandler ObjectsHTTPCookieProcessor ObjectsProxyHandler ObjectsHTTPPasswordMgr ObjectsHTTPPasswordMgrWithPriorAuth ObjectsAbstractBasicAuthHandler ObjectsHTTPBasicAuthHandler ObjectsProxyBasicAuthHandler ObjectsAbstractDigestAuthHandler ObjectsHTTPDigestAuthHandler ObjectsProxyDigestAuthHandler ObjectsHTTPHandler ObjectsHTTPSHandler ObjectsFileHandler ObjectsDataHandler ObjectsFTPHandler ObjectsCacheFTPHandler ObjectsUnknownHandler ObjectsHTTPErrorProcessor ObjectsExamplesLegacy interfaceurllib.requestRestrictions
- urllib.response— Response classes used by urllib
- urllib.parse— Parse URLs into componentsURL ParsingURL parsing securityParsing ASCII Encoded BytesStructured Parse ResultsURL Quoting
- urllib.error— Exception classes raised by urllib.request
- urllib.robotparser—  Parser for robots.txt
- http— HTTP modulesHTTP status codesHTTP status categoryHTTP methods
- http.client— HTTP protocol clientHTTPConnection ObjectsHTTPResponse ObjectsExamplesHTTPMessage Objects
- ftplib— FTP protocol clientReferenceFTP objectsFTP_TLS objectsModule variables
- poplib— POP3 protocol clientPOP3 ObjectsPOP3 Example
- imaplib— IMAP4 protocol clientIMAP4 ObjectsIMAP4 Example
- smtplib— SMTP protocol clientSMTP ObjectsSMTP Example
- uuid— UUID objects according toRFC 4122Command-Line UsageExampleCommand-Line Example
- socketserver— A framework for network serversServer Creation NotesServer ObjectsRequest Handler ObjectsExamplessocketserver.TCPServerExamplesocketserver.UDPServerExampleAsynchronous Mixins
- http.server— HTTP serversCommand-line interfaceSecurity considerations
- http.cookies— HTTP state managementCookie ObjectsMorsel ObjectsExample
- http.cookiejar— Cookie handling for HTTP clientsCookieJar and FileCookieJar ObjectsFileCookieJar subclasses and co-operation with web browsersCookiePolicy ObjectsDefaultCookiePolicy ObjectsCookie ObjectsExamples
- xmlrpc— XMLRPC server and client modules
- xmlrpc.client— XML-RPC client accessServerProxy ObjectsDateTime ObjectsBinary ObjectsFault ObjectsProtocolError ObjectsMultiCall ObjectsConvenience FunctionsExample of Client UsageExample of Client and Server Usage
- xmlrpc.server— Basic XML-RPC serversSimpleXMLRPCServer ObjectsSimpleXMLRPCServer ExampleCGIXMLRPCRequestHandlerDocumenting XMLRPC serverDocXMLRPCServer ObjectsDocCGIXMLRPCRequestHandler
- ipaddress— IPv4/IPv6 manipulation libraryConvenience factory functionsIP AddressesAddress objectsConversion to Strings and IntegersOperatorsComparison operatorsArithmetic operatorsIP Network definitionsPrefix, net mask and host maskNetwork objectsOperatorsLogical operatorsIterationNetworks as containers of addressesInterface objectsOperatorsLogical operatorsOther Module Level FunctionsCustom Exceptions

```
webbrowser
```

- Browser Controller Objects

- wsgiref.util– WSGI environment utilities
- wsgiref.headers– WSGI response header tools
- wsgiref.simple_server– a simple WSGI HTTP server
- wsgiref.validate— WSGI conformance checker
- wsgiref.handlers– server/gateway base classes
- wsgiref.types– WSGI types for static type checking

```
wsgiref.util
```

```
wsgiref.headers
```

```
wsgiref.simple_server
```

```
wsgiref.validate
```

```
wsgiref.handlers
```

```
wsgiref.types
```

- Request Objects
- OpenerDirector Objects
- BaseHandler Objects
- HTTPRedirectHandler Objects
- HTTPCookieProcessor Objects
- ProxyHandler Objects
- HTTPPasswordMgr Objects
- HTTPPasswordMgrWithPriorAuth Objects
- AbstractBasicAuthHandler Objects
- HTTPBasicAuthHandler Objects
- ProxyBasicAuthHandler Objects
- AbstractDigestAuthHandler Objects
- HTTPDigestAuthHandler Objects
- ProxyDigestAuthHandler Objects
- HTTPHandler Objects
- HTTPSHandler Objects
- FileHandler Objects
- DataHandler Objects
- FTPHandler Objects
- CacheFTPHandler Objects
- UnknownHandler Objects
- HTTPErrorProcessor Objects
- Legacy interface
- urllib.requestRestrictions

```
urllib.response
```

- URL Parsing
- URL parsing security
- Parsing ASCII Encoded Bytes
- Structured Parse Results
- URL Quoting

```
urllib.error
```

- HTTP status codes
- HTTP status category
- HTTP methods

- HTTPConnection Objects
- HTTPResponse Objects
- HTTPMessage Objects

- ReferenceFTP objectsFTP_TLS objectsModule variables

- FTP objects
- FTP_TLS objects
- Module variables

- POP3 Objects
- POP3 Example

- IMAP4 Objects
- IMAP4 Example

- SMTP Objects
- SMTP Example

- Command-Line Example

- Server Creation Notes
- Request Handler Objects
- Examplessocketserver.TCPServerExamplesocketserver.UDPServerExampleAsynchronous Mixins

- socketserver.TCPServerExample
- socketserver.UDPServerExample
- Asynchronous Mixins

```
socketserver.TCPServer
```

```
socketserver.UDPServer
```

```
http.cookies
```

- Cookie Objects
- Morsel Objects

```
http.cookiejar
```

- CookieJar and FileCookieJar Objects
- FileCookieJar subclasses and co-operation with web browsers
- CookiePolicy Objects
- DefaultCookiePolicy Objects

- ServerProxy Objects
- DateTime Objects
- Binary Objects
- Fault Objects
- ProtocolError Objects
- MultiCall Objects
- Convenience Functions
- Example of Client Usage
- Example of Client and Server Usage

- SimpleXMLRPCServer ObjectsSimpleXMLRPCServer Example
- CGIXMLRPCRequestHandler
- Documenting XMLRPC server
- DocXMLRPCServer Objects
- DocCGIXMLRPCRequestHandler

- SimpleXMLRPCServer Example

- Convenience factory functions
- IP AddressesAddress objectsConversion to Strings and IntegersOperatorsComparison operatorsArithmetic operators
- IP Network definitionsPrefix, net mask and host maskNetwork objectsOperatorsLogical operatorsIterationNetworks as containers of addresses
- Interface objectsOperatorsLogical operators
- Other Module Level Functions
- Custom Exceptions

- Address objects
- Conversion to Strings and Integers
- OperatorsComparison operatorsArithmetic operators

- Comparison operators
- Arithmetic operators

- Prefix, net mask and host mask
- Network objects
- OperatorsLogical operatorsIterationNetworks as containers of addresses

- Logical operators
- Networks as containers of addresses

- OperatorsLogical operators

- wave— Read and write WAV filesWave_read ObjectsWave_write Objects
- colorsys— Conversions between color systems

- Wave_read Objects
- Wave_write Objects

- gettext— Multilingual internationalization servicesGNUgettextAPIClass-based APITheNullTranslationsclassTheGNUTranslationsclassSolaris message catalog supportThe Catalog constructorInternationalizing your programs and modulesLocalizing your moduleLocalizing your applicationChanging languages on the flyDeferred translationsAcknowledgements
- locale— Internationalization servicesBackground, details, hints, tips and caveatsFor extension writers and programs that embed PythonAccess to message catalogs

- GNUgettextAPI
- Class-based APITheNullTranslationsclassTheGNUTranslationsclassSolaris message catalog supportThe Catalog constructor
- Internationalizing your programs and modulesLocalizing your moduleLocalizing your applicationChanging languages on the flyDeferred translations

- TheNullTranslationsclass
- TheGNUTranslationsclass
- Solaris message catalog support
- The Catalog constructor

```
NullTranslations
```

```
GNUTranslations
```

- Localizing your module
- Localizing your application
- Changing languages on the fly
- Deferred translations

- Background, details, hints, tips and caveats
- For extension writers and programs that embed Python
- Access to message catalogs

- turtle— Turtle graphicsIntroductionGet startedTutorialStarting a turtle environmentBasic drawingPen controlThe turtle’s positionMaking algorithmic patternsHow to…Get started as quickly as possibleUse theturtlemodule namespaceUse turtle graphics in a scriptUse object-oriented turtle graphicsTurtle graphics referenceTurtle methodsMethods of TurtleScreen/ScreenMethods of RawTurtle/Turtle and corresponding functionsTurtle motionTell Turtle’s stateSettings for measurementPen controlDrawing stateColor controlFillingMore drawing controlTurtle stateVisibilityAppearanceUsing eventsSpecial Turtle methodsCompound shapesMethods of TurtleScreen/Screen and corresponding functionsWindow controlAnimation controlUsing screen eventsInput methodsSettings and special methodsMethods specific to Screen, not inherited from TurtleScreenPublic classesExplanationHelp and configurationHow to use helpTranslation of docstrings into different languagesHow to configure Screen and Turtlesturtledemo— Demo scriptsChanges since Python 2.6Changes since Python 3.0
- cmd— Support for line-oriented command interpretersCmd ObjectsCmd Example
- shlex— Simple lexical analysisshlex ObjectsParsing RulesImproved Compatibility with Shells

- Get started
- TutorialStarting a turtle environmentBasic drawingPen controlThe turtle’s positionMaking algorithmic patterns
- How to…Get started as quickly as possibleUse theturtlemodule namespaceUse turtle graphics in a scriptUse object-oriented turtle graphics
- Turtle graphics referenceTurtle methodsMethods of TurtleScreen/Screen
- Methods of RawTurtle/Turtle and corresponding functionsTurtle motionTell Turtle’s stateSettings for measurementPen controlDrawing stateColor controlFillingMore drawing controlTurtle stateVisibilityAppearanceUsing eventsSpecial Turtle methodsCompound shapes
- Methods of TurtleScreen/Screen and corresponding functionsWindow controlAnimation controlUsing screen eventsInput methodsSettings and special methodsMethods specific to Screen, not inherited from TurtleScreen
- Public classes
- Explanation
- Help and configurationHow to use helpTranslation of docstrings into different languagesHow to configure Screen and Turtles
- turtledemo— Demo scripts
- Changes since Python 2.6
- Changes since Python 3.0

- Starting a turtle environment
- Basic drawingPen controlThe turtle’s position
- Making algorithmic patterns

- Pen control
- The turtle’s position

- Get started as quickly as possible
- Use theturtlemodule namespace
- Use turtle graphics in a script
- Use object-oriented turtle graphics

- Turtle methods
- Methods of TurtleScreen/Screen

- Turtle motion
- Tell Turtle’s state
- Settings for measurement
- Pen controlDrawing stateColor controlFillingMore drawing control
- Turtle stateVisibilityAppearance
- Using events
- Special Turtle methods
- Compound shapes

- Drawing state
- Color control
- More drawing control

- Window control
- Animation control
- Using screen events
- Input methods
- Settings and special methods
- Methods specific to Screen, not inherited from TurtleScreen

- How to use help
- Translation of docstrings into different languages
- How to configure Screen and Turtles

================================================================================

```
turtledemo
```

- Cmd Objects
- Cmd Example

- shlex Objects
- Parsing Rules
- Improved Compatibility with Shells

- tkinter— Python interface to Tcl/TkArchitectureTkinter ModulesTkinter Life PreserverA Hello World ProgramImportant Tk ConceptsUnderstanding How Tkinter Wraps Tcl/TkHow do I…? What option does…?Navigating the Tcl/Tk Reference ManualThreading modelHandy ReferenceSetting OptionsThe PackerPacker OptionsCoupling Widget VariablesThe Window ManagerTk Option Data TypesBindings and EventsThe index ParameterImagesFile Handlers
- tkinter.colorchooser— Color choosing dialog
- tkinter.font— Tkinter font wrapper
- Tkinter Dialogstkinter.simpledialog— Standard Tkinter input dialogstkinter.filedialog— File selection dialogsNative Load/Save Dialogstkinter.commondialog— Dialog window templates
- tkinter.messagebox— Tkinter message prompts
- tkinter.scrolledtext— Scrolled Text Widget
- tkinter.dnd— Drag and drop support
- tkinter.ttk— Tk themed widgetsUsing TtkTtk WidgetsWidgetStandard OptionsScrollable Widget OptionsLabel OptionsCompatibility OptionsWidget Statesttk.WidgetComboboxOptionsVirtual eventsttk.ComboboxSpinboxOptionsVirtual eventsttk.SpinboxNotebookOptionsTab OptionsTab IdentifiersVirtual Eventsttk.NotebookProgressbarOptionsttk.ProgressbarSeparatorOptionsSizegripPlatform-specific notesBugsTreeviewOptionsItem OptionsTag OptionsColumn IdentifiersVirtual Eventsttk.TreeviewTtk StylingLayouts
- IDLE — Python editor and shellMenusFile menu (Shell and Editor)Edit menu (Shell and Editor)Format menu (Editor window only)Run menu (Editor window only)Shell menu (Shell window only)Debug menu (Shell window only)Options menu (Shell and Editor)Window menu (Shell and Editor)Help menu (Shell and Editor)Context menusEditing and NavigationEditor windowsKey bindingsAutomatic indentationSearch and ReplaceCompletionsCalltipsCode ContextShell windowText colorsStartup and Code ExecutionCommand line usageStartup failureRunning user codeUser output in ShellDeveloping tkinter applicationsRunning without a subprocessHelp and PreferencesHelp sourcesSetting preferencesIDLE on macOSExtensionsidlelib — implementation of IDLE application

- Architecture
- Tkinter Modules
- Tkinter Life PreserverA Hello World ProgramImportant Tk ConceptsUnderstanding How Tkinter Wraps Tcl/TkHow do I…? What option does…?Navigating the Tcl/Tk Reference Manual
- Threading model
- Handy ReferenceSetting OptionsThe PackerPacker OptionsCoupling Widget VariablesThe Window ManagerTk Option Data TypesBindings and EventsThe index ParameterImages
- File Handlers

- A Hello World Program
- Important Tk Concepts
- Understanding How Tkinter Wraps Tcl/Tk
- How do I…? What option does…?
- Navigating the Tcl/Tk Reference Manual

- Setting Options
- Packer Options
- Coupling Widget Variables
- The Window Manager
- Tk Option Data Types
- Bindings and Events
- The index Parameter

```
tkinter.colorchooser
```

```
tkinter.font
```

- tkinter.simpledialog— Standard Tkinter input dialogs
- tkinter.filedialog— File selection dialogsNative Load/Save Dialogs
- tkinter.commondialog— Dialog window templates

```
tkinter.simpledialog
```

```
tkinter.filedialog
```

- Native Load/Save Dialogs

```
tkinter.commondialog
```

```
tkinter.messagebox
```

```
tkinter.scrolledtext
```

```
tkinter.dnd
```

```
tkinter.ttk
```

- Ttk Widgets
- WidgetStandard OptionsScrollable Widget OptionsLabel OptionsCompatibility OptionsWidget Statesttk.Widget
- ComboboxOptionsVirtual eventsttk.Combobox
- SpinboxOptionsVirtual eventsttk.Spinbox
- NotebookOptionsTab OptionsTab IdentifiersVirtual Eventsttk.Notebook
- ProgressbarOptionsttk.Progressbar
- SeparatorOptions
- SizegripPlatform-specific notesBugs
- TreeviewOptionsItem OptionsTag OptionsColumn IdentifiersVirtual Eventsttk.Treeview
- Ttk StylingLayouts

- Standard Options
- Scrollable Widget Options
- Label Options
- Compatibility Options
- Widget States

- Virtual events
- ttk.Combobox

- ttk.Spinbox

- Tab Options
- Tab Identifiers
- Virtual Events
- ttk.Notebook

- ttk.Progressbar

- Platform-specific notes

- Item Options
- Tag Options
- Column Identifiers
- ttk.Treeview

- MenusFile menu (Shell and Editor)Edit menu (Shell and Editor)Format menu (Editor window only)Run menu (Editor window only)Shell menu (Shell window only)Debug menu (Shell window only)Options menu (Shell and Editor)Window menu (Shell and Editor)Help menu (Shell and Editor)Context menus
- Editing and NavigationEditor windowsKey bindingsAutomatic indentationSearch and ReplaceCompletionsCalltipsCode ContextShell windowText colors
- Startup and Code ExecutionCommand line usageStartup failureRunning user codeUser output in ShellDeveloping tkinter applicationsRunning without a subprocess
- Help and PreferencesHelp sourcesSetting preferencesIDLE on macOSExtensions
- idlelib — implementation of IDLE application

- File menu (Shell and Editor)
- Edit menu (Shell and Editor)
- Format menu (Editor window only)
- Run menu (Editor window only)
- Shell menu (Shell window only)
- Debug menu (Shell window only)
- Options menu (Shell and Editor)
- Window menu (Shell and Editor)
- Help menu (Shell and Editor)
- Context menus

- Editor windows
- Key bindings
- Automatic indentation
- Search and Replace
- Completions
- Code Context
- Shell window
- Text colors

- Command line usage
- Startup failure
- Running user code
- User output in Shell
- Developing tkinter applications
- Running without a subprocess

- Help sources
- Setting preferences
- IDLE on macOS

- typing— Support for type hintsSpecification for the Python Type SystemType aliasesNewTypeAnnotating callable objectsGenericsAnnotating tuplesThe type of class objectsAnnotating generators and coroutinesUser-defined generic typesTheAnytypeNominal vs structural subtypingModule contentsSpecial typing primitivesSpecial typesSpecial formsBuilding generic types and type aliasesOther special directivesProtocolsABCs for working with IOFunctions and decoratorsIntrospection helpersConstantDeprecated aliasesAliases to built-in typesAliases to types incollectionsAliases to other concrete typesAliases to container ABCs incollections.abcAliases to asynchronous ABCs incollections.abcAliases to other ABCs incollections.abcAliases tocontextlibABCsDeprecation Timeline of Major Features
- pydoc— Documentation generator and online help system
- Python Development ModeEffects of the Python Development ModeResourceWarning ExampleBad file descriptor error example
- doctest— Test interactive Python examplesSimple Usage: Checking Examples in DocstringsSimple Usage: Checking Examples in a Text FileCommand-line UsageHow It WorksWhich Docstrings Are Examined?How are Docstring Examples Recognized?What’s the Execution Context?What About Exceptions?Option FlagsDirectivesWarningsBasic APIUnittest APIAdvanced APIDocTest ObjectsExample ObjectsDocTestFinder objectsDocTestParser objectsTestResults objectsDocTestRunner objectsOutputChecker objectsDebuggingSoapbox
- unittest— Unit testing frameworkBasic exampleCommand-Line InterfaceCommand-line optionsTest DiscoveryOrganizing test codeRe-using old test codeSkipping tests and expected failuresDistinguishing test iterations using subtestsClasses and functionsTest casesGrouping testsLoading and running testsload_tests ProtocolClass and Module FixturessetUpClass and tearDownClasssetUpModule and tearDownModuleSignal Handling
- unittest.mock— mock object libraryQuick GuideThe Mock ClassCallingDeleting AttributesMock names and the name attributeAttaching Mocks as AttributesThe patcherspatchpatch.objectpatch.dictpatch.multiplepatch methods: start and stoppatch builtinsTEST_PREFIXNesting Patch DecoratorsWhere to patchPatching Descriptors and Proxy ObjectsMagicMock and magic method supportMocking Magic MethodsMagic MockHelperssentinelDEFAULTcallcreate_autospecANYFILTER_DIRmock_openAutospeccingSealing mocksOrder of precedence ofside_effect,return_valueandwraps
- unittest.mock— getting startedUsing MockMock Patching MethodsMock for Method Calls on an ObjectMocking ClassesNaming your mocksTracking all CallsSetting Return Values and AttributesRaising exceptions with mocksSide effect functions and iterablesMocking asynchronous iteratorsMocking asynchronous context managerCreating a Mock from an Existing ObjectUsing side_effect to return per file contentPatch DecoratorsFurther ExamplesMocking chained callsPartial mockingMocking a Generator MethodApplying the same patch to every test methodMocking Unbound MethodsChecking multiple calls with mockCoping with mutable argumentsNesting PatchesMocking a dictionary with MagicMockMock subclasses and their attributesMocking imports with patch.dictTracking order of calls and less verbose call assertionsMore complex argument matching
- test— Regression tests package for PythonWriting Unit Tests for thetestpackageRunning tests using the command-line interface
- test.support— Utilities for the Python test suite
- test.support.socket_helper— Utilities for socket tests
- test.support.script_helper— Utilities for the Python execution tests
- test.support.bytecode_helper— Support tools for testing correct bytecode generation
- test.support.threading_helper— Utilities for threading tests
- test.support.os_helper— Utilities for os tests
- test.support.import_helper— Utilities for import tests
- test.support.warnings_helper— Utilities for warnings tests

- Specification for the Python Type System
- Type aliases
- Annotating callable objects
- Annotating tuples
- The type of class objects
- Annotating generators and coroutines
- User-defined generic types
- Nominal vs structural subtyping
- Module contentsSpecial typing primitivesSpecial typesSpecial formsBuilding generic types and type aliasesOther special directivesProtocolsABCs for working with IOFunctions and decoratorsIntrospection helpersConstantDeprecated aliasesAliases to built-in typesAliases to types incollectionsAliases to other concrete typesAliases to container ABCs incollections.abcAliases to asynchronous ABCs incollections.abcAliases to other ABCs incollections.abcAliases tocontextlibABCs
- Deprecation Timeline of Major Features

- Special typing primitivesSpecial typesSpecial formsBuilding generic types and type aliasesOther special directives
- ABCs for working with IO
- Functions and decorators
- Introspection helpers
- Deprecated aliasesAliases to built-in typesAliases to types incollectionsAliases to other concrete typesAliases to container ABCs incollections.abcAliases to asynchronous ABCs incollections.abcAliases to other ABCs incollections.abcAliases tocontextlibABCs

- Special types
- Special forms
- Building generic types and type aliases
- Other special directives

- Aliases to built-in types
- Aliases to types incollections
- Aliases to other concrete types
- Aliases to container ABCs incollections.abc
- Aliases to asynchronous ABCs incollections.abc
- Aliases to other ABCs incollections.abc
- Aliases tocontextlibABCs

```
contextlib
```

- Effects of the Python Development Mode
- ResourceWarning Example
- Bad file descriptor error example

- Simple Usage: Checking Examples in Docstrings
- Simple Usage: Checking Examples in a Text File
- Command-line Usage
- How It WorksWhich Docstrings Are Examined?How are Docstring Examples Recognized?What’s the Execution Context?What About Exceptions?Option FlagsDirectivesWarnings
- Unittest API
- Advanced APIDocTest ObjectsExample ObjectsDocTestFinder objectsDocTestParser objectsTestResults objectsDocTestRunner objectsOutputChecker objects

- Which Docstrings Are Examined?
- How are Docstring Examples Recognized?
- What’s the Execution Context?
- What About Exceptions?
- Option Flags

- DocTest Objects
- Example Objects
- DocTestFinder objects
- DocTestParser objects
- TestResults objects
- DocTestRunner objects
- OutputChecker objects

- Basic example
- Test Discovery
- Organizing test code
- Re-using old test code
- Skipping tests and expected failures
- Distinguishing test iterations using subtests
- Classes and functionsTest casesGrouping testsLoading and running testsload_tests Protocol
- Class and Module FixturessetUpClass and tearDownClasssetUpModule and tearDownModule
- Signal Handling

- Grouping tests
- Loading and running testsload_tests Protocol

- load_tests Protocol

- setUpClass and tearDownClass
- setUpModule and tearDownModule

- Quick Guide
- The Mock ClassCallingDeleting AttributesMock names and the name attributeAttaching Mocks as Attributes
- The patcherspatchpatch.objectpatch.dictpatch.multiplepatch methods: start and stoppatch builtinsTEST_PREFIXNesting Patch DecoratorsWhere to patchPatching Descriptors and Proxy Objects
- MagicMock and magic method supportMocking Magic MethodsMagic Mock
- HelperssentinelDEFAULTcallcreate_autospecANYFILTER_DIRmock_openAutospeccingSealing mocks
- Order of precedence ofside_effect,return_valueandwraps

- Deleting Attributes
- Mock names and the name attribute
- Attaching Mocks as Attributes

- patch.object
- patch.multiple
- patch methods: start and stop
- patch builtins
- TEST_PREFIX
- Nesting Patch Decorators
- Where to patch
- Patching Descriptors and Proxy Objects

- Mocking Magic Methods

- create_autospec
- Autospeccing
- Sealing mocks

================================================================================

```
side_effect
```

```
return_value
```

- Using MockMock Patching MethodsMock for Method Calls on an ObjectMocking ClassesNaming your mocksTracking all CallsSetting Return Values and AttributesRaising exceptions with mocksSide effect functions and iterablesMocking asynchronous iteratorsMocking asynchronous context managerCreating a Mock from an Existing ObjectUsing side_effect to return per file content
- Patch Decorators
- Further ExamplesMocking chained callsPartial mockingMocking a Generator MethodApplying the same patch to every test methodMocking Unbound MethodsChecking multiple calls with mockCoping with mutable argumentsNesting PatchesMocking a dictionary with MagicMockMock subclasses and their attributesMocking imports with patch.dictTracking order of calls and less verbose call assertionsMore complex argument matching

- Mock Patching Methods
- Mock for Method Calls on an Object
- Mocking Classes
- Naming your mocks
- Tracking all Calls
- Setting Return Values and Attributes
- Raising exceptions with mocks
- Side effect functions and iterables
- Mocking asynchronous iterators
- Mocking asynchronous context manager
- Creating a Mock from an Existing Object
- Using side_effect to return per file content

- Mocking chained calls
- Partial mocking
- Mocking a Generator Method
- Applying the same patch to every test method
- Mocking Unbound Methods
- Checking multiple calls with mock
- Coping with mutable arguments
- Nesting Patches
- Mocking a dictionary with MagicMock
- Mock subclasses and their attributes
- Mocking imports with patch.dict
- Tracking order of calls and less verbose call assertions
- More complex argument matching

- Writing Unit Tests for thetestpackage
- Running tests using the command-line interface

```
test.support
```

```
test.support.socket_helper
```

```
test.support.script_helper
```

```
test.support.bytecode_helper
```

```
test.support.threading_helper
```

```
test.support.os_helper
```

```
test.support.import_helper
```

```
test.support.warnings_helper
```

- Audit events table
- bdb— Debugger framework
- faulthandler— Dump the Python tracebackDumping the tracebackFault handler stateDumping the tracebacks after a timeoutDumping the traceback on a user signalIssue with file descriptorsExample
- pdb— The Python DebuggerDebugger Commands
- The Python ProfilersIntroduction to the profilersInstant User’s ManualprofileandcProfileModule ReferenceTheStatsClassWhat Is Deterministic Profiling?LimitationsCalibrationUsing a custom timer
- timeit— Measure execution time of small code snippetsBasic ExamplesPython InterfaceCommand-Line InterfaceExamples
- trace— Trace or track Python statement executionCommand-Line UsageMain optionsModifiersFiltersProgrammatic Interface
- tracemalloc— Trace memory allocationsExamplesDisplay the top 10Compute differencesGet the traceback of a memory blockPretty topRecord the current and peak size of all traced memory blocksAPIFunctionsDomainFilterFilterFrameSnapshotStatisticStatisticDiffTraceTraceback

- Dumping the traceback
- Fault handler state
- Dumping the tracebacks after a timeout
- Dumping the traceback on a user signal
- Issue with file descriptors

- Debugger Commands

- Introduction to the profilers
- Instant User’s Manual
- profileandcProfileModule Reference
- TheStatsClass
- What Is Deterministic Profiling?
- Limitations
- Calibration
- Using a custom timer

- Python Interface
- Command-Line Interface

- Command-Line UsageMain optionsModifiersFilters
- Programmatic Interface

- Main options

- ExamplesDisplay the top 10Compute differencesGet the traceback of a memory blockPretty topRecord the current and peak size of all traced memory blocks
- APIFunctionsDomainFilterFilterFrameSnapshotStatisticStatisticDiffTraceTraceback

- Display the top 10
- Compute differences
- Get the traceback of a memory block
- Pretty topRecord the current and peak size of all traced memory blocks

- Record the current and peak size of all traced memory blocks

- DomainFilter
- StatisticDiff

- ensurepip— Bootstrapping thepipinstallerCommand line interfaceModule API
- venv— Creation of virtual environmentsCreating virtual environmentsHow venvs workAPIAn example of extendingEnvBuilder
- zipapp— Manage executable Python zip archivesBasic ExampleCommand-Line InterfacePython APIExamplesSpecifying the InterpreterCreating Standalone Applications with zipappCaveatsThe Python Zip Application Archive Format

- Command line interface

- Creating virtual environments
- How venvs work
- An example of extendingEnvBuilder

```
EnvBuilder
```

- Basic Example
- Specifying the Interpreter
- Creating Standalone Applications with zipappCaveats
- The Python Zip Application Archive Format

- sys— System-specific parameters and functions
- sys.monitoring— Execution event monitoringTool identifiersRegistering and using toolsEventsLocal eventsAncillary eventsOther eventsThe STOP_ITERATION eventTurning events on and offSetting events globallyPer code object eventsDisabling eventsRegistering callback functionsCallback function arguments
- sysconfig— Provide access to Python’s configuration informationConfiguration variablesInstallation pathsUser schemeposix_usernt_userosx_framework_userHome schemeposix_homePrefix schemeposix_prefixntInstallation path functionsOther functionsUsingsysconfigas a script
- builtins— Built-in objects
- __main__— Top-level code environment__name__=='__main__'What is the “top-level code environment”?Idiomatic UsagePackaging Considerations__main__.pyin Python PackagesIdiomatic Usageimport__main__
- warnings— Warning controlWarning CategoriesThe Warnings FilterRepeated Warning Suppression CriteriaDescribing Warning FiltersDefault Warning FilterOverriding the default filterTemporarily Suppressing WarningsTesting WarningsUpdating Code For New Versions of DependenciesAvailable FunctionsAvailable Context Managers
- dataclasses— Data ClassesModule contentsPost-init processingClass variablesInit-only variablesFrozen instancesInheritanceRe-ordering of keyword-only parameters in__init__()Default factory functionsMutable default valuesDescriptor-typed fields
- contextlib— Utilities forwith-statement contextsUtilitiesExamples and RecipesSupporting a variable number of context managersCatching exceptions from__enter__methodsCleaning up in an__enter__implementationReplacing any use oftry-finallyand flag variablesUsing a context manager as a function decoratorSingle use, reusable and reentrant context managersReentrant context managersReusable context managers
- abc— Abstract Base Classes
- atexit— Exit handlersatexitExample
- traceback— Print or retrieve a stack tracebackModule-Level FunctionsTracebackExceptionObjectsStackSummaryObjectsFrameSummaryObjectsExamples of Using the Module-Level FunctionsExamples of UsingTracebackException
- __future__— Future statement definitionsModule Contents
- gc— Garbage Collector interface
- inspect— Inspect live objectsTypes and membersRetrieving source codeIntrospecting callables with the Signature objectClasses and functionsThe interpreter stackFetching attributes staticallyCurrent State of Generators, Coroutines, and Asynchronous GeneratorsCode Objects Bit FlagsBuffer flagsCommand Line Interface
- site— Site-specific configuration hooksitecustomizeusercustomizeReadline configurationModule contentsCommand Line Interface

```
sys.monitoring
```

- Tool identifiersRegistering and using tools
- EventsLocal eventsAncillary eventsOther eventsThe STOP_ITERATION event
- Turning events on and offSetting events globallyPer code object eventsDisabling events
- Registering callback functionsCallback function arguments

- Registering and using tools

- Local events
- Ancillary events
- Other events
- The STOP_ITERATION event

- Setting events globally
- Per code object events
- Disabling events

- Callback function arguments

- Configuration variables
- Installation paths
- User schemeposix_usernt_userosx_framework_user
- Home schemeposix_home
- Prefix schemeposix_prefixnt
- Installation path functions
- Usingsysconfigas a script

- osx_framework_user

```
posix_user
```

```
posix_home
```

- posix_prefix

- __name__=='__main__'What is the “top-level code environment”?Idiomatic UsagePackaging Considerations
- __main__.pyin Python PackagesIdiomatic Usage
- import__main__

```
__name__=='__main__'
```

- What is the “top-level code environment”?
- Idiomatic Usage
- Packaging Considerations

```
__main__.py
```

- Warning Categories
- The Warnings FilterRepeated Warning Suppression CriteriaDescribing Warning FiltersDefault Warning FilterOverriding the default filter
- Temporarily Suppressing Warnings
- Testing Warnings
- Updating Code For New Versions of Dependencies
- Available Functions
- Available Context Managers

- Repeated Warning Suppression Criteria
- Describing Warning Filters
- Default Warning Filter
- Overriding the default filter

- Post-init processing
- Class variables
- Init-only variables
- Frozen instances
- Inheritance
- Re-ordering of keyword-only parameters in__init__()
- Default factory functions
- Mutable default values
- Descriptor-typed fields

```
__init__()
```

- Examples and RecipesSupporting a variable number of context managersCatching exceptions from__enter__methodsCleaning up in an__enter__implementationReplacing any use oftry-finallyand flag variablesUsing a context manager as a function decorator
- Single use, reusable and reentrant context managersReentrant context managersReusable context managers

- Supporting a variable number of context managers
- Catching exceptions from__enter__methods
- Cleaning up in an__enter__implementation
- Replacing any use oftry-finallyand flag variables
- Using a context manager as a function decorator

```
try-finally
```

- Reentrant context managers
- Reusable context managers

- atexitExample

- TracebackExceptionObjects
- StackSummaryObjects
- FrameSummaryObjects
- Examples of Using the Module-Level Functions
- Examples of UsingTracebackException

```
TracebackException
```

```
StackSummary
```

```
FrameSummary
```

```
__future__
```

- Types and members
- Retrieving source code
- Introspecting callables with the Signature object
- Classes and functions
- The interpreter stack
- Fetching attributes statically
- Current State of Generators, Coroutines, and Asynchronous Generators
- Code Objects Bit Flags
- Buffer flags
- Command Line Interface

- sitecustomize
- usercustomize
- Readline configuration

- code— Interpreter base classesInteractive Interpreter ObjectsInteractive Console Objects
- codeop— Compile Python code

- Interactive Interpreter Objects
- Interactive Console Objects

- zipimport— Import modules from Zip archiveszipimporter ObjectsExamples
- pkgutil— Package extension utility
- modulefinder— Find modules used by a scriptExample usage ofModuleFinder
- runpy— Locating and executing Python modules
- importlib— The implementation ofimportIntroductionFunctionsimportlib.abc– Abstract base classes related to importimportlib.machinery– Importers and path hooksimportlib.util– Utility code for importersExamplesImporting programmaticallyChecking if a module can be importedImporting a source file directlyImplementing lazy importsSetting up an importerApproximatingimportlib.import_module()
- importlib.resources– Package resource reading, opening and accessFunctional API
- importlib.resources.abc– Abstract base classes for resources
- importlib.metadata– Accessing package metadataOverviewFunctional APIEntry pointsDistribution metadataDistribution versionsDistribution filesDistribution requirementsMapping import to distribution packagesDistributionsDistribution DiscoveryExtending the search algorithmExample
- The initialization of thesys.pathmodule search pathVirtual environments_pth filesEmbedded Python

- zipimporter Objects

```
modulefinder
```

- Example usage ofModuleFinder

```
ModuleFinder
```

- importlib.abc– Abstract base classes related to import
- importlib.machinery– Importers and path hooks
- importlib.util– Utility code for importers
- ExamplesImporting programmaticallyChecking if a module can be importedImporting a source file directlyImplementing lazy importsSetting up an importerApproximatingimportlib.import_module()

```
importlib.abc
```

```
importlib.machinery
```

```
importlib.util
```

- Importing programmatically
- Checking if a module can be imported
- Importing a source file directly
- Implementing lazy imports
- Setting up an importer
- Approximatingimportlib.import_module()

```
importlib.import_module()
```

- Functional API

```
importlib.resources.abc
```

- Functional APIEntry pointsDistribution metadataDistribution versionsDistribution filesDistribution requirementsMapping import to distribution packages
- Distributions
- Distribution Discovery
- Extending the search algorithmExample

- Entry points
- Distribution metadata
- Distribution versions
- Distribution files
- Distribution requirements
- Mapping import to distribution packages

- Virtual environments
- Embedded Python

- ast— Abstract Syntax TreesAbstract GrammarNode classesRoot nodesLiteralsVariablesExpressionsSubscriptingComprehensionsStatementsImportsControl flowPattern matchingType parametersFunction and class definitionsAsync and awaitastHelpersCompiler FlagsCommand-Line Usage
- symtable— Access to the compiler’s symbol tablesGenerating Symbol TablesExamining Symbol TablesCommand-Line Usage
- token— Constants used with Python parse trees
- keyword— Testing for Python keywords
- tokenize— Tokenizer for Python sourceTokenizing InputCommand-Line UsageExamples
- tabnanny— Detection of ambiguous indentation
- pyclbr— Python module browser supportFunction ObjectsClass Objects
- py_compile— Compile Python source filesCommand-Line Interface
- compileall— Byte-compile Python librariesCommand-line usePublic functions
- dis— Disassembler for Python bytecodeCommand-line interfaceBytecode analysisAnalysis functionsPython Bytecode InstructionsOpcode collections
- pickletools— Tools for pickle developersCommand line usageCommand line optionsProgrammatic Interface

- Abstract Grammar
- Node classesRoot nodesLiteralsVariablesExpressionsSubscriptingComprehensionsStatementsImportsControl flowPattern matchingType parametersFunction and class definitionsAsync and await
- Compiler Flags

- ExpressionsSubscriptingComprehensions
- StatementsImports
- Control flow
- Pattern matching
- Type parameters
- Function and class definitions
- Async and await

- Subscripting
- Comprehensions

- Generating Symbol Tables
- Examining Symbol Tables

- Tokenizing Input

- Function Objects
- Class Objects

================================================================================

```
py_compile
```

```
compileall
```

- Command-line use
- Public functions

- Bytecode analysis
- Analysis functions
- Python Bytecode Instructions
- Opcode collections

- Command line usageCommand line options

- msvcrt— Useful routines from the MS VC++ runtimeFile OperationsConsole I/OOther Functions
- winreg— Windows registry accessFunctionsConstantsHKEY_* ConstantsAccess Rights64-bit SpecificValue TypesRegistry Handle Objects
- winsound— Sound-playing interface for Windows

- File Operations
- Console I/O
- Other Functions

- ConstantsHKEY_* ConstantsAccess Rights64-bit SpecificValue Types
- Registry Handle Objects

- HKEY_* Constants
- Access Rights64-bit Specific
- Value Types

- 64-bit Specific

- posix— The most common POSIX system callsLarge File SupportNotable Module Contents
- pwd— The password database
- grp— The group database
- termios— POSIX style tty controlExample
- tty— Terminal control functions
- pty— Pseudo-terminal utilitiesExample
- fcntl— Thefcntlandioctlsystem calls
- resource— Resource usage informationResource LimitsResource Usage
- syslog— Unix syslog library routinesExamplesSimple example

- Large File Support
- Notable Module Contents

- Resource Limits
- Resource Usage

- ExamplesSimple example

- Simple example

- getopt— C-style parser for command line options

- Recommended third party tools
- Creating extensions without third party tools1. Extending Python with C or C++1.1. A Simple Example1.2. Intermezzo: Errors and Exceptions1.3. Back to the Example1.4. The Module’s Method Table and Initialization Function1.5. Compilation and Linkage1.6. Calling Python Functions from C1.7. Extracting Parameters in Extension Functions1.8. Keyword Parameters for Extension Functions1.9. Building Arbitrary Values1.10. Reference Counts1.10.1. Reference Counting in Python1.10.2. Ownership Rules1.10.3. Thin Ice1.10.4. NULL Pointers1.11. Writing Extensions in C++1.12. Providing a C API for an Extension Module2. Defining Extension Types: Tutorial2.1. The Basics2.2. Adding data and methods to the Basic example2.3. Providing finer control over data attributes2.4. Supporting cyclic garbage collection2.5. Subclassing other types3. Defining Extension Types: Assorted Topics3.1. Finalization and De-allocation3.2. Object Presentation3.3. Attribute Management3.3.1. Generic Attribute Management3.3.2. Type-specific Attribute Management3.4. Object Comparison3.5. Abstract Protocol Support3.6. Weak Reference Support3.7. More Suggestions4. Building C and C++ Extensions4.1. Building C and C++ Extensions with setuptools5. Building C and C++ Extensions on Windows5.1. A Cookbook Approach5.2. Differences Between Unix and Windows5.3. Using DLLs in Practice
- Embedding the CPython runtime in a larger application1. Embedding Python in Another Application1.1. Very High Level Embedding1.2. Beyond Very High Level Embedding: An overview1.3. Pure Embedding1.4. Extending Embedded Python1.5. Embedding Python in C++1.6. Compiling and Linking under Unix-like systems

- 1. Extending Python with C or C++1.1. A Simple Example1.2. Intermezzo: Errors and Exceptions1.3. Back to the Example1.4. The Module’s Method Table and Initialization Function1.5. Compilation and Linkage1.6. Calling Python Functions from C1.7. Extracting Parameters in Extension Functions1.8. Keyword Parameters for Extension Functions1.9. Building Arbitrary Values1.10. Reference Counts1.10.1. Reference Counting in Python1.10.2. Ownership Rules1.10.3. Thin Ice1.10.4. NULL Pointers1.11. Writing Extensions in C++1.12. Providing a C API for an Extension Module
- 2. Defining Extension Types: Tutorial2.1. The Basics2.2. Adding data and methods to the Basic example2.3. Providing finer control over data attributes2.4. Supporting cyclic garbage collection2.5. Subclassing other types
- 3. Defining Extension Types: Assorted Topics3.1. Finalization and De-allocation3.2. Object Presentation3.3. Attribute Management3.3.1. Generic Attribute Management3.3.2. Type-specific Attribute Management3.4. Object Comparison3.5. Abstract Protocol Support3.6. Weak Reference Support3.7. More Suggestions
- 4. Building C and C++ Extensions4.1. Building C and C++ Extensions with setuptools
- 5. Building C and C++ Extensions on Windows5.1. A Cookbook Approach5.2. Differences Between Unix and Windows5.3. Using DLLs in Practice

- 1.1. A Simple Example
- 1.2. Intermezzo: Errors and Exceptions
- 1.3. Back to the Example
- 1.4. The Module’s Method Table and Initialization Function
- 1.5. Compilation and Linkage
- 1.6. Calling Python Functions from C
- 1.7. Extracting Parameters in Extension Functions
- 1.8. Keyword Parameters for Extension Functions
- 1.9. Building Arbitrary Values
- 1.10. Reference Counts1.10.1. Reference Counting in Python1.10.2. Ownership Rules1.10.3. Thin Ice1.10.4. NULL Pointers
- 1.11. Writing Extensions in C++
- 1.12. Providing a C API for an Extension Module

- 1.10.1. Reference Counting in Python
- 1.10.2. Ownership Rules
- 1.10.3. Thin Ice
- 1.10.4. NULL Pointers

- 2.1. The Basics
- 2.2. Adding data and methods to the Basic example
- 2.3. Providing finer control over data attributes
- 2.4. Supporting cyclic garbage collection
- 2.5. Subclassing other types

- 3.1. Finalization and De-allocation
- 3.2. Object Presentation
- 3.3. Attribute Management3.3.1. Generic Attribute Management3.3.2. Type-specific Attribute Management
- 3.4. Object Comparison
- 3.5. Abstract Protocol Support
- 3.6. Weak Reference Support
- 3.7. More Suggestions

- 3.3.1. Generic Attribute Management
- 3.3.2. Type-specific Attribute Management

- 4.1. Building C and C++ Extensions with setuptools

- 5.1. A Cookbook Approach
- 5.2. Differences Between Unix and Windows
- 5.3. Using DLLs in Practice

- 1. Embedding Python in Another Application1.1. Very High Level Embedding1.2. Beyond Very High Level Embedding: An overview1.3. Pure Embedding1.4. Extending Embedded Python1.5. Embedding Python in C++1.6. Compiling and Linking under Unix-like systems

- 1.1. Very High Level Embedding
- 1.2. Beyond Very High Level Embedding: An overview
- 1.3. Pure Embedding
- 1.4. Extending Embedded Python
- 1.5. Embedding Python in C++
- 1.6. Compiling and Linking under Unix-like systems

- IntroductionCoding standardsInclude FilesUseful macrosObjects, Types and Reference CountsReference CountsReference Count DetailsTypesExceptionsEmbedding PythonDebugging Builds
- C API StabilityUnstable C APIStable Application Binary InterfaceLimited C APIStable ABILimited API Scope and PerformanceLimited API CaveatsPlatform ConsiderationsContents of Limited API
- The Very High Level Layer
- Reference Counting
- Exception HandlingPrinting and clearingRaising exceptionsIssuing warningsQuerying the error indicatorSignal HandlingException ClassesException ObjectsUnicode Exception ObjectsRecursion ControlStandard ExceptionsStandard Warning Categories
- UtilitiesOperating System UtilitiesSystem FunctionsProcess ControlImporting ModulesData marshalling supportParsing arguments and building valuesParsing argumentsStrings and buffersNumbersOther objectsAPI FunctionsBuilding valuesString conversion and formattingPyHash APIReflectionCodec registry and support functionsCodec lookup APIRegistry API for Unicode encoding error handlersPyTime C APITypesClock FunctionsRaw Clock FunctionsConversion functionsSupport for Perf Maps
- Abstract Objects LayerObject ProtocolCall ProtocolThetp_callProtocolThe Vectorcall ProtocolRecursion ControlVectorcall Support APIObject Calling APICall Support APINumber ProtocolSequence ProtocolMapping ProtocolIterator ProtocolBuffer ProtocolBuffer structureBuffer request typesrequest-independent fieldsreadonly, formatshape, strides, suboffsetscontiguity requestscompound requestsComplex arraysNumPy-style: shape and stridesPIL-style: shape, strides and suboffsetsBuffer-related functions
- Concrete Objects LayerFundamental ObjectsType ObjectsCreating Heap-Allocated TypesTheNoneObjectNumeric ObjectsInteger ObjectsBoolean ObjectsFloating-Point ObjectsPack and Unpack functionsPack functionsUnpack functionsComplex Number ObjectsComplex Numbers as C StructuresComplex Numbers as Python ObjectsSequence ObjectsBytes ObjectsByte Array ObjectsType check macrosDirect API functionsMacrosUnicode Objects and CodecsUnicode ObjectsUnicode TypeUnicode Character PropertiesCreating and accessing Unicode stringsLocale EncodingFile System Encodingwchar_t SupportBuilt-in CodecsGeneric CodecsUTF-8 CodecsUTF-32 CodecsUTF-16 CodecsUTF-7 CodecsUnicode-Escape CodecsRaw-Unicode-Escape CodecsLatin-1 CodecsASCII CodecsCharacter Map CodecsMBCS codecs for WindowsMethods & SlotsMethods and Slot FunctionsTuple ObjectsStruct Sequence ObjectsList ObjectsContainer ObjectsDictionary ObjectsSet ObjectsFunction ObjectsFunction ObjectsInstance Method ObjectsMethod ObjectsCell ObjectsCode ObjectsExtra informationOther ObjectsFile ObjectsModule ObjectsInitializing C modulesSingle-phase initializationMulti-phase initializationLow-level module creation functionsSupport functionsModule lookupIterator ObjectsDescriptor ObjectsSlice ObjectsEllipsis ObjectMemoryView objectsWeak Reference ObjectsCapsulesFrame ObjectsFrame Locals ProxiesInternal FramesGenerator ObjectsCoroutine ObjectsContext Variables ObjectsDateTime ObjectsObjects for Type Hinting
- Initialization, Finalization, and ThreadsBefore Python InitializationGlobal configuration variablesInitializing and finalizing the interpreterProcess-wide parametersThread State and the Global Interpreter LockReleasing the GIL from extension codeNon-Python created threadsCautions about fork()High-level APILow-level APISub-interpreter supportA Per-Interpreter GILBugs and caveatsAsynchronous NotificationsProfiling and TracingReference tracingAdvanced Debugger SupportThread Local Storage SupportThread Specific Storage (TSS) APIDynamic AllocationMethodsThread Local Storage (TLS) APISynchronization PrimitivesPython Critical Section API
- Python Initialization ConfigurationExamplePyWideStringListPyStatusPyPreConfigPreinitialize Python with PyPreConfigPyConfigInitialization with PyConfigIsolated ConfigurationPython ConfigurationPython Path ConfigurationPy_GetArgcArgv()Multi-Phase Initialization Private Provisional API
- Memory ManagementOverviewAllocator DomainsRaw Memory InterfaceMemory InterfaceObject allocatorsDefault Memory AllocatorsCustomize Memory AllocatorsDebug hooks on the Python memory allocatorsThe pymalloc allocatorCustomize pymalloc Arena AllocatorThe mimalloc allocatortracemalloc C APIExamples
- Object Implementation SupportAllocating Objects on the HeapCommon Object StructuresBase object types and macrosImplementing functions and methodsAccessing attributes of extension typesMember flagsMember typesDefining Getters and SettersType Object StructuresQuick Reference“tp slots”sub-slotsslot typedefsPyTypeObject DefinitionPyObject SlotsPyVarObject SlotsPyTypeObject SlotsStatic TypesHeap TypesNumber Object StructuresMapping Object StructuresSequence Object StructuresBuffer Object StructuresAsync Object StructuresSlot Type typedefsExamplesSupporting Cyclic Garbage CollectionControlling the Garbage Collector StateQuerying Garbage Collector State
- API and ABI Versioning
- Monitoring C API
- Generating Execution EventsManaging the Monitoring State

- Coding standards
- Include Files
- Useful macros
- Objects, Types and Reference CountsReference CountsReference Count DetailsTypes
- Embedding Python
- Debugging Builds

- Reference CountsReference Count Details

- Reference Count Details

- Unstable C API
- Stable Application Binary InterfaceLimited C APIStable ABILimited API Scope and PerformanceLimited API Caveats
- Platform Considerations
- Contents of Limited API

- Limited C API
- Limited API Scope and Performance
- Limited API Caveats

- Printing and clearing
- Raising exceptions
- Issuing warnings
- Querying the error indicator
- Exception Classes
- Exception Objects
- Unicode Exception Objects
- Recursion Control
- Standard Exceptions
- Standard Warning Categories

- Operating System Utilities
- System Functions
- Process Control
- Importing Modules
- Data marshalling support
- Parsing arguments and building valuesParsing argumentsStrings and buffersNumbersOther objectsAPI FunctionsBuilding values
- String conversion and formatting
- Codec registry and support functionsCodec lookup APIRegistry API for Unicode encoding error handlers
- PyTime C APITypesClock FunctionsRaw Clock FunctionsConversion functions
- Support for Perf Maps

- Parsing argumentsStrings and buffersNumbersOther objectsAPI Functions
- Building values

- Strings and buffers
- Other objects
- API Functions

- Codec lookup API
- Registry API for Unicode encoding error handlers

- Clock Functions
- Raw Clock Functions
- Conversion functions

- Object Protocol
- Call ProtocolThetp_callProtocolThe Vectorcall ProtocolRecursion ControlVectorcall Support APIObject Calling APICall Support API
- Number Protocol
- Sequence Protocol
- Mapping Protocol
- Iterator Protocol
- Buffer ProtocolBuffer structureBuffer request typesrequest-independent fieldsreadonly, formatshape, strides, suboffsetscontiguity requestscompound requestsComplex arraysNumPy-style: shape and stridesPIL-style: shape, strides and suboffsetsBuffer-related functions

- Thetp_callProtocol
- The Vectorcall ProtocolRecursion ControlVectorcall Support API
- Object Calling API
- Call Support API

- Vectorcall Support API

- Buffer structure
- Buffer request typesrequest-independent fieldsreadonly, formatshape, strides, suboffsetscontiguity requestscompound requests
- Complex arraysNumPy-style: shape and stridesPIL-style: shape, strides and suboffsets
- Buffer-related functions

- request-independent fields
- readonly, format
- shape, strides, suboffsets
- contiguity requests
- compound requests

- NumPy-style: shape and strides
- PIL-style: shape, strides and suboffsets

- Fundamental ObjectsType ObjectsCreating Heap-Allocated TypesTheNoneObject
- Numeric ObjectsInteger ObjectsBoolean ObjectsFloating-Point ObjectsPack and Unpack functionsPack functionsUnpack functionsComplex Number ObjectsComplex Numbers as C StructuresComplex Numbers as Python Objects
- Sequence ObjectsBytes ObjectsByte Array ObjectsType check macrosDirect API functionsMacrosUnicode Objects and CodecsUnicode ObjectsUnicode TypeUnicode Character PropertiesCreating and accessing Unicode stringsLocale EncodingFile System Encodingwchar_t SupportBuilt-in CodecsGeneric CodecsUTF-8 CodecsUTF-32 CodecsUTF-16 CodecsUTF-7 CodecsUnicode-Escape CodecsRaw-Unicode-Escape CodecsLatin-1 CodecsASCII CodecsCharacter Map CodecsMBCS codecs for WindowsMethods & SlotsMethods and Slot FunctionsTuple ObjectsStruct Sequence ObjectsList Objects
- Container ObjectsDictionary ObjectsSet Objects
- Function ObjectsFunction ObjectsInstance Method ObjectsMethod ObjectsCell ObjectsCode ObjectsExtra information
- Other ObjectsFile ObjectsModule ObjectsInitializing C modulesSingle-phase initializationMulti-phase initializationLow-level module creation functionsSupport functionsModule lookupIterator ObjectsDescriptor ObjectsSlice ObjectsEllipsis ObjectMemoryView objectsWeak Reference ObjectsCapsulesFrame ObjectsFrame Locals ProxiesInternal FramesGenerator ObjectsCoroutine ObjectsContext Variables ObjectsDateTime ObjectsObjects for Type Hinting

- Type ObjectsCreating Heap-Allocated Types
- TheNoneObject

- Creating Heap-Allocated Types

- Integer Objects
- Boolean Objects
- Floating-Point ObjectsPack and Unpack functionsPack functionsUnpack functions
- Complex Number ObjectsComplex Numbers as C StructuresComplex Numbers as Python Objects

- Pack and Unpack functionsPack functionsUnpack functions

- Pack functions
- Unpack functions

- Complex Numbers as C Structures
- Complex Numbers as Python Objects

- Byte Array ObjectsType check macrosDirect API functionsMacros
- Unicode Objects and CodecsUnicode ObjectsUnicode TypeUnicode Character PropertiesCreating and accessing Unicode stringsLocale EncodingFile System Encodingwchar_t SupportBuilt-in CodecsGeneric CodecsUTF-8 CodecsUTF-32 CodecsUTF-16 CodecsUTF-7 CodecsUnicode-Escape CodecsRaw-Unicode-Escape CodecsLatin-1 CodecsASCII CodecsCharacter Map CodecsMBCS codecs for WindowsMethods & SlotsMethods and Slot Functions
- Tuple Objects
- Struct Sequence Objects
- List Objects

- Type check macros
- Direct API functions

- Unicode ObjectsUnicode TypeUnicode Character PropertiesCreating and accessing Unicode stringsLocale EncodingFile System Encodingwchar_t Support
- Built-in CodecsGeneric CodecsUTF-8 CodecsUTF-32 CodecsUTF-16 CodecsUTF-7 CodecsUnicode-Escape CodecsRaw-Unicode-Escape CodecsLatin-1 CodecsASCII CodecsCharacter Map CodecsMBCS codecs for WindowsMethods & Slots
- Methods and Slot Functions

- Unicode Type
- Unicode Character Properties
- Creating and accessing Unicode strings
- Locale Encoding
- File System Encoding
- wchar_t Support

- Generic Codecs
- UTF-8 Codecs
- UTF-32 Codecs
- UTF-16 Codecs
- UTF-7 Codecs
- Unicode-Escape Codecs
- Raw-Unicode-Escape Codecs
- Latin-1 Codecs
- ASCII Codecs
- Character Map Codecs
- MBCS codecs for Windows
- Methods & Slots

- Dictionary Objects
- Set Objects

- Instance Method Objects
- Method Objects
- Cell Objects
- Extra information

- File Objects
- Module ObjectsInitializing C modulesSingle-phase initializationMulti-phase initializationLow-level module creation functionsSupport functionsModule lookup
- Iterator Objects
- Descriptor Objects
- Slice ObjectsEllipsis Object
- MemoryView objects
- Frame ObjectsFrame Locals ProxiesInternal Frames
- Generator Objects
- Coroutine Objects
- Context Variables Objects
- Objects for Type Hinting

- Initializing C modulesSingle-phase initializationMulti-phase initializationLow-level module creation functionsSupport functions
- Module lookup

- Single-phase initialization
- Multi-phase initialization
- Low-level module creation functions
- Support functions

- Ellipsis Object

- Frame Locals Proxies
- Internal Frames

- Before Python Initialization
- Global configuration variables
- Initializing and finalizing the interpreter
- Process-wide parameters
- Thread State and the Global Interpreter LockReleasing the GIL from extension codeNon-Python created threadsCautions about fork()High-level APILow-level API
- Sub-interpreter supportA Per-Interpreter GILBugs and caveats
- Asynchronous Notifications
- Profiling and Tracing
- Reference tracing
- Advanced Debugger Support
- Thread Local Storage SupportThread Specific Storage (TSS) APIDynamic AllocationMethodsThread Local Storage (TLS) API
- Synchronization PrimitivesPython Critical Section API

- Releasing the GIL from extension code
- Non-Python created threads
- Cautions about fork()
- High-level API
- Low-level API

- A Per-Interpreter GIL
- Bugs and caveats

- Thread Specific Storage (TSS) APIDynamic AllocationMethods
- Thread Local Storage (TLS) API

- Dynamic Allocation

- Python Critical Section API

- PyWideStringList
- PyPreConfig
- Preinitialize Python with PyPreConfig
- Initialization with PyConfig
- Isolated Configuration
- Python Configuration
- Python Path Configuration
- Py_GetArgcArgv()
- Multi-Phase Initialization Private Provisional API

- Allocator Domains
- Raw Memory Interface
- Memory Interface
- Object allocators
- Default Memory Allocators
- Customize Memory Allocators
- Debug hooks on the Python memory allocators
- The pymalloc allocatorCustomize pymalloc Arena Allocator
- The mimalloc allocator
- tracemalloc C API

- Customize pymalloc Arena Allocator

- Allocating Objects on the Heap
- Common Object StructuresBase object types and macrosImplementing functions and methodsAccessing attributes of extension typesMember flagsMember typesDefining Getters and Setters
- Type Object StructuresQuick Reference“tp slots”sub-slotsslot typedefsPyTypeObject DefinitionPyObject SlotsPyVarObject SlotsPyTypeObject SlotsStatic TypesHeap TypesNumber Object StructuresMapping Object StructuresSequence Object StructuresBuffer Object StructuresAsync Object StructuresSlot Type typedefsExamples
- Supporting Cyclic Garbage CollectionControlling the Garbage Collector StateQuerying Garbage Collector State

- Base object types and macros
- Implementing functions and methods
- Accessing attributes of extension typesMember flagsMember typesDefining Getters and Setters

- Member flags
- Member types
- Defining Getters and Setters

- Quick Reference“tp slots”sub-slotsslot typedefs
- PyTypeObject Definition
- PyObject Slots
- PyVarObject Slots
- PyTypeObject Slots
- Static Types
- Number Object Structures
- Mapping Object Structures
- Sequence Object Structures
- Buffer Object Structures
- Async Object Structures
- Slot Type typedefs

- slot typedefs

- Controlling the Garbage Collector State
- Querying Garbage Collector State

- Managing the Monitoring State

- Basic usage
- How do I …?… installpipin versions of Python prior to Python 3.4?… install packages just for the current user?… install scientific Python packages?… work with multiple versions of Python installed in parallel?
- Common installation issuesInstalling into the system Python on LinuxPip not installedInstalling binary extensions

- … installpipin versions of Python prior to Python 3.4?
- … install packages just for the current user?
- … install scientific Python packages?
- … work with multiple versions of Python installed in parallel?

- Installing into the system Python on Linux
- Pip not installed
- Installing binary extensions

- General Python FAQGeneral InformationPython in the real world
- Programming FAQGeneral QuestionsCore LanguageNumbers and stringsPerformanceSequences (Tuples/Lists)ObjectsModules
- Design and History FAQWhy does Python use indentation for grouping of statements?Why am I getting strange results with simple arithmetic operations?Why are floating-point calculations so inaccurate?Why are Python strings immutable?Why must ‘self’ be used explicitly in method definitions and calls?Why can’t I use an assignment in an expression?Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?Why is join() a string method instead of a list or tuple method?How fast are exceptions?Why isn’t there a switch or case statement in Python?Can’t you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?Why can’t lambda expressions contain statements?Can Python be compiled to machine code, C or some other language?How does Python manage memory?Why doesn’t CPython use a more traditional garbage collection scheme?Why isn’t all memory freed when CPython exits?Why are there separate tuple and list data types?How are lists implemented in CPython?How are dictionaries implemented in CPython?Why must dictionary keys be immutable?Why doesn’t list.sort() return the sorted list?How do you specify and enforce an interface spec in Python?Why is there no goto?Why can’t raw strings (r-strings) end with a backslash?Why doesn’t Python have a “with” statement for attribute assignments?Why don’t generators support the with statement?Why are colons required for the if/while/def/class statements?Why does Python allow commas at the end of lists and tuples?
- Library and Extension FAQGeneral Library QuestionsCommon tasksThreadsInput and OutputNetwork/Internet ProgrammingDatabasesMathematics and Numerics
- Extending/Embedding FAQCan I create my own functions in C?Can I create my own functions in C++?Writing C is hard; are there any alternatives?How can I execute arbitrary Python statements from C?How can I evaluate an arbitrary Python expression from C?How do I extract C values from a Python object?How do I use Py_BuildValue() to create a tuple of arbitrary length?How do I call an object’s method from C?How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?How do I access a module written in Python from C?How do I interface to C++ objects from Python?I added a module using the Setup file and the make fails; why?How do I debug an extension?I want to compile a Python module on my Linux system, but some files are missing. Why?How do I tell “incomplete input” from “invalid input”?How do I find undefined g++ symbols __builtin_new or __pure_virtual?Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?
- Python on Windows FAQHow do I run a Python program under Windows?How do I make Python scripts executable?Why does Python sometimes take so long to start?How do I make an executable from a Python script?Is a*.pydfile the same as a DLL?How can I embed Python into a Windows application?How do I keep editors from inserting tabs into my Python source?How do I check for a keypress without blocking?How do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll error?
- Graphic User Interface FAQGeneral GUI QuestionsWhat GUI toolkits exist for Python?Tkinter questions
- “Why is Python Installed on my Computer?” FAQWhat is Python?Why is Python installed on my machine?Can I delete Python?

- General Information
- Python in the real world

- General Questions
- Core Language
- Numbers and strings
- Sequences (Tuples/Lists)

- Why does Python use indentation for grouping of statements?
- Why am I getting strange results with simple arithmetic operations?
- Why are floating-point calculations so inaccurate?
- Why are Python strings immutable?
- Why must ‘self’ be used explicitly in method definitions and calls?
- Why can’t I use an assignment in an expression?
- Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?
- Why is join() a string method instead of a list or tuple method?
- How fast are exceptions?
- Why isn’t there a switch or case statement in Python?
- Can’t you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?
- Why can’t lambda expressions contain statements?
- Can Python be compiled to machine code, C or some other language?
- How does Python manage memory?
- Why doesn’t CPython use a more traditional garbage collection scheme?
- Why isn’t all memory freed when CPython exits?
- Why are there separate tuple and list data types?
- How are lists implemented in CPython?
- How are dictionaries implemented in CPython?
- Why must dictionary keys be immutable?
- Why doesn’t list.sort() return the sorted list?
- How do you specify and enforce an interface spec in Python?
- Why is there no goto?
- Why can’t raw strings (r-strings) end with a backslash?
- Why doesn’t Python have a “with” statement for attribute assignments?
- Why don’t generators support the with statement?
- Why are colons required for the if/while/def/class statements?
- Why does Python allow commas at the end of lists and tuples?

- General Library Questions
- Common tasks
- Input and Output
- Network/Internet Programming
- Mathematics and Numerics

- Can I create my own functions in C?
- Can I create my own functions in C++?
- Writing C is hard; are there any alternatives?
- How can I execute arbitrary Python statements from C?
- How can I evaluate an arbitrary Python expression from C?
- How do I extract C values from a Python object?
- How do I use Py_BuildValue() to create a tuple of arbitrary length?
- How do I call an object’s method from C?
- How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?
- How do I access a module written in Python from C?
- How do I interface to C++ objects from Python?
- I added a module using the Setup file and the make fails; why?
- How do I debug an extension?
- I want to compile a Python module on my Linux system, but some files are missing. Why?
- How do I tell “incomplete input” from “invalid input”?
- How do I find undefined g++ symbols __builtin_new or __pure_virtual?
- Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?

- How do I run a Python program under Windows?
- How do I make Python scripts executable?
- Why does Python sometimes take so long to start?
- How do I make an executable from a Python script?
- Is a*.pydfile the same as a DLL?
- How can I embed Python into a Windows application?
- How do I keep editors from inserting tabs into my Python source?
- How do I check for a keypress without blocking?
- How do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll error?

- General GUI Questions
- What GUI toolkits exist for Python?
- Tkinter questions

- What is Python?
- Why is Python installed on my machine?
- Can I delete Python?

- C API DeprecationsPending Removal in Python 3.14Pending Removal in Python 3.15Pending Removal in Future Versions

- Contributors to the Python documentation

- Documentation bugs
- Using the Python issue tracker
- Getting started contributing to Python yourself

- History of the software
- Terms and conditions for accessing or otherwise using PythonPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION
- Licenses and Acknowledgements for Incorporated SoftwareMersenne TwisterSocketsAsynchronous socket servicesCookie managementExecution tracingUUencode and UUdecode functionsXML Remote Procedure Callstest_epollSelect kqueueSipHash24strtod and dtoaOpenSSLexpatlibffizlibcfuhashlibmpdecW3C C14N test suitemimallocasyncioGlobal Unbounded Sequences (GUS)

- PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2
- BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0
- CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1
- CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2
- ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION

- Mersenne Twister
- Asynchronous socket services
- Cookie management
- Execution tracing
- UUencode and UUdecode functions
- XML Remote Procedure Calls
- Select kqueue
- strtod and dtoa
- W3C C14N test suite
- Global Unbounded Sequences (GUS)

================================================================================

================================================================================

================================================================================

# Python/C API Reference Manual — Python 3.13.3 documentation
URL: https://docs.python.org/3/c-api/index.html
Section: 1/2
Description: This manual documents the API used by C and C++ programmers who want to write extension modules or embed Python. It is a companion to Extending and Embedding the Python Interpreter, which describes...

Content:

================================================================================

# Python/C API Reference Manual¶

This manual documents the API used by C and C++ programmers who want to write extension modules or embed Python. It is a companion toExtending and Embedding the Python Interpreter, which describes the general principles of extension writing but does not document the API functions in detail.

- IntroductionCoding standardsInclude FilesUseful macrosObjects, Types and Reference CountsExceptionsEmbedding PythonDebugging Builds
- C API StabilityUnstable C APIStable Application Binary InterfacePlatform ConsiderationsContents of Limited API
- The Very High Level Layer
- Reference Counting
- Exception HandlingPrinting and clearingRaising exceptionsIssuing warningsQuerying the error indicatorSignal HandlingException ClassesException ObjectsUnicode Exception ObjectsRecursion ControlStandard ExceptionsStandard Warning Categories
- UtilitiesOperating System UtilitiesSystem FunctionsProcess ControlImporting ModulesData marshalling supportParsing arguments and building valuesString conversion and formattingPyHash APIReflectionCodec registry and support functionsPyTime C APISupport for Perf Maps
- Abstract Objects LayerObject ProtocolCall ProtocolNumber ProtocolSequence ProtocolMapping ProtocolIterator ProtocolBuffer Protocol
- Concrete Objects LayerFundamental ObjectsNumeric ObjectsSequence ObjectsContainer ObjectsFunction ObjectsOther Objects
- Initialization, Finalization, and ThreadsBefore Python InitializationGlobal configuration variablesInitializing and finalizing the interpreterProcess-wide parametersThread State and the Global Interpreter LockSub-interpreter supportAsynchronous NotificationsProfiling and TracingReference tracingAdvanced Debugger SupportThread Local Storage SupportSynchronization Primitives
- Python Initialization ConfigurationExamplePyWideStringListPyStatusPyPreConfigPreinitialize Python with PyPreConfigPyConfigInitialization with PyConfigIsolated ConfigurationPython ConfigurationPython Path ConfigurationPy_GetArgcArgv()Multi-Phase Initialization Private Provisional API
- Memory ManagementOverviewAllocator DomainsRaw Memory InterfaceMemory InterfaceObject allocatorsDefault Memory AllocatorsCustomize Memory AllocatorsDebug hooks on the Python memory allocatorsThe pymalloc allocatorThe mimalloc allocatortracemalloc C APIExamples
- Object Implementation SupportAllocating Objects on the HeapCommon Object StructuresType Object StructuresSupporting Cyclic Garbage Collection
- API and ABI Versioning
- Monitoring C API
- Generating Execution EventsManaging the Monitoring State

- Coding standards
- Include Files
- Useful macros
- Objects, Types and Reference Counts
- Embedding Python
- Debugging Builds

- Unstable C API
- Stable Application Binary Interface
- Platform Considerations
- Contents of Limited API

- Printing and clearing
- Raising exceptions
- Issuing warnings
- Querying the error indicator
- Signal Handling
- Exception Classes
- Exception Objects
- Unicode Exception Objects
- Recursion Control
- Standard Exceptions
- Standard Warning Categories

- Operating System Utilities
- System Functions
- Process Control
- Importing Modules
- Data marshalling support
- Parsing arguments and building values
- String conversion and formatting
- Codec registry and support functions
- PyTime C API
- Support for Perf Maps

- Object Protocol
- Call Protocol
- Number Protocol
- Sequence Protocol
- Mapping Protocol
- Iterator Protocol
- Buffer Protocol

- Fundamental Objects
- Numeric Objects
- Sequence Objects
- Container Objects
- Function Objects
- Other Objects

- Before Python Initialization
- Global configuration variables
- Initializing and finalizing the interpreter
- Process-wide parameters
- Thread State and the Global Interpreter Lock
- Sub-interpreter support
- Asynchronous Notifications
- Profiling and Tracing
- Reference tracing
- Advanced Debugger Support
- Thread Local Storage Support
- Synchronization Primitives

- PyWideStringList
- PyPreConfig
- Preinitialize Python with PyPreConfig
- Initialization with PyConfig
- Isolated Configuration
- Python Configuration
- Python Path Configuration
- Py_GetArgcArgv()
- Multi-Phase Initialization Private Provisional API

- Allocator Domains
- Raw Memory Interface
- Memory Interface
- Object allocators
- Default Memory Allocators
- Customize Memory Allocators
- Debug hooks on the Python memory allocators
- The pymalloc allocator
- The mimalloc allocator
- tracemalloc C API

- Allocating Objects on the Heap
- Common Object Structures
- Type Object Structures
- Supporting Cyclic Garbage Collection

- Managing the Monitoring State

================================================================================

================================================================================

# The Python Language Reference — Python 3.13.3 documentation
URL: https://docs.python.org/3/reference/index.html
Section: 1/2
Description: This reference manual describes the syntax and “core semantics” of the language. It is terse, but attempts to be exact and complete. The semantics of non-essential built-in object types and of the ...

Content:

================================================================================

# The Python Language Reference¶

This reference manual describes the syntax and “core semantics” of the language. It is terse, but attempts to be exact and complete. The semantics of non-essential built-in object types and of the built-in functions and modules are described inThe Python Standard Library. For an informal introduction to the language, seeThe Python Tutorial. For C or C++ programmers, two additional manuals exist:Extending and Embedding the Python Interpreterdescribes the high-level picture of how to write a Python extension module, and thePython/C API Reference Manualdescribes the interfaces available to C/C++ programmers in detail.

- 1. Introduction1.1. Alternate Implementations1.2. Notation
- 2. Lexical analysis2.1. Line structure2.2. Other tokens2.3. Identifiers and keywords2.4. Literals2.5. Operators2.6. Delimiters
- 3. Data model3.1. Objects, values and types3.2. The standard type hierarchy3.3. Special method names3.4. Coroutines
- 4. Execution model4.1. Structure of a program4.2. Naming and binding4.3. Exceptions
- 5. The import system5.1.importlib5.2. Packages5.3. Searching5.4. Loading5.5. The Path Based Finder5.6. Replacing the standard import system5.7. Package Relative Imports5.8. Special considerations for __main__5.9. References
- 6. Expressions6.1. Arithmetic conversions6.2. Atoms6.3. Primaries6.4. Await expression6.5. The power operator6.6. Unary arithmetic and bitwise operations6.7. Binary arithmetic operations6.8. Shifting operations6.9. Binary bitwise operations6.10. Comparisons6.11. Boolean operations6.12. Assignment expressions6.13. Conditional expressions6.14. Lambdas6.15. Expression lists6.16. Evaluation order6.17. Operator precedence
- 7. Simple statements7.1. Expression statements7.2. Assignment statements7.3. Theassertstatement7.4. Thepassstatement7.5. Thedelstatement7.6. Thereturnstatement7.7. Theyieldstatement7.8. Theraisestatement7.9. Thebreakstatement7.10. Thecontinuestatement7.11. Theimportstatement7.12. Theglobalstatement7.13. Thenonlocalstatement7.14. Thetypestatement
- 8. Compound statements8.1. Theifstatement8.2. Thewhilestatement8.3. Theforstatement8.4. Thetrystatement8.5. Thewithstatement8.6. Thematchstatement8.7. Function definitions8.8. Class definitions8.9. Coroutines8.10. Type parameter lists
- 9. Top-level components9.1. Complete Python programs9.2. File input9.3. Interactive input9.4. Expression input
- 10. Full Grammar specification

- 1.1. Alternate Implementations
- 1.2. Notation

- 2.1. Line structure
- 2.2. Other tokens
- 2.3. Identifiers and keywords
- 2.4. Literals
- 2.5. Operators
- 2.6. Delimiters

- 3.1. Objects, values and types
- 3.2. The standard type hierarchy
- 3.3. Special method names
- 3.4. Coroutines

- 4.1. Structure of a program
- 4.2. Naming and binding
- 4.3. Exceptions

- 5.1.importlib
- 5.2. Packages
- 5.3. Searching
- 5.4. Loading
- 5.5. The Path Based Finder
- 5.6. Replacing the standard import system
- 5.7. Package Relative Imports
- 5.8. Special considerations for __main__
- 5.9. References

- 6.1. Arithmetic conversions
- 6.3. Primaries
- 6.4. Await expression
- 6.5. The power operator
- 6.6. Unary arithmetic and bitwise operations
- 6.7. Binary arithmetic operations
- 6.8. Shifting operations
- 6.9. Binary bitwise operations
- 6.10. Comparisons
- 6.11. Boolean operations
- 6.12. Assignment expressions
- 6.13. Conditional expressions
- 6.14. Lambdas
- 6.15. Expression lists
- 6.16. Evaluation order
- 6.17. Operator precedence

- 7.1. Expression statements
- 7.2. Assignment statements
- 7.3. Theassertstatement
- 7.4. Thepassstatement
- 7.5. Thedelstatement
- 7.6. Thereturnstatement
- 7.7. Theyieldstatement
- 7.8. Theraisestatement
- 7.9. Thebreakstatement
- 7.10. Thecontinuestatement
- 7.11. Theimportstatement
- 7.12. Theglobalstatement
- 7.13. Thenonlocalstatement
- 7.14. Thetypestatement

- 8.1. Theifstatement
- 8.2. Thewhilestatement
- 8.3. Theforstatement
- 8.4. Thetrystatement
- 8.5. Thewithstatement
- 8.6. Thematchstatement
- 8.7. Function definitions
- 8.8. Class definitions
- 8.9. Coroutines
- 8.10. Type parameter lists

- 9.1. Complete Python programs
- 9.2. File input
- 9.3. Interactive input
- 9.4. Expression input

================================================================================

================================================================================

# Overview — Python v3.1.5 documentation
URL: https://docs.python.org/3.1/
Section: 1/2

Content:

================================================================================

# Python v3.1.5 documentation

Welcome! This is the documentation for Python 3.1.5, last updated Apr 09, 2012.

Parts of the documentation:

What's new in Python 3.1?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

Installing Python Modulesinformation for installers & sys-admins

Distributing Python Modulessharing modules with others

Documenting Pythonguide for documentation authors

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

About the documentation

History and License of Python

================================================================================

================================================================================

# Overview — Python v3.0.1 documentation
URL: https://docs.python.org/3.0/
Section: 1/2

Content:

================================================================================

# Python v3.0.1 documentation

Welcome! This is the documentation for Python 3.0.1, last updated Feb 14, 2009.

Parts of the documentation:

What's new in Python 3.0?orall "What's new" documentssince 2.0

Tutorialstart here

Using Pythonhow to use Python on different platforms

Language Referencedescribes syntax and language elements

Library Referencekeep this under your pillow

Python HOWTOsin-depth documents on specific topics

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

Installing Python Modulesinformation for installers & sys-admins

Distributing Python Modulessharing modules with others

Documenting Pythonguide for documentation authors

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

About the documentation

History and License of Python

================================================================================

================================================================================

# 3.8.20 Documentation
URL: https://docs.python.org/3.8/
Section: 1/2

Content:

================================================================================

# Python 3.8.20 documentation

Welcome! This is the documentation for Python 3.8.20.

Parts of the documentation:

What's new in Python 3.8?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Installing Python Modulesinstalling from the Python Package Index & other sources

Distributing Python Modulespublishing modules for installation by others

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

Contributing to Docs

About the documentation

History and License of Python

================================================================================

================================================================================

# Distributing Python Modules — Python 3.13.3 documentation
URL: https://docs.python.org/3/distributing/index.html
Section: 1/2

Content:

================================================================================

# Distributing Python Modules¶

Information and guidance on distributing Python modules and packages has been moved to thePython Packaging User Guide, and the tutorial onpackaging Python projects.

================================================================================

================================================================================

# 3.7.17 Documentation
URL: https://docs.python.org/3.7/
Section: 1/2

Content:

================================================================================

# Python 3.7.17 documentation

Welcome! This is the documentation for Python 3.7.17.

Parts of the documentation:

What's new in Python 3.7?orall "What's new" documentssince 2.0

Tutorialstart here

Library Referencekeep this under your pillow

Language Referencedescribes syntax and language elements

Python Setup and Usagehow to use Python on different platforms

Python HOWTOsin-depth documents on specific topics

Installing Python Modulesinstalling from the Python Package Index & other sources

Distributing Python Modulespublishing modules for installation by others

Extending and Embeddingtutorial for C/C++ programmers

Python/C APIreference for C/C++ programmers

FAQsfrequently asked questions (with answers!)

Indices and tables:

Global Module Indexquick access to all modules

General Indexall functions, classes, terms

Glossarythe most important terms explained

Search pagesearch this documentation

Complete Table of Contentslists all sections and subsections

Meta information:

Reporting bugs

About the documentation

History and License of Python

================================================================================

================================================================================

# Dealing with Bugs — Python 3.13.3 documentation
URL: https://docs.python.org/3/bugs.html
Section: 1/2
Description: Python is a mature programming language which has established a reputation for stability. In order to maintain this reputation, the developers would like to know of any deficiencies you find in Pyt...

Content:

================================================================================

# Dealing with Bugs¶

Python is a mature programming language which has established a reputation for stability. In order to maintain this reputation, the developers would like to know of any deficiencies you find in Python.

It can be sometimes faster to fix bugs yourself and contribute patches to Python as it streamlines the process and involves less people. Learn how tocontribute.

================================================================================

## Documentation bugs¶

If you find a bug in this documentation or would like to propose an improvement, please submit a bug report on thetracker. If you have a suggestion on how to fix it, include that as well.

You can also open a discussion item on ourDocumentation Discourse forum.

If you find a bug in the theme (HTML / CSS / JavaScript) of the documentation, please submit a bug report on thepython-doc-theme bug tracker.

If you’re short on time, you can also email documentation bug reports todocs@python.org(behavioral bugs can be sent topython-list@python.org). ‘docs@’ is a mailing list run by volunteers; your request will be noticed, though it may take a while to be processed.

Documentation bugs: A list of documentation bugs that have been submitted to the Python issue tracker.

Issue Tracking: Overview of the process involved in reporting an improvement on the tracker.

Helping with Documentation: Comprehensive guide for individuals that are interested in contributing to Python documentation.

Documentation Translations: A list of GitHub pages for documentation translation and their primary contacts.

A list of documentation bugs that have been submitted to the Python issue tracker.

Overview of the process involved in reporting an improvement on the tracker.

Comprehensive guide for individuals that are interested in contributing to Python documentation.

A list of GitHub pages for documentation translation and their primary contacts.

================================================================================

## Using the Python issue tracker¶

Issue reports for Python itself should be submitted via the GitHub issues tracker (https://github.com/python/cpython/issues). The GitHub issues tracker offers a web form which allows pertinent information to be entered and submitted to the developers.

The first step in filing a report is to determine whether the problem has already been reported. The advantage in doing so, aside from saving the developers’ time, is that you learn what has been done to fix it; it may be that the problem has already been fixed for the next release, or additional information is needed (in which case you are welcome to provide it if you can!). To do this, search the tracker using the search box at the top of the page.

If the problem you’re reporting is not already in the list, log in to GitHub. If you don’t already have a GitHub account, create a new account using the “Sign up” link. It is not possible to submit a bug report anonymously.

Being now logged in, you can submit an issue. Click on the “New issue” button in the top bar to report a new issue.

The submission form has two fields, “Title” and “Comment”.

For the “Title” field, enter averyshort description of the problem; fewer than ten words is good.

In the “Comment” field, describe the problem in detail, including what you expected to happen and what did happen. Be sure to include whether any extension modules were involved, and what hardware and software platform you were using (including version information as appropriate).

Each issue report will be reviewed by a developer who will determine what needs to be done to correct the problem. You will receive an update each time an action is taken on the issue.

How to Report Bugs Effectively: Article which goes into some detail about how to create a useful bug report.
This describes what kind of information is useful and why it is useful.

Bug Writing Guidelines: Information about writing a good bug report.  Some of this is specific to the
Mozilla project, but describes general good practices.

Article which goes into some detail about how to create a useful bug report. This describes what kind of information is useful and why it is useful.

Information about writing a good bug report. Some of this is specific to the Mozilla project, but describes general good practices.

================================================================================

## Getting started contributing to Python yourself¶

Beyond just reporting bugs that you find, you are also welcome to submit patches to fix them. You can find more information on how to get started patching Python in thePython Developer’s Guide. If you have questions, thecore-mentorship mailing listis a friendly place to get answers to any and all questions pertaining to the process of fixing issues in Python.

================================================================================

================================================================================

# Installing Python Modules — Python 3.13.3 documentation
URL: https://docs.python.org/3/installing/index.html
Section: 1/2
Description: Email, distutils-sig@python.org,. As a popular open source development project, Python has an active supporting community of contributors and users that also make their software available for other...

Content:

================================================================================

# Installing Python Modules¶

Email:: distutils-sig@python.org

distutils-sig@python.org

As a popular open source development project, Python has an active supporting community of contributors and users that also make their software available for other Python developers to use under open source license terms.

This allows Python users to share and collaborate effectively, benefiting from the solutions others have already created to common (and sometimes even rare!) problems, as well as potentially contributing their own solutions to the common pool.

This guide covers the installation part of the process. For a guide to creating and sharing your own Python projects, refer to thePython packaging user guide.

For corporate and other institutional users, be aware that many organisations have their own policies around using and contributing to open source software. Please take such policies into account when making use of the distribution and installation tools provided with Python.

================================================================================

## Key terms¶

- pipis the preferred installer program. Starting with Python 3.4, it
is included by default with the Python binary installers.
- Avirtual environmentis a semi-isolated Python environment that allows
packages to be installed for use by a particular application, rather than
being installed system wide.
- venvis the standard tool for creating virtual environments, and has
been part of Python since Python 3.3. Starting with Python 3.4, it
defaults to installingpipinto all created virtual environments.
- virtualenvis a third party alternative (and predecessor) tovenv. It allows virtual environments to be used on versions of
Python prior to 3.4, which either don’t providevenvat all, or
aren’t able to automatically installpipinto created environments.
- ThePython Package Indexis a public
repository of open source licensed packages made available for use by
other Python users.
- thePython Packaging Authorityis the group of
developers and documentation authors responsible for the maintenance and
evolution of the standard packaging tools and the associated metadata and
file format standards. They maintain a variety of tools, documentation,
and issue trackers onGitHub.
- distutilsis the original build and distribution system first added to
the Python standard library in 1998. While direct use ofdistutilsis
being phased out, it still laid the foundation for the current packaging
and distribution infrastructure, and it not only remains part of the
standard library, but its name lives on in other ways (such as the name
of the mailing list used to coordinate Python packaging standards
development).

```
virtualenv
```

Changed in version 3.5:The use ofvenvis now recommended for creating virtual environments.

Python Packaging User Guide: Creating and using virtual environments

================================================================================

## Basic usage¶

The standard packaging tools are all designed to be used from the command line.

The following command will install the latest version of a module and its dependencies from the Python Package Index:

```
python -m pip install SomePackage
```

For POSIX users (including macOS and Linux users), the examples in this guide assume the use of avirtual environment.

For Windows users, the examples in this guide assume that the option to adjust the system PATH environment variable was selected when installing Python.

It’s also possible to specify an exact or minimum version directly on the command line. When using comparator operators such as>,<or some other special character which get interpreted by shell, the package name and the version should be enclosed within double quotes:

```
python -m pip install SomePackage==1.0.4    # specific version
python -m pip install "SomePackage>=1.0.4"  # minimum version
```

Normally, if a suitable module is already installed, attempting to install it again will have no effect. Upgrading existing modules must be requested explicitly:

```
python -m pip install --upgrade SomePackage
```

More information and resources regardingpipand its capabilities can be found in thePython Packaging User Guide.

Creation of virtual environments is done through thevenvmodule. Installing packages into an active virtual environment uses the commands shown above.

Python Packaging User Guide: Installing Python Distribution Packages

================================================================================

## How do I …?¶

These are quick answers or links for some common tasks.

================================================================================

### … installpipin versions of Python prior to Python 3.4?¶

Python only started bundlingpipwith Python 3.4. For earlier versions,pipneeds to be “bootstrapped” as described in the Python Packaging User Guide.

Python Packaging User Guide: Requirements for Installing Packages

================================================================================

### … install packages just for the current user?¶

Passing the--useroption topython-mpipinstallwill install a package just for the current user, rather than for all users of the system.

```
python-mpipinstall
```

================================================================================

### … install scientific Python packages?¶

A number of scientific Python packages have complex binary dependencies, and aren’t currently easy to install usingpipdirectly. At this point in time, it will often be easier for users to install these packages byother meansrather than attempting to install them withpip.

Python Packaging User Guide: Installing Scientific Packages

================================================================================

### … work with multiple versions of Python installed in parallel?¶

On Linux, macOS, and other POSIX systems, use the versioned Python commands in combination with the-mswitch to run the appropriate copy ofpip:

```
python2   -m pip install SomePackage  # default Python 2
python2.7 -m pip install SomePackage  # specifically Python 2.7
python3   -m pip install SomePackage  # default Python 3
python3.4 -m pip install SomePackage  # specifically Python 3.4
```

Appropriately versionedpipcommands may also be available.

On Windows, use thepyPython launcher in combination with the-mswitch:

```
py -2   -m pip install SomePackage  # default Python 2
py -2.7 -m pip install SomePackage  # specifically Python 2.7
py -3   -m pip install SomePackage  # default Python 3
py -3.4 -m pip install SomePackage  # specifically Python 3.4
```

================================================================================

## Common installation issues¶

================================================================================

### Installing into the system Python on Linux¶

On Linux systems, a Python installation will typically be included as part of the distribution. Installing into this Python installation requires root access to the system, and may interfere with the operation of the system package manager and other components of the system if a component is unexpectedly upgraded usingpip.

On such systems, it is often better to use a virtual environment or a per-user installation when installing packages withpip.

================================================================================

### Pip not installed¶

It is possible thatpipdoes not get installed by default. One potential fix is:

```
python -m ensurepip --default-pip
```

There are also additional resources forinstalling pip.

================================================================================

### Installing binary extensions¶

Python has typically relied heavily on source based distribution, with end users being expected to compile extension modules from source as part of the installation process.

With the introduction of support for the binarywheelformat, and the ability to publish wheels for at least Windows and macOS through the Python Package Index, this problem is expected to diminish over time, as users are more regularly able to install pre-built extensions rather than needing to build them themselves.

Some of the solutions for installingscientific softwarethat are not yet available as pre-builtwheelfiles may also help with obtaining other binary extensions without needing to build them locally.

Python Packaging User Guide: Binary Extensions

================================================================================

================================================================================

# 3.14.0a7 Documentation
URL: https://docs.python.org/3.14/
Section: 1/2
Description: The official Python documentation.

Content:

================================================================================

# Python 3.14.0a7 documentation

Welcome! This is the official documentation for Python 3.14.0a7.

Documentation sections:

What's new in Python 3.14?Orall "What's new" documents since Python 2.0

TutorialStart here: a tour of Python's syntax and features

Library referenceStandard library and builtins

Language referenceSyntax and language elements

Python setup and usageHow to install, configure, and use Python

Python HOWTOsIn-depth topic manuals

Installing Python modulesThird-party modules and PyPI.org

Distributing Python modulesPublishing modules for use by other people

Extending and embeddingFor C/C++ programmers

Python's C APIC API reference

FAQsFrequently asked questions (with answers!)

DeprecationsDeprecated functionality

Indices, glossary, and search:

Global module indexAll modules and libraries

General indexAll functions, classes, and terms

GlossaryTerms explained

Search pageSearch this documentation

Complete table of contentsLists all sections and subsections

Project information:

Reporting issues

Contributing to Docs

Download the documentation

History and license of Python

About the documentation

================================================================================

================================================================================

# Design and History FAQ — Python 3.13.3 documentation
URL: https://docs.python.org/3/faq/design.html
Section: 2/2
Description: Contents: Design and History FAQ- Why does Python use indentation for grouping of statements?, Why am I getting strange results with simple arithmetic operations?, Why are floating-point calculatio...

Content:

================================================================================

# Design and History FAQ¶

================================================================================

## Why does Python use indentation for grouping of statements?¶

Guido van Rossum believes that using indentation for grouping is extremely elegant and contributes a lot to the clarity of the average Python program. Most people learn to love this feature after a while.

Since there are no begin/end brackets there cannot be a disagreement between grouping perceived by the parser and the human reader. Occasionally C programmers will encounter a fragment of code like this:

```
if(x<=y)x++;y--;z++;
```

Only thex++statement is executed if the condition is true, but the indentation leads many to believe otherwise. Even experienced C programmers will sometimes stare at it a long time wondering as to whyyis being decremented even forx>y.

Because there are no begin/end brackets, Python is much less prone to coding-style conflicts. In C there are many different ways to place the braces. After becoming used to reading and writing code using a particular style, it is normal to feel somewhat uneasy when reading (or being required to write) in a different one.

Many coding styles place begin/end brackets on a line by themselves. This makes programs considerably longer and wastes valuable screen space, making it harder to get a good overview of a program. Ideally, a function should fit on one screen (say, 20–30 lines). 20 lines of Python can do a lot more work than 20 lines of C. This is not solely due to the lack of begin/end brackets – the lack of declarations and the high-level data types are also responsible – but the indentation-based syntax certainly helps.

================================================================================

## Why am I getting strange results with simple arithmetic operations?¶

See the next question.

================================================================================

## Why are floating-point calculations so inaccurate?¶

Users are often surprised by results like this:

```
>>>1.2-1.00.19999999999999996
```

and think it is a bug in Python. It’s not. This has little to do with Python, and much more to do with how the underlying platform handles floating-point numbers.

Thefloattype in CPython uses a Cdoublefor storage. Afloatobject’s value is stored in binary floating-point with a fixed precision (typically 53 bits) and Python uses C operations, which in turn rely on the hardware implementation in the processor, to perform floating-point operations. This means that as far as floating-point operations are concerned, Python behaves like many popular languages including C and Java.

Many numbers that can be written easily in decimal notation cannot be expressed exactly in binary floating point. For example, after:

the value stored forxis a (very good) approximation to the decimal value1.2, but is not exactly equal to it. On a typical machine, the actual stored value is:

```
1.0011001100110011001100110011001100110011001100110011(binary)
```

which is exactly:

```
1.1999999999999999555910790149937383830547332763671875(decimal)
```

The typical precision of 53 bits provides Python floats with 15–16 decimal digits of accuracy.

For a fuller explanation, please see thefloating-point arithmeticchapter in the Python tutorial.

================================================================================

## Why are Python strings immutable?¶

There are several advantages.

One is performance: knowing that a string is immutable means we can allocate space for it at creation time, and the storage requirements are fixed and unchanging. This is also one of the reasons for the distinction between tuples and lists.

Another advantage is that strings in Python are considered as “elemental” as numbers. No amount of activity will change the value 8 to anything else, and in Python, no amount of activity will change the string “eight” to anything else.

================================================================================

## Why must ‘self’ be used explicitly in method definitions and calls?¶

The idea was borrowed from Modula-3. It turns out to be very useful, for a variety of reasons.

First, it’s more obvious that you are using a method or instance attribute instead of a local variable. Readingself.xorself.meth()makes it absolutely clear that an instance variable or method is used even if you don’t know the class definition by heart. In C++, you can sort of tell by the lack of a local variable declaration (assuming globals are rare or easily recognizable) – but in Python, there are no local variable declarations, so you’d have to look up the class definition to be sure. Some C++ and Java coding standards call for instance attributes to have anm_prefix, so this explicitness is still useful in those languages, too.

```
self.meth()
```

Second, it means that no special syntax is necessary if you want to explicitly reference or call the method from a particular class. In C++, if you want to use a method from a base class which is overridden in a derived class, you have to use the::operator – in Python you can writebaseclass.methodname(self,<argumentlist>). This is particularly useful for__init__()methods, and in general in cases where a derived class method wants to extend the base class method of the same name and thus has to call the base class method somehow.

```
baseclass.methodname(self,<argumentlist>)
```

```
__init__()
```

Finally, for instance variables it solves a syntactic problem with assignment: since local variables in Python are (by definition!) those variables to which a value is assigned in a function body (and that aren’t explicitly declared global), there has to be some way to tell the interpreter that an assignment was meant to assign to an instance variable instead of to a local variable, and it should preferably be syntactic (for efficiency reasons). C++ does this through declarations, but Python doesn’t have declarations and it would be a pity having to introduce them just for this purpose. Using the explicitself.varsolves this nicely. Similarly, for using instance variables, having to writeself.varmeans that references to unqualified names inside a method don’t have to search the instance’s directories. To put it another way, local variables and instance variables live in two different namespaces, and you need to tell Python which namespace to use.

================================================================================

## Why can’t I use an assignment in an expression?¶

Starting in Python 3.8, you can!

Assignment expressions using the walrus operator:=assign a variable in an expression:

```
whilechunk:=fp.read(200):print(chunk)
```

SeePEP 572for more information.

================================================================================

## Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?¶

As Guido said:

(a) For some operations, prefix notation just reads better than postfix – prefix (and infix!) operations have a long tradition in mathematics which likes notations where the visuals help the mathematician thinking about a problem. Compare the easy with which we rewrite a formula like x*(a+b) into x*a + x*b to the clumsiness of doing the same thing using a raw OO notation.

(b) When I read code that says len(x) Iknowthat it is asking for the length of something. This tells me two things: the result is an integer, and the argument is some kind of container. To the contrary, when I read x.len(), I have to already know that x is some kind of container implementing an interface or inheriting from a class that has a standard len(). Witness the confusion we occasionally have when a class that is not implementing a mapping has a get() or keys() method, or something that isn’t a file has a write() method.

—https://mail.python.org/pipermail/python-3000/2006-November/004643.html

================================================================================

## Why is join() a string method instead of a list or tuple method?¶

Strings became much more like other standard types starting in Python 1.6, when methods were added which give the same functionality that has always been available using the functions of the string module. Most of these new methods have been widely accepted, but the one which appears to make some programmers feel uncomfortable is:

```
", ".join(['1','2','4','8','16'])
```

which gives the result:

```
"1, 2, 4, 8, 16"
```

There are two common arguments against this usage.

The first runs along the lines of: “It looks really ugly using a method of a string literal (string constant)”, to which the answer is that it might, but a string literal is just a fixed value. If the methods are to be allowed on names bound to strings there is no logical reason to make them unavailable on literals.

The second objection is typically cast as: “I am really telling a sequence to join its members together with a string constant”. Sadly, you aren’t. For some reason there seems to be much less difficulty with havingsplit()as a string method, since in that case it is easy to see that

```
"1, 2, 4, 8, 16".split(", ")
```

is an instruction to a string literal to return the substrings delimited by the given separator (or, by default, arbitrary runs of white space).

join()is a string method because in using it you are telling the separator string to iterate over a sequence of strings and insert itself between adjacent elements. This method can be used with any argument which obeys the rules for sequence objects, including any new classes you might define yourself. Similar methods exist for bytes and bytearray objects.

================================================================================

## How fast are exceptions?¶

Atry/exceptblock is extremely efficient if no exceptions are raised. Actually catching an exception is expensive. In versions of Python prior to 2.0 it was common to use this idiom:

```
try:value=mydict[key]exceptKeyError:mydict[key]=getvalue(key)value=mydict[key]
```

This only made sense when you expected the dict to have the key almost all the time. If that wasn’t the case, you coded it like this:

```
ifkeyinmydict:value=mydict[key]else:value=mydict[key]=getvalue(key)
```

For this specific case, you could also usevalue=dict.setdefault(key,getvalue(key)), but only if thegetvalue()call is cheap enough because it is evaluated in all cases.

```
value=dict.setdefault(key,getvalue(key))
```

```
getvalue()
```

================================================================================

## Why isn’t there a switch or case statement in Python?¶

In general, structured switch statements execute one block of code when an expression has a particular value or set of values. Since Python 3.10 one can easily match literal values, or constants within a namespace, with amatch...casestatement. An older alternative is a sequence ofif...elif...elif...else.

```
match...case
```

```
if...elif...elif...else
```

For cases where you need to choose from a very large number of possibilities, you can create a dictionary mapping case values to functions to call. For example:

```
functions={'a':function_1,'b':function_2,'c':self.method_1}func=functions[value]func()
```

For calling methods on objects, you can simplify yet further by using thegetattr()built-in to retrieve methods with a particular name:

```
classMyVisitor:defvisit_a(self):...defdispatch(self,value):method_name='visit_'+str(value)method=getattr(self,method_name)method()
```

It’s suggested that you use a prefix for the method names, such asvisit_in this example. Without such a prefix, if values are coming from an untrusted source, an attacker would be able to call any method on your object.

Imitating switch with fallthrough, as with C’s switch-case-default, is possible, much harder, and less needed.

================================================================================

## Can’t you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?¶

Answer 1: Unfortunately, the interpreter pushes at least one C stack frame for each Python stack frame. Also, extensions can call back into Python at almost random moments. Therefore, a complete threads implementation requires thread support for C.

Answer 2: Fortunately, there isStackless Python, which has a completely redesigned interpreter loop that avoids the C stack.

================================================================================

## Why can’t lambda expressions contain statements?¶

Python lambda expressions cannot contain statements because Python’s syntactic framework can’t handle statements nested inside expressions. However, in Python, this is not a serious problem. Unlike lambda forms in other languages, where they add functionality, Python lambdas are only a shorthand notation if you’re too lazy to define a function.

Functions are already first class objects in Python, and can be declared in a local scope. Therefore the only advantage of using a lambda instead of a locally defined function is that you don’t need to invent a name for the function – but that’s just a local variable to which the function object (which is exactly the same type of object that a lambda expression yields) is assigned!

================================================================================

## Can Python be compiled to machine code, C or some other language?¶

Cythoncompiles a modified version of Python with optional annotations into C extensions.Nuitkais an up-and-coming compiler of Python into C++ code, aiming to support the full Python language.

================================================================================

## How does Python manage memory?¶

The details of Python memory management depend on the implementation. The standard implementation of Python,CPython, uses reference counting to detect inaccessible objects, and another mechanism to collect reference cycles, periodically executing a cycle detection algorithm which looks for inaccessible cycles and deletes the objects involved. Thegcmodule provides functions to perform a garbage collection, obtain debugging statistics, and tune the collector’s parameters.

Other implementations (such asJythonorPyPy), however, can rely on a different mechanism such as a full-blown garbage collector. This difference can cause some subtle porting problems if your Python code depends on the behavior of the reference counting implementation.

In some Python implementations, the following code (which is fine in CPython) will probably run out of file descriptors:

```
forfileinvery_long_list_of_files:f=open(file)c=f.read(1)
```

Indeed, using CPython’s reference counting and destructor scheme, each new assignment tofcloses the previous file. With a traditional GC, however, those file objects will only get collected (and closed) at varying and possibly long intervals.

If you want to write code that will work with any Python implementation, you should explicitly close the file or use thewithstatement; this will work regardless of memory management scheme:

```
forfileinvery_long_list_of_files:withopen(file)asf:c=f.read(1)
```

================================================================================

## Why doesn’t CPython use a more traditional garbage collection scheme?¶

For one thing, this is not a C standard feature and hence it’s not portable. (Yes, we know about the Boehm GC library. It has bits of assembler code formostcommon platforms, not for all of them, and although it is mostly transparent, it isn’t completely transparent; patches are required to get Python to work with it.)

Traditional GC also becomes a problem when Python is embedded into other applications. While in a standalone Python it’s fine to replace the standardmalloc()andfree()with versions provided by the GC library, an application embedding Python may want to have itsownsubstitute formalloc()andfree(), and may not want Python’s. Right now, CPython works with anything that implementsmalloc()andfree()properly.

================================================================================

## Why isn’t all memory freed when CPython exits?¶

Objects referenced from the global namespaces of Python modules are not always deallocated when Python exits. This may happen if there are circular references. There are also certain bits of memory that are allocated by the C library that are impossible to free (e.g. a tool like Purify will complain about these). Python is, however, aggressive about cleaning up memory on exit and does try to destroy every single object.

If you want to force Python to delete certain things on deallocation use theatexitmodule to run a function that will force those deletions.

================================================================================

## Why are there separate tuple and list data types?¶

Lists and tuples, while similar in many respects, are generally used in fundamentally different ways. Tuples can be thought of as being similar to Pascalrecordsor Cstructs; they’re small collections of related data which may be of different types which are operated on as a group. For example, a Cartesian coordinate is appropriately represented as a tuple of two or three numbers.

Lists, on the other hand, are more like arrays in other languages. They tend to hold a varying number of objects all of which have the same type and which are operated on one-by-one. For example,os.listdir('.')returns a list of strings representing the files in the current directory. Functions which operate on this output would generally not break if you added another file or two to the directory.

```
os.listdir('.')
```

Tuples are immutable, meaning that once a tuple has been created, you can’t replace any of its elements with a new value. Lists are mutable, meaning that you can always change a list’s elements. Only immutable elements can be used as dictionary keys, and hence only tuples and not lists can be used as keys.

================================================================================

## How are lists implemented in CPython?¶

CPython’s lists are really variable-length arrays, not Lisp-style linked lists. The implementation uses a contiguous array of references to other objects, and keeps a pointer to this array and the array’s length in a list head structure.

This makes indexing a lista[i]an operation whose cost is independent of the size of the list or the value of the index.

When items are appended or inserted, the array of references is resized. Some cleverness is applied to improve the performance of appending items repeatedly; when the array must be grown, some extra space is allocated so the next few times don’t require an actual resize.

================================================================================

## How are dictionaries implemented in CPython?¶

CPython’s dictionaries are implemented as resizable hash tables. Compared to B-trees, this gives better performance for lookup (the most common operation by far) under most circumstances, and the implementation is simpler.

Dictionaries work by computing a hash code for each key stored in the dictionary using thehash()built-in function. The hash code varies widely depending on the key and a per-process seed; for example,'Python'could hash to-539294296while'python', a string that differs by a single bit, could hash to1142331976. The hash code is then used to calculate a location in an internal array where the value will be stored. Assuming that you’re storing keys that all have different hash values, this means that dictionaries take constant time –O(1), in Big-O notation – to retrieve a key.

```
-539294296
```

```
1142331976
```

================================================================================

## Why must dictionary keys be immutable?¶

The hash table implementation of dictionaries uses a hash value calculated from the key value to find the key. If the key were a mutable object, its value could change, and thus its hash could also change. But since whoever changes the key object can’t tell that it was being used as a dictionary key, it can’t move the entry around in the dictionary. Then, when you try to look up the same object in the dictionary it won’t be found because its hash value is different. If you tried to look up the old value it wouldn’t be found either, because the value of the object found in that hash bin would be different.

If you want a dictionary indexed with a list, simply convert the list to a tuple first; the functiontuple(L)creates a tuple with the same entries as the listL. Tuples are immutable and can therefore be used as dictionary keys.

Some unacceptable solutions that have been proposed:

- Hash lists by their address (object ID).  This doesn’t work because if you
construct a new list with the same value it won’t be found; e.g.:mydict={[1,2]:'12'}print(mydict[[1,2]])would raise aKeyErrorexception because the id of the[1,2]used in the
second line differs from that in the first line.  In other words, dictionary
keys should be compared using==, not usingis.
- Make a copy when using a list as a key.  This doesn’t work because the list,
being a mutable object, could contain a reference to itself, and then the
copying code would run into an infinite loop.
- Allow lists as keys but tell the user not to modify them.  This would allow a
class of hard-to-track bugs in programs when you forgot or modified a list by
accident. It also invalidates an important invariant of dictionaries: every
value ind.keys()is usable as a key of the dictionary.
- Mark lists as read-only once they are used as a dictionary key.  The problem
is that it’s not just the top-level object that could change its value; you
could use a tuple containing a list as a key.  Entering anything as a key into
a dictionary would require marking all objects reachable from there as
read-only – and again, self-referential objects could cause an infinite loop.

Hash lists by their address (object ID). This doesn’t work because if you construct a new list with the same value it won’t be found; e.g.:

```
mydict={[1,2]:'12'}print(mydict[[1,2]])
```

would raise aKeyErrorexception because the id of the[1,2]used in the second line differs from that in the first line. In other words, dictionary keys should be compared using==, not usingis.

There is a trick to get around this if you need to, but use it at your own risk: You can wrap a mutable structure inside a class instance which has both a__eq__()and a__hash__()method. You must then make sure that the hash value for all such wrapper objects that reside in a dictionary (or other hash based structure), remain fixed while the object is in the dictionary (or other structure).

```
__hash__()
```

```
classListWrapper:def__init__(self,the_list):self.the_list=the_listdef__eq__(self,other):returnself.the_list==other.the_listdef__hash__(self):l=self.the_listresult=98767-len(l)*555fori,elinenumerate(l):try:result=result+(hash(el)%9999999)*1001+iexceptException:result=(result%7777777)+i*333returnresult
```

Note that the hash computation is complicated by the possibility that some members of the list may be unhashable and also by the possibility of arithmetic overflow.

Furthermore it must always be the case that ifo1==o2(ieo1.__eq__(o2)isTrue) thenhash(o1)==hash(o2)(ie,o1.__hash__()==o2.__hash__()), regardless of whether the object is in a dictionary or not. If you fail to meet these restrictions dictionaries and other hash based structures will misbehave.

```
o1.__eq__(o2)isTrue
```

```
hash(o1)==hash(o2)
```

```
o1.__hash__()==o2.__hash__()
```

In the case ofListWrapper, whenever the wrapper object is in a dictionary the wrapped list must not change to avoid anomalies. Don’t do this unless you are prepared to think hard about the requirements and the consequences of not meeting them correctly. Consider yourself warned.

```
ListWrapper
```

================================================================================

## Why doesn’t list.sort() return the sorted list?¶

In situations where performance matters, making a copy of the list just to sort it would be wasteful. Therefore,list.sort()sorts the list in place. In order to remind you of that fact, it does not return the sorted list. This way, you won’t be fooled into accidentally overwriting a list when you need a sorted copy but also need to keep the unsorted version around.

```
list.sort()
```

If you want to return a new list, use the built-insorted()function instead. This function creates a new list from a provided iterable, sorts it and returns it. For example, here’s how to iterate over the keys of a dictionary in sorted order:

```
forkeyinsorted(mydict):...# do whatever with mydict[key]...
```

================================================================================

## How do you specify and enforce an interface spec in Python?¶

An interface specification for a module as provided by languages such as C++ and Java describes the prototypes for the methods and functions of the module. Many feel that compile-time enforcement of interface specifications helps in the construction of large programs.

Python 2.6 adds anabcmodule that lets you define Abstract Base Classes (ABCs). You can then useisinstance()andissubclass()to check whether an instance or a class implements a particular ABC. Thecollections.abcmodule defines a set of useful ABCs such asIterable,Container, andMutableMapping.

```
isinstance()
```

```
issubclass()
```

```
collections.abc
```

```
MutableMapping
```

For Python, many of the advantages of interface specifications can be obtained by an appropriate test discipline for components.

A good test suite for a module can both provide a regression test and serve as a module interface specification and a set of examples. Many Python modules can be run as a script to provide a simple “self test.” Even modules which use complex external interfaces can often be tested in isolation using trivial “stub” emulations of the external interface. Thedoctestandunittestmodules or third-party test frameworks can be used to construct exhaustive test suites that exercise every line of code in a module.

An appropriate testing discipline can help build large complex applications in Python as well as having interface specifications would. In fact, it can be better because an interface specification cannot test certain properties of a program. For example, thelist.append()method is expected to add new elements to the end of some internal list; an interface specification cannot test that yourlist.append()implementation will actually do this correctly, but it’s trivial to check this property in a test suite.

```
list.append()
```

Writing test suites is very helpful, and you might want to design your code to make it easily tested. One increasingly popular technique, test-driven development, calls for writing parts of the test suite first, before you write any of the actual code. Of course Python allows you to be sloppy and not write test cases at all.

================================================================================

## Why is there no goto?¶

In the 1970s people realized that unrestricted goto could lead to messy “spaghetti” code that was hard to understand and revise. In a high-level language, it is also unneeded as long as there are ways to branch (in Python, withifstatements andor,and, andif/elseexpressions) and loop (withwhileandforstatements, possibly containingcontinueandbreak).

One can also use exceptions to provide a “structured goto” that works even across function calls. Many feel that exceptions can conveniently emulate all reasonable uses of thegoorgotoconstructs of C, Fortran, and other languages. For example:

```
classlabel(Exception):pass# declare a labeltry:...ifcondition:raiselabel()# goto label...exceptlabel:# where to gotopass...
```

This doesn’t allow you to jump into the middle of a loop, but that’s usually considered an abuse ofgotoanyway. Use sparingly.

================================================================================

## Why can’t raw strings (r-strings) end with a backslash?¶

More precisely, they can’t end with an odd number of backslashes: the unpaired backslash at the end escapes the closing quote character, leaving an unterminated string.

Raw strings were designed to ease creating input for processors (chiefly regular expression engines) that want to do their own backslash escape processing. Such processors consider an unmatched trailing backslash to be an error anyway, so raw strings disallow that. In return, they allow you to pass on the string quote character by escaping it with a backslash. These rules work well when r-strings are used for their intended purpose.

If you’re trying to build Windows pathnames, note that all Windows system calls accept forward slashes too:

```
f=open("/mydir/file.txt")# works fine!
```

If you’re trying to build a pathname for a DOS command, try e.g. one of

```
dir=r"\this\is\my\dos\dir""\\"dir=r"\this\is\my\dos\dir\ "[:-1]dir="\\this\\is\\my\\dos\\dir\\"
```

================================================================================

## Why doesn’t Python have a “with” statement for attribute assignments?¶

Python has awithstatement that wraps the execution of a block, calling code on the entrance and exit from the block. Some languages have a construct that looks like this:

```
withobj:a=1# equivalent to obj.a = 1total=total+1# obj.total = obj.total + 1
```

In Python, such a construct would be ambiguous.

Other languages, such as Object Pascal, Delphi, and C++, use static types, so it’s possible to know, in an unambiguous way, what member is being assigned to. This is the main point of static typing – the compileralwaysknows the scope of every variable at compile time.

Python uses dynamic types. It is impossible to know in advance which attribute will be referenced at runtime. Member attributes may be added or removed from objects on the fly. This makes it impossible to know, from a simple reading, what attribute is being referenced: a local one, a global one, or a member attribute?

For instance, take the following incomplete snippet:

```
deffoo(a):witha:print(x)
```

The snippet assumes thatamust have a member attribute calledx. However, there is nothing in Python that tells the interpreter this. What should happen ifais, let us say, an integer? If there is a global variable namedx, will it be used inside thewithblock? As you see, the dynamic nature of Python makes such choices much harder.

The primary benefit ofwithand similar language features (reduction of code volume) can, however, easily be achieved in Python by assignment. Instead of:

```
function(args).mydict[index][index].a=21function(args).mydict[index][index].b=42function(args).mydict[index][index].c=63
```

write this:

```
ref=function(args).mydict[index][index]ref.a=21ref.b=42ref.c=63
```

This also has the side-effect of increasing execution speed because name bindings are resolved at run-time in Python, and the second version only needs to perform the resolution once.

Similar proposals that would introduce syntax to further reduce code volume, such as using a ‘leading dot’, have been rejected in favour of explicitness (seehttps://mail.python.org/pipermail/python-ideas/2016-May/040070.html).

================================================================================

## Why don’t generators support the with statement?¶

For technical reasons, a generator used directly as a context manager would not work correctly. When, as is most common, a generator is used as an iterator run to completion, no closing is needed. When it is, wrap it ascontextlib.closing(generator)in thewithstatement.

```
contextlib.closing(generator)
```

================================================================================

## Why are colons required for the if/while/def/class statements?¶

The colon is required primarily to enhance readability (one of the results of the experimental ABC language). Consider this:

```
ifa==bprint(a)
```

```
ifa==b:print(a)
```

Notice how the second one is slightly easier to read. Notice further how a colon sets off the example in this FAQ answer; it’s a standard usage in English.

Another minor reason is that the colon makes it easier for editors with syntax highlighting; they can look for colons to decide when indentation needs to be increased instead of having to do a more elaborate parsing of the program text.

================================================================================

## Why does Python allow commas at the end of lists and tuples?¶

Python lets you add a trailing comma at the end of lists, tuples, and dictionaries:

```
[1,2,3,]('a','b','c',)d={"A":[1,5],"B":[6,7],# last trailing comma is optional but good style}
```

There are several reasons to allow this.

When you have a literal value for a list, tuple, or dictionary spread across multiple lines, it’s easier to add more elements because you don’t have to remember to add a comma to the previous line. The lines can also be reordered without creating a syntax error.

Accidentally omitting the comma can lead to errors that are hard to diagnose. For example:

```
x=["fee","fie""foo","fum"]
```

This list looks like it has four elements, but it actually contains three: “fee”, “fiefoo” and “fum”. Always adding the comma avoids this source of error.

Allowing the trailing comma may also make programmatic code generation easier.

================================================================================

================================================================================

# Python on Windows FAQ — Python 3.13.3 documentation
URL: https://docs.python.org/3/faq/windows.html
Section: 2/2
Description: Contents: Python on Windows FAQ- How do I run a Python program under Windows?, How do I make Python scripts executable?, Why does Python sometimes take so long to start?, How do I make an executabl...

Content:

================================================================================

# Python on Windows FAQ¶

================================================================================

## How do I run a Python program under Windows?¶

This is not necessarily a straightforward question. If you are already familiar with running programs from the Windows command line then everything will seem obvious; otherwise, you might need a little more guidance.

Unless you use some sort of integrated development environment, you will end uptypingWindows commands into what is referred to as a “Command prompt window”. Usually you can create such a window from your search bar by searching forcmd. You should be able to recognize when you have started such a window because you will see a Windows “command prompt”, which usually looks like this:

The letter may be different, and there might be other things after it, so you might just as easily see something like:

```
D:\YourName\Projects\Python>
```

depending on how your computer has been set up and what else you have recently done with it. Once you have started such a window, you are well on the way to running Python programs.

You need to realize that your Python scripts have to be processed by another program called the Pythoninterpreter. The interpreter reads your script, compiles it into bytecodes, and then executes the bytecodes to run your program. So, how do you arrange for the interpreter to handle your Python?

First, you need to make sure that your command window recognises the word “py” as an instruction to start the interpreter. If you have opened a command window, you should try entering the commandpyand hitting return:

```
C:\Users\YourName>py
```

You should then see something like:

```
Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32Type "help", "copyright", "credits" or "license" for more information.>>>
```

You have started the interpreter in “interactive mode”. That means you can enter Python statements or expressions interactively and have them executed or evaluated while you wait. This is one of Python’s strongest features. Check it by entering a few expressions of your choice and seeing the results:

```
>>>print("Hello")Hello>>>"Hello"*3'HelloHelloHello'
```

Many people use the interactive mode as a convenient yet highly programmable calculator. When you want to end your interactive Python session, call theexit()function or hold theCtrlkey down while you enter aZ, then hit the “Enter” key to get back to your Windows command prompt.

You may also find that you have a Start-menu entry such asStart ‣ Programs ‣ Python 3.x ‣ Python (command line)that results in you seeing the>>>prompt in a new window. If so, the window will disappear after you call theexit()function or enter theCtrl-Zcharacter; Windows is running a single “python” command in the window, and closes it when you terminate the interpreter.

Now that we know thepycommand is recognized, you can give your Python script to it. You’ll have to give either an absolute or a relative path to the Python script. Let’s say your Python script is located in your desktop and is namedhello.py, and your command prompt is nicely opened in your home directory so you’re seeing something similar to:

```
C:\Users\YourName>
```

So now you’ll ask thepycommand to give your script to Python by typingpyfollowed by your script path:

```
C:\Users\YourName> py Desktop\hello.py
hello
```

================================================================================

## How do I make Python scripts executable?¶

On Windows, the standard Python installer already associates the .py extension with a file type (Python.File) and gives that file type an open command that runs the interpreter (D:\ProgramFiles\Python\python.exe"%1"%*). This is enough to make scripts executable from the command prompt as ‘foo.py’. If you’d rather be able to execute the script by simple typing ‘foo’ with no extension you need to add .py to the PATHEXT environment variable.

```
D:\ProgramFiles\Python\python.exe"%1"%*
```

================================================================================

## Why does Python sometimes take so long to start?¶

Usually Python starts very quickly on Windows, but occasionally there are bug reports that Python suddenly begins to take a long time to start up. This is made even more puzzling because Python will work fine on other Windows systems which appear to be configured identically.

The problem may be caused by a misconfiguration of virus checking software on the problem machine. Some virus scanners have been known to introduce startup overhead of two orders of magnitude when the scanner is configured to monitor all reads from the filesystem. Try checking the configuration of virus scanning software on your systems to ensure that they are indeed configured identically. McAfee, when configured to scan all file system read activity, is a particular offender.

================================================================================

## How do I make an executable from a Python script?¶

SeeHow can I create a stand-alone binary from a Python script?for a list of tools that can be used to make executables.

================================================================================

## Is a*.pydfile the same as a DLL?¶

Yes, .pyd files are dll’s, but there are a few differences. If you have a DLL namedfoo.pyd, then it must have a functionPyInit_foo(). You can then write Python “import foo”, and Python will search for foo.pyd (as well as foo.py, foo.pyc) and if it finds it, will attempt to callPyInit_foo()to initialize it. You do not link your .exe with foo.lib, as that would cause Windows to require the DLL to be present.

```
PyInit_foo()
```

Note that the search path for foo.pyd is PYTHONPATH, not the same as the path that Windows uses to search for foo.dll. Also, foo.pyd need not be present to run your program, whereas if you linked your program with a dll, the dll is required. Of course, foo.pyd is required if you want to sayimportfoo. In a DLL, linkage is declared in the source code with__declspec(dllexport). In a .pyd, linkage is defined in a list of available functions.

```
__declspec(dllexport)
```

================================================================================

## How can I embed Python into a Windows application?¶

Embedding the Python interpreter in a Windows app can be summarized as follows:

- Donotbuild Python into your .exe file directly.  On Windows, Python must
be a DLL to handle importing modules that are themselves DLL’s.  (This is the
first key undocumented fact.)  Instead, link topythonNN.dll; it is
typically installed inC:\Windows\System.NNis the Python version, a
number such as “33” for Python 3.3.You can link to Python in two different ways.  Load-time linking means
linking againstpythonNN.lib, while run-time linking means linking
againstpythonNN.dll.  (General note:pythonNN.libis the
so-called “import lib” corresponding topythonNN.dll.  It merely
defines symbols for the linker.)Run-time linking greatly simplifies link options; everything happens at run
time.  Your code must loadpythonNN.dllusing the WindowsLoadLibraryEx()routine.  The code must also use access routines and data
inpythonNN.dll(that is, Python’s C API’s) using pointers obtained
by the WindowsGetProcAddress()routine.  Macros can make using these
pointers transparent to any C code that calls routines in Python’s C API.
- If you use SWIG, it is easy to create a Python “extension module” that will
make the app’s data and methods available to Python.  SWIG will handle just
about all the grungy details for you.  The result is C code that you linkintoyour .exe file (!)  You donothave to create a DLL file, and this
also simplifies linking.
- SWIG will create an init function (a C function) whose name depends on the
name of the extension module.  For example, if the name of the module is leo,
the init function will be called initleo().  If you use SWIG shadow classes,
as you should, the init function will be called initleoc().  This initializes
a mostly hidden helper class used by the shadow class.The reason you can link the C code in step 2 into your .exe file is that
calling the initialization function is equivalent to importing the module
into Python! (This is the second key undocumented fact.)
- In short, you can use the following code to initialize the Python interpreter
with your extension module.#include<Python.h>...Py_Initialize();// Initialize Python.initmyAppc();// Initialize (import) the helper class.PyRun_SimpleString("import myApp");// Import the shadow class.
- There are two problems with Python’s C API which will become apparent if you
use a compiler other than MSVC, the compiler used to build pythonNN.dll.Problem 1: The so-called “Very High Level” functions that takeFILE*arguments will not work in a multi-compiler environment because each
compiler’s notion of astructFILEwill be different.  From an implementation
standpoint these are very low level functions.Problem 2: SWIG generates the following code when generating wrappers to void
functions:Py_INCREF(Py_None);_resultobj=Py_None;return_resultobj;Alas, Py_None is a macro that expands to a reference to a complex data
structure called _Py_NoneStruct inside pythonNN.dll.  Again, this code will
fail in a mult-compiler environment.  Replace such code by:returnPy_BuildValue("");It may be possible to use SWIG’s%typemapcommand to make the change
automatically, though I have not been able to get this to work (I’m a
complete SWIG newbie).
- Using a Python shell script to put up a Python interpreter window from inside
your Windows app is not a good idea; the resulting window will be independent
of your app’s windowing system.  Rather, you (or the wxPythonWindow class)
should create a “native” interpreter window.  It is easy to connect that
window to the Python interpreter.  You can redirect Python’s i/o to _any_
object that supports read and write, so all you need is a Python object
(defined in your extension module) that contains read() and write() methods.

Donotbuild Python into your .exe file directly. On Windows, Python must be a DLL to handle importing modules that are themselves DLL’s. (This is the first key undocumented fact.) Instead, link topythonNN.dll; it is typically installed inC:\Windows\System.NNis the Python version, a number such as “33” for Python 3.3.

```
pythonNN.dll
```

```
C:\Windows\System
```

You can link to Python in two different ways. Load-time linking means linking againstpythonNN.lib, while run-time linking means linking againstpythonNN.dll. (General note:pythonNN.libis the so-called “import lib” corresponding topythonNN.dll. It merely defines symbols for the linker.)

```
pythonNN.lib
```

Run-time linking greatly simplifies link options; everything happens at run time. Your code must loadpythonNN.dllusing the WindowsLoadLibraryEx()routine. The code must also use access routines and data inpythonNN.dll(that is, Python’s C API’s) using pointers obtained by the WindowsGetProcAddress()routine. Macros can make using these pointers transparent to any C code that calls routines in Python’s C API.

```
LoadLibraryEx()
```

```
GetProcAddress()
```

SWIG will create an init function (a C function) whose name depends on the name of the extension module. For example, if the name of the module is leo, the init function will be called initleo(). If you use SWIG shadow classes, as you should, the init function will be called initleoc(). This initializes a mostly hidden helper class used by the shadow class.

The reason you can link the C code in step 2 into your .exe file is that calling the initialization function is equivalent to importing the module into Python! (This is the second key undocumented fact.)

In short, you can use the following code to initialize the Python interpreter with your extension module.

```
#include<Python.h>...Py_Initialize();// Initialize Python.initmyAppc();// Initialize (import) the helper class.PyRun_SimpleString("import myApp");// Import the shadow class.
```

There are two problems with Python’s C API which will become apparent if you use a compiler other than MSVC, the compiler used to build pythonNN.dll.

Problem 1: The so-called “Very High Level” functions that takeFILE*arguments will not work in a multi-compiler environment because each compiler’s notion of astructFILEwill be different. From an implementation standpoint these are very low level functions.

```
structFILE
```

Problem 2: SWIG generates the following code when generating wrappers to void functions:

```
Py_INCREF(Py_None);_resultobj=Py_None;return_resultobj;
```

Alas, Py_None is a macro that expands to a reference to a complex data structure called _Py_NoneStruct inside pythonNN.dll. Again, this code will fail in a mult-compiler environment. Replace such code by:

```
returnPy_BuildValue("");
```

It may be possible to use SWIG’s%typemapcommand to make the change automatically, though I have not been able to get this to work (I’m a complete SWIG newbie).

================================================================================

## How do I keep editors from inserting tabs into my Python source?¶

The FAQ does not recommend using tabs, and the Python style guide,PEP 8, recommends 4 spaces for distributed Python code; this is also the Emacs python-mode default.

Under any editor, mixing tabs and spaces is a bad idea. MSVC is no different in this respect, and is easily configured to use spaces: TakeTools ‣ Options ‣ Tabs, and for file type “Default” set “Tab size” and “Indent size” to 4, and select the “Insert spaces” radio button.

Python raisesIndentationErrororTabErrorif mixed tabs and spaces are causing problems in leading whitespace. You may also run thetabnannymodule to check a directory tree in batch mode.

```
IndentationError
```

================================================================================

## How do I check for a keypress without blocking?¶

Use themsvcrtmodule. This is a standard Windows-specific extension module. It defines a functionkbhit()which checks whether a keyboard hit is present, andgetch()which gets one character without echoing it.

================================================================================

## How do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll error?¶

This can occur on Python 3.5 and later when using Windows 8.1 or earlier without all updates having been installed. First ensure your operating system is supported and is up to date, and if that does not resolve the issue, visit theMicrosoft support pagefor guidance on manually installing the C Runtime update.

================================================================================

================================================================================

# C API Extension Support for Free Threading — Python 3.13.3 documentation
URL: https://docs.python.org/3/howto/free-threading-extensions.html
Section: 2/2
Description: Starting with the 3.13 release, CPython has experimental support for running with the global interpreter lock(GIL) disabled in a configuration called free threading. This document describes how to ...

Content:

================================================================================

# C API Extension Support for Free Threading¶

Starting with the 3.13 release, CPython has experimental support for running with theglobal interpreter lock(GIL) disabled in a configuration calledfree threading. This document describes how to adapt C API extensions to support free threading.

================================================================================

## Identifying the Free-Threaded Build in C¶

The CPython C API exposes thePy_GIL_DISABLEDmacro: in the free-threaded build it’s defined to1, and in the regular build it’s not defined. You can use it to enable code that only runs under the free-threaded build:

```
Py_GIL_DISABLED
```

```
#ifdef Py_GIL_DISABLED/* code that only runs in the free-threaded build */#endif
```

================================================================================

## Module Initialization¶

Extension modules need to explicitly indicate that they support running with the GIL disabled; otherwise importing the extension will raise a warning and enable the GIL at runtime.

There are two ways to indicate that an extension module supports running with the GIL disabled depending on whether the extension uses multi-phase or single-phase initialization.

================================================================================

### Multi-Phase Initialization¶

Extensions that use multi-phase initialization (i.e.,PyModuleDef_Init()) should add aPy_mod_gilslot in the module definition. If your extension supports older versions of CPython, you should guard the slot with aPY_VERSION_HEXcheck.

```
PyModuleDef_Init()
```

```
Py_mod_gil
```

```
PY_VERSION_HEX
```

```
staticstructPyModuleDef_Slotmodule_slots[]={...#if PY_VERSION_HEX >= 0x030D0000{Py_mod_gil,Py_MOD_GIL_NOT_USED},#endif{0,NULL}};staticstructPyModuleDefmoduledef={PyModuleDef_HEAD_INIT,.m_slots=module_slots,...};
```

================================================================================

### Single-Phase Initialization¶

Extensions that use single-phase initialization (i.e.,PyModule_Create()) should callPyUnstable_Module_SetGIL()to indicate that they support running with the GIL disabled. The function is only defined in the free-threaded build, so you should guard the call with#ifdefPy_GIL_DISABLEDto avoid compilation errors in the regular build.

```
PyModule_Create()
```

```
PyUnstable_Module_SetGIL()
```

```
#ifdefPy_GIL_DISABLED
```

```
staticstructPyModuleDefmoduledef={PyModuleDef_HEAD_INIT,...};PyMODINIT_FUNCPyInit_mymodule(void){PyObject*m=PyModule_Create(&moduledef);if(m==NULL){returnNULL;}#ifdef Py_GIL_DISABLEDPyUnstable_Module_SetGIL(m,Py_MOD_GIL_NOT_USED);#endifreturnm;}
```

================================================================================

## General API Guidelines¶

Most of the C API is thread-safe, but there are some exceptions.

- Struct Fields: Accessing fields in Python C API objects or structs
directly is not thread-safe if the field may be concurrently modified.
- Macros: Accessor macros likePyList_GET_ITEMandPyList_SET_ITEMdo not perform any error checking or locking.
These macros are not thread-safe if the container object may be modified
concurrently.
- Borrowed References: C API functions that returnborrowed referencesmay not be thread-safe if
the containing object is modified concurrently.  See the section onborrowed referencesfor more information.

```
PyList_GET_ITEM
```

```
PyList_SET_ITEM
```

================================================================================

### Container Thread Safety¶

Containers likePyListObject,PyDictObject, andPySetObjectperform internal locking in the free-threaded build. For example, thePyList_Append()will lock the list before appending an item.

```
PyListObject
```

```
PyDictObject
```

```
PySetObject
```

```
PyList_Append()
```

================================================================================

#### PyDict_Next¶

```
PyDict_Next
```

A notable exception isPyDict_Next(), which does not lock the dictionary. You should usePy_BEGIN_CRITICAL_SECTIONto protect the dictionary while iterating over it if the dictionary may be concurrently modified:

```
PyDict_Next()
```

```
Py_BEGIN_CRITICAL_SECTION
```

```
Py_BEGIN_CRITICAL_SECTION(dict);PyObject*key,*value;Py_ssize_tpos=0;while(PyDict_Next(dict,&pos,&key,&value)){...}Py_END_CRITICAL_SECTION();
```

================================================================================

## Borrowed References¶

Some C API functions returnborrowed references. These APIs are not thread-safe if the containing object is modified concurrently. For example, it’s not safe to usePyList_GetItem()if the list may be modified concurrently.

```
PyList_GetItem()
```

The following table lists some borrowed reference APIs and their replacements that returnstrong references.

Borrowed reference API

Strong reference API

PyList_GetItem()

PyList_GetItemRef()

PyDict_GetItem()

PyDict_GetItemRef()

PyDict_GetItemWithError()

PyDict_GetItemString()

PyDict_GetItemStringRef()

PyDict_SetDefault()

PyDict_SetDefaultRef()

PyDict_Next()

none (seePyDict_Next)

PyWeakref_GetObject()

PyWeakref_GetRef()

PyWeakref_GET_OBJECT()

PyImport_AddModule()

PyImport_AddModuleRef()

Not all APIs that return borrowed references are problematic. For example,PyTuple_GetItem()is safe because tuples are immutable. Similarly, not all uses of the above APIs are problematic. For example,PyDict_GetItem()is often used for parsing keyword argument dictionaries in function calls; those keyword argument dictionaries are effectively private (not accessible by other threads), so using borrowed references in that context is safe.

```
PyTuple_GetItem()
```

Some of these functions were added in Python 3.13. You can use thepythoncapi-compatpackage to provide implementations of these functions for older Python versions.

================================================================================

## Memory Allocation APIs¶

Python’s memory management C API provides functions in three differentallocation domains: “raw”, “mem”, and “object”. For thread-safety, the free-threaded build requires that only Python objects are allocated using the object domain, and that all Python object are allocated using that domain. This differs from the prior Python versions, where this was only a best practice and not a hard requirement.

Search for uses ofPyObject_Malloc()in your extension and check that the allocated memory is used for Python objects. UsePyMem_Malloc()to allocate buffers instead ofPyObject_Malloc().

```
PyObject_Malloc()
```

```
PyMem_Malloc()
```

================================================================================

## Thread State and GIL APIs¶

Python provides a set of functions and macros to manage thread state and the GIL, such as:

- PyGILState_Ensure()andPyGILState_Release()
- PyEval_SaveThread()andPyEval_RestoreThread()
- Py_BEGIN_ALLOW_THREADSandPy_END_ALLOW_THREADS

```
PyGILState_Ensure()
```

```
PyGILState_Release()
```

```
PyEval_SaveThread()
```

```
PyEval_RestoreThread()
```

```
Py_BEGIN_ALLOW_THREADS
```

```
Py_END_ALLOW_THREADS
```

These functions should still be used in the free-threaded build to manage thread state even when theGILis disabled. For example, if you create a thread outside of Python, you must callPyGILState_Ensure()before calling into the Python API to ensure that the thread has a valid Python thread state.

You should continue to callPyEval_SaveThread()orPy_BEGIN_ALLOW_THREADSaround blocking operations, such as I/O or lock acquisitions, to allow other threads to run thecyclic garbage collector.

================================================================================

## Protecting Internal Extension State¶

Your extension may have internal state that was previously protected by the GIL. You may need to add locking to protect this state. The approach will depend on your extension, but some common patterns include:

- Caches: global caches are a common source of shared state.  Consider
using a lock to protect the cache or disabling it in the free-threaded build
if the cache is not critical for performance.
- Global State: global state may need to be protected by a lock or moved
to thread local storage. C11 and C++11 provide thethread_localor_Thread_localforthread-local storage.

```
thread_local
```

```
_Thread_local
```

================================================================================

## Building Extensions for the Free-Threaded Build¶

C API extensions need to be built specifically for the free-threaded build. The wheels, shared libraries, and binaries are indicated by atsuffix.

- pypa/manylinuxsupports the
free-threaded build, with thetsuffix, such aspython3.13t.
- pypa/cibuildwheelsupports the
free-threaded build if you setCIBW_FREE_THREADED_SUPPORT.

```
python3.13t
```

================================================================================

### Limited C API and Stable ABI¶

The free-threaded build does not currently support theLimited C APIor the stable ABI. If you usesetuptoolsto build your extension and currently setpy_limited_api=Trueyou can usepy_limited_api=notsysconfig.get_config_var("Py_GIL_DISABLED")to opt out of the limited API when building with the free-threaded build.

```
py_limited_api=True
```

```
py_limited_api=notsysconfig.get_config_var("Py_GIL_DISABLED")
```

You will need to build separate wheels specifically for the free-threaded build. If you currently use the stable ABI, you can continue to build a single wheel for multiple non-free-threaded Python versions.

Due to a limitation of the official Windows installer, you will need to manually definePy_GIL_DISABLED=1when building extensions from source.

```
Py_GIL_DISABLED=1
```

Porting Extension Modules to Support Free-Threading: A community-maintained porting guide for extension authors.

================================================================================

================================================================================

# Extending/Embedding FAQ — Python 3.13.3 documentation
URL: https://docs.python.org/3/faq/extending.html
Section: 2/2
Description: Contents: Extending/Embedding FAQ- Can I create my own functions in C?, Can I create my own functions in C++?, Writing C is hard; are there any alternatives?, How can I execute arbitrary Python sta...

Content:

================================================================================

# Extending/Embedding FAQ¶

================================================================================

## Can I create my own functions in C?¶

Yes, you can create built-in modules containing functions, variables, exceptions and even new types in C. This is explained in the documentExtending and Embedding the Python Interpreter.

Most intermediate or advanced Python books will also cover this topic.

================================================================================

## Can I create my own functions in C++?¶

Yes, using the C compatibility features found in C++. Placeextern"C"{...}around the Python include files and putextern"C"before each function that is going to be called by the Python interpreter. Global or static C++ objects with constructors are probably not a good idea.

```
extern"C"{...}
```

================================================================================

## Writing C is hard; are there any alternatives?¶

There are a number of alternatives to writing your own C extensions, depending on what you’re trying to do.

Cythonand its relativePyrexare compilers that accept a slightly modified form of Python and generate the corresponding C code. Cython and Pyrex make it possible to write an extension without having to learn Python’s C API.

If you need to interface to some C or C++ library for which no Python extension currently exists, you can try wrapping the library’s data types and functions with a tool such asSWIG.SIP,CXXBoost, orWeaveare also alternatives for wrapping C++ libraries.

================================================================================

## How can I execute arbitrary Python statements from C?¶

The highest-level function to do this isPyRun_SimpleString()which takes a single string argument to be executed in the context of the module__main__and returns0for success and-1when an exception occurred (includingSyntaxError). If you want more control, usePyRun_String(); see the source forPyRun_SimpleString()inPython/pythonrun.c.

```
PyRun_SimpleString()
```

```
SyntaxError
```

```
PyRun_String()
```

```
Python/pythonrun.c
```

================================================================================

## How can I evaluate an arbitrary Python expression from C?¶

Call the functionPyRun_String()from the previous question with the start symbolPy_eval_input; it parses an expression, evaluates it and returns its value.

```
Py_eval_input
```

================================================================================

## How do I extract C values from a Python object?¶

That depends on the object’s type. If it’s a tuple,PyTuple_Size()returns its length andPyTuple_GetItem()returns the item at a specified index. Lists have similar functions,PyList_Size()andPyList_GetItem().

```
PyTuple_Size()
```

```
PyTuple_GetItem()
```

```
PyList_Size()
```

```
PyList_GetItem()
```

For bytes,PyBytes_Size()returns its length andPyBytes_AsStringAndSize()provides a pointer to its value and its length. Note that Python bytes objects may contain null bytes so C’sstrlen()should not be used.

```
PyBytes_Size()
```

```
PyBytes_AsStringAndSize()
```

To test the type of an object, first make sure it isn’tNULL, and then usePyBytes_Check(),PyTuple_Check(),PyList_Check(), etc.

```
PyBytes_Check()
```

```
PyTuple_Check()
```

```
PyList_Check()
```

There is also a high-level API to Python objects which is provided by the so-called ‘abstract’ interface – readInclude/abstract.hfor further details. It allows interfacing with any kind of Python sequence using calls likePySequence_Length(),PySequence_GetItem(), etc. as well as many other useful protocols such as numbers (PyNumber_Index()et al.) and mappings in the PyMapping APIs.

```
Include/abstract.h
```

```
PySequence_Length()
```

```
PySequence_GetItem()
```

```
PyNumber_Index()
```

================================================================================

## How do I use Py_BuildValue() to create a tuple of arbitrary length?¶

You can’t. UsePyTuple_Pack()instead.

```
PyTuple_Pack()
```

================================================================================

## How do I call an object’s method from C?¶

ThePyObject_CallMethod()function can be used to call an arbitrary method of an object. The parameters are the object, the name of the method to call, a format string like that used withPy_BuildValue(), and the argument values:

```
PyObject_CallMethod()
```

```
Py_BuildValue()
```

```
PyObject*PyObject_CallMethod(PyObject*object,constchar*method_name,constchar*arg_format,...);
```

This works for any object that has methods – whether built-in or user-defined. You are responsible for eventuallyPy_DECREF()‘ing the return value.

```
Py_DECREF()
```

To call, e.g., a file object’s “seek” method with arguments 10, 0 (assuming the file object pointer is “f”):

```
res=PyObject_CallMethod(f,"seek","(ii)",10,0);if(res==NULL){...anexceptionoccurred...}else{Py_DECREF(res);}
```

Note that sincePyObject_CallObject()alwayswants a tuple for the argument list, to call a function without arguments, pass “()” for the format, and to call a function with one argument, surround the argument in parentheses, e.g. “(i)”.

```
PyObject_CallObject()
```

================================================================================

## How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?¶

In Python code, define an object that supports thewrite()method. Assign this object tosys.stdoutandsys.stderr. Call print_error, or just allow the standard traceback mechanism to work. Then, the output will go wherever yourwrite()method sends it.

```
sys.stdout
```

```
sys.stderr
```

The easiest way to do this is to use theio.StringIOclass:

```
io.StringIO
```

```
>>>importio,sys>>>sys.stdout=io.StringIO()>>>print('foo')>>>print('hello world!')>>>sys.stderr.write(sys.stdout.getvalue())foohello world!
```

A custom object to do the same would look like this:

```
>>>importio,sys>>>classStdoutCatcher(io.TextIOBase):...def__init__(self):...self.data=[]...defwrite(self,stuff):...self.data.append(stuff)...>>>importsys>>>sys.stdout=StdoutCatcher()>>>print('foo')>>>print('hello world!')>>>sys.stderr.write(''.join(sys.stdout.data))foohello world!
```

================================================================================

## How do I access a module written in Python from C?¶

You can get a pointer to the module object as follows:

```
module=PyImport_ImportModule("<modulename>");
```

If the module hasn’t been imported yet (i.e. it is not yet present insys.modules), this initializes the module; otherwise it simply returns the value ofsys.modules["<modulename>"]. Note that it doesn’t enter the module into any namespace – it only ensures it has been initialized and is stored insys.modules.

```
sys.modules
```

```
sys.modules["<modulename>"]
```

You can then access the module’s attributes (i.e. any name defined in the module) as follows:

```
attr=PyObject_GetAttrString(module,"<attrname>");
```

CallingPyObject_SetAttrString()to assign to variables in the module also works.

```
PyObject_SetAttrString()
```

================================================================================

## How do I interface to C++ objects from Python?¶

Depending on your requirements, there are many approaches. To do this manually, begin by readingthe “Extending and Embedding” document. Realize that for the Python run-time system, there isn’t a whole lot of difference between C and C++ – so the strategy of building a new Python type around a C structure (pointer) type will also work for C++ objects.

For C++ libraries, seeWriting C is hard; are there any alternatives?.

================================================================================

## I added a module using the Setup file and the make fails; why?¶

Setup must end in a newline, if there is no newline there, the build process fails. (Fixing this requires some ugly shell script hackery, and this bug is so minor that it doesn’t seem worth the effort.)

================================================================================

## How do I debug an extension?¶

When using GDB with dynamically loaded extensions, you can’t set a breakpoint in your extension until your extension is loaded.

In your.gdbinitfile (or interactively), add the command:

```
br _PyImport_LoadDynamicModule
```

Then, when you run GDB:

```
$gdb/local/bin/pythongdb) run myscript.pygdb) continue # repeat until your extension is loadedgdb) finish   # so that your extension is loadedgdb) br myfunction.c:50gdb) continue
```

================================================================================

## I want to compile a Python module on my Linux system, but some files are missing. Why?¶

Most packaged versions of Python omit some files required for compiling Python extensions.

For Red Hat, install the python3-devel RPM to get the necessary files.

For Debian, runapt-getinstallpython3-dev.

```
apt-getinstallpython3-dev
```

================================================================================

## How do I tell “incomplete input” from “invalid input”?¶

Sometimes you want to emulate the Python interactive interpreter’s behavior, where it gives you a continuation prompt when the input is incomplete (e.g. you typed the start of an “if” statement or you didn’t close your parentheses or triple string quotes), but it gives you a syntax error message immediately when the input is invalid.

In Python you can use thecodeopmodule, which approximates the parser’s behavior sufficiently. IDLE uses this, for example.

The easiest way to do it in C is to callPyRun_InteractiveLoop()(perhaps in a separate thread) and let the Python interpreter handle the input for you. You can also set thePyOS_ReadlineFunctionPointer()to point at your custom input function. SeeModules/readline.candParser/myreadline.cfor more hints.

```
PyRun_InteractiveLoop()
```

```
PyOS_ReadlineFunctionPointer()
```

```
Modules/readline.c
```

```
Parser/myreadline.c
```

================================================================================

## How do I find undefined g++ symbols __builtin_new or __pure_virtual?¶

To dynamically load g++ extension modules, you must recompile Python, relink it using g++ (change LINKCC in the Python Modules Makefile), and link your extension module using g++ (e.g.,g++-shared-omymodule.somymodule.o).

```
g++-shared-omymodule.somymodule.o
```

================================================================================

## Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?¶

Yes, you can inherit from built-in classes such asint,list,dict, etc.

The Boost Python Library (BPL,https://www.boost.org/libs/python/doc/index.html) provides a way of doing this from C++ (i.e. you can inherit from an extension class written in C++ using the BPL).

================================================================================

================================================================================

# Library and Extension FAQ — Python 3.13.3 documentation
URL: https://docs.python.org/3/faq/library.html
Section: 2/2
Description: Contents: Library and Extension FAQ- General Library Questions- How do I find a module or application to perform task X?, Where is the math.py (socket.py, regex.py, etc.) source file?, How do I mak...

Content:

================================================================================

# Library and Extension FAQ¶

================================================================================

## General Library Questions¶

================================================================================

### How do I find a module or application to perform task X?¶

Checkthe Library Referenceto see if there’s a relevant standard library module. (Eventually you’ll learn what’s in the standard library and will be able to skip this step.)

For third-party packages, search thePython Package Indexor tryGoogleor another web search engine. Searching for “Python” plus a keyword or two for your topic of interest will usually find something helpful.

================================================================================

### Where is the math.py (socket.py, regex.py, etc.) source file?¶

If you can’t find a source file for a module it may be a built-in or dynamically loaded module implemented in C, C++ or other compiled language. In this case you may not have the source file or it may be something likemathmodule.c, somewhere in a C source directory (not on the Python Path).

```
mathmodule.c
```

There are (at least) three kinds of modules in Python:

- modules written in Python (.py);
- modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);
- modules written in C and linked with the interpreter; to get a list of these,
type:importsysprint(sys.builtin_module_names)

modules written in C and linked with the interpreter; to get a list of these, type:

```
importsysprint(sys.builtin_module_names)
```

================================================================================

### How do I make a Python script executable on Unix?¶

You need to do two things: the script file’s mode must be executable and the first line must begin with#!followed by the path of the Python interpreter.

The first is done by executingchmod+xscriptfileor perhapschmod755scriptfile.

```
chmod+xscriptfile
```

```
chmod755scriptfile
```

The second can be done in a number of ways. The most straightforward way is to write

```
#!/usr/local/bin/python
```

as the very first line of your file, using the pathname for where the Python interpreter is installed on your platform.

If you would like the script to be independent of where the Python interpreter lives, you can use theenvprogram. Almost all Unix variants support the following, assuming the Python interpreter is in a directory on the user’sPATH:

```
#!/usr/bin/env python
```

Don’tdo this for CGI scripts. ThePATHvariable for CGI scripts is often very minimal, so you need to use the actual absolute pathname of the interpreter.

Occasionally, a user’s environment is so full that the/usr/bin/envprogram fails; or there’s no env program at all. In that case, you can try the following hack (due to Alex Rezinsky):

```
#! /bin/sh""":"execpython$0${1+"$@"}"""
```

The minor disadvantage is that this defines the script’s __doc__ string. However, you can fix that by adding

```
__doc__="""...Whatever..."""
```

================================================================================

### Is there a curses/termcap package for Python?¶

For Unix variants: The standard Python source distribution comes with a curses module in theModulessubdirectory, though it’s not compiled by default. (Note that this is not available in the Windows distribution – there is no curses module for Windows.)

Thecursesmodule supports basic curses features as well as many additional functions from ncurses and SYSV curses such as colour, alternative character set support, pads, and mouse support. This means the module isn’t compatible with operating systems that only have BSD curses, but there don’t seem to be any currently maintained OSes that fall into this category.

================================================================================

### Is there an equivalent to C’s onexit() in Python?¶

Theatexitmodule provides a register function that is similar to C’sonexit().

================================================================================

### Why don’t my signal handlers work?¶

The most common problem is that the signal handler is declared with the wrong argument list. It is called as

```
handler(signum,frame)
```

so it should be declared with two parameters:

```
defhandler(signum,frame):...
```

================================================================================

## Common tasks¶

================================================================================

### How do I test a Python program or component?¶

Python comes with two testing frameworks. Thedoctestmodule finds examples in the docstrings for a module and runs them, comparing the output with the expected output given in the docstring.

Theunittestmodule is a fancier testing framework modelled on Java and Smalltalk testing frameworks.

To make testing easier, you should use good modular design in your program. Your program should have almost all functionality encapsulated in either functions or class methods – and this sometimes has the surprising and delightful effect of making the program run faster (because local variable accesses are faster than global accesses). Furthermore the program should avoid depending on mutating global variables, since this makes testing much more difficult to do.

The “global main logic” of your program may be as simple as

```
if__name__=="__main__":main_logic()
```

at the bottom of the main module of your program.

Once your program is organized as a tractable collection of function and class behaviours, you should write test functions that exercise the behaviours. A test suite that automates a sequence of tests can be associated with each module. This sounds like a lot of work, but since Python is so terse and flexible it’s surprisingly easy. You can make coding much more pleasant and fun by writing your test functions in parallel with the “production code”, since this makes it easy to find bugs and even design flaws earlier.

“Support modules” that are not intended to be the main module of a program may include a self-test of the module.

```
if__name__=="__main__":self_test()
```

Even programs that interact with complex external interfaces may be tested when the external interfaces are unavailable by using “fake” interfaces implemented in Python.

================================================================================

### How do I create documentation from doc strings?¶

Thepydocmodule can create HTML from the doc strings in your Python source code. An alternative for creating API documentation purely from docstrings isepydoc.Sphinxcan also include docstring content.

================================================================================

### How do I get a single keypress at a time?¶

For Unix variants there are several solutions. It’s straightforward to do this using curses, but curses is a fairly large module to learn.

================================================================================

### How do I program using threads?¶

Be sure to use thethreadingmodule and not the_threadmodule. Thethreadingmodule builds convenient abstractions on top of the low-level primitives provided by the_threadmodule.

================================================================================

### None of my threads seem to run: why?¶

As soon as the main thread exits, all threads are killed. Your main thread is running too quickly, giving the threads no time to do any work.

A simple fix is to add a sleep to the end of the program that’s long enough for all the threads to finish:

```
importthreading,timedefthread_task(name,n):foriinrange(n):print(name,i)foriinrange(10):T=threading.Thread(target=thread_task,args=(str(i),i))T.start()time.sleep(10)# <---------------------------!
```

But now (on many platforms) the threads don’t run in parallel, but appear to run sequentially, one at a time! The reason is that the OS thread scheduler doesn’t start a new thread until the previous thread is blocked.

A simple fix is to add a tiny sleep to the start of the run function:

```
defthread_task(name,n):time.sleep(0.001)# <--------------------!foriinrange(n):print(name,i)foriinrange(10):T=threading.Thread(target=thread_task,args=(str(i),i))T.start()time.sleep(10)
```

Instead of trying to guess a good delay value fortime.sleep(), it’s better to use some kind of semaphore mechanism. One idea is to use thequeuemodule to create a queue object, let each thread append a token to the queue when it finishes, and let the main thread read as many tokens from the queue as there are threads.

```
time.sleep()
```

================================================================================

### How do I parcel out work among a bunch of worker threads?¶

The easiest way is to use theconcurrent.futuresmodule, especially theThreadPoolExecutorclass.

```
concurrent.futures
```

```
ThreadPoolExecutor
```

Or, if you want fine control over the dispatching algorithm, you can write your own logic manually. Use thequeuemodule to create a queue containing a list of jobs. TheQueueclass maintains a list of objects and has a.put(obj)method that adds items to the queue and a.get()method to return them. The class will take care of the locking necessary to ensure that each job is handed out exactly once.

Here’s a trivial example:

```
importthreading,queue,time# The worker thread gets jobs off the queue.  When the queue is empty, it# assumes there will be no more work and exits.# (Realistically workers will run until terminated.)defworker():print('Running worker')time.sleep(0.1)whileTrue:try:arg=q.get(block=False)exceptqueue.Empty:print('Worker',threading.current_thread(),end=' ')print('queue empty')breakelse:print('Worker',threading.current_thread(),end=' ')print('running with argument',arg)time.sleep(0.5)# Create queueq=queue.Queue()# Start a pool of 5 workersforiinrange(5):t=threading.Thread(target=worker,name='worker%i'%(i+1))t.start()# Begin adding work to the queueforiinrange(50):q.put(i)# Give threads time to runprint('Main thread sleeping')time.sleep(5)
```

When run, this will produce the following output:

```
Running worker
Running worker
Running worker
Running worker
Running worker
Main thread sleeping
Worker <Thread(worker 1, started 130283832797456)> running with argument 0
Worker <Thread(worker 2, started 130283824404752)> running with argument 1
Worker <Thread(worker 3, started 130283816012048)> running with argument 2
Worker <Thread(worker 4, started 130283807619344)> running with argument 3
Worker <Thread(worker 5, started 130283799226640)> running with argument 4
Worker <Thread(worker 1, started 130283832797456)> running with argument 5
...
```

Consult the module’s documentation for more details; theQueueclass provides a featureful interface.

================================================================================

### What kinds of global value mutation are thread-safe?¶

Aglobal interpreter lock(GIL) is used internally to ensure that only one thread runs in the Python VM at a time. In general, Python offers to switch among threads only between bytecode instructions; how frequently it switches can be set viasys.setswitchinterval(). Each bytecode instruction and therefore all the C implementation code reached from each instruction is therefore atomic from the point of view of a Python program.

```
sys.setswitchinterval()
```

In theory, this means an exact accounting requires an exact understanding of the PVM bytecode implementation. In practice, it means that operations on shared variables of built-in data types (ints, lists, dicts, etc) that “look atomic” really are.

For example, the following operations are all atomic (L, L1, L2 are lists, D, D1, D2 are dicts, x, y are objects, i, j are ints):

```
L.append(x)L1.extend(L2)x=L[i]x=L.pop()L1[i:j]=L2L.sort()x=yx.field=yD[x]=yD1.update(D2)D.keys()
```

These aren’t:

```
i=i+1L.append(L[-1])L[i]=L[j]D[x]=D[x]+1
```

Operations that replace other objects may invoke those other objects’__del__()method when their reference count reaches zero, and that can affect things. This is especially true for the mass updates to dictionaries and lists. When in doubt, use a mutex!

================================================================================

### Can’t we get rid of the Global Interpreter Lock?¶

Theglobal interpreter lock(GIL) is often seen as a hindrance to Python’s deployment on high-end multiprocessor server machines, because a multi-threaded Python program effectively only uses one CPU, due to the insistence that (almost) all Python code can only run while the GIL is held.

With the approval ofPEP 703work is now underway to remove the GIL from the CPython implementation of Python. Initially it will be implemented as an optional compiler flag when building the interpreter, and so separate builds will be available with and without the GIL. Long-term, the hope is to settle on a single build, once the performance implications of removing the GIL are fully understood. Python 3.13 is likely to be the first release containing this work, although it may not be completely functional in this release.

The current work to remove the GIL is based on afork of Python 3.9 with the GIL removedby Sam Gross. Prior to that, in the days of Python 1.5, Greg Stein actually implemented a comprehensive patch set (the “free threading” patches) that removed the GIL and replaced it with fine-grained locking. Adam Olsen did a similar experiment in hispython-safethreadproject. Unfortunately, both of these earlier experiments exhibited a sharp drop in single-thread performance (at least 30% slower), due to the amount of fine-grained locking necessary to compensate for the removal of the GIL. The Python 3.9 fork is the first attempt at removing the GIL with an acceptable performance impact.

The presence of the GIL in current Python releases doesn’t mean that you can’t make good use of Python on multi-CPU machines! You just have to be creative with dividing the work up between multipleprocessesrather than multiplethreads. TheProcessPoolExecutorclass in the newconcurrent.futuresmodule provides an easy way of doing so; themultiprocessingmodule provides a lower-level API in case you want more control over dispatching of tasks.

```
ProcessPoolExecutor
```

```
multiprocessing
```

Judicious use of C extensions will also help; if you use a C extension to perform a time-consuming task, the extension can release the GIL while the thread of execution is in the C code and allow other threads to get some work done. Some standard library modules such aszlibandhashlibalready do this.

An alternative approach to reducing the impact of the GIL is to make the GIL a per-interpreter-state lock rather than truly global. This wasfirst implemented in Python 3.12and is available in the C API. A Python interface to it is expected in Python 3.13. The main limitation to it at the moment is likely to be 3rd party extension modules, since these must be written with multiple interpreters in mind in order to be usable, so many older extension modules will not be usable.

================================================================================

## Input and Output¶

================================================================================

### How do I delete a file? (And other file questions…)¶

Useos.remove(filename)oros.unlink(filename); for documentation, see theosmodule. The two functions are identical;unlink()is simply the name of the Unix system call for this function.

```
os.remove(filename)
```

```
os.unlink(filename)
```

To remove a directory, useos.rmdir(); useos.mkdir()to create one.os.makedirs(path)will create any intermediate directories inpaththat don’t exist.os.removedirs(path)will remove intermediate directories as long as they’re empty; if you want to delete an entire directory tree and its contents, useshutil.rmtree().

```
os.rmdir()
```

```
os.mkdir()
```

```
os.makedirs(path)
```

```
os.removedirs(path)
```

```
shutil.rmtree()
```

To rename a file, useos.rename(old_path,new_path).

```
os.rename(old_path,new_path)
```

To truncate a file, open it usingf=open(filename,"rb+"), and usef.truncate(offset); offset defaults to the current seek position. There’s alsoos.ftruncate(fd,offset)for files opened withos.open(), wherefdis the file descriptor (a small integer).

```
f=open(filename,"rb+")
```

```
f.truncate(offset)
```

```
os.ftruncate(fd,offset)
```

Theshutilmodule also contains a number of functions to work on files includingcopyfile(),copytree(), andrmtree().

```
copyfile()
```

```
copytree()
```

================================================================================

### How do I copy a file?¶

Theshutilmodule contains acopyfile()function. Note that on Windows NTFS volumes, it does not copyalternate data streamsnorresource forkson macOS HFS+ volumes, though both are now rarely used. It also doesn’t copy file permissions and metadata, though usingshutil.copy2()instead will preserve most (though not all) of it.

```
shutil.copy2()
```

================================================================================

### How do I read (or write) binary data?¶

To read or write complex binary data formats, it’s best to use thestructmodule. It allows you to take a string containing binary data (usually numbers) and convert it to Python objects; and vice versa.

For example, the following code reads two 2-byte integers and one 4-byte integer in big-endian format from a file:

```
importstructwithopen(filename,"rb")asf:s=f.read(8)x,y,z=struct.unpack(">hhl",s)
```

The ‘>’ in the format string forces big-endian data; the letter ‘h’ reads one “short integer” (2 bytes), and ‘l’ reads one “long integer” (4 bytes) from the string.

For data that is more regular (e.g. a homogeneous list of ints or floats), you can also use thearraymodule.

To read and write binary data, it is mandatory to open the file in binary mode (here, passing"rb"toopen()). If you use"r"instead (the default), the file will be open in text mode andf.read()will returnstrobjects rather thanbytesobjects.

================================================================================

### I can’t seem to use os.read() on a pipe created with os.popen(); why?¶

os.read()is a low-level function which takes a file descriptor, a small integer representing the opened file.os.popen()creates a high-level file object, the same type returned by the built-inopen()function. Thus, to readnbytes from a pipepcreated withos.popen(), you need to usep.read(n).

```
os.popen()
```

================================================================================

### How do I access the serial (RS232) port?¶

For Win32, OSX, Linux, BSD, Jython, IronPython:

For Unix, see a Usenet post by Mitch Chapman:

https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com

================================================================================

### Why doesn’t closing sys.stdout (stdin, stderr) really close it?¶

Pythonfile objectsare a high-level layer of abstraction on low-level C file descriptors.

For most file objects you create in Python via the built-inopen()function,f.close()marks the Python file object as being closed from Python’s point of view, and also arranges to close the underlying C file descriptor. This also happens automatically inf’s destructor, whenfbecomes garbage.

But stdin, stdout and stderr are treated specially by Python, because of the special status also given to them by C. Runningsys.stdout.close()marks the Python-level file object as being closed, but doesnotclose the associated C file descriptor.

```
sys.stdout.close()
```

To close the underlying C file descriptor for one of these three, you should first be sure that’s what you really want to do (e.g., you may confuse extension modules trying to do I/O). If it is, useos.close():

```
os.close()
```

```
os.close(stdin.fileno())os.close(stdout.fileno())os.close(stderr.fileno())
```

Or you can use the numeric constants 0, 1 and 2, respectively.

================================================================================

## Network/Internet Programming¶

================================================================================

### What WWW tools are there for Python?¶

See the chapters titledInternet Protocols and SupportandInternet Data Handlingin the Library Reference Manual. Python has many modules that will help you build server-side and client-side web systems.

A summary of available frameworks is maintained by Paul Boddie athttps://wiki.python.org/moin/WebProgramming.

================================================================================

### What module should I use to help with generating HTML?¶

You can find a collection of useful links on theWeb Programming wiki page.

================================================================================

### How do I send mail from a Python script?¶

Use the standard library modulesmtplib.

Here’s a very simple interactive mail sender that uses it. This method will work on any host that supports an SMTP listener.

```
importsys,smtplibfromaddr=input("From: ")toaddrs=input("To: ").split(',')print("Enter message, end with ^D:")msg=''whileTrue:line=sys.stdin.readline()ifnotline:breakmsg+=line# The actual mail sendserver=smtplib.SMTP('localhost')server.sendmail(fromaddr,toaddrs,msg)server.quit()
```

A Unix-only alternative uses sendmail. The location of the sendmail program varies between systems; sometimes it is/usr/lib/sendmail, sometimes/usr/sbin/sendmail. The sendmail manual page will help you out. Here’s some sample code:

```
/usr/lib/sendmail
```

```
/usr/sbin/sendmail
```

```
importosSENDMAIL="/usr/sbin/sendmail"# sendmail locationp=os.popen("%s-t -i"%SENDMAIL,"w")p.write("To: receiver@example.com\n")p.write("Subject: test\n")p.write("\n")# blank line separating headers from bodyp.write("Some text\n")p.write("some more text\n")sts=p.close()ifsts!=0:print("Sendmail exit status",sts)
```

================================================================================

### How do I avoid blocking in the connect() method of a socket?¶

Theselectmodule is commonly used to help with asynchronous I/O on sockets.

To prevent the TCP connect from blocking, you can set the socket to non-blocking mode. Then when you do theconnect(), you will either connect immediately (unlikely) or get an exception that contains the error number as.errno.errno.EINPROGRESSindicates that the connection is in progress, but hasn’t finished yet. Different OSes will return different values, so you’re going to have to check what’s returned on your system.

```
errno.EINPROGRESS
```

You can use theconnect_ex()method to avoid creating an exception. It will just return the errno value. To poll, you can callconnect_ex()again later –0orerrno.EISCONNindicate that you’re connected – or you can pass this socket toselect.select()to check if it’s writable.

```
connect_ex()
```

```
errno.EISCONN
```

```
select.select()
```

Theasynciomodule provides a general purpose single-threaded and concurrent asynchronous library, which can be used for writing non-blocking network code. The third-partyTwistedlibrary is a popular and feature-rich alternative.

================================================================================

## Databases¶

================================================================================

### Are there any interfaces to database packages in Python?¶

Interfaces to disk-based hashes such asDBMandGDBMare also included with standard Python. There is also thesqlite3module, which provides a lightweight disk-based relational database.

Support for most relational databases is available. See theDatabaseProgramming wiki pagefor details.

================================================================================

### How do you implement persistent objects in Python?¶

Thepicklelibrary module solves this in a very general way (though you still can’t store things like open files, sockets or windows), and theshelvelibrary module uses pickle and (g)dbm to create persistent mappings containing arbitrary Python objects.

================================================================================

## Mathematics and Numerics¶

================================================================================

### How do I generate random numbers in Python?¶

The standard modulerandomimplements a random number generator. Usage is simple:

```
importrandomrandom.random()
```

This returns a random floating-point number in the range [0, 1).

There are also many other specialized generators in this module, such as:

- randrange(a,b)chooses an integer in the range [a, b).
- uniform(a,b)chooses a floating-point number in the range [a, b).
- normalvariate(mean,sdev)samples the normal (Gaussian) distribution.

```
randrange(a,b)
```

```
uniform(a,b)
```

```
normalvariate(mean,sdev)
```

Some higher-level functions operate on sequences directly, such as:

- choice(S)chooses a random element from a given sequence.
- shuffle(L)shuffles a list in-place, i.e. permutes it randomly.

```
shuffle(L)
```

There’s also aRandomclass you can instantiate to create independent multiple random number generators.

================================================================================

================================================================================

# Programming FAQ — Python 3.13.3 documentation
URL: https://docs.python.org/3/faq/programming.html
Section: 2/2
Description: Contents: Programming FAQ- General Questions- Is there a source code level debugger with breakpoints, single-stepping, etc.?, Are there tools to help find bugs or perform static analysis?, How can ...

Content:

================================================================================

# Programming FAQ¶

================================================================================

## General Questions¶

================================================================================

### Is there a source code level debugger with breakpoints, single-stepping, etc.?¶

Several debuggers for Python are described below, and the built-in functionbreakpoint()allows you to drop into any of them.

```
breakpoint()
```

The pdb module is a simple but adequate console-mode debugger for Python. It is part of the standard Python library, and isdocumentedintheLibraryReferenceManual. You can also write your own debugger by using the code for pdb as an example.

```
documentedintheLibraryReferenceManual
```

The IDLE interactive development environment, which is part of the standard Python distribution (normally available asTools/scripts/idle3), includes a graphical debugger.

PythonWin is a Python IDE that includes a GUI debugger based on pdb. The PythonWin debugger colors breakpoints and has quite a few cool features such as debugging non-PythonWin programs. PythonWin is available as part ofpywin32project and as a part of theActivePythondistribution.

Ericis an IDE built on PyQt and the Scintilla editing component.

trepan3kis a gdb-like debugger.

Visual Studio Codeis an IDE with debugging tools that integrates with version-control software.

There are a number of commercial Python IDEs that include graphical debuggers. They include:

================================================================================

### Are there tools to help find bugs or perform static analysis?¶

PylintandPyflakesdo basic checking that will help you catch bugs sooner.

Static type checkers such asMypy,Pyre, andPytypecan check type hints in Python source code.

================================================================================

### How can I create a stand-alone binary from a Python script?¶

You don’t need the ability to compile Python to C code if all you want is a stand-alone program that users can download and run without having to install the Python distribution first. There are a number of tools that determine the set of modules required by a program and bind these modules together with a Python binary to produce a single executable.

One is to use the freeze tool, which is included in the Python source tree asTools/freeze. It converts Python byte code to C arrays; with a C compiler you can embed all your modules into a new program, which is then linked with the standard Python modules.

It works by scanning your source recursively for import statements (in both forms) and looking for the modules in the standard Python path as well as in the source directory (for built-in modules). It then turns the bytecode for modules written in Python into C code (array initializers that can be turned into code objects using the marshal module) and creates a custom-made config file that only contains those built-in modules which are actually used in the program. It then compiles the generated C code and links it with the rest of the Python interpreter to form a self-contained binary which acts exactly like your script.

The following packages can help with the creation of console and GUI executables:

- Nuitka(Cross-platform)
- PyInstaller(Cross-platform)
- PyOxidizer(Cross-platform)
- cx_Freeze(Cross-platform)
- py2app(macOS only)
- py2exe(Windows only)

================================================================================

### Are there coding standards or a style guide for Python programs?¶

Yes. The coding style required for standard library modules is documented asPEP 8.

================================================================================

## Core Language¶

================================================================================

### Why am I getting an UnboundLocalError when the variable has a value?¶

It can be a surprise to get theUnboundLocalErrorin previously working code when it is modified by adding an assignment statement somewhere in the body of a function.

```
UnboundLocalError
```

```
>>>x=10>>>defbar():...print(x)...>>>bar()10
```

works, but this code:

```
>>>x=10>>>deffoo():...print(x)...x+=1
```

results in anUnboundLocalError:

```
>>>foo()Traceback (most recent call last):...UnboundLocalError:local variable 'x' referenced before assignment
```

This is because when you make an assignment to a variable in a scope, that variable becomes local to that scope and shadows any similarly named variable in the outer scope. Since the last statement in foo assigns a new value tox, the compiler recognizes it as a local variable. Consequently when the earlierprint(x)attempts to print the uninitialized local variable and an error results.

In the example above you can access the outer scope variable by declaring it global:

```
>>>x=10>>>deffoobar():...globalx...print(x)...x+=1...>>>foobar()10
```

This explicit declaration is required in order to remind you that (unlike the superficially analogous situation with class and instance variables) you are actually modifying the value of the variable in the outer scope:

```
>>>print(x)11
```

You can do a similar thing in a nested scope using thenonlocalkeyword:

```
>>>deffoo():...x=10...defbar():...nonlocalx...print(x)...x+=1...bar()...print(x)...>>>foo()1011
```

================================================================================

### What are the rules for local and global variables in Python?¶

In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a value anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.

Though a bit surprising at first, a moment’s consideration explains this. On one hand, requiringglobalfor assigned variables provides a bar against unintended side-effects. On the other hand, ifglobalwas required for all global references, you’d be usingglobalall the time. You’d have to declare as global every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of theglobaldeclaration for identifying side-effects.

================================================================================

### Why do lambdas defined in a loop with different values all return the same result?¶

Assume you use a for loop to define a few different lambdas (or even plain functions), e.g.:

```
>>>squares=[]>>>forxinrange(5):...squares.append(lambda:x**2)
```

This gives you a list that contains 5 lambdas that calculatex**2. You might expect that, when called, they would return, respectively,0,1,4,9, and16. However, when you actually try you will see that they all return16:

```
>>>squares[2]()16>>>squares[4]()16
```

This happens becausexis not local to the lambdas, but is defined in the outer scope, and it is accessed when the lambda is called — not when it is defined. At the end of the loop, the value ofxis4, so all the functions now return4**2, i.e.16. You can also verify this by changing the value ofxand see how the results of the lambdas change:

```
>>>x=8>>>squares[2]()64
```

In order to avoid this, you need to save the values in variables local to the lambdas, so that they don’t rely on the value of the globalx:

```
>>>squares=[]>>>forxinrange(5):...squares.append(lambdan=x:n**2)
```

Here,n=xcreates a new variablenlocal to the lambda and computed when the lambda is defined so that it has the same value thatxhad at that point in the loop. This means that the value ofnwill be0in the first lambda,1in the second,2in the third, and so on. Therefore each lambda will now return the correct result:

```
>>>squares[2]()4>>>squares[4]()16
```

Note that this behaviour is not peculiar to lambdas, but applies to regular functions too.

================================================================================

### How do I share global variables across modules?¶

The canonical way to share information across modules within a single program is to create a special module (often called config or cfg). Just import the config module in all modules of your application; the module then becomes available as a global name. Because there is only one instance of each module, any changes made to the module object get reflected everywhere. For example:

```
x=0# Default value of the 'x' configuration setting
```

```
importconfigconfig.x=1
```

```
importconfigimportmodprint(config.x)
```

Note that using a module is also the basis for implementing the singleton design pattern, for the same reason.

================================================================================

### What are the “best practices” for using import in a module?¶

In general, don’t usefrommodulenameimport*. Doing so clutters the importer’s namespace, and makes it much harder for linters to detect undefined names.

```
frommodulenameimport*
```

Import modules at the top of a file. Doing so makes it clear what other modules your code requires and avoids questions of whether the module name is in scope. Using one import per line makes it easy to add and delete module imports, but using multiple imports per line uses less screen space.

It’s good practice if you import modules in the following order:

- standard library modules – e.g.sys,os,argparse,re
- third-party library modules (anything installed in Python’s site-packages
directory) – e.g.dateutil,requests,PIL.Image
- locally developed modules

It is sometimes necessary to move imports to a function or class to avoid problems with circular imports. Gordon McMillan says:

Circular imports are fine where both modules use the “import <module>” form of import. They fail when the 2nd module wants to grab a name out of the first (“from module import name”) and the import is at the top level. That’s because names in the 1st are not yet available, because the first module is busy importing the 2nd.

In this case, if the second module is only used in one function, then the import can easily be moved into that function. By the time the import is called, the first module will have finished initializing, and the second module can do its import.

It may also be necessary to move imports out of the top level of code if some of the modules are platform-specific. In that case, it may not even be possible to import all of the modules at the top of the file. In this case, importing the correct modules in the corresponding platform-specific code is a good option.

Only move imports into a local scope, such as inside a function definition, if it’s necessary to solve a problem such as avoiding a circular import or are trying to reduce the initialization time of a module. This technique is especially helpful if many of the imports are unnecessary depending on how the program executes. You may also want to move imports into a function if the modules are only ever used in that function. Note that loading a module the first time may be expensive because of the one time initialization of the module, but loading a module multiple times is virtually free, costing only a couple of dictionary lookups. Even if the module name has gone out of scope, the module is probably available insys.modules.

```
sys.modules
```

================================================================================

### Why are default values shared between objects?¶

This type of bug commonly bites neophyte programmers. Consider this function:

```
deffoo(mydict={}):# Danger: shared reference to one dict for all calls...computesomething...mydict[key]=valuereturnmydict
```

The first time you call this function,mydictcontains a single item. The second time,mydictcontains two items because whenfoo()begins executing,mydictstarts out with an item already in it.

It is often expected that a function call creates new objects for default values. This is not what happens. Default values are created exactly once, when the function is defined. If that object is changed, like the dictionary in this example, subsequent calls to the function will refer to this changed object.

By definition, immutable objects such as numbers, strings, tuples, andNone, are safe from change. Changes to mutable objects such as dictionaries, lists, and class instances can lead to confusion.

Because of this feature, it is good programming practice to not use mutable objects as default values. Instead, useNoneas the default value and inside the function, check if the parameter isNoneand create a new list/dictionary/whatever if it is. For example, don’t write:

```
deffoo(mydict={}):...
```

```
deffoo(mydict=None):ifmydictisNone:mydict={}# create a new dict for local namespace
```

This feature can be useful. When you have a function that’s time-consuming to compute, a common technique is to cache the parameters and the resulting value of each call to the function, and return the cached value if the same value is requested again. This is called “memoizing”, and can be implemented like this:

```
# Callers can only provide two parameters and optionally pass _cache by keyworddefexpensive(arg1,arg2,*,_cache={}):if(arg1,arg2)in_cache:return_cache[(arg1,arg2)]# Calculate the valueresult=...expensivecomputation..._cache[(arg1,arg2)]=result# Store result in the cachereturnresult
```

You could use a global variable containing a dictionary instead of the default value; it’s a matter of taste.

================================================================================

### How can I pass optional or keyword parameters from one function to another?¶

Collect the arguments using the*and**specifiers in the function’s parameter list; this gives you the positional arguments as a tuple and the keyword arguments as a dictionary. You can then pass these arguments when calling another function by using*and**:

```
deff(x,*args,**kwargs):...kwargs['width']='14.3c'...g(x,*args,**kwargs)
```

================================================================================

### What is the difference between arguments and parameters?¶

Parametersare defined by the names that appear in a function definition, whereasargumentsare the values actually passed to a function when calling it. Parameters define whatkind of argumentsa function can accept. For example, given the function definition:

```
deffunc(foo,bar=None,**kwargs):pass
```

foo,barandkwargsare parameters offunc. However, when callingfunc, for example:

```
func(42,bar=314,extra=somevar)
```

the values42,314, andsomevarare arguments.

================================================================================

### Why did changing list ‘y’ also change list ‘x’?¶

If you wrote code like:

```
>>>x=[]>>>y=x>>>y.append(10)>>>y[10]>>>x[10]
```

you might be wondering why appending an element toychangedxtoo.

There are two factors that produce this result:

- Variables are simply names that refer to objects.  Doingy=xdoesn’t
create a copy of the list – it creates a new variableythat refers to
the same objectxrefers to.  This means that there is only one object
(the list), and bothxandyrefer to it.
- Lists aremutable, which means that you can change their content.

After the call toappend(), the content of the mutable object has changed from[]to[10]. Since both the variables refer to the same object, using either name accesses the modified value[10].

If we instead assign an immutable object tox:

```
>>>x=5# ints are immutable>>>y=x>>>x=x+1# 5 can't be mutated, we are creating a new object here>>>x6>>>y5
```

we can see that in this casexandyare not equal anymore. This is because integers areimmutable, and when we dox=x+1we are not mutating the int5by incrementing its value; instead, we are creating a new object (the int6) and assigning it tox(that is, changing which objectxrefers to). After this assignment we have two objects (the ints6and5) and two variables that refer to them (xnow refers to6butystill refers to5).

Some operations (for exampley.append(10)andy.sort()) mutate the object, whereas superficially similar operations (for exampley=y+[10]andsorted(y)) create a new object. In general in Python (and in all cases in the standard library) a method that mutates an object will returnNoneto help avoid getting the two types of operations confused. So if you mistakenly writey.sort()thinking it will give you a sorted copy ofy, you’ll instead end up withNone, which will likely cause your program to generate an easily diagnosed error.

```
y.append(10)
```

However, there is one class of operations where the same operation sometimes has different behaviors with different types: the augmented assignment operators. For example,+=mutates lists but not tuples or ints (a_list+=[1,2,3]is equivalent toa_list.extend([1,2,3])and mutatesa_list, whereassome_tuple+=(1,2,3)andsome_int+=1create new objects).

```
a_list+=[1,2,3]
```

```
a_list.extend([1,2,3])
```

```
some_tuple+=(1,2,3)
```

```
some_int+=1
```

In other words:

- If we have a mutable object (list,dict,set,
etc.), we can use some specific operations to mutate it and all the variables
that refer to it will see the change.
- If we have an immutable object (str,int,tuple,
etc.), all the variables that refer to it will always see the same value,
but operations that transform that value into a new value always return a new
object.

If you want to know if two variables refer to the same object or not, you can use theisoperator, or the built-in functionid().

================================================================================

### How do I write a function with output parameters (call by reference)?¶

Remember that arguments are passed by assignment in Python. Since assignment just creates references to objects, there’s no alias between an argument name in the caller and callee, and so no call-by-reference per se. You can achieve the desired effect in a number of ways.

- By returning a tuple of the results:>>>>>>deffunc1(a,b):...a='new-value'# a and b are local names...b=b+1# assigned to new objects...returna,b# return new values...>>>x,y='old-value',99>>>func1(x,y)('new-value', 100)This is almost always the clearest solution.
- By using global variables.  This isn’t thread-safe, and is not recommended.
- By passing a mutable (changeable in-place) object:>>>>>>deffunc2(a):...a[0]='new-value'# 'a' references a mutable list...a[1]=a[1]+1# changes a shared object...>>>args=['old-value',99]>>>func2(args)>>>args['new-value', 100]
- By passing in a dictionary that gets mutated:>>>>>>deffunc3(args):...args['a']='new-value'# args is a mutable dictionary...args['b']=args['b']+1# change it in-place...>>>args={'a':'old-value','b':99}>>>func3(args)>>>args{'a': 'new-value', 'b': 100}
- Or bundle up values in a class instance:>>>>>>classNamespace:...def__init__(self,/,**args):...forkey,valueinargs.items():...setattr(self,key,value)...>>>deffunc4(args):...args.a='new-value'# args is a mutable Namespace...args.b=args.b+1# change object in-place...>>>args=Namespace(a='old-value',b=99)>>>func4(args)>>>vars(args){'a': 'new-value', 'b': 100}There’s almost never a good reason to get this complicated.

By returning a tuple of the results:

```
>>>deffunc1(a,b):...a='new-value'# a and b are local names...b=b+1# assigned to new objects...returna,b# return new values...>>>x,y='old-value',99>>>func1(x,y)('new-value', 100)
```

This is almost always the clearest solution.

By passing a mutable (changeable in-place) object:

```
>>>deffunc2(a):...a[0]='new-value'# 'a' references a mutable list...a[1]=a[1]+1# changes a shared object...>>>args=['old-value',99]>>>func2(args)>>>args['new-value', 100]
```

By passing in a dictionary that gets mutated:

```
>>>deffunc3(args):...args['a']='new-value'# args is a mutable dictionary...args['b']=args['b']+1# change it in-place...>>>args={'a':'old-value','b':99}>>>func3(args)>>>args{'a': 'new-value', 'b': 100}
```

Or bundle up values in a class instance:

```
>>>classNamespace:...def__init__(self,/,**args):...forkey,valueinargs.items():...setattr(self,key,value)...>>>deffunc4(args):...args.a='new-value'# args is a mutable Namespace...args.b=args.b+1# change object in-place...>>>args=Namespace(a='old-value',b=99)>>>func4(args)>>>vars(args){'a': 'new-value', 'b': 100}
```

There’s almost never a good reason to get this complicated.

Your best choice is to return a tuple containing the multiple results.

================================================================================

### How do you make a higher order function in Python?¶

You have two choices: you can use nested scopes or you can use callable objects. For example, suppose you wanted to definelinear(a,b)which returns a functionf(x)that computes the valuea*x+b. Using nested scopes:

```
linear(a,b)
```

```
deflinear(a,b):defresult(x):returna*x+breturnresult
```

Or using a callable object:

```
classlinear:def__init__(self,a,b):self.a,self.b=a,bdef__call__(self,x):returnself.a*x+self.b
```

In both cases,

```
taxes=linear(0.3,2)
```

gives a callable object wheretaxes(10e6)==0.3*10e6+2.

```
taxes(10e6)==0.3*10e6+2
```

The callable object approach has the disadvantage that it is a bit slower and results in slightly longer code. However, note that a collection of callables can share their signature via inheritance:

```
classexponential(linear):# __init__ inheriteddef__call__(self,x):returnself.a*(x**self.b)
```

Object can encapsulate state for several methods:

```
classcounter:value=0defset(self,x):self.value=xdefup(self):self.value=self.value+1defdown(self):self.value=self.value-1count=counter()inc,dec,reset=count.up,count.down,count.set
```

Hereinc(),dec()andreset()act like functions which share the same counting variable.

================================================================================

### How do I copy an object in Python?¶

In general, trycopy.copy()orcopy.deepcopy()for the general case. Not all objects can be copied, but most can.

```
copy.copy()
```

```
copy.deepcopy()
```

Some objects can be copied more easily. Dictionaries have acopy()method:

```
newdict=olddict.copy()
```

Sequences can be copied by slicing:

```
new_l=l[:]
```

================================================================================

### How can I find the methods or attributes of an object?¶

For an instancexof a user-defined class,dir(x)returns an alphabetized list of the names containing the instance attributes and methods and attributes defined by its class.

================================================================================

### How can my code discover the name of an object?¶

Generally speaking, it can’t, because objects don’t really have names. Essentially, assignment always binds a name to a value; the same is true ofdefandclassstatements, but in that case the value is a callable. Consider the following code:

```
>>>classA:...pass...>>>B=A>>>a=B()>>>b=a>>>print(b)<__main__.A object at 0x16D07CC>>>>print(a)<__main__.A object at 0x16D07CC>
```

Arguably the class has a name: even though it is bound to two names and invoked through the nameBthe created instance is still reported as an instance of classA. However, it is impossible to say whether the instance’s name isaorb, since both names are bound to the same value.

Generally speaking it should not be necessary for your code to “know the names” of particular values. Unless you are deliberately writing introspective programs, this is usually an indication that a change of approach might be beneficial.

In comp.lang.python, Fredrik Lundh once gave an excellent analogy in answer to this question:

The same way as you get the name of that cat you found on your porch: the cat (object) itself cannot tell you its name, and it doesn’t really care – so the only way to find out what it’s called is to ask all your neighbours (namespaces) if it’s their cat (object)…

….and don’t be surprised if you’ll find that it’s known by many names, or no name at all!

================================================================================

### What’s up with the comma operator’s precedence?¶

Comma is not an operator in Python. Consider this session:

```
>>>"a"in"b","a"(False, 'a')
```

Since the comma is not an operator, but a separator between expressions the above is evaluated as if you had entered:

```
("a"in"b"),"a"
```

```
"a"in("b","a")
```

The same is true of the various assignment operators (=,+=etc). They are not truly operators but syntactic delimiters in assignment statements.

================================================================================

### Is there an equivalent of C’s “?:” ternary operator?¶

Yes, there is. The syntax is as follows:

```
[on_true]if[expression]else[on_false]x,y=50,25small=xifx<yelsey
```

Before this syntax was introduced in Python 2.5, a common idiom was to use logical operators:

```
[expression]and[on_true]or[on_false]
```

However, this idiom is unsafe, as it can give wrong results whenon_truehas a false boolean value. Therefore, it is always better to use the...if...else...form.

```
...if...else...
```

================================================================================

### Is it possible to write obfuscated one-liners in Python?¶

Yes. Usually this is done by nestinglambdawithinlambda. See the following three examples, slightly adapted from Ulf Bartelt:

```
fromfunctoolsimportreduce# Primes < 1000print(list(filter(None,map(lambday:y*reduce(lambdax,y:x*y!=0,map(lambdax,y=y:y%x,range(2,int(pow(y,0.5)+1))),1),range(2,1000)))))# First 10 Fibonacci numbersprint(list(map(lambdax,f=lambdax,f:(f(x-1,f)+f(x-2,f))ifx>1else1:f(x,f),range(10))))# Mandelbrot setprint((lambdaRu,Ro,Iu,Io,IM,Sx,Sy:reduce(lambdax,y:x+'\n'+y,map(lambday,Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,Sy=Sy,L=lambdayc,Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,i=IM,Sx=Sx,Sy=Sy:reduce(lambdax,y:x+y,map(lambdax,xc=Ru,yc=yc,Ru=Ru,Ro=Ro,i=i,Sx=Sx,F=lambdaxc,yc,x,y,k,f=lambdaxc,yc,x,y,k,f:(k<=0)or(x*x+y*y>=4.0)or1+f(xc,yc,x*x-y*y+xc,2.0*x*y+yc,k-1,f):f(xc,yc,x,y,k,f):chr(64+F(Ru+x*(Ro-Ru)/Sx,yc,0,0,i)),range(Sx))):L(Iu+y*(Io-Iu)/Sy),range(Sy))))(-2.1,0.7,-1.2,1.2,30,80,24))#    \___ ___/  \___ ___/  |   |   |__ lines on screen#        V          V      |   |______ columns on screen#        |          |      |__________ maximum of "iterations"#        |          |_________________ range on y axis#        |____________________________ range on x axis
```

Don’t try this at home, kids!

================================================================================

### What does the slash(/) in the parameter list of a function mean?¶

A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-only parameters are the ones without an externally usable name. Upon calling a function that accepts positional-only parameters, arguments are mapped to parameters based solely on their position. For example,divmod()is a function that accepts positional-only parameters. Its documentation looks like this:

```
>>>help(divmod)Help on built-in function divmod in module builtins:divmod(x, y, /)Return the tuple (x//y, x%y).  Invariant: div*y + mod == x.
```

The slash at the end of the parameter list means that both parameters are positional-only. Thus, callingdivmod()with keyword arguments would lead to an error:

```
>>>divmod(x=3,y=4)Traceback (most recent call last):File"<stdin>", line1, in<module>TypeError:divmod() takes no keyword arguments
```

================================================================================

## Numbers and strings¶

================================================================================

### How do I specify hexadecimal and octal integers?¶

To specify an octal digit, precede the octal value with a zero, and then a lower or uppercase “o”. For example, to set the variable “a” to the octal value “10” (8 in decimal), type:

```
>>>a=0o10>>>a8
```

Hexadecimal is just as easy. Simply precede the hexadecimal number with a zero, and then a lower or uppercase “x”. Hexadecimal digits can be specified in lower or uppercase. For example, in the Python interpreter:

```
>>>a=0xa5>>>a165>>>b=0XB2>>>b178
```

================================================================================

### Why does -22 // 10 return -3?¶

It’s primarily driven by the desire thati%jhave the same sign asj. If you want that, and also want:

```
i==(i//j)*j+(i%j)
```

then integer division has to return the floor. C also requires that identity to hold, and then compilers that truncatei//jneed to makei%jhave the same sign asi.

There are few real use cases fori%jwhenjis negative. Whenjis positive, there are many, and in virtually all of them it’s more useful fori%jto be>=0. If the clock says 10 now, what did it say 200 hours ago?-190%12==2is useful;-190%12==-10is a bug waiting to bite.

```
-190%12==2
```

```
-190%12==-10
```

================================================================================

### How do I get int literal attribute instead of SyntaxError?¶

Trying to lookup anintliteral attribute in the normal manner gives aSyntaxErrorbecause the period is seen as a decimal point:

```
SyntaxError
```

```
>>>1.__class__File"<stdin>", line11.__class__^SyntaxError:invalid decimal literal
```

The solution is to separate the literal from the period with either a space or parentheses.

```
>>>1.__class__<class 'int'>>>>(1).__class__<class 'int'>
```

================================================================================

### How do I convert a string to a number?¶

For integers, use the built-inint()type constructor, e.g.int('144')==144. Similarly,float()converts to a floating-point number, e.g.float('144')==144.0.

```
int('144')==144
```

```
float('144')==144.0
```

By default, these interpret the number as decimal, so thatint('0144')==144holds true, andint('0x144')raisesValueError.int(string,base)takes the base to convert from as a second optional argument, soint('0x144',16)==324. If the base is specified as 0, the number is interpreted using Python’s rules: a leading ‘0o’ indicates octal, and ‘0x’ indicates a hex number.

```
int('0144')==144
```

```
int('0x144')
```

```
ValueError
```

```
int(string,base)
```

```
int('0x144',16)==324
```

Do not use the built-in functioneval()if all you need is to convert strings to numbers.eval()will be significantly slower and it presents a security risk: someone could pass you a Python expression that might have unwanted side effects. For example, someone could pass__import__('os').system("rm-rf$HOME")which would erase your home directory.

```
__import__('os').system("rm-rf$HOME")
```

eval()also has the effect of interpreting numbers as Python expressions, so that e.g.eval('09')gives a syntax error because Python does not allow leading ‘0’ in a decimal number (except ‘0’).

```
eval('09')
```

================================================================================

### How do I convert a number to a string?¶

To convert, e.g., the number144to the string'144', use the built-in type constructorstr(). If you want a hexadecimal or octal representation, use the built-in functionshex()oroct(). For fancy formatting, see thef-stringsandFormat String Syntaxsections, e.g."{:04d}".format(144)yields'0144'and"{:.3f}".format(1.0/3.0)yields'0.333'.

```
"{:04d}".format(144)
```

```
"{:.3f}".format(1.0/3.0)
```

================================================================================

### How do I modify a string in place?¶

You can’t, because strings are immutable. In most situations, you should simply construct a new string from the various parts you want to assemble it from. However, if you need an object with the ability to modify in-place unicode data, try using anio.StringIOobject or thearraymodule:

```
io.StringIO
```

```
>>>importio>>>s="Hello, world">>>sio=io.StringIO(s)>>>sio.getvalue()'Hello, world'>>>sio.seek(7)7>>>sio.write("there!")6>>>sio.getvalue()'Hello, there!'>>>importarray>>>a=array.array('w',s)>>>print(a)array('w', 'Hello, world')>>>a[0]='y'>>>print(a)array('w', 'yello, world')>>>a.tounicode()'yello, world'
```

================================================================================

### How do I use strings to call functions/methods?¶

There are various techniques.

- The best is to use a dictionary that maps strings to functions.  The primary
advantage of this technique is that the strings do not need to match the names
of the functions.  This is also the primary technique used to emulate a case
construct:defa():passdefb():passdispatch={'go':a,'stop':b}# Note lack of parens for funcsdispatch[get_input()]()# Note trailing parens to call function
- Use the built-in functiongetattr():importfoogetattr(foo,'bar')()Note thatgetattr()works on any object, including classes, class
instances, modules, and so on.This is used in several places in the standard library, like this:classFoo:defdo_foo(self):...defdo_bar(self):...f=getattr(foo_instance,'do_'+opname)f()
- Uselocals()to resolve the function name:defmyFunc():print("hello")fname="myFunc"f=locals()[fname]f()

The best is to use a dictionary that maps strings to functions. The primary advantage of this technique is that the strings do not need to match the names of the functions. This is also the primary technique used to emulate a case construct:

```
defa():passdefb():passdispatch={'go':a,'stop':b}# Note lack of parens for funcsdispatch[get_input()]()# Note trailing parens to call function
```

Use the built-in functiongetattr():

```
importfoogetattr(foo,'bar')()
```

Note thatgetattr()works on any object, including classes, class instances, modules, and so on.

This is used in several places in the standard library, like this:

```
classFoo:defdo_foo(self):...defdo_bar(self):...f=getattr(foo_instance,'do_'+opname)f()
```

Uselocals()to resolve the function name:

```
defmyFunc():print("hello")fname="myFunc"f=locals()[fname]f()
```

================================================================================

### Is there an equivalent to Perl’schomp()for removing trailing newlines from strings?¶

You can useS.rstrip("\r\n")to remove all occurrences of any line terminator from the end of the stringSwithout removing other trailing whitespace. If the stringSrepresents more than one line, with several empty lines at the end, the line terminators for all the blank lines will be removed:

```
S.rstrip("\r\n")
```

```
>>>lines=("line 1\r\n"..."\r\n"..."\r\n")>>>lines.rstrip("\n\r")'line 1 '
```

Since this is typically only desired when reading text one line at a time, usingS.rstrip()this way works well.

```
S.rstrip()
```

================================================================================

### Is there ascanf()orsscanf()equivalent?¶

Not as such.

For simple input parsing, the easiest approach is usually to split the line into whitespace-delimited words using thesplit()method of string objects and then convert decimal strings to numeric values usingint()orfloat().split()supports an optional “sep” parameter which is useful if the line uses something other than whitespace as a separator.

For more complicated input parsing, regular expressions are more powerful than C’ssscanfand better suited for the task.

================================================================================

### What doesUnicodeDecodeErrororUnicodeEncodeErrorerror mean?¶

```
UnicodeDecodeError
```

```
UnicodeEncodeError
```

See theUnicode HOWTO.

================================================================================

### Can I end a raw string with an odd number of backslashes?¶

A raw string ending with an odd number of backslashes will escape the string’s quote:

```
>>>r'C:\this\will\not\work\'File"<stdin>", line1r'C:\this\will\not\work\'^SyntaxError:unterminated string literal (detected at line 1)
```

There are several workarounds for this. One is to use regular strings and double the backslashes:

```
>>>'C:\\this\\will\\work\\''C:\\this\\will\\work\\'
```

Another is to concatenate a regular string containing an escaped backslash to the raw string:

```
>>>r'C:\this\will\work''\\''C:\\this\\will\\work\\'
```

It is also possible to useos.path.join()to append a backslash on Windows:

```
os.path.join()
```

```
>>>os.path.join(r'C:\this\will\work','')'C:\\this\\will\\work\\'
```

Note that while a backslash will “escape” a quote for the purposes of determining where the raw string ends, no escaping occurs when interpreting the value of the raw string. That is, the backslash remains present in the value of the raw string:

```
>>>r'backslash\'preserved'"backslash\\'preserved"
```

Also see the specification in thelanguage reference.

================================================================================

## Performance¶

================================================================================

### My program is too slow. How do I speed it up?¶

That’s a tough one, in general. First, here are a list of things to remember before diving further:

- Performance characteristics vary across Python implementations.  This FAQ
focuses onCPython.
- Behaviour can vary across operating systems, especially when talking about
I/O or multi-threading.
- You should always find the hot spots in your programbeforeattempting to
optimize any code (see theprofilemodule).
- Writing benchmark scripts will allow you to iterate quickly when searching
for improvements (see thetimeitmodule).
- It is highly recommended to have good code coverage (through unit testing
or any other technique) before potentially introducing regressions hidden
in sophisticated optimizations.

That being said, there are many tricks to speed up Python code. Here are some general principles which go a long way towards reaching acceptable performance levels:

- Making your algorithms faster (or changing to faster ones) can yield
much larger benefits than trying to sprinkle micro-optimization tricks
all over your code.
- Use the right data structures.  Study documentation for theBuilt-in Typesand thecollectionsmodule.
- When the standard library provides a primitive for doing something, it is
likely (although not guaranteed) to be faster than any alternative you
may come up with.  This is doubly true for primitives written in C, such
as builtins and some extension types.  For example, be sure to use
either thelist.sort()built-in method or the relatedsorted()function to do sorting (and see theSorting Techniquesfor examples
of moderately advanced usage).
- Abstractions tend to create indirections and force the interpreter to work
more.  If the levels of indirection outweigh the amount of useful work
done, your program will be slower.  You should avoid excessive abstraction,
especially under the form of tiny functions or methods (which are also often
detrimental to readability).

```
collections
```

```
list.sort()
```

If you have reached the limit of what pure Python can allow, there are tools to take you further away. For example,Cythoncan compile a slightly modified version of Python code into a C extension, and can be used on many different platforms. Cython can take advantage of compilation (and optional type annotations) to make your code significantly faster than when interpreted. If you are confident in your C programming skills, you can alsowrite a C extension moduleyourself.

The wiki page devoted toperformance tips.

================================================================================

### What is the most efficient way to concatenate many strings together?¶

strandbytesobjects are immutable, therefore concatenating many strings together is inefficient as each concatenation creates a new object. In the general case, the total runtime cost is quadratic in the total string length.

To accumulate manystrobjects, the recommended idiom is to place them into a list and callstr.join()at the end:

```
str.join()
```

```
chunks=[]forsinmy_strings:chunks.append(s)result=''.join(chunks)
```

(another reasonably efficient idiom is to useio.StringIO)

To accumulate manybytesobjects, the recommended idiom is to extend abytearrayobject using in-place concatenation (the+=operator):

```
result=bytearray()forbinmy_bytes_objects:result+=b
```

================================================================================

## Sequences (Tuples/Lists)¶

================================================================================

### How do I convert between tuples and lists?¶

The type constructortuple(seq)converts any sequence (actually, any iterable) into a tuple with the same items in the same order.

```
tuple(seq)
```

For example,tuple([1,2,3])yields(1,2,3)andtuple('abc')yields('a','b','c'). If the argument is a tuple, it does not make a copy but returns the same object, so it is cheap to calltuple()when you aren’t sure that an object is already a tuple.

```
tuple([1,2,3])
```

```
tuple('abc')
```

```
('a','b','c')
```

The type constructorlist(seq)converts any sequence or iterable into a list with the same items in the same order. For example,list((1,2,3))yields[1,2,3]andlist('abc')yields['a','b','c']. If the argument is a list, it makes a copy just likeseq[:]would.

```
list((1,2,3))
```

```
list('abc')
```

```
['a','b','c']
```

================================================================================

### What’s a negative index?¶

Python sequences are indexed with positive numbers and negative numbers. For positive numbers 0 is the first index 1 is the second index and so forth. For negative indices -1 is the last index and -2 is the penultimate (next to last) index and so forth. Think ofseq[-n]as the same asseq[len(seq)-n].

```
seq[len(seq)-n]
```

Using negative indices can be very convenient. For exampleS[:-1]is all of the string except for its last character, which is useful for removing the trailing newline from a string.

================================================================================

### How do I iterate over a sequence in reverse order?¶

Use thereversed()built-in function:

```
reversed()
```

```
forxinreversed(sequence):...# do something with x ...
```

This won’t touch your original sequence, but build a new copy with reversed order to iterate over.

================================================================================

### How do you remove duplicates from a list?¶

See the Python Cookbook for a long discussion of many ways to do this:

https://code.activestate.com/recipes/52560/

If you don’t mind reordering the list, sort it and then scan from the end of the list, deleting duplicates as you go:

```
ifmylist:mylist.sort()last=mylist[-1]foriinrange(len(mylist)-2,-1,-1):iflast==mylist[i]:delmylist[i]else:last=mylist[i]
```

If all elements of the list may be used as set keys (i.e. they are allhashable) this is often faster

```
mylist=list(set(mylist))
```

This converts the list into a set, thereby removing duplicates, and then back into a list.

================================================================================

### How do you remove multiple items from a list¶

As with removing duplicates, explicitly iterating in reverse with a delete condition is one possibility. However, it is easier and faster to use slice replacement with an implicit or explicit forward iteration. Here are three variations.:

```
mylist[:]=filter(keep_function,mylist)mylist[:]=(xforxinmylistifkeep_condition)mylist[:]=[xforxinmylistifkeep_condition]
```

The list comprehension may be fastest.

================================================================================

### How do you make an array in Python?¶

Use a list:

```
["this",1,"is","an","array"]
```

Lists are equivalent to C or Pascal arrays in their time complexity; the primary difference is that a Python list can contain objects of many different types.

Thearraymodule also provides methods for creating arrays of fixed types with compact representations, but they are slower to index than lists. Also note thatNumPyand other third party packages define array-like structures with various characteristics as well.

To get Lisp-style linked lists, you can emulatecons cellsusing tuples:

```
lisp_list=("like",("this",("example",None)))
```

If mutability is desired, you could use lists instead of tuples. Here the analogue of a Lispcarislisp_list[0]and the analogue ofcdrislisp_list[1]. Only do this if you’re sure you really need to, because it’s usually a lot slower than using Python lists.

```
lisp_list[0]
```

```
lisp_list[1]
```

================================================================================

### How do I create a multidimensional list?¶

You probably tried to make a multidimensional array like this:

```
>>>A=[[None]*2]*3
```

This looks correct if you print it:

```
>>>A[[None, None], [None, None], [None, None]]
```

But when you assign a value, it shows up in multiple places:

```
>>>A[0][0]=5>>>A[[5, None], [5, None], [5, None]]
```

The reason is that replicating a list with*doesn’t create copies, it only creates references to the existing objects. The*3creates a list containing 3 references to the same list of length two. Changes to one row will show in all rows, which is almost certainly not what you want.

The suggested approach is to create a list of the desired length first and then fill in each element with a newly created list:

```
A=[None]*3foriinrange(3):A[i]=[None]*2
```

This generates a list containing 3 different lists of length two. You can also use a list comprehension:

```
w,h=2,3A=[[None]*wforiinrange(h)]
```

Or, you can use an extension that provides a matrix datatype;NumPyis the best known.

================================================================================

### How do I apply a method or function to a sequence of objects?¶

To call a method or function and accumulate the return values is a list, alist comprehensionis an elegant solution:

```
result=[obj.method()forobjinmylist]result=[function(obj)forobjinmylist]
```

To just run the method or function without saving the return values, a plainforloop will suffice:

```
forobjinmylist:obj.method()forobjinmylist:function(obj)
```

================================================================================

### Why does a_tuple[i] += [‘item’] raise an exception when the addition works?¶

This is because of a combination of the fact that augmented assignment operators areassignmentoperators, and the difference between mutable and immutable objects in Python.

This discussion applies in general when augmented assignment operators are applied to elements of a tuple that point to mutable objects, but we’ll use alistand+=as our exemplar.

If you wrote:

```
>>>a_tuple=(1,2)>>>a_tuple[0]+=1Traceback (most recent call last):...TypeError:'tuple' object does not support item assignment
```

The reason for the exception should be immediately clear:1is added to the objecta_tuple[0]points to (1), producing the result object,2, but when we attempt to assign the result of the computation,2, to element0of the tuple, we get an error because we can’t change what an element of a tuple points to.

```
a_tuple[0]
```

Under the covers, what this augmented assignment statement is doing is approximately this:

```
>>>result=a_tuple[0]+1>>>a_tuple[0]=resultTraceback (most recent call last):...TypeError:'tuple' object does not support item assignment
```

It is the assignment part of the operation that produces the error, since a tuple is immutable.

When you write something like:

```
>>>a_tuple=(['foo'],'bar')>>>a_tuple[0]+=['item']Traceback (most recent call last):...TypeError:'tuple' object does not support item assignment
```

The exception is a bit more surprising, and even more surprising is the fact that even though there was an error, the append worked:

```
>>>a_tuple[0]['foo', 'item']
```

To see why this happens, you need to know that (a) if an object implements an__iadd__()magic method, it gets called when the+=augmented assignment is executed, and its return value is what gets used in the assignment statement; and (b) for lists,__iadd__()is equivalent to callingextend()on the list and returning the list. That’s why we say that for lists,+=is a “shorthand” forlist.extend():

```
__iadd__()
```

```
list.extend()
```

```
>>>a_list=[]>>>a_list+=[1]>>>a_list[1]
```

This is equivalent to:

```
>>>result=a_list.__iadd__([1])>>>a_list=result
```

The object pointed to by a_list has been mutated, and the pointer to the mutated object is assigned back toa_list. The end result of the assignment is a no-op, since it is a pointer to the same object thata_listwas previously pointing to, but the assignment still happens.

Thus, in our tuple example what is happening is equivalent to:

```
>>>result=a_tuple[0].__iadd__(['item'])>>>a_tuple[0]=resultTraceback (most recent call last):...TypeError:'tuple' object does not support item assignment
```

The__iadd__()succeeds, and thus the list is extended, but even thoughresultpoints to the same object thata_tuple[0]already points to, that final assignment still results in an error, because tuples are immutable.

================================================================================

### I want to do a complicated sort: can you do a Schwartzian Transform in Python?¶

The technique, attributed to Randal Schwartz of the Perl community, sorts the elements of a list by a metric which maps each element to its “sort value”. In Python, use thekeyargument for thelist.sort()method:

```
Isorted=L[:]Isorted.sort(key=lambdas:int(s[10:15]))
```

================================================================================

### How can I sort one list by values from another list?¶

Merge them into an iterator of tuples, sort the resulting list, and then pick out the element you want.

```
>>>list1=["what","I'm","sorting","by"]>>>list2=["something","else","to","sort"]>>>pairs=zip(list1,list2)>>>pairs=sorted(pairs)>>>pairs[("I'm", 'else'), ('by', 'sort'), ('sorting', 'to'), ('what', 'something')]>>>result=[x[1]forxinpairs]>>>result['else', 'sort', 'to', 'something']
```

================================================================================

### What is a class?¶

A class is the particular object type created by executing a class statement. Class objects are used as templates to create instance objects, which embody both the data (attributes) and code (methods) specific to a datatype.

A class can be based on one or more other classes, called its base class(es). It then inherits the attributes and methods of its base classes. This allows an object model to be successively refined by inheritance. You might have a genericMailboxclass that provides basic accessor methods for a mailbox, and subclasses such asMboxMailbox,MaildirMailbox,OutlookMailboxthat handle various specific mailbox formats.

```
MboxMailbox
```

```
MaildirMailbox
```

```
OutlookMailbox
```

================================================================================

### What is a method?¶

A method is a function on some objectxthat you normally call asx.name(arguments...). Methods are defined as functions inside the class definition:

```
x.name(arguments...)
```

```
classC:defmeth(self,arg):returnarg*2+self.attribute
```

================================================================================

### What is self?¶

Self is merely a conventional name for the first argument of a method. A method defined asmeth(self,a,b,c)should be called asx.meth(a,b,c)for some instancexof the class in which the definition occurs; the called method will think it is called asmeth(x,a,b,c).

```
meth(self,a,b,c)
```

```
x.meth(a,b,c)
```

```
meth(x,a,b,c)
```

See alsoWhy must ‘self’ be used explicitly in method definitions and calls?.

================================================================================

### How do I check if an object is an instance of a given class or of a subclass of it?¶

Use the built-in functionisinstance(obj,cls). You can check if an object is an instance of any of a number of classes by providing a tuple instead of a single class, e.g.isinstance(obj,(class1,class2,...)), and can also check whether an object is one of Python’s built-in types, e.g.isinstance(obj,str)orisinstance(obj,(int,float,complex)).

```
isinstance(obj,cls)
```

```
isinstance(obj,(class1,class2,...))
```

```
isinstance(obj,str)
```

```
isinstance(obj,(int,float,complex))
```

Note thatisinstance()also checks for virtual inheritance from anabstract base class. So, the test will returnTruefor a registered class even if hasn’t directly or indirectly inherited from it. To test for “true inheritance”, scan theMROof the class:

```
isinstance()
```

```
fromcollections.abcimportMappingclassP:passclassC(P):passMapping.register(P)
```

```
>>>c=C()>>>isinstance(c,C)# directTrue>>>isinstance(c,P)# indirectTrue>>>isinstance(c,Mapping)# virtualTrue# Actual inheritance chain>>>type(c).__mro__(<class 'C'>, <class 'P'>, <class 'object'>)# Test for "true inheritance">>>Mappingintype(c).__mro__False
```

Note that most programs do not useisinstance()on user-defined classes very often. If you are developing the classes yourself, a more proper object-oriented style is to define methods on the classes that encapsulate a particular behaviour, instead of checking the object’s class and doing a different thing based on what class it is. For example, if you have a function that does something:

```
defsearch(obj):ifisinstance(obj,Mailbox):...# code to search a mailboxelifisinstance(obj,Document):...# code to search a documentelif...
```

A better approach is to define asearch()method on all the classes and just call it:

```
classMailbox:defsearch(self):...# code to search a mailboxclassDocument:defsearch(self):...# code to search a documentobj.search()
```

================================================================================

### What is delegation?¶

Delegation is an object oriented technique (also called a design pattern). Let’s say you have an objectxand want to change the behaviour of just one of its methods. You can create a new class that provides a new implementation of the method you’re interested in changing and delegates all other methods to the corresponding method ofx.

Python programmers can easily implement delegation. For example, the following class implements a class that behaves like a file but converts all written data to uppercase:

```
classUpperOut:def__init__(self,outfile):self._outfile=outfiledefwrite(self,s):self._outfile.write(s.upper())def__getattr__(self,name):returngetattr(self._outfile,name)
```

Here theUpperOutclass redefines thewrite()method to convert the argument string to uppercase before calling the underlyingself._outfile.write()method. All other methods are delegated to the underlyingself._outfileobject. The delegation is accomplished via the__getattr__()method; consultthe language referencefor more information about controlling attribute access.

```
self._outfile.write()
```

```
self._outfile
```

```
__getattr__()
```

Note that for more general cases delegation can get trickier. When attributes must be set as well as retrieved, the class must define a__setattr__()method too, and it must do so carefully. The basic implementation of__setattr__()is roughly equivalent to the following:

```
__setattr__()
```

```
classX:...def__setattr__(self,name,value):self.__dict__[name]=value...
```

Many__setattr__()implementations callobject.__setattr__()to set an attribute on self without causing infinite recursion:

```
object.__setattr__()
```

```
classX:def__setattr__(self,name,value):# Custom logic here...object.__setattr__(self,name,value)
```

Alternatively, it is possible to set attributes by inserting entries intoself.__dict__directly.

```
self.__dict__
```

================================================================================

### How do I call a method defined in a base class from a derived class that extends it?¶

Use the built-insuper()function:

```
classDerived(Base):defmeth(self):super().meth()# calls Base.meth
```

In the example,super()will automatically determine the instance from which it was called (theselfvalue), look up themethod resolution order(MRO) withtype(self).__mro__, and return the next in line afterDerivedin the MRO:Base.

```
type(self).__mro__
```

================================================================================

### How can I organize my code to make it easier to change the base class?¶

You could assign the base class to an alias and derive from the alias. Then all you have to change is the value assigned to the alias. Incidentally, this trick is also handy if you want to decide dynamically (e.g. depending on availability of resources) which base class to use. Example:

```
classBase:...BaseAlias=BaseclassDerived(BaseAlias):...
```

================================================================================

### How do I create static class data and static class methods?¶

Both static data and static methods (in the sense of C++ or Java) are supported in Python.

For static data, simply define a class attribute. To assign a new value to the attribute, you have to explicitly use the class name in the assignment:

```
classC:count=0# number of times C.__init__ calleddef__init__(self):C.count=C.count+1defgetcount(self):returnC.count# or return self.count
```

c.countalso refers toC.countfor anycsuch thatisinstance(c,C)holds, unless overridden bycitself or by some class on the base-class search path fromc.__class__back toC.

```
isinstance(c,C)
```

```
c.__class__
```

Caution: within a method of C, an assignment likeself.count=42creates a new and unrelated instance named “count” inself’s own dict. Rebinding of a class-static data name must always specify the class whether inside a method or not:

```
self.count=42
```

```
C.count=314
```

Static methods are possible:

```
classC:@staticmethoddefstatic(arg1,arg2,arg3):# No 'self' parameter!...
```

However, a far more straightforward way to get the effect of a static method is via a simple module-level function:

```
defgetcount():returnC.count
```

If your code is structured so as to define one class (or tightly related class hierarchy) per module, this supplies the desired encapsulation.

================================================================================

### How can I overload constructors (or methods) in Python?¶

This answer actually applies to all methods, but the question usually comes up first in the context of constructors.

In C++ you’d write

```
classC{C(){cout<<"No arguments\n";}C(inti){cout<<"Argument is "<<i<<"\n";}}
```

In Python you have to write a single constructor that catches all cases using default arguments. For example:

```
classC:def__init__(self,i=None):ifiisNone:print("No arguments")else:print("Argument is",i)
```

This is not entirely equivalent, but close enough in practice.

You could also try a variable-length argument list, e.g.

```
def__init__(self,*args):...
```

The same approach works for all method definitions.

================================================================================

### I try to use __spam and I get an error about _SomeClassName__spam.¶

Variable names with double leading underscores are “mangled” to provide a simple but effective way to define class private variables. Any identifier of the form__spam(at least two leading underscores, at most one trailing underscore) is textually replaced with_classname__spam, whereclassnameis the current class name with any leading underscores stripped.

```
_classname__spam
```

The identifier can be used unchanged within the class, but to access it outside the class, the mangled name must be used:

```
classA:def__one(self):return1deftwo(self):return2*self.__one()classB(A):defthree(self):return3*self._A__one()four=4*A()._A__one()
```

In particular, this does not guarantee privacy since an outside user can still deliberately access the private attribute; many Python programmers never bother to use private variable names at all.

Theprivate name mangling specificationsfor details and special cases.

================================================================================

### My class defines __del__ but it is not called when I delete the object.¶

There are several possible reasons for this.

Thedelstatement does not necessarily call__del__()– it simply decrements the object’s reference count, and if this reaches zero__del__()is called.

If your data structures contain circular links (e.g. a tree where each child has a parent reference and each parent has a list of children) the reference counts will never go back to zero. Once in a while Python runs an algorithm to detect such cycles, but the garbage collector might run some time after the last reference to your data structure vanishes, so your__del__()method may be called at an inconvenient and random time. This is inconvenient if you’re trying to reproduce a problem. Worse, the order in which object’s__del__()methods are executed is arbitrary. You can rungc.collect()to force a collection, but therearepathological cases where objects will never be collected.

```
gc.collect()
```

Despite the cycle collector, it’s still a good idea to define an explicitclose()method on objects to be called whenever you’re done with them. Theclose()method can then remove attributes that refer to subobjects. Don’t call__del__()directly –__del__()should callclose()andclose()should make sure that it can be called more than once for the same object.

Another way to avoid cyclical references is to use theweakrefmodule, which allows you to point to objects without incrementing their reference count. Tree data structures, for instance, should use weak references for their parent and sibling references (if they need them!).

Finally, if your__del__()method raises an exception, a warning message is printed tosys.stderr.

```
sys.stderr
```

================================================================================

### How do I get a list of all instances of a given class?¶

Python does not keep track of all instances of a class (or of a built-in type). You can program the class’s constructor to keep track of all instances by keeping a list of weak references to each instance.

================================================================================

### Why does the result ofid()appear to be not unique?¶

Theid()builtin returns an integer that is guaranteed to be unique during the lifetime of the object. Since in CPython, this is the object’s memory address, it happens frequently that after an object is deleted from memory, the next freshly created object is allocated at the same position in memory. This is illustrated by this example:

```
>>>id(1000)13901272>>>id(2000)13901272
```

The two ids belong to different integer objects that are created before, and deleted immediately after execution of theid()call. To be sure that objects whose id you want to examine are still alive, create another reference to the object:

```
>>>a=1000;b=2000>>>id(a)13901272>>>id(b)13891296
```

================================================================================

### When can I rely on identity tests with theisoperator?¶

Theisoperator tests for object identity. The testaisbis equivalent toid(a)==id(b).

```
id(a)==id(b)
```

The most important property of an identity test is that an object is always identical to itself,aisaalways returnsTrue. Identity tests are usually faster than equality tests. And unlike equality tests, identity tests are guaranteed to return a booleanTrueorFalse.

However, identity tests canonlybe substituted for equality tests when object identity is assured. Generally, there are three circumstances where identity is guaranteed:

- Assignments create new names but do not change object identity.  After the
assignmentnew=old, it is guaranteed thatnewisold.
- Putting an object in a container that stores object references does not
change object identity.  After the list assignments[0]=x, it is
guaranteed thats[0]isx.
- If an object is a singleton, it means that only one instance of that object
can exist.  After the assignmentsa=Noneandb=None, it is
guaranteed thataisbbecauseNoneis a singleton.

In most other circumstances, identity tests are inadvisable and equality tests are preferred. In particular, identity tests should not be used to check constants such asintandstrwhich aren’t guaranteed to be singletons:

```
>>>a=1000>>>b=500>>>c=b+500>>>aiscFalse>>>a='Python'>>>b='Py'>>>c=b+'thon'>>>aiscFalse
```

Likewise, new instances of mutable containers are never identical:

```
>>>a=[]>>>b=[]>>>aisbFalse
```

In the standard library code, you will see several common patterns for correctly using identity tests:

- As recommended byPEP 8, an identity test is the preferred way to check
forNone.  This reads like plain English in code and avoids confusion
with other objects that may have boolean values that evaluate to false.
- Detecting optional arguments can be tricky whenNoneis a valid input
value.  In those situations, you can create a singleton sentinel object
guaranteed to be distinct from other objects.  For example, here is how
to implement a method that behaves likedict.pop():_sentinel=object()defpop(self,key,default=_sentinel):ifkeyinself:value=self[key]delself[key]returnvalueifdefaultis_sentinel:raiseKeyError(key)returndefault
- Container implementations sometimes need to augment equality tests with
identity tests.  This prevents the code from being confused by objects
such asfloat('NaN')that are not equal to themselves.

Detecting optional arguments can be tricky whenNoneis a valid input value. In those situations, you can create a singleton sentinel object guaranteed to be distinct from other objects. For example, here is how to implement a method that behaves likedict.pop():

```
dict.pop()
```

```
_sentinel=object()defpop(self,key,default=_sentinel):ifkeyinself:value=self[key]delself[key]returnvalueifdefaultis_sentinel:raiseKeyError(key)returndefault
```

```
float('NaN')
```

For example, here is the implementation ofcollections.abc.Sequence.__contains__():

```
collections.abc.Sequence.__contains__()
```

```
def__contains__(self,value):forvinself:ifvisvalueorv==value:returnTruereturnFalse
```

================================================================================

### How can a subclass control what data is stored in an immutable instance?¶

When subclassing an immutable type, override the__new__()method instead of the__init__()method. The latter only runsafteran instance is created, which is too late to alter data in an immutable instance.

```
__init__()
```

All of these immutable classes have a different signature than their parent class:

```
fromdatetimeimportdateclassFirstOfMonthDate(date):"Always choose the first day of the month"def__new__(cls,year,month,day):returnsuper().__new__(cls,year,month,1)classNamedInt(int):"Allow text names for some numbers"xlat={'zero':0,'one':1,'ten':10}def__new__(cls,value):value=cls.xlat.get(value,value)returnsuper().__new__(cls,value)classTitleStr(str):"Convert str to name suitable for a URL path"def__new__(cls,s):s=s.lower().replace(' ','-')s=''.join([cforcinsifc.isalnum()orc=='-'])returnsuper().__new__(cls,s)
```

The classes can be used like this:

```
>>>FirstOfMonthDate(2012,2,14)FirstOfMonthDate(2012, 2, 1)>>>NamedInt('ten')10>>>NamedInt(20)20>>>TitleStr('Blog: Why Python Rocks')'blog-why-python-rocks'
```

================================================================================

### How do I cache method calls?¶

The two principal tools for caching methods arefunctools.cached_property()andfunctools.lru_cache(). The former stores results at the instance level and the latter at the class level.

```
functools.cached_property()
```

```
functools.lru_cache()
```

Thecached_propertyapproach only works with methods that do not take any arguments. It does not create a reference to the instance. The cached method result will be kept only as long as the instance is alive.

The advantage is that when an instance is no longer used, the cached method result will be released right away. The disadvantage is that if instances accumulate, so too will the accumulated method results. They can grow without bound.

Thelru_cacheapproach works with methods that havehashablearguments. It creates a reference to the instance unless special efforts are made to pass in weak references.

The advantage of the least recently used algorithm is that the cache is bounded by the specifiedmaxsize. The disadvantage is that instances are kept alive until they age out of the cache or until the cache is cleared.

This example shows the various techniques:

```
classWeather:"Lookup weather information on a government website"def__init__(self,station_id):self._station_id=station_id# The _station_id is private and immutabledefcurrent_temperature(self):"Latest hourly observation"# Do not cache this because old results# can be out of date.@cached_propertydeflocation(self):"Return the longitude/latitude coordinates of the station"# Result only depends on the station_id@lru_cache(maxsize=20)defhistoric_rainfall(self,date,units='mm'):"Rainfall on a given date"# Depends on the station_id, date, and units.
```

The above example assumes that thestation_idnever changes. If the relevant instance attributes are mutable, thecached_propertyapproach can’t be made to work because it cannot detect changes to the attributes.

To make thelru_cacheapproach work when thestation_idis mutable, the class needs to define the__eq__()and__hash__()methods so that the cache can detect relevant attribute updates:

```
__hash__()
```

```
classWeather:"Example with a mutable station identifier"def__init__(self,station_id):self.station_id=station_iddefchange_station(self,station_id):self.station_id=station_iddef__eq__(self,other):returnself.station_id==other.station_iddef__hash__(self):returnhash(self.station_id)@lru_cache(maxsize=20)defhistoric_rainfall(self,date,units='cm'):'Rainfall on a given date'# Depends on the station_id, date, and units.
```

================================================================================

### How do I create a .pyc file?¶

When a module is imported for the first time (or when the source file has changed since the current compiled file was created) a.pycfile containing the compiled code should be created in a__pycache__subdirectory of the directory containing the.pyfile. The.pycfile will have a filename that starts with the same name as the.pyfile, and ends with.pyc, with a middle component that depends on the particularpythonbinary that created it. (SeePEP 3147for details.)

```
__pycache__
```

One reason that a.pycfile may not be created is a permissions problem with the directory containing the source file, meaning that the__pycache__subdirectory cannot be created. This can happen, for example, if you develop as one user but run as another, such as if you are testing with a web server.

Unless thePYTHONDONTWRITEBYTECODEenvironment variable is set, creation of a .pyc file is automatic if you’re importing a module and Python has the ability (permissions, free space, etc…) to create a__pycache__subdirectory and write the compiled module to that subdirectory.

```
PYTHONDONTWRITEBYTECODE
```

Running Python on a top level script is not considered an import and no.pycwill be created. For example, if you have a top-level modulefoo.pythat imports another modulexyz.py, when you runfoo(by typingpythonfoo.pyas a shell command), a.pycwill be created forxyzbecausexyzis imported, but no.pycfile will be created forfoosincefoo.pyisn’t being imported.

```
pythonfoo.py
```

If you need to create a.pycfile forfoo– that is, to create a.pycfile for a module that is not imported – you can, using thepy_compileandcompileallmodules.

```
py_compile
```

```
compileall
```

Thepy_compilemodule can manually compile any module. One way is to use thecompile()function in that module interactively:

```
>>>importpy_compile>>>py_compile.compile('foo.py')
```

This will write the.pycto a__pycache__subdirectory in the same location asfoo.py(or you can override that with the optional parametercfile).

You can also automatically compile all files in a directory or directories using thecompileallmodule. You can do it from the shell prompt by runningcompileall.pyand providing the path of a directory containing Python files to compile:

```
compileall.py
```

```
python-mcompileall.
```

================================================================================

### How do I find the current module name?¶

A module can find out its own module name by looking at the predefined global variable__name__. If this has the value'__main__', the program is running as a script. Many modules that are usually used by importing them also provide a command-line interface or a self-test, and only execute this code after checking__name__:

```
'__main__'
```

```
defmain():print('Running test...')...if__name__=='__main__':main()
```

================================================================================

### How can I have modules that mutually import each other?¶

Suppose you have the following modules:

```
frombarimportbar_varfoo_var=1
```

```
fromfooimportfoo_varbar_var=2
```

The problem is that the interpreter will perform the following steps:

- main importsfoo
- Empty globals forfooare created
- foois compiled and starts executing
- fooimportsbar
- Empty globals forbarare created
- baris compiled and starts executing
- barimportsfoo(which is a no-op since there already is a module namedfoo)
- The import mechanism tries to readfoo_varfromfooglobals, to setbar.foo_var=foo.foo_var

```
bar.foo_var=foo.foo_var
```

The last step fails, because Python isn’t done with interpretingfooyet and the global symbol dictionary forfoois still empty.

The same thing happens when you useimportfoo, and then try to accessfoo.foo_varin global code.

```
foo.foo_var
```

There are (at least) three possible workarounds for this problem.

Guido van Rossum recommends avoiding all uses offrom<module>import..., and placing all code inside functions. Initializations of global variables and class variables should use constants or built-in functions only. This means everything from an imported module is referenced as<module>.<name>.

```
from<module>import...
```

```
<module>.<name>
```

Jim Roskind suggests performing steps in the following order in each module:

- exports (globals, functions, and classes that don’t need imported base
classes)
- importstatements
- active code (including globals that are initialized from imported values).

Van Rossum doesn’t like this approach much because the imports appear in a strange place, but it does work.

Matthias Urlichs recommends restructuring your code so that the recursive import is not necessary in the first place.

These solutions are not mutually exclusive.

================================================================================

### __import__(‘x.y.z’) returns <module ‘x’>; how do I get z?¶

Consider using the convenience functionimport_module()fromimportlibinstead:

```
import_module()
```

```
z=importlib.import_module('x.y.z')
```

================================================================================

### When I edit an imported module and reimport it, the changes don’t show up.  Why does this happen?¶

For reasons of efficiency as well as consistency, Python only reads the module file on the first time a module is imported. If it didn’t, in a program consisting of many modules where each one imports the same basic module, the basic module would be parsed and re-parsed many times. To force re-reading of a changed module, do this:

```
importimportlibimportmodnameimportlib.reload(modname)
```

Warning: this technique is not 100% fool-proof. In particular, modules containing statements like

```
frommodnameimportsome_objects
```

will continue to work with the old version of the imported objects. If the module contains class definitions, existing class instances willnotbe updated to use the new class definition. This can result in the following paradoxical behaviour:

```
>>>importimportlib>>>importcls>>>c=cls.C()# Create an instance of C>>>importlib.reload(cls)<module 'cls' from 'cls.py'>>>>isinstance(c,cls.C)# isinstance is false?!?False
```

The nature of the problem is made clear if you print out the “identity” of the class objects:

```
>>>hex(id(c.__class__))'0x7352a0'>>>hex(id(cls.C))'0x4198d0'
```

================================================================================

================================================================================

# Graphic User Interface FAQ — Python 3.13.3 documentation
URL: https://docs.python.org/3/faq/gui.html
Section: 2/2
Description: Contents: Graphic User Interface FAQ- General GUI Questions, What GUI toolkits exist for Python?, Tkinter questions- How do I freeze Tkinter applications?, Can I have Tk events handled while waitin...

Content:

================================================================================

# Graphic User Interface FAQ¶

================================================================================

## General GUI Questions¶

================================================================================

## What GUI toolkits exist for Python?¶

Standard builds of Python include an object-oriented interface to the Tcl/Tk widget set, calledtkinter. This is probably the easiest to install (since it comes included with mostbinary distributionsof Python) and use. For more info about Tk, including pointers to the source, see theTcl/Tk home page. Tcl/Tk is fully portable to the macOS, Windows, and Unix platforms.

Depending on what platform(s) you are aiming at, there are also several alternatives. Alist of cross-platformandplatform-specificGUI frameworks can be found on the python wiki.

================================================================================

## Tkinter questions¶

================================================================================

### How do I freeze Tkinter applications?¶

Freeze is a tool to create stand-alone applications. When freezing Tkinter applications, the applications will not be truly stand-alone, as the application will still need the Tcl and Tk libraries.

One solution is to ship the application with the Tcl and Tk libraries, and point to them at run-time using theTCL_LIBRARYandTK_LIBRARYenvironment variables.

```
TCL_LIBRARY
```

```
TK_LIBRARY
```

Various third-party freeze libraries such as py2exe and cx_Freeze have handling for Tkinter applications built-in.

================================================================================

### Can I have Tk events handled while waiting for I/O?¶

On platforms other than Windows, yes, and you don’t even need threads! But you’ll have to restructure your I/O code a bit. Tk has the equivalent of Xt’sXtAddInput()call, which allows you to register a callback function which will be called from the Tk mainloop when I/O is possible on a file descriptor. SeeFile Handlers.

```
XtAddInput()
```

================================================================================

### I can’t get key bindings to work in Tkinter: why?¶

An often-heard complaint is that event handlersboundto events with thebind()method don’t get handled even when the appropriate key is pressed.

The most common cause is that the widget to which the binding applies doesn’t have “keyboard focus”. Check out the Tk documentation for the focus command. Usually a widget is given the keyboard focus by clicking in it (but not for labels; see the takefocus option).

================================================================================

================================================================================

# General Python FAQ — Python 3.13.3 documentation
URL: https://docs.python.org/3/faq/general.html
Section: 2/2
Description: Contents: General Python FAQ- General Information- What is Python?, What is the Python Software Foundation?, Are there copyright restrictions on the use of Python?, Why was Python created in the fi...

Content:

================================================================================

# General Python FAQ¶

================================================================================

## General Information¶

================================================================================

### What is Python?¶

Python is an interpreted, interactive, object-oriented programming language. It incorporates modules, exceptions, dynamic typing, very high level dynamic data types, and classes. It supports multiple programming paradigms beyond object-oriented programming, such as procedural and functional programming. Python combines remarkable power with very clear syntax. It has interfaces to many system calls and libraries, as well as to various window systems, and is extensible in C or C++. It is also usable as an extension language for applications that need a programmable interface. Finally, Python is portable: it runs on many Unix variants including Linux and macOS, and on Windows.

To find out more, start withThe Python Tutorial. TheBeginner’s Guide to Pythonlinks to other introductory tutorials and resources for learning Python.

================================================================================

### What is the Python Software Foundation?¶

The Python Software Foundation is an independent non-profit organization that holds the copyright on Python versions 2.1 and newer. The PSF’s mission is to advance open source technology related to the Python programming language and to publicize the use of Python. The PSF’s home page is athttps://www.python.org/psf/.

Donations to the PSF are tax-exempt in the US. If you use Python and find it helpful, please contribute viathe PSF donation page.

================================================================================

### Are there copyright restrictions on the use of Python?¶

You can do anything you want with the source, as long as you leave the copyrights in and display those copyrights in any documentation about Python that you produce. If you honor the copyright rules, it’s OK to use Python for commercial use, to sell copies of Python in source or binary form (modified or unmodified), or to sell products that incorporate Python in some form. We would still like to know about all commercial use of Python, of course.

Seethe license pageto find further explanations and the full text of the PSF License.

The Python logo is trademarked, and in certain cases permission is required to use it. Consultthe Trademark Usage Policyfor more information.

================================================================================

### Why was Python created in the first place?¶

Here’s averybrief summary of what started it all, written by Guido van Rossum:

I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very-high-level data types (although the details are all different in Python).

I had a number of gripes about the ABC language, but also liked many of its features. It was impossible to extend the ABC language (or its implementation) to remedy my complaints – in fact its lack of extensibility was one of its biggest problems. I had some experience with using Modula-2+ and talked with the designers of Modula-3 and read the Modula-3 report. Modula-3 is the origin of the syntax and semantics used for exceptions, and some other Python features.

I was working in the Amoeba distributed operating system group at CWI. We needed a better way to do system administration than by writing either C programs or Bourne shell scripts, since Amoeba had its own system call interface which wasn’t easily accessible from the Bourne shell. My experience with error handling in Amoeba made me acutely aware of the importance of exceptions as a programming language feature.

It occurred to me that a scripting language with a syntax like ABC but with access to the Amoeba system calls would fill the need. I realized that it would be foolish to write an Amoeba-specific language, so I decided that I needed a language that was generally extensible.

During the 1989 Christmas holidays, I had a lot of time on my hand, so I decided to give it a try. During the next year, while still mostly working on it in my own time, Python was used in the Amoeba project with increasing success, and the feedback from colleagues made me add many early improvements.

In February 1991, after just over a year of development, I decided to post to USENET. The rest is in theMisc/HISTORYfile.

```
Misc/HISTORY
```

================================================================================

### What is Python good for?¶

Python is a high-level general-purpose programming language that can be applied to many different classes of problems.

The language comes with a large standard library that covers areas such as string processing (regular expressions, Unicode, calculating differences between files), internet protocols (HTTP, FTP, SMTP, XML-RPC, POP, IMAP), software engineering (unit testing, logging, profiling, parsing Python code), and operating system interfaces (system calls, filesystems, TCP/IP sockets). Look at the table of contents forThe Python Standard Libraryto get an idea of what’s available. A wide variety of third-party extensions are also available. Consultthe Python Package Indexto find packages of interest to you.

================================================================================

### How does the Python version numbering scheme work?¶

Python versions are numbered “A.B.C” or “A.B”:

- Ais the major version number – it is only incremented for really major
changes in the language.
- Bis the minor version number – it is incremented for less earth-shattering
changes.
- Cis the micro version number – it is incremented for each bugfix release.

Not all releases are bugfix releases. In the run-up to a new feature release, a series of development releases are made, denoted as alpha, beta, or release candidate. Alphas are early releases in which interfaces aren’t yet finalized; it’s not unexpected to see an interface change between two alpha releases. Betas are more stable, preserving existing interfaces but possibly adding new modules, and release candidates are frozen, making no changes except as needed to fix critical bugs.

Alpha, beta and release candidate versions have an additional suffix:

- The suffix for an alpha version is “aN” for some small numberN.
- The suffix for a beta version is “bN” for some small numberN.
- The suffix for a release candidate version is “rcN” for some small numberN.

In other words, all versions labeled2.0aNprecede the versions labeled2.0bN, which precede versions labeled2.0rcN, andthoseprecede 2.0.

You may also find version numbers with a “+” suffix, e.g. “2.2+”. These are unreleased versions, built directly from the CPython development repository. In practice, after a final minor release is made, the version is incremented to the next minor version, which becomes the “a0” version, e.g. “2.4a0”.

See theDeveloper’s Guidefor more information about the development cycle, andPEP 387to learn more about Python’s backward compatibility policy. See also the documentation forsys.version,sys.hexversion, andsys.version_info.

```
sys.version
```

```
sys.hexversion
```

```
sys.version_info
```

================================================================================

### How do I obtain a copy of the Python source?¶

The latest Python source distribution is always available from python.org, athttps://www.python.org/downloads/. The latest development sources can be obtained athttps://github.com/python/cpython/.

The source distribution is a gzipped tar file containing the complete C source, Sphinx-formatted documentation, Python library modules, example programs, and several useful pieces of freely distributable software. The source will compile and run out of the box on most UNIX platforms.

Consult theGetting Started section of the Python Developer’s Guidefor more information on getting the source code and compiling it.

================================================================================

### How do I get documentation on Python?¶

The standard documentation for the current stable version of Python is available athttps://docs.python.org/3/. PDF, plain text, and downloadable HTML versions are also available athttps://docs.python.org/3/download.html.

The documentation is written in reStructuredText and processed bythe Sphinx documentation tool. The reStructuredText source for the documentation is part of the Python source distribution.

================================================================================

### I’ve never programmed before. Is there a Python tutorial?¶

There are numerous tutorials and books available. The standard documentation includesThe Python Tutorial.

Consultthe Beginner’s Guideto find information for beginning Python programmers, including lists of tutorials.

================================================================================

### Is there a newsgroup or mailing list devoted to Python?¶

There is a newsgroup,comp.lang.python, and a mailing list,python-list. The newsgroup and mailing list are gatewayed into each other – if you can read news it’s unnecessary to subscribe to the mailing list.comp.lang.pythonis high-traffic, receiving hundreds of postings every day, and Usenet readers are often more able to cope with this volume.

Announcements of new software releases and events can be found in comp.lang.python.announce, a low-traffic moderated list that receives about five postings per day. It’s available asthe python-announce mailing list.

More info about other mailing lists and newsgroups can be found athttps://www.python.org/community/lists/.

================================================================================

### How do I get a beta test version of Python?¶

Alpha and beta releases are available fromhttps://www.python.org/downloads/. All releases are announced on the comp.lang.python and comp.lang.python.announce newsgroups and on the Python home page athttps://www.python.org/; an RSS feed of news is available.

You can also access the development version of Python through Git. SeeThe Python Developer’s Guidefor details.

================================================================================

### How do I submit bug reports and patches for Python?¶

To report a bug or submit a patch, use the issue tracker athttps://github.com/python/cpython/issues.

For more information on how Python is developed, consultthe Python Developer’s Guide.

================================================================================

### Are there any published articles about Python that I can reference?¶

It’s probably best to cite your favorite book about Python.

Thevery first articleabout Python was written in 1991 and is now quite outdated.

Guido van Rossum and Jelke de Boer, “Interactively Testing Remote Servers Using the Python Programming Language”, CWI Quarterly, Volume 4, Issue 4 (December 1991), Amsterdam, pp 283–303.

================================================================================

### Are there any books on Python?¶

Yes, there are many, and more are being published. See the python.org wiki athttps://wiki.python.org/moin/PythonBooksfor a list.

You can also search online bookstores for “Python” and filter out the Monty Python references; or perhaps search for “Python” and “language”.

================================================================================

### Where in the world is www.python.org located?¶

The Python project’s infrastructure is located all over the world and is managed by the Python Infrastructure Team. Detailshere.

================================================================================

### Why is it called Python?¶

When he began implementing Python, Guido van Rossum was also reading the published scripts from“Monty Python’s Flying Circus”, a BBC comedy series from the 1970s. Van Rossum thought he needed a name that was short, unique, and slightly mysterious, so he decided to call the language Python.

================================================================================

### Do I have to like “Monty Python’s Flying Circus”?¶

No, but it helps. :)

================================================================================

## Python in the real world¶

================================================================================

### How stable is Python?¶

Very stable. New, stable releases have been coming out roughly every 6 to 18 months since 1991, and this seems likely to continue. As of version 3.9, Python will have a new feature release every 12 months (PEP 602).

The developers issue bugfix releases of older versions, so the stability of existing releases gradually improves. Bugfix releases, indicated by a third component of the version number (e.g. 3.5.3, 3.6.2), are managed for stability; only fixes for known problems are included in a bugfix release, and it’s guaranteed that interfaces will remain the same throughout a series of bugfix releases.

The latest stable releases can always be found on thePython download page. Python 3.x is the recommended version and supported by most widely used libraries. Python 2.xis not maintained anymore.

================================================================================

### How many people are using Python?¶

There are probably millions of users, though it’s difficult to obtain an exact count.

Python is available for free download, so there are no sales figures, and it’s available from many different sites and packaged with many Linux distributions, so download statistics don’t tell the whole story either.

The comp.lang.python newsgroup is very active, but not all Python users post to the group or even read it.

================================================================================

### Have any significant projects been done in Python?¶

Seehttps://www.python.org/about/successfor a list of projects that use Python. Consulting the proceedings forpast Python conferenceswill reveal contributions from many different companies and organizations.

High-profile Python projects includethe Mailman mailing list managerandthe Zope application server. Several Linux distributions, most notablyRed Hat, have written part or all of their installer and system administration software in Python. Companies that use Python internally include Google, Yahoo, and Lucasfilm Ltd.

================================================================================

### What new developments are expected for Python in the future?¶

Seehttps://peps.python.org/for the Python Enhancement Proposals (PEPs). PEPs are design documents describing a suggested new feature for Python, providing a concise technical specification and a rationale. Look for a PEP titled “Python X.Y Release Schedule”, where X.Y is a version that hasn’t been publicly released yet.

New development is discussed onthe python-dev mailing list.

================================================================================

### Is it reasonable to propose incompatible changes to Python?¶

In general, no. There are already millions of lines of Python code around the world, so any change in the language that invalidates more than a very small fraction of existing programs has to be frowned upon. Even if you can provide a conversion program, there’s still the problem of updating all documentation; many books have been written about Python, and we don’t want to invalidate them all at a single stroke.

Providing a gradual upgrade path is necessary if a feature has to be changed.PEP 5describes the procedure followed for introducing backward-incompatible changes while minimizing disruption for users.

================================================================================

### Is Python a good language for beginning programmers?¶

It is still common to start students with a procedural and statically typed language such as Pascal, C, or a subset of C++ or Java. Students may be better served by learning Python as their first language. Python has a very simple and consistent syntax and a large standard library and, most importantly, using Python in a beginning programming course lets students concentrate on important programming skills such as problem decomposition and data type design. With Python, students can be quickly introduced to basic concepts such as loops and procedures. They can probably even work with user-defined objects in their very first course.

For a student who has never programmed before, using a statically typed language seems unnatural. It presents additional complexity that the student must master and slows the pace of the course. The students are trying to learn to think like a computer, decompose problems, design consistent interfaces, and encapsulate data. While learning to use a statically typed language is important in the long term, it is not necessarily the best topic to address in the students’ first programming course.

Many other aspects of Python make it a good first language. Like Java, Python has a large standard library so that students can be assigned programming projects very early in the course thatdosomething. Assignments aren’t restricted to the standard four-function calculator and check balancing programs. By using the standard library, students can gain the satisfaction of working on realistic applications as they learn the fundamentals of programming. Using the standard library also teaches students about code reuse. Third-party modules such as PyGame are also helpful in extending the students’ reach.

Python’s interactive interpreter enables students to test language features while they’re programming. They can keep a window with the interpreter running while they enter their program’s source in another window. If they can’t remember the methods for a list, they can do something like this:

```
>>>L=[]>>>dir(L)['__add__', '__class__', '__contains__', '__delattr__', '__delitem__','__dir__', '__doc__', '__eq__', '__format__', '__ge__','__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__','__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__','__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__','__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__','__sizeof__', '__str__', '__subclasshook__', 'append', 'clear','copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove','reverse', 'sort']>>>[dfordindir(L)if'__'notind]['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']>>>help(L.append)Help on built-in function append:append(...)L.append(object) -> None -- append object to end>>>L.append(1)>>>L[1]
```

With the interpreter, documentation is never far from the student as they are programming.

There are also good IDEs for Python. IDLE is a cross-platform IDE for Python that is written in Python using Tkinter. Emacs users will be happy to know that there is a very good Python mode for Emacs. All of these programming environments provide syntax highlighting, auto-indenting, and access to the interactive interpreter while coding. Consultthe Python wikifor a full list of Python editing environments.

If you want to discuss Python’s use in education, you may be interested in joiningthe edu-sig mailing list.

================================================================================

================================================================================

