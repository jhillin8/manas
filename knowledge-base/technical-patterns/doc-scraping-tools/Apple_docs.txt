url: https://developer.apple.com/documentation/swiftui/
title: This page requires JavaScript.
description: Declare the user interface and behavior for your app on every platform.

FrameworkSwiftUIDeclare the user interface and behavior for your app on every platform.iOS 13.0+iPadOS 13.0+Mac Catalyst 13.0+macOS 10.15+tvOS 13.0+visionOS 1.0+watchOS 6.0+OverviewSwiftUI provides views, controls, and layout structures for declaring your app’s user interface.
The framework provides event handlers for delivering taps, gestures, and other types of input to your app, and tools to manage the flow of data from your app’s models down to the views and controls that users see and interact with.Define your app structure using the App protocol, and populate it with scenes that contain the views that make up your app’s user interface.
Create your own custom views that conform to the View protocol, and compose them with SwiftUI views for displaying text, images, and custom shapes using stacks, lists, and more.
Apply powerful modifiers to built-in views and your own views to customize their rendering and interactivity.
Share code between apps on multiple platforms with views and controls that adapt to their context and presentation.You can integrate SwiftUI views with objects from the UIKit, AppKit, and WatchKit frameworks to take further advantage of platform-specific functionality.

---

url: https://developer.apple.com/documentation/swiftui/
title: This page requires JavaScript.
description: Declare the user interface and behavior for your app on every platform.

You can also customize accessibility support in SwiftUI, and localize your app’s interface for different languages, countries, or cultural regions.Featured samples Destination Video Leverage SwiftUI to build an immersive media experience in a multiplatform app.
View sample code BOT-anist Build a multiplatform app that uses windows, volumes, and animations to create a robot botanist’s greenhouse.
View sample code Hello World Use windows, volumes, and immersive spaces to teach people about the Earth.
View sample code Building a document-based app with SwiftUI Create, save, and open documents in a multiplatform app.
View sample code TopicsEssentialsIntroducing SwiftUISwiftUI is a modern way to declare user interfaces for any Apple platform.

---

url: https://developer.apple.com/documentation/swiftui/
title: This page requires JavaScript.
description: Declare the user interface and behavior for your app on every platform.

Create beautiful, dynamic apps faster than ever before.Learning SwiftUIDiscover tips and techniques for building multiplatform apps with this set of conceptual articles and sample code.Exploring SwiftUI Sample AppsExplore these SwiftUI samples using Swift Playgrounds on iPad or in Xcode to learn about defining user interfaces, responding to user interactions, and managing data flow.SwiftUI updatesLearn about important changes to SwiftUI.App structureAPI ReferenceApp organizationDefine the entry point and top-level structure of your app.API ReferenceScenesDeclare the user interface groupings that make up the parts of your app.API ReferenceWindowsDisplay user interface content in a window or a collection of windows.API ReferenceImmersive spacesDisplay unbounded content in a person’s surroundings.API ReferenceDocumentsEnable people to open and manage documents.API ReferenceNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.API ReferenceModal presentationsPresent content in a separate view that offers focused interaction.API ReferenceToolbarsProvide immediate access to frequently used commands and controls.API ReferenceSearchEnable people to search for text or other content within your app.API ReferenceApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.Data and storageAPI ReferenceModel dataManage the data that your app uses to drive its interface.API ReferenceEnvironment valuesShare data throughout a view hierarchy using the environment.API ReferencePreferencesIndicate configuration preferences from views to their container views.API ReferencePersistent storageStore data for use across sessions of your app.ViewsAPI ReferenceView fundamentalsDefine the visual elements of your app using a hierarchy of views.API ReferenceView configurationAdjust the characteristics of views in a hierarchy.API ReferenceView stylesApply built-in and custom appearances and behaviors to different types of views.API ReferenceAnimationsCreate smooth visual updates in response to state changes.API ReferenceText input and outputDisplay formatted text and get text input from the user.API ReferenceImagesAdd images and symbols to your app’s user interface.API ReferenceControls and indicatorsDisplay values and get user selections.API ReferenceMenus and commandsProvide space-efficient, context-dependent access to commands and controls.API ReferenceShapesTrace and fill built-in and custom shapes with a color, gradient, or other pattern.API ReferenceDrawing and graphicsEnhance your views with graphical effects and customized drawings.View layoutAPI ReferenceLayout fundamentalsArrange views inside built-in layout containers like stacks and grids.API ReferenceLayout adjustmentsMake fine adjustments to alignment, spacing, padding, and other layout parameters.API ReferenceCustom layoutPlace views in custom arrangements and create animated transitions between layout types.API ReferenceListsDisplay a structured, scrollable column of information.API ReferenceTablesDisplay selectable, sortable data arranged in rows and columns.API ReferenceView groupingsPresent views in different kinds of purpose-driven containers, like forms or control groups.API ReferenceScroll viewsEnable people to scroll to content that doesn’t fit in the current display.Event handlingAPI ReferenceGesturesDefine interactions from taps, clicks, and swipes to fine-grained gestures.API ReferenceInput eventsRespond to input from a hardware device, like a keyboard or a Touch Bar.API ReferenceClipboardEnable people to move or duplicate items by issuing Copy and Paste commands.API ReferenceDrag and dropEnable people to move or duplicate items by dragging them from one location to another.API ReferenceFocusIdentify and control which visible object responds to user interaction.API ReferenceSystem eventsReact to system events, like opening a URL.AccessibilityAPI ReferenceAccessibility fundamentalsMake your SwiftUI apps accessible to everyone, including people with disabilities.API ReferenceAccessible appearanceEnhance the legibility of content in your app’s interface.API ReferenceAccessible controlsImprove access to actions that your app can undertake.API ReferenceAccessible descriptionsDescribe interface elements to help people understand what they represent.API ReferenceAccessible navigationEnable users to navigate to specific user interface elements using rotors.Framework integrationAPI ReferenceAppKit integrationAdd AppKit views to your SwiftUI app, or use SwiftUI views in your AppKit app.API ReferenceUIKit integrationAdd UIKit views to your SwiftUI app, or use SwiftUI views in your UIKit app.API ReferenceWatchKit integrationAdd WatchKit views to your SwiftUI app, or use SwiftUI views in your WatchKit app.API ReferenceTechnology-specific viewsUse SwiftUI views that other Apple frameworks provide.Tool supportAPI ReferencePreviews in XcodeGenerate dynamic, interactive previews of your custom views.API ReferenceXcode library customizationExpose custom views and modifiers in the Xcode library.Protocolsprotocol GlassBackgroundEffectA specification for the appearance of a glass background.Structuresstruct AutomaticGlassBackgroundEffectThe automatic glass background effect.struct ContentToolbarPlacementstruct FeatheredGlassBackgroundEffectThe feathered glass background effect.struct GlassBackgroundEffectConfigurationA configuration used to build a custom effect.struct PlateGlassBackgroundEffectThe plate glass background effect.struct ScrollTargetBehaviorPropertiesProperties influencing the scroll view a scroll target behavior applies to.struct ScrollTargetBehaviorPropertiesContextThe context in which a scroll target behavior can decide its properties.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

RSS WWDC25: June 9-13, 2025 March 25, 2025
Join the worldwide developer community online for a week of technology and creativity.
Be there for the reveal of the latest Apple tools, frameworks, and features.
Learn to elevate your apps and games through video sessions hosted by Apple engineers and designers.
Engage with Apple experts in labs and connect with the worldwide developer community.
All online and at no cost.
Learn more about WWDC25 Apple Developer is now on WeChat February 24, 2025
Check out the official Apple Developer WeChat account to find news, announcements, and upcoming activities for the developer community.Learn more in Simplified Chinese Get ready with the latest beta releases February 21, 2025
The beta versions of iOS 18.4, iPadOS 18.4, macOS 15.4, tvOS 18.4, visionOS 2.4, and watchOS 11.4 are now available.
Get your apps ready by confirming they work as expected on these releases.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

And to take advantage of the advancements in the latest SDKs, make sure to build and test with Xcode 16.3.As previewed last year, iOS 18.4 and iPadOS 18.4 include support for default translation apps for all users worldwide, and default navigation apps for EU users.Beginning April 24, 2025, apps uploaded to App Store Connect must be built with Xcode 16 or later using an SDK for iOS 18, iPadOS 18, tvOS 18, visionOS 2, or watchOS 11.View downloads and release notes New requirement for apps on the App Store in the European Union February 18, 2025
As of today, apps without trader status have been removed from the App Store in the European Union (EU) until trader status is provided and verified by Apple.Account Holders or Admins in the Apple Developer Program will need to enter this status in App Store Connect to comply with the Digital Services Act.Learn what a trader is and how to enter your status New features for APNs token authentication are now available February 17, 2025
You can now take advantage of upgraded security options when creating new token authentication keys for the Apple Push Notification service (APNs).
Team-scoped keys enable you to restrict your token authentication keys to either development or production environments, providing an additional layer of security and ensuring that keys are used only in their intended environments.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Topic-specific keys provide more granular control by enabling you to associate each key with a specific bundle ID, allowing for more streamlined and organized key management.
This is particularly beneficial for large organizations that manage multiple apps across different teams.
Your existing keys will continue to work for all push topics and environments.
At this time, you don’t have to update your keys unless you want to take advantage of the new capabilities.
For detailed instructions on how to secure your communications with APNs, read Establishing a token-based connection to APNs.
Upcoming changes to offers and trials for subscriptions in South Korea February 14, 2025
Starting February 14, 2025, new regulatory requirements in South Korea will apply to all apps with offers and trials for auto-renewing subscriptions.To comply, if you offer trials or offers for auto-renewing subscriptions to your app or game, additional consent must be obtained for your trial or offer after the initial transaction.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

The App Store will help to get consent by informing the affected subscribers with an email, push notification, and in-app price consent sheet, and asking your subscribers to agree to the new price.This additional consent must be obtained from customers within 30 days from the payment or conversion date for:
Free to paid trials
Discounted subscription offers to standard-price subscriptions
Apps that do not offer a free trial or discounted offer before a subscription converts to the regular price are not affected.Learn more about this regulation Tax and price updates for apps, In-App Purchases, and subscriptions February 6, 2025
The App Store is designed to make it easy to sell your digital goods and services globally, with support for 44 currencies across 175 storefronts.From time to time, we may need to adjust prices or your proceeds due to changes in tax regulations or foreign exchange rates.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

These adjustments are made using publicly available exchange rate information from financial data providers to help make sure prices for apps and In-App Purchases stay consistent across all storefronts.Tax and pricing updates for FebruaryAs of February 6:Your proceeds from the sale of eligible apps and In‑App Purchases have been modified in:
Azerbaijan: value-added tax (VAT) introduction of 18%
Peru: VAT introduction of 18%
Slovakia: Standard VAT rate increase from 20% to 23%
Slovakia: Reduced VAT rate introduction of 5% for ebooks
Estonia: Reduced VAT rate increase from 5% to 9% for news publications, magazines, and other periodicals
Finland: Reduced VAT rate increase from 10% to 14% for ebooks
Exhibit B of the Paid Applications Agreement has been updated to indicate that Apple collects and remits applicable taxes in Azerbaijan and Peru.¹As of February 24:Pricing for apps and In-App Purchases will be updated for the Azerbaijan and Peru storefronts if you haven’t selected one of these as the base for your app or In‑App Purchase.² These updates also consider VAT introductions listed in the tax updates section above.If you’ve selected the Azerbaijan or Peru storefront as the base for your app or In-App Purchase, prices won’t change.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

On other storefronts, prices will be updated to maintain equalization with your chosen base price.Prices won’t change in any region if your In‑App Purchase is an auto‑renewable subscription.
Prices also won’t change on the storefronts where you manually manage prices instead of using the automated equalized prices.The Pricing and Availability section of Apps has been updated in App Store Connect to display these upcoming price changes.
As always, you can change the prices of your apps, In‑App Purchases, and auto‑renewable subscriptions at any time.Learn more about managing your pricesView or edit upcoming price changesEdit your app’s base country or regionPricing and availability start times by country or regionSet a price for an In-App PurchaseBeginning April 1:As a result of last year’s change in Japan’s tax regulations, Apple (through iTunes K.K.
in Japan) is now designated as a Specified Platform Operator by the Japan tax authority.
All paid apps and In-App Purchases, (including game items, such as coins) sold by non-Japan-based developers on the App Store in Japan will be subject to the platform tax regime.
Apple will collect and remit a 10% Japanese consumption tax (JCT) to the National Tax Agency JAPAN on such transactions at the time of purchase.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Your proceeds will be adjusted accordingly.Please note any prepaid payment instruments (such as coins) sold prior to April 1, 2025, will not be subject to platform taxation, and the relevant JCT compliance should continue to be managed by the developer.For specific information on how the JCT affects in-game items, see Question 7 in the Tax Agency of Japan’s Q&A about Platform Taxation of Consumption Tax.Learn more about your proceedsView payments and proceedsDownload financial reports¹ Translations of the updated agreement are available on the Apple Developer website today.
² Excludes auto-renewable subscriptions.
Game distribution on the App Store in Vietnam February 4, 2025
The Vietnamese Ministry of Information and Communications (MIC) requires games to be licensed to remain available on the App Store in Vietnam.
To learn more and apply for a game license, review the regulations.Once you have obtained your license:
Sign in to App Store Connect.
Enter the license number and the associated URL in the description section of your game’s product page.
Note that you only need to provide this information for the App Store localization displayed on the Vietnam storefront.
Submit an update to App Review.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

If you have questions on how to comply with these requirements, please contact the Authority of Broadcasting and Electronic Information (ABEI) under the Vietnamese Ministry of Information and Communications.View the full law Apply for the Swift Student Challenge now through February 23 February 3, 2025
Submissions for the Swift Student Challenge 2025 are now open through February 23.
You have three more weeks to design, test, refine, and submit your app playground for consideration to be named one of 350 winners.What to know:
The Challenge is free to enter — you just need access to an iPad or Mac with Swift Playground or Xcode.
The best app ideas are personal — let your passion shine through your work.
No formal coding experience required — the Challenge is open to students of all levels.
Your app playground doesn’t need to be intricate — it should be experienced within 3 minutes or less.
Where to start:
Explore tools and tutorials to build an incredible app playground.
Get inspired by last year’s Distinguished Winners, learn about their winning apps, and read about their experiences at Apple Park.
Learn more about the Challenge Introducing the Advanced Commerce API January 23, 2025
The App Store facilitates billions of transactions annually to help developers grow their businesses and provide a world-class customer experience.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

To further support developers’ evolving business models — such as exceptionally large content catalogs, creator experiences, and subscriptions with optional add-ons — we’re introducing the Advanced Commerce API.Developers can apply to use the Advanced Commerce API to support eligible App Store business models and more flexibly manage their In-App Purchases within their app.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

These purchases leverage the power of the trusted App Store commerce system, including end-to-end payment processing, tax support, customer service, and more, so developers can focus on providing great app experiences.Learn about eligibility requirements and how to apply Apps without trader status will be removed from the App Store in the EU January 16, 2025
Starting February 17, 2025: Due to the European Union’s Digital Services Act, apps without trader status will be removed from the App Store in the European Union until trader status is provided and verified, if necessary.As a reminder, Account Holders or Admins in the Apple Developer Program need to enter trader status in App Store Connect for apps on the App Store in the European Union in order to comply with the Digital Services Act.Learn what a trader is and how to enter your status Reminder: Upcoming Changes to the App Store Receipt Signing Intermediate Certificate January 16, 2025
As part of ongoing efforts to improve security and privacy on Apple platforms, the App Store receipt signing intermediate certificate is being updated to use the SHA-256 cryptographic algorithm.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

This certificate is used to sign App Store receipts, which are the proof of purchase for apps and In-App Purchases.This update is being completed in multiple phases and some existing apps on the App Store may be impacted by the next update, depending on how they verify receipts.Starting January 24, 2025, if your app performs on-device receipt validation and doesn’t support the SHA-256 algorithm, your app will fail to validate the receipt.
If your app prevents customers from accessing the app or premium content when receipt validation fails, your customers may lose access to their content.If your app performs on-device receipt validation, update your app to support certificates that use the SHA-256 algorithm; alternatively, use the AppTransaction and Transaction APIs to verify App Store transactions.For more details, view TN3138: Handling App Store receipt signing certificate changes.
Algorithm changes to server connections for Apple Pay on the Web January 9, 2025
Starting next month, Apple will change the supported algorithms that secure server connections for Apple Pay on the Web.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

In order to maintain uninterrupted service, you’ll need to ensure that your production servers support one or more of the designated six ciphers before February 4, 2025.These algorithm changes will affect any secure connection you’ve established as part of your Apple Pay integration, including the following touchpoints:
Requesting an Apple Pay payment session (Apple Pay on the Web only)
Renewing your domain verification (Apple Pay on the Web only)
Receiving and handling merchant token notifications for recurring, deferred, and automatic-reload transactions (Apple Pay on the Web and in app)
Creating and updating Wallet Orders (Apple Pay on the Web and in app)
Managing merchant onboarding via the Apple Pay Web Merchant Registration API (payment service provider (PSP) and e-commerce platforms only) Get ready with the latest beta releases December 16, 2024
The beta versions of iOS 18.3, iPadOS 18.3, macOS 15.3, tvOS 18.3, visionOS 2.3, and watchOS 11.3 are now available.
Get your apps ready by confirming they work as expected on these releases.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

And to take advantage of the advancements in the latest SDKs, make sure to build and test with Xcode 16.2.View downloads and release notes
Learn about testing a beta OS
Learn about sending feedback App Store Award winners announced December 11, 2024
Join us in celebrating the outstanding work of these developers from around the world.Meet the winners Updated Apple Developer Program License Agreement now available December 6, 2024
Attachment 2 of the Apple Developer Program License Agreement has been amended to specify requirements for use of the In-App Purchase API.
Please review the changes and accept the updated terms in your account.View the full terms and conditionsTranslations of the updated agreement will be available on the Apple Developer website within one month.
Get your apps and games ready for the holidays December 2, 2024
The busiest season on the App Store is almost here.
Make sure your apps and games are up to date and ready.App Review will continue to accept submissions throughout the holiday season.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Please plan to submit time-sensitive submissions early, as we anticipate high volume and reviews may take longer to complete from December 20-26.Learn more about submitting to the App Store App Store Award finalists announced November 25, 2024
Every year, the App Store Awards celebrate exceptional apps and games that improve people's lives while showcasing the highest levels of technical innovation, user experience, design, and positive cultural impact.
This year, the App Store Editorial team is proud to recognize over 40 outstanding finalists.
Winners will be announced in the coming weeks.
Learn about the finalists Price and tax updates for apps, In-App Purchases, and subscriptions November 14, 2024
The App Store is designed to make it easy to sell your digital goods and services globally, with support for 44 currencies across 175 storefronts.From time to time, we may need to adjust prices or your proceeds due to changes in tax regulations or foreign exchange rates.
These adjustments are made using publicly available exchange rate information from financial data providers to help make sure prices for apps and In-App Purchases stay consistent across all storefronts.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Tax updates as of October:Your proceeds from the sale of eligible apps and In‑App Purchases have been increased in: Nepal: Apple no longer remits Nepal value-added tax (VAT) for local developers and proceeds were increased accordingly.
Kazakhstan: Apple no longer remits Kazakstan VAT for local developers and proceeds were increased accordingly.
Madeira: Decrease of the Madeira VAT rate from 5% to 4% for news publications, magazines and other periodicals, books, and audiobooks.
Exhibit B of the Paid Applications Agreement has been updated to indicate that Apple will not remit VAT in Nepal and Kazakhstan for local developers.Learn more about your proceedsView payments and proceedsDownload financial reportsPrice updates as of December 2:
Pricing for apps and In-App Purchases will be updated for the Japan and Türkiye storefronts if you haven’t selected one of these as the base for your app or In‑App Purchases.
If you’ve selected the Japan or Türkiye storefront as the base for your app or In-App Purchase, prices won’t change.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

On other storefronts, prices will be updated to maintain equalization with your chosen base price.Prices won’t change in any region if your In‑App Purchase is an auto‑renewable subscription and won’t change on the storefronts where you manually manage prices instead of using the automated equalized prices.The Pricing and Availability section of Apps has been updated in App Store Connect to display these upcoming price changes.
As always, you can change the prices of your apps, In‑App Purchases, and auto‑renewable subscriptions at any time.Learn more about managing your pricesView or edit upcoming price changesEdit your app’s base country or regionPricing and availability start times by country or regionSet a price for an In-App Purchase Enhancements to the App Store featuring process November 12, 2024
Share your app or game’s upcoming content and enhancements for App Store featuring consideration with new Featuring Nominations in App Store Connect.
Submit a nomination to tell our team about a new launch, in-app content, or added functionality.
If you’re featured in select placements on the Today tab, you’ll also receive a notification via the App Store Connect app.In addition, you can promote your app or game’s biggest moments — such as an app launch, new version, or select featuring placements on the App Store — with readymade marketing assets.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Use the App Store Connect app to generate Apple-designed assets and share them to your social media channels.
Include the provided link alongside your assets so people can easily download your app or game on the App Store.Learn more about getting featuredSubmit a Featuring Nomination New Broadcast Push Notification Metrics Now Available in the Push Notifications Console November 11, 2024
The Push Notifications Console now includes metrics for broadcast push notifications sent in the Apple Push Notification service (APNs) production environment.
The console’s interface provides an aggregated view of the broadcast push notifications that are successfully accepted by APNs, the number of devices that receive them, and a snapshot of the maximum number of devices subscribed to your channels.Set up broadcast push notificationsBroadcast updates to your Live Activities Upcoming changes to the App Store Receipt Signing Intermediate Certificate October 31, 2024
As part of ongoing efforts to improve security and privacy on Apple platforms, the App Store receipt signing intermediate certificate is being updated to use the SHA-256 cryptographic algorithm.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

This certificate is used to sign App Store receipts, which are the proof of purchase for apps and In-App Purchases.This update is being completed in multiple phases and some existing apps on the App Store may be impacted by the next update, depending on how they verify receipts.Starting January 24, 2025, if your app performs on-device receipt validation and doesn't support a SHA-256 algorithm, your app will fail to validate the receipt.
If your app prevents customers from accessing the app or premium content when receipt validation fails, your customers may lose access to their content.If your app performs on-device receipt validation, update your app to support certificates that use the SHA-256 algorithm; alternatively, use the AppTransaction and Transaction APIs to verify App Store transactions.For more details, view TN3138: Handling App Store receipt signing certificate change.
TestFlight enhancements to help you reach testers October 24, 2024
Beta testing your apps, games, and App Clips is even better with new enhancements to TestFlight.
Updates include:
Redesigned invitations.
TestFlight invitations now include your beta app description to better highlight new features and content your app or game offers to prospective testers.
Apps and games with an approved version that’s ready for distribution can also include their screenshots and app category in their invite.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

We’ve also added a way for people to leave feedback if they didn’t join your beta, so you can understand why they didn’t participate.
Tester enrollment criteria.
You can choose to set criteria, such as device type and OS versions, to more easily enroll qualified testers via a public link to provide more relevant feedback on your invite.
Public link metrics.
Find out how successful your public link is at enrolling testers for your app with new metrics.
Understand how many testers viewed your invite in the TestFlight app and chose to accept it.
If you’ve set criteria for the public link, you can also view how many testers didn’t meet the criteria.
To get started with TestFlight, upload your build, add test information, and invite testers.
Learn more about TestFlight Get ready with the latest beta releases October 23, 2024
The beta versions of iOS 18.2, iPadOS 18.2, and macOS 15.2 are now available.
Get your apps ready by confirming they work as expected on these releases.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

And make sure to build and test with Xcode 16.2 beta to take advantage of the advancements in the latest SDKs.As previewed earlier this year, changes to the browser choice screen, default apps, and app deletion for EU users, as well as support in Safari for exporting user data and for web browsers to import that data, are now available in the beta versions of iOS 18.2 and iPadOS 18.2.These releases also include improvements to the Apps area in Settings first introduced in iOS 18 and iPadOS 18.
All users worldwide will be able to manage their default apps via a Default Apps section at the top of the Apps area.
New calling and messaging defaults are also now available for all users worldwide.Following feedback from the European Commission and from developers, in these releases developers can develop and test EU-specific features, such as alternative browser engines, contactless apps, marketplace installations from web browsers, and marketplace apps, from anywhere in the world.
Developers of apps that use alternative browser engines can now use WebKit in those same apps.View details about the browser choice screen, how to make an app available for users to choose as a default, how to create a calling or messaging app that can be a default, and how to import user data from Safari.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Updated agreements now available October 23, 2024
The Apple Developer Program License Agreement and its Schedules 1, 2, and 3 have been updated to support updated policies and upcoming features, and to provide clarification.
Please review the changes below and accept the updated terms in your account.
Read more New requirement for app updates in the European Union October 17, 2024
Starting today, in order to submit updates for apps on the App Store in the European Union (EU) Account Holders or Admins in the Apple Developer Program need to enter trader status in App Store Connect.
If you’re a trader, you’ll need to provide your trader information before you can submit your app for review.
Starting February 17, 2025, apps without trader status will be removed from the App Store in the EU until trader status is provided and verified in order to comply with the Digital Services Act.
Learn what a trader is and how to enter your status Apple Push Notification service server certificate update October 17, 2024
The Certification Authority (CA) for Apple Push Notification service (APNs) is changing.
APNs will update the server certificates in sandbox on January 20, 2025, and in production on February 24, 2025.
All developers using APNs will need to update their application’s Trust Store to include the new server certificate: SHA-2 Root : USERTrust RSA Certification Authority certificate.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

To ensure a smooth transition and avoid push notification delivery failures, please make sure that both old and new server certificates are included in the Trust Store before the cut-off date for each of your application servers that connect to sandbox and production.
At this time, you don’t need to update the APNs SSL provider certificates issued to you by Apple.
Announcing the Swift Student Challenge 2025 October 8, 2024
We’re thrilled to announce the Swift Student Challenge 2025.
The Challenge provides the next generation of student developers the opportunity to showcase their creativity and coding skills by building app playgrounds with Swift.Applications for the next Challenge will open in February 2025 for three weeks.We’ll select 350 Swift Student Challenge winners whose submissions demonstrate excellence in innovation, creativity, social impact, or inclusivity.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

From this esteemed group, we’ll name 50 Distinguished Winners whose work is truly exceptional and invite them to join us at Apple in Cupertino for three incredible days where they’ll gain invaluable insights from Apple experts and engineers, connect with their peers, and enjoy a host of unforgettable experiences.All Challenge winners will receive one year of membership in the Apple Developer Program, a special gift from Apple, and more.To help you get ready, we’re launching new coding resources, including Swift Coding Clubs designed for students to develop skills for a future career, build community, and get ready for the Challenge.Learn more Upcoming regional age ratings in Australia and France September 26, 2024
Apple is committed to making the App Store a safe place for everyone — especially kids.
Within the next few months, the following regional age ratings for Australia and France will be implemented in accordance with local laws.
No action is needed on your part.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Where required by local regulations, regional ratings will appear alongside Apple global age ratings.AustraliaApps with any instances of simulated gambling will display an R18+ regional age rating in addition to the Apple global age rating on the App Store in Australia.FranceApps with a 17+ Apple global age rating will also display an 18+ regional age rating on the App Store in France.Learn more about the age ratings Update on iPadOS 18 apps distributed in the European Union September 13, 2024
The App Review Guidelines have been revised to add iPadOS to Notarization.Starting September 16:
Users in the EU can download iPadOS apps on the App Store and through alternative distribution.
As mentioned in May, if you have entered into the Alternative Terms Addendum for Apps in the EU, iPadOS first annual installs will begin to accrue and the lower App Store commission rate will apply.
Alternative browser engines can be used in iPadOS apps.
Historical App Install Reports in App Store Connect that can be used with our fee calculator will include iPadOS.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

If you’ve entered into a previous version of the following agreements, be sure to sign the latest version, which supports iPadOS:
Alternative Terms Addendum for Apps in the EU
Web Browser Engine Entitlement Addendum for Apps in the EU
Embedded Browser Engine Entitlement Addendum for Apps in the EU
Learn more about the update on apps distributed in the EUTranslations of the guidelines will be available on the Apple Developer website within one month.
Win-back offers for auto-renewable subscriptions now available September 10, 2024
You can now configure win-back offers — a new type of offer for auto-renewable subscriptions — in App Store Connect.
Win-back offers allow you to reach previous subscribers and encourage them to resubscribe to your app or game.
For example, you can create a pay up front offer for a reduced subscription price of $9.99 for six months, with a standard renewal price of $39.99 per year.
Based on your offer configuration, Apple displays these offers to eligible customers in various places, including:
Across the App Store, including on your product page, as well as in personalized recommendations and editorial selections on the Today, Games, and Apps tabs.
In your app or game.
Via a direct link you share using your own marketing channels.
In Subscription settings.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

When creating win-back offers in App Store Connect, you’ll determine customer eligibility, select regional availability, and choose the discount type.
Eligible customers will be able to discover win-back offers this fall.Set up win-back offersLearn about win-back offers App Store submissions now open for the latest OS releases September 9, 2024
iOS 18, iPadOS 18, macOS Sequoia, tvOS 18, visionOS 2, and watchOS 11 will soon be available to customers worldwide.
Build your apps and games using the Xcode 16 Release Candidate and latest SDKs, test them using TestFlight, and submit them for review to the App Store.
You can now start deploying seamlessly to TestFlight and the App Store from Xcode Cloud.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

With exciting new features like watchOS Live Activities, app icon customization, and powerful updates to Swift, Siri, Controls, and Core ML, you can deliver even more unique experiences on Apple platforms.And beginning next month, you’ll be able to bring the incredible new features of Apple Intelligence into your apps to help inspire the way users communicate, work, and express themselves.Starting April 2025, apps uploaded to App Store Connect must be built with SDKs for iOS 18, iPadOS 18, tvOS 18, visionOS 2, or watchOS 11.Learn about submitting apps Price and tax updates for apps, In-App Purchases, and subscriptions August 29, 2024
The App Store is designed to make it easy to sell your digital goods and services globally, with support for 44 currencies across 175 storefronts.From time to time, we may need to adjust prices or your proceeds due to changes in tax regulations or foreign exchange rates.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

These adjustments are made using publicly available exchange rate information from financial data providers to help make sure prices for apps and In-App Purchases stay consistent across all storefronts.Price updatesOn September 16:
Pricing for apps and In-App Purchases¹ will be updated for the Chile, Laos, and Senegal storefronts if you haven’t selected one of these as the base for your app or In‑App Purchase.¹ These updates also consider value‑added tax (VAT) introductions listed in the “Tax updates” section below.
If you’ve selected the Chile, Laos, or Senegal storefront as the base for your app or In-App Purchase, prices won’t change.
On other storefronts, prices will be updated to maintain equalization with your chosen base price.Prices won’t change in any region if your In‑App Purchase is an auto‑renewable subscription and won’t change on the storefronts where you manually manage prices instead of using the automated equalized prices.The Pricing and Availability section of Apps has been updated in App Store Connect to display these upcoming price changes.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

As always, you can change the prices of your apps, In‑App Purchases, and auto‑renewable subscriptions at any time.Learn more about managing your pricesView or edit upcoming price changesEdit your app’s base country or regionPricing and availability start times by regionSet a price for an In-App PurchaseTax updatesAs of August 29:Your proceeds from the sale of eligible apps and In‑App Purchases have been modified in:
Laos: VAT introduction of 10%
Senegal: VAT introduction of 18%
India: Equalization levy of 2% no longer applicable
Exhibit B of the Paid Applications Agreement has been updated to indicate that Apple collects and remits applicable taxes in Laos and Senegal.Beginning in September:Your proceeds from the sale of eligible apps and In‑App Purchases will be modified in: Canada: Digital services tax introduction of 3%
Finland: VAT increase from 24% to 25.5%
Learn more about your proceedsView payments and proceedsDownload financial reports1: Excludes auto-renewable subscriptions.
It’s Glowtime.
August 26, 2024
Join us for a special Apple Event on September 9 at 10 a.m.
PT.
Watch on apple.com, Apple TV, or YouTube Live.
Upcoming changes to the browser choice screen, default apps, and app deletion for EU users August 22, 2024
By the end of this year, we’ll make changes to the browser choice screen, default apps, and app deletion for iOS and iPadOS for users in the EU.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

These updates come from our ongoing and continuing dialogue with the European Commission about compliance with the Digital Market Act’s requirements in these areas.Developers of browsers offered in the browser choice screen in the EU will have additional information about their browser shown to users who view the choice screen, and will get access to more data about the performance of the choice screen.
The updated choice screen will be shown to all EU users who have Safari set as their default browser.
For details about the changes coming to the browser choice screen, view About the browser choice screen in the EU.For users in the EU, iOS 18 and iPadOS 18 will also include a new Default Apps section in Settings that lists defaults available to each user.
In future software updates, users will get new default settings for dialing phone numbers, sending messages, translating text, navigation, managing passwords, keyboards, and call spam filters.
To learn more, view Update on apps distributed in the European Union.Additionally, the App Store, Messages, Photos, Camera, and Safari apps will now be deletable for users in the EU.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Upcoming requirements for app distribution in the European Union August 15, 2024
As a reminder, Account Holders or Admins in the Apple Developer Program need to enter trader status in App Store Connect for apps on the App Store in the European Union (EU) in order to comply with the Digital Services Act.Please note these new dates and requirements:
October 16, 2024: Trader status will be required to submit app updates.
If you’re a trader, you’ll need to provide your trader information before you can submit your app for review.
February 17, 2025: Apps without trader status will be removed from the App Store in the EU until trader status is provided and verified.
Learn what a trader is and how to enter your status Apple Entrepreneur Camp applications are now open August 13, 2024
Apple Entrepreneur Camp supports underrepresented founders and developers, and encourages the pipeline and longevity of these entrepreneurs in technology.
Attendees benefit from one-on-one code-level guidance, receive unprecedented access to Apple engineers and experts, and become part of the extended global network of Apple Entrepreneur Camp alumni.Applications are now open for female,* Black, Hispanic/Latinx, and Indigenous founders and developers.
And this year we’re thrilled to bring back our in-person programming at Apple in Cupertino.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

For those who can’t attend in person, we’re still offering our full program online.
We welcome established entrepreneurs with app-driven businesses to learn more about eligibility requirements and apply today.Apply by September 3, 2024.Learn more * Apple believes that gender expression is a fundamental right.
We welcome all women to apply to this program.
Updates to the StoreKit External Purchase Link Entitlement August 8, 2024
In response to the announcement by the European Commission in June, we’re making the following changes to Apple’s Digital Markets Act compliance plan.
We’re introducing updated terms that will apply this fall for developers with apps in the European Union storefronts of the App Store that use the StoreKit External Purchase Link Entitlement.
Key changes include:
Developers can communicate and promote offers for purchases available at a destination of their choice.
The destination can be an alternative app marketplace, another app, or a website, and it can be accessed outside the app or via a web view that appears in the app.
Developers may design and execute within their apps the communication and promotion of offers.
This includes providing information about prices of subscriptions or any other offer available both within or outside the app, and providing explanations or instructions about how to subscribe to offers outside the application.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

These communications must provide accurate information regarding the digital goods or services available for purchase.
Developers may choose to use an actionable link that can be tapped, clicked, or scanned, to take users to their destination.
Developers can use any number of URLs, without declaring them in the app’s Info.plist.
Links with parameters, redirects, and intermediate links to landing pages are permitted.
Updated business terms for apps with the External Purchase Link Entitlement are being introduced to align with the changes to these capabilities.
Learn more by visiting Alternative payment options on the App Store in the European Union or request a 30-minute online consultation to ask questions and provide feedback about these changes.
Updates to runtime protection in macOS Sequoia August 6, 2024
In macOS Sequoia, users will no longer be able to Control-click to override Gatekeeper when opening software that isn’t signed correctly or notarized.
They’ll need to visit System Settings > Privacy & Security to review security information for software before allowing it to run.If you distribute software outside of the Mac App Store, we recommend that you submit your software to be notarized.
The Apple notary service automatically scans your Developer ID-signed software and performs security checks.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

When your software is ready for distribution, it’s assigned a ticket to let Gatekeeper know it’s been notarized so customers can run it with confidence.Learn how to notarize your macOS software Updated guidelines now available August 1, 2024
The App Review Guidelines have been revised to support updated policies and upcoming features, and to provide clarification.
Updated 4.7 to clarify that PC emulator apps can offer to download games.
Added 4.7, 4.7.2, and 4.7.3 to Notarization.
View the App Review GuidelinesGet resources and support to prepare for App Review Translations of the guidelines will be available on the Apple Developer website within one month.
Alternative payment options in the EU in visionOS 1.2 July 1, 2024
Alternative payment options are now supported starting in visionOS 1.2 for apps distributed on the App Store in the EU.Learn about alternative payments in the EU Changes for apps in the EU now available in iPadOS 18 beta 2 June 24, 2024
The changes for apps in the European Union (EU), currently available to iOS users in the 27 EU member countries, can now be tested in iPadOS 18 beta 2 with Xcode 16 beta 2.Also, the Web Browser Engine Entitlement Addendum for Apps in the EU and Embedded Browser Engine Entitlement Addendum for Apps in the EU now include iPadOS.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

If you’ve already entered into either of these addendums, be sure to sign the updated terms.Learn more about the recent changes:
Web Distribution
Alternative marketplaces
Alternative browser engines The App Store on Apple Vision Pro expands to new markets June 18, 2024
Apple Vision Pro will launch in China mainland, Hong Kong, Japan, and Singapore on June 28 and in Australia, Canada, France, Germany, and the United Kingdom on July 12.
Your apps and games will be automatically available on the App Store in regions you’ve selected in App Store Connect.If you’d like, you can:
Manage the availability of your visionOS apps and compatible iPhone or iPad apps at any time.
Request to have your app evaluated directly on Apple Vision Pro.
Localize your product page metadata for local audiences.
You can also learn how to build native apps to fully take advantage of exciting visionOS features.
Upcoming regional age ratings in Australia and South Korea June 18, 2024
Apple is committed to making sure that the App Store is a safe place for everyone — especially kids.
Within the next few months, you’ll need to indicate in App Store Connect if your app includes loot boxes available for purchase.
In addition, a regional age rating based on local laws will automatically appear on the product page of the apps listed below on the App Store in Australia and South Korea.
No other action is needed.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Regional age ratings appear in addition to Apple global age ratings.AustraliaA regional age rating is shown if Games is selected as the primary or secondary category in App Store Connect.
15+ regional age rating: Games with loot boxes available for purchase.
18+ regional age rating: Games with Frequent/Intense instances of Simulated Gambling indicated in App Store Connect.
South KoreaA regional age rating is shown if either Games or Entertainment is selected as the primary or secondary category in App Store Connect, or if the app has Frequent/Intense instances of Simulated Gambling in any category.
KR-All regional age rating: Apps and games with an Apple global age rating of 4+ or 9+.
KR-12 regional age rating: Apps and games with an Apple global age rating of 12+.
Certain apps and games in this group may receive a KR-15 regional age rating from the South Korean Games Ratings and Administration Committee (GRAC).
If this happens, App Review will reach out to impacted developers.
Certain apps and games may receive a KR-19 regional age rating from the GRAC.
Instead of a pictogram, text will indicate this rating.
WWDC24 resources and survey June 14, 2024
Thank you to everyone who joined us for an amazing week.
We hope you found value, connection, and fun.
You can continue to: Watch sessions at any time.
Check out session highlights.
Read about newly announced technologies.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Get sample code from sessions.
Dive into new and updated documentation.
We’d love to know what you thought of this year’s conference.
If you’d like to tell us about your experience, please complete the WWDC24 survey.
Take the survey Find out what’s new and download beta releases June 10, 2024
Discover the latest advancements across Apple platforms, including the all-new Apple Intelligence, that can help you create even more powerful, intuitive, and unique experiences.To start exploring and building with the latest features, download beta versions of Xcode 16, iOS 18, iPadOS 18, macOS 15, tvOS 18, visionOS 2, and watchOS 11.Learn about installing beta softwareLearn about sharing feedback WWDC24 sessions schedule, lab requests, guides, and documentation now available June 10, 2024
WWDC24 is here!
Here’s how to make the most of your week:
Watch daily sessions.
Request one-on-one online lab appointments with Apple experts.
Check out curated guides to the week’s biggest announcements.
Dive into new and updated documentation.
Learn more Updated agreements and guidelines now available June 10, 2024
The App Review Guidelines, Apple Developer Program License Agreement, and Apple Developer Agreement have been updated to support updated policies and upcoming features, and to provide clarification.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Please review the changes below and accept the updated terms as needed.App Review Guidelines
2.1(a): Added to Notarization.
2.1(b): Added requirement to explain why configured in-app items cannot be found or reviewed in your app to your review notes.
2.5.8: We will no longer reject apps that simulate multi-app widget experiences.
4.6: This guideline has been removed.
Apple Developer Agreement
Sections 1, 6(B): Updated “Apple ID” to “Apple Account.”
Section 16(A): Clarified export compliance requirements.
Section 18: Updated terminology for government end users.
Developer Program License Agreement
Definitions, Section 2.1, 3.3.6(C), 3.3.10(A), 14.2(C), Attachment 9, Schedules 1-3: Updated “Apple ID” to “Apple Account.”
Definitions: Clarified definition of Apple Maps Service.
Definitions, Section 3.3.6(F): Specified requirements for using the Apple Music Feed API.
Definitions, Section 3.3.8(F): Added terms for use of the Now Playing API.
Section 3.2(h): Added terms for use of Apple Software and Services.
Section 6.5: Added terms for use of TestFlight.
Section 7.7: Added terms on customization of icons.
Section 11.2(f), 14.8(A): Clarified export compliance requirements.
Section 14.9: Updated terminology for government end users.
Attachment 5, Section 3.1: Added terms for use of Wallet pass templates.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Please sign in to your account to review and accept the updated terms.View all agreements and guidelinesTranslations of the terms will be available on the Apple Developer website within one month.
Price and tax updates for apps, In-App Purchases, and subscriptions June 6, 2024
The App Store is designed to make it easy to sell your digital goods and services globally, with support for 44 currencies across 175 storefronts.From time to time, we may need to adjust prices or your proceeds due to changes in tax regulations or foreign exchange rates.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

These adjustments are made using publicly available exchange rate information from financial data providers to help make sure prices for apps and In-App Purchases stay consistent across all storefronts.Price updatesOn June 21, pricing for apps and In-App Purchases¹ will be updated for the Egypt, Ivory Coast, Nepal, Nigeria, Suriname, and Zambia storefronts if you haven’t selected one of these as the base for your app or In‑App Purchase.¹ These updates also consider the following value‑added tax (VAT) changes:
Ivory Coast: VAT introduction of 18%
Nepal: VAT introduction of 13% and digital services tax of 2%
Suriname: VAT introduction of 10%
Zambia: VAT introduction of 16%
Prices won’t change on the Egypt, Ivory Coast, Nepal, Nigeria, Suriname, or Zambia storefront if you’ve selected that storefront as the base for your app or In-App Purchase.¹ Prices on other storefronts will be updated to maintain equalization with your chosen base price.Prices won’t change in any region if your In‑App Purchase is an auto‑renewable subscription and won’t change on the storefronts where you manually manage prices instead of using the automated equalized prices.The Pricing and Availability section of Apps has been updated in App Store Connect to display these upcoming price changes.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

As always, you can change the prices of your apps, In‑App Purchases, and auto‑renewable subscriptions at any time.Learn more about managing your pricesView or edit upcoming price changesEdit your app’s base country or regionPricing and availability start times by regionSet a price for an In-App PurchaseTax updatesYour proceeds for sales of apps and In-App Purchases will change to reflect the new tax rates and updated prices.
Exhibit B of the Paid Applications Agreement has been updated to indicate that Apple collects and remits applicable taxes in Ivory Coast, Nepal, Suriname, and Zambia.As of today, June 6, your proceeds from the sale of eligible apps and In‑App Purchases have been modified in the following countries to reflect introductions of or changes in tax rates.
France: Digital services tax no longer applicable
Ivory Coast: VAT introduction of 18%
Malaysia: Sales and Service Tax (SST) increased to 8% from 6%
Nepal: VAT introduction of 13% and digital services tax introduction of 2%
Norway: VAT increased to 20% from 0% for certain Norwegian news publications
Suriname: VAT introduction of 10%
Uganda: Digital services tax introduction of 5%
Zambia: VAT introduction of 16%
Learn more about your proceedsView payments and proceedsDownload financial reportsTax categoriesThe Fitness and Health category has a new attribute: “Content is primarily accessed through streaming”.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

If this is relevant to your apps or In-App Purchases that offer fitness video streaming, review and update your selections in the Pricing and Availability section of Apps in App Store Connect.Learn about setting tax categories1: Excludes auto-renewable subscriptions.
Introducing the 2024 Apple Design Award winners June 6, 2024
Every year, the Apple Design Awards recognize innovation, ingenuity, and technical achievement in app and game design.
The incredible developers behind this year’s finalists have shown what can be possible on Apple platforms — and helped lay the foundation for what’s to come.We’re thrilled to present the winners of the 2024 Apple Design Awards.Meet this year’s winners Action packed.
June 3, 2024
One week to go.
Don’t miss the exciting reveal of the latest Apple software and technologies.Keynote kicks off at 10 a.m.
PT on June 10.Add to calendarJoin us for the Platforms State of the Union at 1 p.m.
PT on June 10.Add to calendarLearn more Introducing the 2024 Apple Design Award finalists May 28, 2024
Every year, the Apple Design Awards recognize innovation, ingenuity, and technical achievement in app and game design.
But they’ve also become something more: A moment to step back and celebrate the Apple developer community in all its many forms.
Meet this year’s finalists Coming in swiftly.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

May 28, 2024
Join the worldwide developer community for an incredible week of technology and creativity — all online and free.
WWDC24 takes place from June 10-14.Get ready Check out the new Apple Developer Forums May 23, 2024
The Apple Developer Forums have been redesigned for WWDC24 to help developers connect with Apple experts, engineers, and each other to find answers and get advice.
Apple Developer Relations and Apple engineering are joining forces to field your questions and work to solve your technical issues.
You’ll have access to an expanded knowledge base and enjoy quick response times — so you can get back to creating and enhancing your app or game.
Plus, Apple Developer Program members now have priority access to expert advice on the forums.
Check out the new forums What’s new for apps distributed in the European Union May 2, 2024
Core Technology Fee (CTF)The CTF is an element of the alternative business terms in the EU that reflects the value Apple provides developers through tools, technologies, and services that enable them to build and share innovative apps.
We believe anyone with a good idea and the ingenuity to bring it to life should have the opportunity to offer their app to the world.
Only developers who reach significant scale (more than one million first annual installs per year in the EU) pay the CTF.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Nonprofit organizations, government entities, and educational institutions approved for a fee waiver don’t pay the CTF.
Today, we’re introducing two additional conditions in which the CTF is not required:
First, no CTF is required if a developer has no revenue whatsoever.
This includes creating a free app without monetization that is not related to revenue of any kind (physical, digital, advertising, or otherwise).
This condition is intended to give students, hobbyists, and other non-commercial developers an opportunity to create a popular app without paying the CTF.
Second, small developers (less than €10 million in global annual business revenue*) that adopt the alternative business terms receive a 3-year free on-ramp to the CTF to help them create innovative apps and rapidly grow their business.
Within this 3-year period, if a small developer that hasn’t previously exceeded one million first annual installs crosses the threshold for the first time, they won’t pay the CTF, even if they continue to exceed one million first annual installs during that time.
If a small developer grows to earn global revenue between €10 million and €50 million within the 3-year on-ramp period, they’ll start to pay the CTF after one million first annual installs up to a cap of €1 million per year.
iPadOSThis week, the European Commission designated iPadOS a gatekeeper platform under the Digital Markets Act.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Apple will bring our recent iOS changes for apps in the European Union (EU) to iPadOS later this fall, as required.
Developers can choose to adopt the Alternative Terms Addendum for Apps in the EU that will include these additional capabilities and options on iPadOS, or stay on Apple’s existing terms.Once these changes are publicly available to users in the EU, the CTF will also apply to iPadOS apps downloaded through the App Store, Web Distribution, and/or alternative marketplaces.
Users who install the same app on both iOS and iPadOS within a 12-month period will only generate one first annual install for that app.
To help developers estimate any potential impact on their app businesses under the Alternative Terms Addendum for Apps in the EU, we’ve updated the App Install reports in App Store Connect that can be used with our fee calculator.For more details, visit Understanding the Core Technology Fee for iOS apps in the European Union.
If you’ve already entered into the Alternative Terms Addendum for Apps in the EU, be sure to sign the updated terms.Global business revenue takes into account revenue across all commercial activity, including from associated corporate entities.
For additional details, read the Alternative Terms Addendum for Apps in the EU.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Reminder: Privacy requirement for app submissions starts May 1 April 26, 2024
The App Store was created to be a safe place for users to discover and get millions of apps all around the world.
Over the years, we‘ve built many critical privacy and security features that help protect users and give them transparency and control — from Privacy Nutrition Labels to app tracking transparency, and so many more.An essential requirement of maintaining user trust is that developers are responsible for all of the code in their apps, including code frameworks and libraries from other sources.
That‘s why we’ve created privacy manifests and signature requirements for the most popular third-party SDKs, as well as required reasons for covered APIs.Starting May 1, 2024, new or updated apps that have a newly added third-party SDK that‘s on the list of commonly used third-party SDKs will need all of the following to be submitted in App Store Connect:
Required reasons for each listed API
Privacy manifests
Valid signatures when the SDK is added as a binary dependency
Apps won’t be accepted if they fail to meet the manifest and signature requirements.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Apps also won’t be accepted if all of the following apply:
They’re missing a reason for a listed API
The code is part of a dynamic framework embedded via the Embed Frameworks build phase
The framework is a newly added third-party SDK that’s on the list of commonly used third-party SDKs
In the future, these required reason requirements will expand to include the entire app binary.
If you’re not using an API for an approved reason, please find an alternative.
These changes are designed to help you better understand how third-party SDKs use data, secure software dependencies, and provide additional privacy protection for users.This is a step forward for all apps and we encourage all SDKs to adopt this functionality to better support the apps that depend on them.
Apple Search Ads now available in Brazil and more Latin American markets April 23, 2024
Drive discovery and downloads on the App Store with Apple Search Ads in 70 countries and regions, now including Brazil, Bolivia, Costa Rica, the Dominican Republic, El Salvador, Guatemala, Honduras, Panama, and Paraguay.Visit the Apple Search Ads site and Q&A.And explore best practices to improve your campaign performance with the free Apple Search Ads Certification course.
Let loose.
April 23, 2024
Watch the May 7 event at apple.com, on Apple TV, or on YouTube Live.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Check out our newest developer activities April 19, 2024
Join us around the world to learn about growing your business, elevating your app design, and preparing for the App Review process.
Here’s a sample of our new activities — and you can always browse the full schedule to find more.
Expand your app to new markets: Learn how to bring your apps and games to Southeast Asia, Hong Kong, and Taiwan in new online sessions with App Store experts.
Request a one-on-one App Review consultation: Meet online to discuss the App Review Guidelines and explore best practices for a smooth review process.
Visit the Apple Vision Pro developer labs: Test, refine, and optimize your apps and games for the infinite canvas — with in-person help from Apple.
Request a design or technology consultation: In this 30-minute online consultation, you’ll get expert advice tailored to your app or game.
Browse the full schedule Web Distribution now available in iOS 17.5 beta 2 and App Store Connect April 16, 2024
Web Distribution lets authorized developers distribute their iOS apps to users in the European Union (EU) directly from a website owned by the developer.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Apple will provide developers access to APIs that facilitate the distribution of their apps from the web, integrate with system functionality, and back up and restore users’ apps, once they meet certain requirements designed to help protect users and platform integrity.
For details, visit Getting started with Web Distribution in the EU.
Get ready with the latest beta releases April 5, 2024
The beta versions of iOS 17.5, iPadOS 17.5, macOS 14.5, tvOS 17.5, visionOS 1.2, and watchOS 10.5 are now available.
Get your apps ready by confirming they work as expected on these releases.
And to take advantage of the advancements in the latest SDKs, make sure to build and test with Xcode 15.3.View downloads and release notes
Learn about testing a beta OS
Learn about sending feedback Updated App Review Guidelines now available April 5, 2024
The App Review Guidelines have been revised to support updated policies, upcoming features, and to provide clarification.
The following guidelines have been updated:
3.1.1(a): Updated to include Music Streaming Services Entitlements.
4.7: Added games from retro game console emulator apps to the list of permitted software, and clarifies that mini apps and mini games must be HTML5.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

View guidelines WWDC24: June 10-14 March 26, 2024
Join the worldwide developer community online for a week of technology and creativity.Be there for the unveiling of the latest Apple platforms, technologies, and tools.
Learn how to create and elevate your apps and games.
Engage with Apple designers and engineers and connect with the worldwide developer community.
All online and at no cost.Learn more Provide your trader status in App Store Connect March 21, 2024
To align with the Digital Services Act (DSA) in the European Union (EU), Account Holders and Admins in the Apple Developer Program can now enter their trader status in App Store Connect.Submission requirementsYou’ll need to let us know whether or not you’re a trader to submit new apps to the App Store.
If you’re a trader, you may be asked for documentation that verifies your trader contact information.
More options for apps distributed in the European Union March 12, 2024
We’re providing more flexibility for developers who distribute apps in the European Union (EU), including introducing a new way to distribute apps directly from a developer’s website.More flexibilityDevelopers who’ve agreed to the Alternative Terms Addendum for Apps in the EU have new options for their apps in the EU:
Alternative app marketplaces.
Marketplaces can choose to offer a catalog of apps solely from the developer of the marketplace.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Linking out to purchase.
When directing users to complete a transaction for digital goods or services on an external webpage, developers can choose how to design promotions, discounts, and other deals.
The Apple-provided design templates, which are optimized for key purchase and promotional use cases, are now optional.
Distributing directly from your websiteWeb Distribution, available with a software update later this spring, will let authorized developers distribute their iOS apps to EU users directly from a website owned by the developer.
Apple will provide authorized developers access to APIs that facilitate the distribution of their apps from the web, integrate with system functionality, back up and restore users’ apps, and more.
For details, visit Getting ready for Web Distribution in the EU.
New App Store and iOS data analytics now available March 5, 2024
We’re expanding the analytics available for your apps to help you get even more insight into your business and apps’ performance.Over 50 new reports are now available through the App Store Connect API to help you analyze your apps’ App Store and iOS performance.
These reports include hundreds of new metrics that can enable you to evaluate your performance and find opportunities for improvement.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Reports are organized into the following categories:
App Store Engagement — the number of users on the App Store interacting with a developer’s app or sharing it with others
App Store Commerce — downloads, sales, pre-orders, and transactions made with the secure App Store In-App Purchase system
App Usage — active devices, installs, app deletions, and more
Frameworks Usage — an app’s interaction with OS capabilities, such as PhotoPicker and Widgets
Performance — how your apps perform and how users interact with specific features
Additionally, new reports are also available through the CloudKit console with data about Apple Push Notifications and File Provider.
Apple Push Notifications — notification states as they pass through the Apple Push Notification service (APNs)
File Provider — usage, consistency, and error data Updates to app distribution in the European Union March 5, 2024
Over the past several weeks, we’ve communicated with thousands of developers to discuss DMA-related changes to iOS, Safari, and the App Store impacting apps in the European Union.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

As a result of the valuable feedback received, we’ve revised the Alternative Terms Addendum for Apps in the EU to update the following policies and provide developers more flexibility:
Decisioning by membership: To make it easier for more developers to sign up for the new terms, we’ve removed the corporate entity requirement that the Addendum must be signed by each membership that controls, is controlled by, or is under control with another membership.
This means an entity can now choose to sign up for the new terms at the developer account level.
Switching back: To help reduce the risk of unexpected business changes under the new terms, such as reaching massive scale more quickly than anticipated, or if you simply change your mind, we’ve created a one-time option to terminate the Addendum under certain circumstances and switch back to Apple’s standard business terms for your EU apps.
For details, view the Addendum.
Alternative app marketplace requirements: To make it easier for developers who want to create alternative app marketplaces, we’ve added a new eligibility criteria that lets developers qualify without a stand-by letter of credit.
For details, view the marketplace support page.
If you’ve already entered into the Addendum, you can sign the updated version here.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

The latest OS Release Candidates are now available March 5, 2024
You can now submit your apps and games built with Xcode 15.3 and all the latest SDKs for iOS 17.4, iPadOS 17.4, macOS 14.4, tvOS 17.4, visionOS 1.1, and watchOS 10.4.Developers who have agreed to the Alternative Terms Addendum for Apps in the EU can now submit apps offering alternative payment options in the EU.
They can also now measure the number of first annual installs their apps have accumulated.If you’d like to discuss changes to iOS, Safari, and the App Store impacting apps in the EU to comply with the Digital Markets Act, request a 30-minute online consultation with an Apple team member.
Updated App Review Guidelines now available March 5, 2024
The App Store Review Guidelines have been revised to support updated policies, upcoming features, and to provide clarification.
The title of the document has been changed to App Review Guidelines.
The Introduction section explains that in the European Union, developers can also distribute notarized iOS apps from alternative app marketplaces.
This section provides links to further information about alternative app marketplaces and Notarization for iOS apps.
The following guidelines have been updated:
2.3.1: Added that a violation of this rule is grounds for an app being blocked from installing via alternative distribution.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

2.3.10: Added that developers cannot include names, icons, or imagery of other mobile platforms or alternative app marketplaces in their apps or metadata, unless there is specific, approved interactive functionality.
3.1.3(b): Added a link to 3.1.1 to make clear that 3.1.1(a) applies, and multiplatform services apps can use the 3.1.1(a) entitlement.
4.8 Login Services: Updated to make clear that the login service cannot collect interactions with your app for advertising purposes without consent.
It also adds that another login service is not required if your app is an alternative app marketplace, or an app distributed from an alternative app marketplace, that uses a marketplace-specific login for account, download, and commerce features.
5.1.1(viii): Added that apps that compile personal information from any source that is not directly from the user or without the user’s explicit consent, even public databases, are not permitted on alternative app marketplaces.
5.4 and 5.5: Updated to state that apps that do not comply with these guidelines will be blocked from installing via alternative distribution.
Bug Fix Submissions: Added that bug fixes will not be delayed for apps that are already on alternative app marketplaces, except for those related to legal or safety issues.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

View the App Review Guidelines Translations of the guidelines will be available on the Apple Developer website within one month.
Privacy updates for App Store submissions February 29, 2024
Developers are responsible for all code included in their apps.
At WWDC23, we introduced new privacy manifests and signatures for commonly used third-party SDKs and announced that developers will need to declare approved reasons for using a set of APIs in their app’s privacy manifest.
These changes help developers better understand how third-party SDKs use data, secure software dependencies, and provide additional privacy protection for users.Starting March 13: If you upload a new or updated app to App Store Connect that uses an API requiring approved reasons, we’ll send you an email letting you know if you’re missing reasons in your app’s privacy manifest.
This is in addition to the existing notification in App Store Connect.Starting May 1: You’ll need to include approved reasons for the listed APIs used by your app’s code to upload a new or updated app to App Store Connect.
If you’re not using an API for an allowed reason, please find an alternative.
And if you add a new third-party SDK that’s on the list of commonly used third-party SDKs, these API, privacy manifest, and signature requirements will apply to that SDK.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Make sure to use a version of the SDK that includes its privacy manifest and note that signatures are also required when the SDK is added as a binary dependency.This functionality is a step forward for all apps and we encourage all SDKs to adopt it to better support the apps that depend on them.
App submissions now open for the latest OS releases February 28, 2024
Submit in App Store ConnectiOS 17.4, iPadOS 17.4, macOS 14.4, tvOS 17.4, visionOS 1.1, and watchOS 10.4 will soon be available to customers worldwide.
Build your apps and games using the Xcode 15.3 Release Candidate and latest SDKs, then test them using TestFlight.
You can submit your iPhone and iPad apps today.Apps in the European UnionDevelopers who’ve agreed to the Alternative Terms Addendum for Apps in the EU can set up marketplace distribution in the EU.
Eligible developers can also submit marketplace apps and offer apps with alternative browser engines.Once these platform versions are publicly available:
First annual installs for the Core Technology Fee begin accruing and the new commission rates take effect for these developers.
Apps offering alternative payment options in the EU will be accepted in App Store Connect.
In the meantime, you can test in the sandbox environment.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

If you’d like to discuss changes to iOS, Safari, and the App Store impacting apps in the EU to comply with the Digital Markets Act, request a 30-minute online consultation to meet with an Apple team member.
In addition, if you’re interested in getting started with operating an alternative app marketplace on iOS in the EU, you can request to attend an in-person lab in Cork, Ireland.Sign in to App Store Connect Developer activities you’ll love February 14, 2024
Apple developer activities are in full swing.
Here’s a look at what’s happening:
Join an online session to learn to minimize churn and win back subscribers hosted by App Store experts.
Celebrate International Women’s Day with special in-person activities in Bengaluru, Cupertino, Shanghai, Singapore, Sydney, and Tokyo.
Visit an Apple Vision Pro developer lab in Cupertino, London, Munich, Singapore, Sydney, or Tokyo to test and refine your apps for the infinite canvas.
Meet with an Apple team member to discuss changes to iOS, Safari, and the App Store impacting apps in the European Union to comply with the Digital Markets Act.
And we’ll have lots more activities in store — online, in person, and in multiple languages — all year long.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Browse the schedule Updates to support app distribution changes in the European Union February 8, 2024
We recently announced changes to iOS, Safari, and the App Store impacting developers’ apps in the European Union (EU) to comply with the Digital Markets Act (DMA), supported by more than 600 new APIs, a wide range of developer tools, and related documentation.
And we’re continuing to provide new ways for developers to understand and utilize these changes, including:
Online consultations to discuss alternative distribution on iOS, alternative payments on the App Store, linking out to purchase on their webpage, new business terms, and more.
Labs to help develop alternative app marketplaces on iOS.
Developers who have agreed to the new business terms can now use new features in App Store Connect and the App Store Connect API to set up marketplace distribution and marketplace apps, and use TestFlight to beta test these features.
TestFlight also supports apps using alternative browser engines, and alternative payments through payment service providers and linking out to a webpage.And soon, you’ll be able to view expanded app analytics reports for the App Store and iOS.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

App Store Connect upload requirement starts April 29 February 6, 2024
Apps uploaded to App Store Connect must be built with Xcode 15 for iOS 17, iPadOS 17, tvOS 17, or watchOS 10, starting April 29, 2024.Learn about submitting your apps Apply for the Swift Student Challenge now through February 25 February 5, 2024
Every year, the Swift Student Challenge aims to inspire students to create amazing app playgrounds that can make life better for their communities — and beyond.Have an app idea that’s close to your heart?
Now’s your chance to make it happen.
Build an app playground and submit by February 25.All winners receive a year of complimentary membership in the Apple Developer Program and other exclusive awards.
And for the first time ever, we’ll award a select group of Distinguished Winners a trip to Apple Park for an incredible in-person experience.Apply now Request a consultation about the changes to apps distributed in the European Union February 1, 2024
Meet with an Apple team member to discuss changes to iOS, Safari, and the App Store impacting apps in the European Union to comply with the Digital Markets Act.
Topics include alternative distribution on iOS, alternative payments in the App Store, linking out to purchase on your webpage, new business terms, and more.Request a 30-minute online consultation to ask questions and provide feedback about these changes.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

In addition, if you’re interested in getting started with operating an alternative app marketplace on iOS in the European Union, you can request to attend an in-person lab in Cork, Ireland.
Price and tax updates for apps, in-app purchases, and subscriptions January 30, 2024
The App Store is designed to make it easy to sell your digital goods and services globally, with support for 44 currencies across 175 storefronts.
Read more Get ready with the latest beta releases January 30, 2024
The beta versions of iOS 17.4, iPadOS 17.4, macOS 14.4, tvOS 17.4, and watchOS 10.4 are now available.
Get your apps ready by confirming they work as expected on these releases.
And to take advantage of the advancements in the latest SDKs, make sure to build and test with Xcode 15.3 beta.View downloads and release notes
Learn about testing a beta OS
Learn about sending feedback Apple introduces new options worldwide for streaming game services and apps that provide access to mini apps and games January 25, 2024
New analytics reports coming in March for developers everywhere Developers can also enable new sign-in options for their apps Today, Apple is introducing new options for how apps globally can deliver in-app experiences to users, including streaming games and mini-programs.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Developers can now submit a single app with the capability to stream all of the games offered in their catalog.Apps will also be able to provide enhanced discovery opportunities for streaming games, mini-apps, mini-games, chatbots, and plug-ins that are found within their apps.Additionally, mini-apps, mini-games, chatbots, and plug-ins will be able to incorporate Apple’s In-App Purchase system to offer their users paid digital content or services for the first time, such as a subscription for an individual chatbot.Each experience made available in an app on the App Store will be required to adhere to all App Store Review Guidelines and its host app will need to maintain an age rating of the highest age-rated content included in the app.The changes Apple is announcing reflect feedback from Apple’s developer community and is consistent with the App Store’s mission to provide a trusted place for users to find apps they love and developers everywhere with new capabilities to grow their businesses.
Apps that host this content are responsible for ensuring all the software included in their app meets Apple’s high standards for user experience and safety.New app analyticsApple provides developers with powerful dashboards and reports to help them measure their apps’ performance through App Analytics, Sales and Trends, and Payments and Financial Reports.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Today, Apple is introducing new analytics for developers everywhere to help them get even more insight into their businesses and their apps’ performance, while maintaining Apple’s long-held commitment to ensure users are not identifiable at an individual level.Over 50 new reports will be available through the App Store Connect API to help developers analyze their app performance and find opportunities for improvement with more metrics in areas like:Engagement — with additional information on the number of users on the App Store interacting with a developer’s app or sharing it with others;Commerce — with additional information on downloads, sales and proceeds, pre-orders, and transactions made with the App Store’s secure In-App Purchase system;App usage — with additional information on crashes, active devices, installs, app deletions, and more.Frameworks usage — with additional information on an app’s interaction with OS functionality such as PhotoPicker, Widgets, and CarPlay.Additional information about report details and access will be available for developers in March.Developers will have the ability to grant third-party access to their reports conveniently through the API.More flexibility for sign in options in appsIn line with Apple’s mission to protect user privacy, Apple is updating its App Store Review Guideline for using Sign in with Apple.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Sign in with Apple makes it easy for users to sign in to apps and websites using their Apple ID and was built from the ground up with privacy and security in mind.
Starting today, developers that offer third-party or social login services within their app will have the option to offer Sign in with Apple, or they will now be able to offer an equivalent privacy-focused login service instead.
Update on apps distributed in the European Union January 25, 2024
We’re sharing some changes to iOS, Safari, and the App Store, impacting developers’ apps in the European Union (EU) to comply with the Digital Markets Act (DMA).
These changes create new options for developers who distribute apps in any of the 27 EU member states, and do not apply to apps distributed anywhere else in the world.
These options include how developers can distribute apps on iOS, process payments, use web browser engines in iOS apps, request interoperability with iPhone and iOS hardware and software features, access data and analytics about their apps, and transfer App Store user data.If you want nothing to change for you — from how the App Store works currently in the EU and in the rest of the world — no action is needed.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

You can continue to distribute your apps only on the App Store and use its private and secure In-App Purchase system.Learn about the updates Updated App Store Review Guidelines now available January 25, 2024
The App Store Review Guidelines have been revised to support updated policies, upcoming features, and to provide clarification.
We’ve added notations to all guidelines to indicate which guidelines only apply to Notarization for iOS apps in EU, and which guidelines additionally apply to apps distributed on the App Store.
Read more Swift Student Challenge applications open February 5 January 23, 2024
We’re so excited applications for the Swift Student Challenge 2024 will open on February 5.Looking for some inspiration?
Learn about past Challenge winners to gain insight into the motivations behind their apps.Just getting started?
Get tools, tips, and guidance on everything you need to create an awesome app playground.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

StoreKit and review guideline update January 16, 2024
Starting today, because of a recent United States Court decision, App Store Review Guideline 3.1.1 has been updated to introduce the StoreKit Purchase Link Entitlement (US), which allows apps that offer in-app purchases in the iOS or iPadOS App Store on the United States storefront the ability to include a link to the developer’s website that informs users of other ways to purchase digital goods or services.We believe Apple’s in-app purchase system is the most convenient, safe, and secure way for users to purchase digital goods and services.
If you’re considering using this entitlement along with in‑app purchase, which continues to be required for the purchase of digital goods and services within your app — it’s important to understand that some App Store features, such as Ask to Buy or Family Sharing, won’t be available to your customers when they make purchases on your website.
Apple also won’t be able to assist customers with refunds, purchase history, subscription management, and other issues encountered when purchasing digital goods and services.
You will be responsible for addressing such issues with customers.A commission will apply to digital purchases facilitated through the StoreKit Purchase Link Entitlement (US).

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

For additional details on commissions, requesting the entitlement, usage guidelines, and implementation details, view our support page.
Submit your apps to the App Store for Apple Vision Pro January 8, 2024
Apple Vision Pro will have a brand-new App Store, where people can discover and download incredible apps for visionOS.
Whether you’ve created a new visionOS app or are making your existing iPad or iPhone app available on Apple Vision Pro, here’s everything you need to know to prepare and submit your app to the App Store.Find out more Updated Apple Developer Program License Agreement now available December 22, 2023
The Apple Developer Program License Agreement has been revised to support updated policies and provide clarification.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

The revisions include: Definitions, Section 3.3.3(N): Updated "Tap to Present ID" to "ID Verifier" Definitions, Section 14.10: Updated terms regarding governing law and venue Section 3.3: Reorganized and categorized provisions for clarity Section 3.3.3(B): Clarified language on privacy and third-party SDKs Section 6.7: Updated terms regarding analytics Section 12: Clarified warranty disclaimer language Attachment 1: Updated terms for use of Apple Push Notification Service and Local Notifications Attachment 9: Updated terms for Xcode Cloud compute hours included with Apple Developer Program membership View full terms and conditions Announcing contingent pricing for subscriptions December 15, 2023
Contingent pricing for subscriptions on the App Store — a new feature that helps you attract and retain subscribers — lets you give customers a discounted subscription price as long as they’re actively subscribed to a different subscription.
It can be used for subscriptions from one developer or two different developers.
We’re currently piloting this feature and will be onboarding more developers in the coming months.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

If you’re interested in implementing contingent pricing in your app, you can start planning today and sign up to get notified when more details are available in January.Learn about contingent pricing and sign up to get notified Get ready with the latest beta releases December 14, 2023
The beta versions of iOS 17.3, iPadOS 17.3, macOS 14.3, tvOS 17.3, and watchOS 10.3 are now available.
Get your apps ready by confirming they work as expected on these releases.
And to take advantage of the advancements in the latest SDKs, make sure to build and test with Xcode 15.2 beta.View downloads and release notes
Learn about testing a beta OS
Learn about sending feedback 25 hours of Xcode Cloud now included with the Apple Developer Program December 7, 2023
Xcode Cloud, the continuous integration and delivery service built into Xcode, accelerates the development and delivery of high-quality apps.
It brings together cloud-based tools that help you build apps, run automated tests in parallel, deliver apps to testers, and view and manage user feedback.We’re pleased to announce that as of January 2024, all Apple Developer Program memberships will include 25 compute hours per month on Xcode Cloud as a standard, with no additional cost.
If you’re already subscribed to Xcode Cloud for free, no additional action is required on your part.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

And if you haven’t tried Xcode Cloud yet, now is the perfect time to start building your app for free in just a few minutes.
Learn more about Xcode Cloud Privacy updates for App Store submissions December 7, 2023
Third-party SDK privacy manifest and signatures.
Third-party software development kits (SDKs) can provide great functionality for apps; they can also have the potential to impact user privacy in ways that aren’t obvious to developers and users.
As a reminder, when you use a third-party SDK with your app, you are responsible for all the code the SDK includes in your app, and need to be aware of its data collection and use practices.
At WWDC23, we introduced new privacy manifests and signatures for SDKs to help app developers better understand how third-party SDKs use data, secure software dependencies, and provide additional privacy protection for users.
Starting in spring 2024, if your new app or app update submission adds a third-party SDK that is commonly used in apps on the App Store, you’ll need to include the privacy manifest for the SDK.
Signatures are also required when the SDK is used as a binary dependency.
This functionality is a step forward for all apps, and we encourage all SDKs to adopt it to better support the apps that depend on them.Learn more and view list of commonly-used third-party SDKsNew use cases for APIs that require reasons.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

When you upload a new app or app update to App Store Connect that uses an API (including from third-party SDKs) that requires a reason, you’ll receive a notice if you haven’t provided an approved reason in your app’s privacy manifest.
Based on the feedback we received from developers, the list of approved reasons has been expanded to include additional use cases.
If you have a use case that directly benefits users that isn’t covered by an existing approved reason, submit a request for a new reason to be added.Starting in spring 2024, in order to upload your new app or app update to App Store Connect, you’ll be required to include an approved reason in the app’s privacy manifest which accurately reflects how your app uses the API.Learn more and view list of APIs and approved reasons New design and technology consultations now available December 5, 2023
Have questions on designing your app or implementing a technology?
We’re here to help you find answers, no matter where you are in your development journey.
One-on-one consultations with Apple experts in December — and newly published dates in January — are available now.
We’ll have lots more consultations and other activities in store for 2024 — online, in person, and in multiple languages.
Browse the schedule Get your apps ready for the holidays December 5, 2023
The busiest season on the App Store is almost here!

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Make sure your apps and games are up to date and ready in advance of the upcoming holidays.
We’ll remain open throughout the season and look forward to accepting your submissions.
On average, 90% of submissions are reviewed in less than 24 hours.
However, reviews may take a bit longer to complete from December 22 to 27.Learn about submitting apps App Store Award winners announced November 29, 2023
Join us in celebrating the work of these outstanding developers from around the world!Discover the winners App Store Award finalists announced November 14, 2023
Every year, the App Store celebrates exceptional apps that improve people’s lives while showcasing the highest levels of technical innovation, user experience, design, and positive cultural impact.
This year we’re proud to recognize nearly 40 outstanding finalists.
Winners will be announced in the coming weeks.Learn about the finalists Announcing the Swift Student Challenge 2024 November 8, 2023
Apple is proud to support and uplift the next generation of student developers, creators, and entrepreneurs.
The Swift Student Challenge has given thousands of students the opportunity to showcase their creativity and coding capabilities through app playgrounds, and build real-world skills that they can take into their careers and beyond.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

From connecting their peers to mental health resources to identifying ways to support sustainability efforts on campus, Swift Student Challenge participants use their creativity to develop apps that solve problems they’re passionate about.We’re releasing new coding resources, working with community partners, and announcing the Challenge earlier than in previous years so students can dive deep into Swift and the development process — and educators can get a head start in supporting them.Applications will open in February 2024 for three weeks.New for 2024, out of 350 overall winners, we’ll recognize 50 Distinguished Winners for their outstanding submissions and invite them to join us at Apple in Cupertino for three incredible days next summer.Learn more Over 30 new developer activities now available November 7, 2023
Ready to level up your app or game?
Join us around the world for a new set of developer labs, consultations, sessions, and workshops, hosted in person and online throughout November and December.You can explore:
App Store activities: Learn about discovery, engagement, in-app events, custom product pages, subscription best practices, and much more.
Apple Vision Pro developer labs: Apply to attend a lab in Cupertino, London, Munich, New York City, Shanghai, Singapore, Sydney, or Tokyo.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Apple Vision Pro activities: Learn to design and build an entirely new universe of apps and games for visionOS.
Design and technology consultations: Sign up for one-on-one guidance on app design, technology implementation, and more.
Discover activities in multiple time zones and languages.Browse the full schedule Tax updates for apps, in-app purchases, and subscriptions October 31, 2023
The App Store’s commerce and payments system was built to enable you to conveniently set up and sell your products and services on a global scale in 44 currencies across 175 storefronts.
Apple administers tax on behalf of developers in over 70 countries and regions and provides you with the ability to assign tax categories to your apps and in‑app purchases.Periodically, we make updates to rates, categories, and agreements to accommodate new regulations and rate changes in certain regions.
As of today, the following updates have been made in App Store Connect.Tax ratesYour proceeds from the sale of eligible apps and in‑app purchases (including auto‑renewable subscriptions) have been increased to reflect the following reduced value-added tax (VAT) rates.
Prices on the App Store haven’t changed.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Austria: Reduced VAT rates for certain apps in the Video tax category
Cyprus: Reduced VAT rate of 3% for certain apps in the following tax categories: Books, News Publications, Audiobooks, Magazines and other periodicals
Vietnam: Eliminated VAT for certain apps in the following tax categories: Books, News Publications, Magazines, and other periodicals
Tax categories
New Boosting category: Apps and/or in-app purchases that offer resources to provide exposure, visibility, or engagement to enhance the prominence and reach of specific content that’s experienced or consumed in app (such as videos, sales of “boosts” in social media apps, listings, and/or other forms of user-generated content).
New attribute for books: Textbook or other educational publication used for teaching and studying between ages 5 to 18
New attributes for videos: Exclusively features live TV broadcasting and/or linear programming.
Public TV broadcasting, excluding shopping or infomercial channels.
If any of these categories or attributes are relevant to your apps or in-app purchases, you can review and update your selections in the Pricing and Availability section of My Apps.
Learn about setting tax categoriesPaid Applications Agreement
Exhibit C Section 1.2.2: Updated language to clarify the goods and services tax (GST) requirements for developers on the Australia storefront.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Get ready with the latest beta releases October 26, 2023
The beta versions of iOS 17.2, iPadOS 17.2, macOS 14.2, tvOS 17.2, and watchOS 10.2 are now available.
Get your apps ready by confirming they work as expected on these releases.
And to take advantage of the advancements in the latest SDKs, make sure to build and test with Xcode 15.1 beta.To check if a known issue from a previous beta release has been resolved or if there’s a workaround, review the latest release notes.
Please let us know if you encounter an issue or have other comments.
We value your feedback, as it helps us address issues, refine features, and update documentation.View downloads and release notes
Learn about testing a beta OS
Learn about sending feedback TestFlight makes it even simpler to manage testers October 24, 2023
TestFlight provides an easy way to get feedback on beta versions of your apps, so you can publish on the App Store with confidence.
Now, improved controls in App Store Connect let you better evaluate tester engagement and manage participation to help you get the most out of beta testing.
Sort testers by status and engagement metrics (like sessions, crashes, and feedback), and remove inactive testers who haven’t engaged.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

You can also filter by device and OS, and even select relevant testers to add to a new group.Learn about managing testersLearn about TestFlight New delivery metrics now available in the Push Notifications Console October 19, 2023
The Push Notifications Console now includes metrics for notifications sent in production through the Apple Push Notification service (APNs).
With the console’s intuitive interface, you’ll get an aggregated view of delivery statuses and insights into various statistics for notifications, including a detailed breakdown based on push type and priority.Introduced at WWDC23, the Push Notifications Console makes it easy to send test notifications to Apple devices through APNs.Learn more Apple Vision Pro developer labs expand to New York City and Sydney October 17, 2023
We’re thrilled with the excitement and enthusiasm from developers around the world at the Apple Vision Pro developer labs, and we’re pleased to announce new labs in New York City and Sydney.
Join us to test directly on the device and connect with Apple experts for help with taking your visionOS, iPadOS, and iOS apps even further on this exciting new platform.
Labs also take place in Cupertino, London, Munich, Shanghai, Singapore, and Tokyo.Submit a lab requestLearn about other ways to work with Apple to prepare for visionOS.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Get ready with the latest beta releases September 27, 2023
The beta versions of iOS 17.1, iPadOS 17.1, macOS 14.1, tvOS 17.1, and watchOS 10.1 are now available.
Get your apps ready by confirming they work as expected on these releases.
And to take advantage of the advancements in the latest SDKs, make sure to build and test with Xcode 15.To check if a known issue from a previous beta release has been resolved or if there’s a workaround, review the latest release notes.
Please let us know if you encounter an issue or have other feedback.
We value your feedback, as it helps us address issues, refine features, and update documentation.View downloads and release notes
Learn about testing a beta OS
Learn about sending feedback Meet with Apple Experts September 26, 2023
Join us around the world for a variety of sessions, consultations, labs, and more — tailored for you.Apple developer activities are for everyone, no matter where you are on your development journey.
Activities take place all year long, both online and in person around the world.
Whether you’re looking to enhance your existing app or game, refine your design, or launch a new project, there’s something for you.Learn more Pre-orders by region now available September 13, 2023
Offering your app or game for pre-order is a great way to build awareness and excitement for your upcoming releases on the App Store.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

And now you can offer pre-orders on a regional basis.
People can pre-order your app in a set of regions that you choose, even while it’s available for download in other regions at the same time.
With this new flexibility, you can expand your app to new regions by offering it for pre-order and set different release dates for each region.Learn about pre-orders
Learn how to manage your app’s availability App Store submissions now open for the latest OS releases September 12, 2023
iOS 17, iPadOS 17, macOS Sonoma, tvOS 17, and watchOS 10 will soon be available to customers worldwide.
Build your apps and games using the Xcode 15 Release Candidate and latest SDKs, test them using TestFlight, and submit them for review to the App Store.
You can now start deploying seamlessly to TestFlight and the App Store from Xcode Cloud.
With exciting new capabilities, as well as major enhancements across languages, frameworks, tools, and services, you can deliver even more unique experiences on Apple platforms.
Read more Apple Entrepreneur Camp applications now open September 7, 2023
Apple Entrepreneur Camp supports underrepresented founders and developers, and encourages the pipeline and longevity of these entrepreneurs in technology.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Building on the success of our alumni from cohorts for female*, Black, and Hispanic/Latinx founders, starting this fall, we’re expanding our reach to welcome professionals from Indigenous backgrounds who are looking to enhance and grow their existing app-driven businesses.
Attendees benefit from one-on-one code-level guidance, receive insight, inspiration, and unprecedented access to Apple engineers and experts, and become part of the extended global network of Apple Entrepreneur Camp alumni.Applications are now open for founders and developers from these groups who have either an existing app on the App Store, a functional beta build in TestFlight, or the equivalent.
Attendees will join us online starting in October 2023.
We welcome eligible entrepreneurs with app-driven organizations to apply and we encourage you to share these details with those who may be interested.Apply by September 24, 2023.Learn more* Apple believes that gender expression is a fundamental right.
We welcome all women to apply to this program.
Take your iPad and iPhone apps even further on Apple Vision Pro September 5, 2023
A brand‑new App Store will launch with Apple Vision Pro, featuring apps and games built for visionOS, as well as hundreds of thousands of iPad and iPhone apps that run great on visionOS too.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Users can access their favorite iPad and iPhone apps side by side with new visionOS apps on the infinite canvas of Apple Vision Pro, enabling them to be more connected, productive, and entertained than ever before.
And since most iPad and iPhone apps run on visionOS as is, your app experiences can easily extend to Apple Vision Pro from day one — with no additional work required.
Read more Updated Apple Developer Program License Agreement now available August 28, 2023
The Apple Developer Program License Agreement has been revised to support upcoming features and updated policies, and to provide clarification.
The revisions include: Definitions, Section 3.3.39: Specified requirements for use of the Journaling Suggestions API.
Schedule 1 Exhibit D Section 3 and Schedules 2 and 3 Exhibit E Section 3: Added language about the Digital Services Act (DSA) redress options available to developers based in the European Union.
Schedule 1 Section 6.3 and Schedules 2 and 3 Section 7.3: Added clarifying language that the content moderation process is subject to human and systematic review and action pursuant to notices of illegal and harmful content.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

View full terms and conditions Helping customers resolve billing issues without leaving your app August 9, 2023
As announced in April, your customers will soon be able to resolve payment issues without leaving your app, making it easier for them to stay subscribed to your content, services, and premium features.Starting August 14, 2023, if an auto-renewable subscription doesn’t renew because of a billing issue, a system-provided sheet will appear in your app with a prompt that lets customers update the payment method for their Apple ID.
You can test this sheet in Sandbox, as well as delay or suppress it using messages and display in StoreKit.
This feature is available in iOS 16.4 and iPadOS 16.4 or later, and no action is required to adopt it.Learn about the system-provided sheet
Learn how to test billing issues in Sandbox List of APIs that require declared reasons now available July 27, 2023
Apple is committed to protecting user privacy on our platforms.
We know that there are a small set of APIs that can be misused to collect data about users’ devices through fingerprinting, which is prohibited by our Developer Program License Agreement.
To prevent the misuse of these APIs, we announced at WWDC23 that developers will need to declare the reasons for using these APIs in their app’s privacy manifest.
This will help ensure that apps only use these APIs for their intended purpose.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

As part of this process, you’ll need to select one or more approved reasons that accurately reflect how your app uses the API, and your app can only use the API for the reasons you’ve selected.Starting in fall 2023, when you upload a new app or app update to App Store Connect that uses an API (including from third-party SDKs) that requires a reason, you’ll receive a notice if you haven’t provided an approved reason in your app’s privacy manifest.
And starting in spring 2024, in order to upload your new app or app update to App Store Connect, you’ll be required to include an approved reason in the app’s privacy manifest which accurately reflects how your app uses the API.If you have a use case for an API with required reasons that isn’t already covered by an approved reason and the use case directly benefits the people using your app, let us know.View list of APIs and approved reasons
Submit a request for a new approved reason Meet with App Store experts July 25, 2023
Join us for online sessions August 1 through 24 to learn about the latest App Store features and get your questions answered.
Live presentations with Q&A are being held in multiple time zones and languages.
Explore App Store pricing upgrades, including enhanced global pricing, tools to manage pricing by storefront, and additional price points.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Find out how to measure user acquisition with App Analytics and grow your subscription business using App Store features.
Discover how product page optimization lets you test different elements of your product page to find out which resonate with people most.
Understand how custom product pages let you create additional product page versions to highlight specific features or content.
Learn how to boost discovery and engagement with Game Center and how to configure in-app events.
Learn more
View schedule Take your apps and games beyond the visionOS simulator July 24, 2023
Apple Vision Pro compatibility evaluationsWe can help you make sure your visionOS, iPadOS, and iOS apps behave as expected on Vision Pro.
Align your app with the newly published compatibility checklist, then request to have your app evaluated directly on Vision Pro.Learn moreApple Vision Pro developer labsExperience your visionOS, iPadOS, and iOS apps running on Vision Pro.
With support from Apple, you’ll be able to test and optimize your apps for the infinite spatial canvas.
Labs are available in Cupertino, London, Munich, Shanghai, Singapore, and Tokyo.Learn moreApple Vision Pro developer kitHave a great idea for a visionOS app that requires building and testing on Vision Pro?
Apply for a Vision Pro developer kit.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

With continuous, direct access to Vision Pro, you’ll be able to quickly build, test, and refine your app so it delivers amazing spatial experiences on visionOS.Learn more Upcoming price and tax changes for apps, in-app purchases, and subscriptions July 10, 2023
The App Store’s commerce and payments system was built to empower you to conveniently set up and sell your products and services on a global scale in 44 currencies across 175 storefronts.
When tax regulations or foreign exchange rates change, we sometimes need to update prices on the App Store in certain regions and/or adjust your proceeds.
These updates are done using publicly available exchange rate information from financial data providers to help ensure prices for apps and in‑app purchases stay equalized across all storefronts.On July 25, pricing for apps and in‑app purchases (excluding auto‑renewable subscriptions) will be updated for the Egypt, Nigeria, Tanzania, and Türkiye storefronts.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

These updates also consider the following tax changes:
Egypt: introduction of a value‑added tax (VAT) of 14%
Tanzania: introduction of a VAT of 18% and a digital service tax of 2%
Türkiye: increase of the VAT rate from 18% to 20%
How this impacts pricing
If you’ve selected Egypt, Nigeria, Tanzania, or Türkiye as the base storefront for your app or in‑app purchase (excluding auto‑renewable subscriptions), the price won’t change on that storefront.
Prices on other storefronts will be updated to maintain equalization with your chosen base price.
If the base storefront for your app or in‑app purchase (excluding auto‑renewable subscriptions) isn’t Egypt, Nigeria, Tanzania, or Türkiye, prices will increase on the Egypt, Nigeria, Tanzania, and Türkiye storefronts.
If your in‑app purchase is an auto‑renewable subscription or if you manually manage prices on storefronts instead of using the automated equalized prices, your prices won’t change.
The Pricing and Availability section of My Apps has been updated in App Store Connect to display these upcoming price changes.
As always, you can change the prices of your apps, in‑app purchases, and auto‑renewable subscriptions at any time.How this impacts proceeds and tax administrationYour proceeds for sales of apps and in-app purchases (including auto‑renewable subscriptions) will change to reflect the new tax rates and updated prices.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Exhibit B of the Paid Applications Agreement has been updated to indicate that Apple collects and remits applicable taxes in Egypt and Tanzania.Learn more about managing your pricesViewing new pricing
Selecting a base country or region
Pricing and availability start times by region
Setting in‑app purchase pricing Providing safe app experiences for families July 10, 2023
The App Store was created to be a safe and trusted place for users to get apps, and a great business opportunity for developers.
Apple platforms and the apps you build have become important to many families, as children use our products and services to explore the digital world and communicate with family and friends.
We hold apps for kids and those with user-generated content and interactions to the highest standards.
To continue delivering safe experiences for families together, we wanted to remind you about the tools, resources, and requirements that are in place to help keep users safe in your app.
Read more New design resources now available June 26, 2023
Now it’s even easier to design your apps quickly and accurately with new and updated design resources for creating apps on Apple platforms.
visionOS design library and templates for Figma and Sketch.
iOS 17 and iPadOS 17 design kits for Figma and Sketch.
macOS Sonoma design kits for Figma and Sketch.
watchOS 10 design kit for Sketch.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

SF Symbols 5 beta, with over 700 new symbols.
Updated Human Interface Guidelines, now in Chinese and Japanese.
SF script extensions, now with Armenian, Georgian, and Hebrew.
visionOS SDK now available June 21, 2023
You can now start creating cutting-edge spatial computing apps for the infinite canvas of Apple Vision Pro.
Download Xcode 15 beta 2, which includes the visionOS SDK and Reality Composer Pro (a new tool that makes it easy to preview and prepare 3D content for visionOS).
Add a visionOS target to your existing project or build an entirely new app, then iterate on your app in Xcode Previews.
You can interact with your app in the all-new visionOS simulator, explore various room layouts and lighting conditions, and create tests and visualizations.
New documentation and sample code are also available to help you through the development process.Download Xcode 15 beta 2
Learn about developing for visionOS WWDC23 resources and survey June 9, 2023
Thank you to everyone who joined us for an amazing week.
We hope you found value, connection, and fun.
You can continue to:
Watch sessions at any time.
Check out session highlights.
Read about newly announced technologies.
Get sample code from sessions.
We’d love to know what you thought of this year’s conference.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

If you’d like to tell us about your experience, please complete the WWDC23 survey.Take the survey Sign up for WWDC23 labs and activities June 6, 2023
Online labs and activities are a great way to connect with Apple engineers, designers, and experts all week long.One-on-one labsGet personalized guidance about development basics, complex concepts, and everything in between.
Learn how to implement new Apple technologies, explore UI design principles, improve your App Store presence, and much more.ActivitiesThere are plenty of exciting activities happening daily on Slack.
Ask engineering and design questions in Q&As.
Join or follow real-time conversations while watching session videos together, and stay for a Q&A with the presenter.
Get to know other developers and teams from Apple in community icebreakers.
Test your trivia expertise starting on June 6.
Labs and activities are open to all members of the Apple Developer Program and Apple Developer Enterprise Program, as well as 2023 Swift Student Challenge applicants.Register for labs
Register for activities
Learn about WWDC23 Apple Design Award winners announced June 5, 2023
The Apple Design Awards celebrate apps and games that excel in the categories of Inclusivity, Delight and Fun, Interaction, Social Impact, Visuals and Graphics, and Innovation.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Learn about the 2023 winning apps and the talented developers behind them.Discover the winners Find out what’s new for Apple developers June 5, 2023
Discover the latest advancements on all Apple platforms.
With an incredible new opportunity in spatial computing in visionOS, new features in iOS, iPadOS, macOS, tvOS, and watchOS, and major enhancements across languages, frameworks, tools and services, you can create even more unique experiences for users worldwide.Learn what’s new Introducing Apple Vision Pro and visionOS June 5, 2023
Apple Vision Pro is a revolutionary spatial computer that seamlessly blends digital content with the physical world, while allowing users to stay present and connected to others.
Apple Vision Pro creates an infinite canvas for apps that scales beyond the boundaries of a traditional display and introduces a fully three-dimensional user interface controlled by the most natural and intuitive inputs possible — a user’s eyes, hands, and voice.
Featuring visionOS, the world’s first spatial operating system, Apple Vision Pro lets users interact with digital content in a way that feels like it is physically present in their space.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

The breakthrough design of Apple Vision Pro features an ultra-high-resolution display system that packs 23 million pixels across two displays, and custom Apple silicon in a unique dual-chip design to ensure every experience feels like it’s taking place in front of the user’s eyes in real time.Discover the resources you can use to bring your spatial computing creations to life with a new, yet familiar, way to build apps that reimagine what it means to be connected, productive, and entertained.Learn more about visionOS Updated agreements and guidelines now available June 5, 2023
The App Store Review Guidelines, the Apple Developer Program License Agreement, and the Apple Developer Agreement have been updated to support updated policies and upcoming features, and to provide clarification.
Please review the changes below and accept the updated terms as needed.
Read more What’s new in privacy on the App Store June 5, 2023
At Apple, we believe privacy is a fundamental human right.
That is why we’ve built a number of features to help users understand developers’ privacy and data collection and sharing practices, and put users in the driver’s seat when it comes to their data.
App Tracking Transparency (ATT) empowers users to choose whether an app has permission to track their activity across other companies’ apps and websites for the purposes of advertising or sharing with data brokers.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

With Privacy Nutrition Labels and App Privacy Report, users can see what data an app collects and how it’s used.Many apps leverage third-party software development kits (SDKs), which can offer great functionality but may have implications on how the apps handle user data.
To make it even easier for developers to create great apps while informing users and respecting their choices about how their data is used, we’re introducing two new features.First, to help developers understand how third-party SDKs use data, we’re introducing new privacy manifests — files that outline the privacy practices of the third-party code in an app, in a single standard format.
When developers prepare to distribute their app, Xcode will combine the privacy manifests across all the third-party SDKs that a developer is using into a single, easy-to-use report.
With one comprehensive report that summarizes all the third-party SDKs found in an app, it will be even easier for developers to create more accurate Privacy Nutrition Labels.Additionally, to offer additional privacy protection for users, apps referencing APIs that could potentially be used for fingerprinting — a practice that is prohibited on the App Store — will now be required to select an allowed reason for usage of the API and declare that usage in the privacy manifest.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

As part of this process, apps must accurately describe their usage of these APIs, and may only use the APIs for the reasons described in their privacy manifest.Second, we want to help developers improve the integrity of their software supply chain.
When using third-party SDKs, it can be hard for developers to know the code that they downloaded was written by the developer that they expect.
To address that, we’re introducing signatures for SDKs so that when a developer adopts a new version of a third-party SDK in their app, Xcode will validate that it was signed by the same developer.
Developers and users alike will benefit from this feature.We’ll publish additional information later this year, including:
A list of privacy-impacting SDKs (third-party SDKs that have particularly high impact on user privacy)
A list of “required reason” APIs for which an allowed reason must be declared
A developer feedback form to suggest new reasons for calling covered APIs
Additional documentation on the benefits of and details about signatures, privacy manifests, and when they will be required Xcode 15 beta now available June 5, 2023
The Xcode 15 beta supports the latest SDKs for iOS, iPadOS, macOS, tvOS, and watchOS.
This version of Xcode helps you code and design your apps faster with enhanced code completion, interactive previews, and live animations.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Use Git staging to craft your next commit without leaving your code.
Explore and diagnose your test results with redesigned test reports with video recording.
And start deploying seamlessly to TestFlight and the App Store from Xcode Cloud.Learn more WWDC23 schedule and lab requests now available June 5, 2023
Check out the session schedule to plan your week!
Sessions will be posted daily and will include links to resources and forums tags.
And you can now request one-on-one lab appointments to get your questions answered, whether you’re just starting out or need to solve an advanced issue.Learn more Upcoming tax changes for apps, in-app purchases, and subscriptions May 30, 2023
The App Store’s commerce and payments system was built to empower you to conveniently set up and sell your products and services at a global scale in 44 currencies across 175 storefronts.
Apple administers tax on behalf of developers in over 70 countries and regions and provides you with the ability to assign tax categories to your apps and in‑app purchases.
Periodically, we update your proceeds in certain regions based on changes in tax regulations.On May 31, your proceeds from the sale of apps and in‑app purchases (including auto‑renewable subscriptions) will be adjusted to reflect the tax changes listed below.
Prices will not change.
Ghana: Increase of the VAT rate from 12.5% to 15%.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Lithuania: Reduction of the VAT rate from 21% to 9% for eligible e‑books and audiobooks.
Moldova: Reduction of the VAT rate from 20% to 0% for eligible e‑books and periodicals.
Spain: Digital services tax of 3%.
Due to changes to tax regulations in Brazil, Apple now withholds taxes for all App Store sales in Brazil.
We’ll administer the collection and remittance of taxes to the appropriate tax authority on a monthly basis.
You can view the amount of tax deducted from your proceeds starting in June 2023 with your May earnings.
Developers based in Brazil aren’t impacted by this change.Once these changes go into effect, the Pricing and Availability section of My Apps will be updated in App Store Connect.
As always, you can change the prices of your apps and in‑app purchases (including auto‑renewable subscriptions) at any time.
And now you can change them for any storefront with 900 price points to choose from.
Code new worlds May 30, 2023
WWDC23 is almost here.
We’ll be kicking off with the Apple Keynote on June 5 at 10:00 a.m.
PT.
Watch online at apple.com or in the Apple Developer app.
You can even use SharePlay to watch with friends.Activities are now open for sign-up for eligible developers.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Designed to connect you with the developer community and Apple experts, they’ll feature Q&As, Meet the Presenters, and community icebreakers in online group chats.Learn moreSign up Upcoming changes to the App Store receipt signing intermediate certificate May 26, 2023
As part of ongoing efforts to improve security and privacy on Apple platforms, the App Store receipt signing intermediate certificate that’s used to verify the sale of apps and associated in‑app purchases is being updated to use the SHA‑256 cryptographic algorithm.
This update will be completed in multiple phases and new apps and app updates may be impacted, depending on how they verify receipts.What to expectIf your app verifies App Store transactions using the AppTransaction and Transaction APIs, or the verifyReceipt web service endpoint, no action is required.If your app validates App Store receipts on device, make sure your app will support the SHA-256 version of this certificate.
New apps and app updates that don’t support the SHA-256 version of this certificate will no longer be accepted by the App Store starting August 14, 2023.Important dates
June 20, 2023.
Receipts in the sandbox environment will be signed with the SHA‑256 version of this certificate for devices running a minimum of iOS 16.6, iPadOS 16.6, tvOS 16.6, watchOS 9.6, or macOS Ventura 13.5.
August 14, 2023.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

Receipts in new apps and app updates submitted to the App Store, as well as all apps in sandbox, will be signed with the SHA‑256 intermediate certificate.
For more details, view TN3138: Handling App Store receipt signing certificate change.
Apple notary service update May 26, 2023
As announced last year at WWDC, if you notarize your Mac software with the Apple notary service using the altool command-line utility or Xcode 13 or earlier, you’ll need to transition to the notarytool command-line utility or upgrade to Xcode 14 or later.
Starting November 1, 2023, the Apple notary service will no longer accept uploads from altool or Xcode 13 or earlier.
Existing notarized software will continue to function properly.The Apple notary service is an automated system that scans Mac software for malicious content, checks for code-signing issues, and returns the results quickly.
Notarizing your software assures users that Apple has checked it for malicious software and none was detected.Learn about migrating to the latest notarization tool
Learn about notarizing macOS software Apple Design Award finalists announced May 23, 2023
The Apple Design Awards celebrate apps and games that excel in the categories of Inclusivity, Delight and Fun, Interaction, Social Impact, Visuals and Graphics, and Innovation.
Discover this year’s finalists, then check back June 5 at 6:30 p.m.

---

url: https://developer.apple.com/news/
title: Latest News - Apple Developer
description: 

PT to learn about the winners.Discover the finalists Swiftly developing May 23, 2023
Get ready for an action-packed online experience at WWDC23.
Join the developer community for a week of sessions, labs, and activities, starting June 5 at 10:00 a.m.
PT.Find out what's ahead Get ready with the latest beta releases May 19, 2023
The beta versions of iOS 16.6, iPadOS 16.6, macOS 13.5, tvOS 16.6, and watchOS 9.6 are now available.
Get your apps ready by confirming they work as expected on these releases.
And to take advantage of the advancements in the latest SDKs, make sure to build and test with Xcode 14.3.1.To check if a known issue from a previous beta release has been resolved or if there’s a workaround, review the latest release notes.
Please let us know if you encounter an issue or have other feedback.
We value your feedback, as it helps us address issues, refine features, and update documentation.View downloads and release notes
Learn about testing a beta OS
Learn about sending feedback

---

url: https://developer.apple.com/documentation/swiftui/model-data
title: This page requires JavaScript.
description: Manage the data that your app uses to drive its interface.

Collection SwiftUI Model data API CollectionModel dataManage the data that your app uses to drive its interface.OverviewSwiftUI offers a declarative approach to user interface design.
As you compose a hierarchy of views, you also indicate data dependencies for the views.
When the data changes, either due to an external event or because of an action that the user performs, SwiftUI automatically updates the affected parts of the interface.
As a result, the framework automatically performs most of the work that view controllers traditionally do.The framework provides tools, like state variables and bindings, for connecting your app’s data to the user interface.
These tools help you maintain a single source of truth for every piece of data in your app, in part by reducing the amount of glue logic you write.
Select the tool that best suits the task you need to perform:Manage transient UI state locally within a view by wrapping value types as State properties.Share a reference to a source of truth, like local state, using the Binding property wrapper.Connect to and observe reference model data in views by applying the Observable() macro to the model data type.
Instantiate an observable model data type directly in a view using a State property.

---

url: https://developer.apple.com/documentation/swiftui/model-data
title: This page requires JavaScript.
description: Manage the data that your app uses to drive its interface.

Share the observable model data with other views in the hierarchy without passing a reference using the Environment property wrapper.Leveraging property wrappersSwiftUI implements many data management types, like State and Binding, as Swift property wrappers.
Apply a property wrapper by adding an attribute with the wrapper’s name to a property’s declaration.@State private var isVisible = true // Declares isVisible as a state variable.
The property gains the behavior that the wrapper specifies.
The state and data flow property wrappers in SwiftUI watch for changes in your data, and automatically update affected views as necessary.
When you refer directly to the property in your code, you access the wrapped value, which for the isVisible state property in the example above is the stored Boolean.if isVisible == true { Text("Hello") // Only renders when isVisible is true.
}
Alternatively, you can access a property wrapper’s projected value by prefixing the property name with the dollar sign ($).
SwiftUI state and data flow property wrappers project a Binding, which is a two-way connection to the wrapped value, allowing another view to access and mutate a single source of truth.Toggle("Visible", isOn: $isVisible) // The toggle can update the stored value.

---

url: https://developer.apple.com/documentation/swiftui/model-data
title: This page requires JavaScript.
description: Manage the data that your app uses to drive its interface.

For more information about property wrappers, see Property Wrappers in The Swift Programming Language.TopicsCreating and sharing view stateManaging user interface stateEncapsulate view-specific data within your app’s view hierarchy to make your views reusable.struct StateA property wrapper type that can read and write a value managed by SwiftUI.struct BindableA property wrapper type that supports creating bindings to the mutable properties of observable objects.struct BindingA property wrapper type that can read and write a value owned by a source of truth.Creating model dataManaging model data in your appCreate connections between your app’s data model and views.Migrating from the Observable Object protocol to the Observable macroUpdate your existing app to leverage the benefits of Observation in Swift.@attached(member, names: named(_$observationRegistrar), named(access), named(withMutation)) @attached(memberAttribute) @attached(extension, conformances: Observable) macro Observable()Defines and implements conformance of the Observable protocol.Monitoring data changes in your appShow changes to data in your app’s user interface by using observable objects.struct StateObjectA property wrapper type that instantiates an observable object.struct ObservedObjectA property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.protocol ObservableObject : AnyObjectA type of object with a publisher that emits before the object has changed.Responding to data changesfunc onChange(of:initial:_:)Adds a modifier for this view that fires an action when a specific value changes.func onReceive<P>(P, perform: (P.Output) -> Void) -> some ViewAdds an action to perform when this view detects data emitted by the given publisher.Distributing model data throughout your appfunc environmentObject<T>(T) -> some ViewSupplies an observable object to a view’s hierarchy.func environmentObject<T>(T) -> some SceneSupplies an ObservableObject to a view subhierarchy.struct EnvironmentObjectA property wrapper type for an observable object that a parent or ancestor view supplies.Managing dynamic dataprotocol DynamicPropertyAn interface for a stored variable that updates an external property of a view.See AlsoData and storageAPI ReferenceEnvironment valuesShare data throughout a view hierarchy using the environment.API ReferencePreferencesIndicate configuration preferences from views to their container views.API ReferencePersistent storageStore data for use across sessions of your app.

---

url: https://developer.apple.com/design/awards/
title: Introducing the 2024Apple Design Award winners
description: 

Introducing the 2024Apple Design Award winners Delight and Fun | Inclusivity | Innovation | Interaction | Social Impact | Visuals and Graphics | Spatial Computing Streaming is available in most browsers, and in the Apple Developer app.
Every year, the Apple Design Awards recognize innovation, ingenuity, and technical achievement in app and game design.
But they’ve also become something more: A moment to step back and celebrate the Apple developer community in its many forms.
Delight and Fun
Winners in this category provide memorable, engaging, and satisfying experiences enhanced by Apple technologies.
Winners Bears Gratitude Isuru Wanasinghe, Australia
App | iPhone, iPad, Mac
Journaling apps just don’t get much cuter than Bears Gratitude, a warm and welcoming way to establish — and, just as crucially, maintain — a daily gratitude practice.
Yes, the bears and other characters are super-huggable and turn up in delightfully unexpected places.
But they also serve as a welcoming way into the content.
And with its thoughtfully considered touchpoints, Bears Gratitude is a simple way to encourage and embrace honest self-reflection.

---

url: https://developer.apple.com/design/awards/
title: Introducing the 2024Apple Design Award winners
description: 

NYT Games The New York Times Company, USA
Game | iPhone, iPad
An all-time great with a compelling mix of games and the source of the fierce debate, “What’s the best Wordle starting word?” In the past year, NYT Games evolved well past its classic crosswords and breakout s-m-a-s-h to redesign its navigation, expand its already diverse catalog of games, and introduce grabby new conversation starters like Connections — which, like Wordle, feels perfectly calibrated for maximum replayability.
Finalists Rooms Things, Inc., USA
iPhone, iPad Dudel Draw Silly Little Apps LLC, USA
iPhone, iPad WHAT THE CAR?
Triband ApS, Denmark
iPhone, iPad, Mac, Apple TV, Apple Vision Pro Hello Kitty Island Adventure Sunblink Entertainment LLC, USA
iPhone, iPad, Mac, Apple TV, Apple Vision Pro Inclusivity
Winners in this category provide a great experience for all by supporting people from a diversity of backgrounds, abilities, and languages.
Winners oko AYES, Belgium
App | iPhone
oko alerts pedestrians to the state of lighted signals through haptic and audio feedback, an immediately impactful approach for those with low to no vision.
It’s a smart solution to a critical safety scenario that takes full advantage of flawless VoiceOver and Dynamic Type implementation.

---

url: https://developer.apple.com/design/awards/
title: Introducing the 2024Apple Design Award winners
description: 

Crayola Adventures RED GAMES CO, LLC, USA
Game | iPhone, iPad, Mac, Apple TV, Apple Vision Pro
A colorful adventure that sets a new standard for inclusive and gender-neutral character-creation options, which include different skin tones, abilities, body types, pronouns, and more.
Crayola Adventures offers inclusivity options across the board, including full narration for non-readers or those with reading challenges.
And it’s a delight to experience for a wide range of ages, with a mix of activities that includes making decorations, solving puzzles, and reading storybooks.
Finalists Complete Anatomy 2024 Elsevier, Ireland
iPad, Mac Tiimo tiimo ApS, Denmark
iPhone, iPad, Apple Watch Unpacking Humble Bundle, Inc, USA
iPhone, iPad quadline Kovalov Ivan, Ukraine
iPhone, iPad, Mac, Apple TV, Apple Vision Pro Innovation
Winners in this category provide a state-of-the-art experience through novel use of Apple technologies that set them apart in their genre.
Winners Procreate Dreams Savage Interactive Pty Ltd, Australia
App | iPad
The new standard in creating 2D animations on iPad.
Procreate Dreams is a marvelously designed tool that allows creatives of all kinds to animate using the extensive and familiar library of brushes, gestures, and PencilKit-enabled behaviors from the original Procreate.

---

url: https://developer.apple.com/design/awards/
title: Introducing the 2024Apple Design Award winners
description: 

Its controls are effortlessly intuitive — multitouch interactions and Apple Pencil are both supported — so it’s easy to jump right in, whether you’re a career animator or brand new to the medium.
As is the case with its predecessor, every interaction in Procreate Dreams feels polished, thoughtfully considered, and ready to use out of the box.
If you’re looking to explore animation, it’s a dream come true.
Lost in Play Happy Juice Games, Israel
Game | iPhone, iPad, Apple Vision Pro
Lost in Play feels like a graphic novel come to life.
Every corner of its inventive world — from its spooky forest to its clifftop village — brims with visual imagination and handcrafted charm.
And the game is filled with endearing characters (like a surprisingly snarky flock of sheep) and fun mini-games.
Add in easy-to-learn interactions and compelling gameplay, and you’ve got a game worth getting lost in.
Finalists Copilot Money Copilot Money, Inc., USA
iPhone, Mac SmartGym Mateus Abras, Brazil
iPhone, iPad, Apple Watch, Mac, Apple Vision Pro Wavelength Palm Court LLC, USA
iPhone, iPad, Apple Vision Pro Call of Duty: Warzone Mobile Activision Publishing, Inc., USA
iPhone, iPad Interaction
Winners in this category deliver intuitive interfaces and effortless controls that are perfectly tailored to their platform.

---

url: https://developer.apple.com/design/awards/
title: Introducing the 2024Apple Design Award winners
description: 

Winners Crouton Devin Davies, New Zealand
App | iPhone, iPad, Mac, Apple Watch, Apple Vision Pro
Recipe apps rise and fall on their organization and information hierarchy, and Crouton serves up a clean, tasty interface for stashing away recipes, creating grocery lists, and presenting step-by-step instructions in the kitchen — even if you’re not exactly a chef.
Everything in Crouton, from the next recipe step to the name of that missing spice, is easy to find and right where you need it.
And its effortless series of interactions mean people can keep their focus on the counter rather than their screen.
Rytmos Floppy Club ApS, Denmark
Game | iPhone, iPad
A world music-inspired rhythm game that looks as good as it sounds.
Rytmos challenges players to solve puzzles by creating pathways using simple drag gestures, and every completed level adds a new element to an evolving song.
The onboarding makes gameplay instantly clear, and the gestures are simple and fun, even when the game starts delivering more and more complexity.
Finalists Procreate Dreams Savage Interactive Pty Ltd, Australia
iPad Arc Search The Browser Company of New York Inc., USA
iPhone Little Nightmares Playdigious, France
iPhone, iPad finity.
Seabaa, Inc., USA
iPhone, iPad, Mac, Apple TV Social Impact
Winners in this category improve lives in a meaningful way and shine a light on crucial issues.

---

url: https://developer.apple.com/design/awards/
title: Introducing the 2024Apple Design Award winners
description: 

Winners Gentler Streak Fitness Tracker Gentler Stories d.o.o., Slovenia
App | iPhone, iPad, Apple Watch
With its thoughtful focus on both physical and mental health, Gentler Streak is chasing the elusive goal of improving everyone’s lifestyles, no matter who or where they are.
As its name suggests, the app is powered not by insistent reminders but an optimistic and encouraging vibe that takes into account not just physical fitness but mental well-being too.
To make sure people focus on those goals, Gentler Streak relies on a subtle and consistently pleasing design language.
Its health data is smartly organized, and its Monthly Summary view — which shows how you’re doing in relation to your history — is less about hard comparisons and more about progress.
The Wreck The Pixel Hunt, France
Game | iPhone, iPad
A lush visual novel about sisterhood, motherhood, grief, and survival.
The Wreck tells the story of Junon, a writer who’s abruptly called to a hospital to make a life-changing decision.
The story is far from light, but it’s beautifully written and eloquently told, especially through fleeting thought bubbles that reflect the swirl and scatter of stressful situations.
The Wreck may be filed under games, but it’s also a powerful, heartbreaking story, one that invites players to think about their own choices as well.

---

url: https://developer.apple.com/design/awards/
title: Introducing the 2024Apple Design Award winners
description: 

Finalists How We Feel The How We Feel Project, Inc., USA
iPhone Ahead: Emotions Coach ahead solutions GmbH, Germany
iPhone Cityscapes: Sim Builder MagicFuel Games, USA
iPhone, iPad, Mac, Apple TV, Apple Vision Pro The Bear Mucks Games UG (haftungsbeschrnkt), Germany
iPhone, iPad Visuals and Graphics
Winners in this category feature stunning imagery, skillfully drawn interfaces, and high-quality animations that lend to a distinctive and cohesive theme.
Winners Rooms Things Inc., USA
App | iPhone, iPad
An incredible canvas for creativity, set in a nostalgic 8-bit world.
Rooms is tough to categorize: It’s a blank slate for building imaginative scenes, a platform for cozy gaming, and a social space that lets you interact with thousands of other people’s creations.
Rooms in Rooms are lovingly rendered and sprinkled with tons of delightful detail, and the app’s interactions, sounds, and throwback visuals strike the perfect balance between quirky and compelling.
Quirky, compelling, and executed with a delightful retro twist.
Lies of P NEOWIZ Corporation, South Korea
Game | Mac
A technical showpiece for Mac — and a dark, fascinating twist on a familiar tale.
In this gorgeously rendered adventure, players control a robotic puppet created by Geppetto — yes, that Geppetto — who must survive a battle march through a burned-out city to find his maker.

---

url: https://developer.apple.com/design/awards/
title: Introducing the 2024Apple Design Award winners
description: 

One look at the visuals reveals a world of beautiful textures, detailed lighting, and stunning effects — and visual customization options like MetalFX Upscaling and volumetric fog effects let you style the ruined city to your liking.
Add a coldly beautiful soundtrack and the nostalgic shadow of the original story, and you get a complete, considered, and unique experience — and that’s the truth.
Finalists Sunlitt Nicolas Mariniello, Italy
iPhone, iPad, Apple Watch Meditate RhythmicWorks Software LLP, India
iPhone, Apple Watch DEATH STRANDING DIRECTOR'S CUT 505 Games, Inc., USA
iPhone, iPad, Mac Honkai: Star Rail COGNOSPHERE PTE.
LTD., Singapore
iPhone, iPad Spatial Computing
Winners in this category brought extraordinary craftsmanship to their exceptional spatial experiences.
Winners djay Algoriddim GmbH, Germany
App | Apple Vision Pro, iPhone, iPad, Mac, Apple Watch
djay pro isn’t just a groundbreaking app; it’s an entirely new way to interact with music.
With incredible technical ingenuity and best-in-class immersion, it feels fresh and new and alive.
The app spins up high-quality turntables that you can scratch to your heart’s content, a cool interactive effects panel, and an array of magnificently considered environments, like the space lounge populated by dancing robots.

---

url: https://developer.apple.com/design/awards/
title: Introducing the 2024Apple Design Award winners
description: 

djay pro set out to create the “flow state” sought by live DJs on the spatial canvas; they’ve come away with a smash hit.
Blackbox Shapes and Stories, USA
Game | Apple Vision Pro
Blackbox on iOS challenged players to think outside the screen; Blackbox on visionOS challenges them to think about every (metaphorical) corner of the spatial canvas from its very first moments.
Revealing too much about Blackbox would spoil its many surprises; suffice it to say that wonderful details abound — like the soapy floating bubbles that drive level selection.
Finalists Sky Guide Fifth Star Labs LLC, USA
Apple Vision Pro, iPhone, iPad NBA NBA MEDIA VENTURES, LLC, USA
Apple Vision Pro, iPhone, iPad, Apple Watch Synth Riders Kluge Strategic Inc., USA
Apple Vision Pro, iPhone, iPad Loóna: Cozy Puzzle Games Loona Inc., USA
Apple Vision Pro View last year’s winners

---

url: https://developer.apple.com/app-store/small-business-program/
title: App Store Small Business Program
description: 

App Store Small Business Program
Propel your small business forward with the next generation of groundbreaking apps on the App Store and invest more resources into your business.
How it works
The App Store Small Business Program is designed to accelerate innovation and help propel your small business forward with the next generation of groundbreaking apps on the App Store.
It features a reduced commission rate of 15% on paid apps and In-App Purchases, so you can invest more resources into your business to continue building quality apps that customers love.
The basics Existing developers who made up to 1 million USD in proceeds in the prior calendar year for all their apps, as well as developers new to the App Store, can qualify for the program and the reduced commission.
If a participating developer surpasses the 1 million USD threshold in the current calendar year, the standard commission rate will apply to future sales.
If a developer’s proceeds fall below the 1 million USD threshold in a future calendar year, they can re-qualify for the 15% commission the year after.
Developers must identify any Associated Developer Accounts to determine proceeds eligibility.
Associated Developer Accounts
To ensure that all participants are fully eligible as small businesses, you’ll need to list all of your Associated Developer Accounts when you sign up for this program.

---

url: https://developer.apple.com/app-store/small-business-program/
title: App Store Small Business Program
description: 

An Associated Developer Account is an Apple Developer Program account that you own or control or an Apple Developer Program account that owns or controls your account.
For additional information, see the FAQs below.
Proceeds eligibility
To participate in the program, you and your Associated Developer Accounts must have earned no more than 1 million USD in total proceeds (sales net of Apple’s commission and certain taxes and adjustments) during the 12 fiscal months occurring within the previous calendar year, and have earned no more than 1 million USD during the current year.
When an app is transferred, proceeds for the calendar year will be associated with all accounts that initiate or accept the transfer of that app.
For additional information, see the FAQs below.
How to enroll The vast majority of developers on the App Store who sell digital goods and services are eligible — simply complete a few steps to enroll.
To enroll, you’ll need to: Be an Account Holder in the Apple Developer Program,
Review and accept the latest Paid Apps agreement (Schedule 2 to the Apple Developer Program License Agreement) in App Store Connect, and
If applicable, list all of your Associated Developer Accounts.
Get started today.
Enroll now Q&A
When will my adjusted proceeds go into effect?

---

url: https://developer.apple.com/app-store/small-business-program/
title: App Store Small Business Program
description: 

Your proceeds will be adjusted fifteen (15) days after the end of the fiscal calendar month in which your enrollment is approved.
For example, if your enrollment is approved on February 10, 2022, your proceeds are adjusted starting March 14, 2022.
How do I estimate whether I’m eligible for the program based on my proceeds?
Your eligibility is based on your total App Store proceeds converted into United States dollars (USD) in the prior calendar year.
Proceeds are your sales net of Apple’s commission and certain taxes and adjustments.
To estimate your proceeds, use the payments deposited into your bank account and your tax and adjustment details in App Store Connect.
If your bank account currency is in USD.
Add the total App Store payments deposited into your bank account in the prior calendar year.
Then modify that amount with any taxes and adjustments from the Payments and Financial Reports section of App Store Connect.
For taxes and adjustments in other currencies, use the USD exchange rate shown in App Store Connect for each month.
If your bank account currency is not in USD.
You’ll need to convert your App Store payments deposited into your bank account in the prior calendar year into USD.
Use a publicly available exchange rate that corresponds with the end of each fiscal month in Apple’s fiscal calendar to calculate your total USD proceeds.

---

url: https://developer.apple.com/app-store/small-business-program/
title: App Store Small Business Program
description: 

Then modify the total USD amount with any taxes and adjustments from the Payments and Financial Reports section of App Store Connect.
Make sure to add the proceeds for any Associated Developer Accounts.
Why do I need to list my Associated Developer Accounts?
The App Store Small Business Program is intended for small businesses and individual developers.
If your organization controls other Apple Developer Program accounts or is controlled by another account that sells digital goods and services on the App Store, the collective proceeds from these related organizations must not exceed the 1 million USD threshold in order to qualify for the program.
How do I know if I have an Associated Developer Account?
As the individual or legal entity who accepted the Apple Developer Program License Agreement, you have an Associated Developer Account if any of the following apply: You have majority (over 50%) corporate, individual, or partnership interest in the ownership or shares of another Apple Developer Program account.
Another Apple Developer Program member has majority (over 50%) corporate, individual, or partnership interest in the ownership or shares of your account.
You have ultimate decision-making authority over another Apple Developer Program account.
Another Apple Developer Program member has ultimate decision-making authority over your account.

---

url: https://developer.apple.com/app-store/small-business-program/
title: App Store Small Business Program
description: 

What details about my Associated Developer Account will I need to provide?
In addition to stating how many Associated Developer Accounts you have, you must provide the following details for each account: Name (individual or organization)
Team ID
Account Holder email address
Description of relationship between you and the account Can I participate in the Small Business Program if I’m on the alternative terms in the EU?
For developers on the alternative terms in the EU in the App Store Small Business Program and for subscriptions after their first year, Apple will offer a further reduced commission of 10%.
How do app transfers impact my participation in the program?
App transfers are allowed.
However, when an app is transferred, the proceeds for the calendar year will be associated with all accounts that initiate or accept the transfer of that app.
Program eligibility is based on total proceeds from all Associated Developer Accounts and transferred apps.
If I have additional questions who should I contact?
Apple Developer Support can help.
Receive guidance by phone or email by contacting us.

---

url: https://developer.apple.com/documentation/swiftui/preferences
title: This page requires JavaScript.
description: Indicate configuration preferences from views to their container views.

Collection SwiftUI Preferences API CollectionPreferencesIndicate configuration preferences from views to their container views.OverviewWhereas you use the environment to configure the subviews of a view, you use preferences to send configuration information from subviews toward their container.
However, unlike configuration information that flows down a view hierarchy from one container to many subviews, a single container needs to reconcile potentially conflicting preferences flowing up from its many subviews.When you use the PreferenceKey protocol to define a custom preference, you indicate how to merge preferences from multiple subviews.
You can then set a value for the preference on a view using the preference(key:value:) view modifier.

---

url: https://developer.apple.com/documentation/swiftui/preferences
title: This page requires JavaScript.
description: Indicate configuration preferences from views to their container views.

Many built-in modifiers, like navigationTitle(_:), rely on preferences to send configuration information to their container.TopicsSetting preferencesfunc preference<K>(key: K.Type, value: K.Value) -> some ViewSets a value for the given preference.func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some ViewApplies a transformation to a preference value.Creating custom preferencesprotocol PreferenceKeyA named value produced by a view.Setting preferences based on geometryfunc anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some ViewSets a value for the specified preference key, the value is a function of a geometry value tied to the current coordinate space, allowing readers of the value to convert the geometry to their local coordinates.func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some ViewSets a value for the specified preference key, the value is a function of the key’s current value and a geometry value tied to the current coordinate space, allowing readers of the value to convert the geometry to their local coordinates.Responding to changes in preferencesfunc onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some ViewAdds an action to perform when the specified preference key’s value changes.Generating backgrounds and overlays from preferencesfunc backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some ViewReads the specified preference value from the view, using it to produce a second view that is applied as the background of the original view.func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some ViewReads the specified preference value from the view, using it to produce a second view that is applied as the background of the original view.func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some ViewReads the specified preference value from the view, using it to produce a second view that is applied as an overlay to the original view.func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some ViewReads the specified preference value from the view, using it to produce a second view that is applied as an overlay to the original view.See AlsoData and storageAPI ReferenceModel dataManage the data that your app uses to drive its interface.API ReferenceEnvironment valuesShare data throughout a view hierarchy using the environment.API ReferencePersistent storageStore data for use across sessions of your app.

---

url: https://developer.apple.com/distribute/
title: App Store
description: 

Enroll in the App Store Small Business Program App Store
The App Store lets you easily deliver apps to hundreds of millions of people around the world on their iPhone, iPad, Mac, Apple TV, Apple Watch, and Apple Vision Pro.
With over $320 billion paid to developers and a rapid adoption rate of new software by Apple customers, it’s an incredible time to distribute on Apple platforms.
Explore what’s new
Learn more In-App Purchase
The App Store provides a powerful commerce system that makes it simple to offer your content and services across Apple platforms to people around the world.
Facilitating billions of transactions annually, it handles end-to-end payment processing — so you can focus on creating great apps and games that people will love.
Learn more visionOS
Apple Vision Pro has a brand-new App Store, where people can discover and download all the incredible apps for visionOS.
Whether you’ve created a new visionOS app or are making your existing iPad or iPhone app available on Apple Vision Pro, learn how to prepare your app for the App Store.
Learn more macOS
Learn how the Mac App Store beautifully showcases your apps and makes them even easier to find, and how Developer ID and notarization make it safer for users to install apps that you distribute yourself.

---

url: https://developer.apple.com/distribute/
title: App Store
description: 

Learn about distribution on macOS iPhone and iPad apps on the Mac App Store
iPhone and iPad apps are available without modification on Apple silicon Macs, opening new possibilities for users and developers alike.
Learn more Safari extensions
Enhance and customize the web browsing experience on iPhone, iPad, Mac, and Apple Vision Pro with Safari extensions.
Using powerful native APIs and frameworks, as well as familiar web technologies such as HTML, CSS, and JavaScript, you can easily create Safari extensions in Xcode and distribute them on the App Store or get them notarized for distribution outside the Mac App Store.
Learn about Safari extensions Distribution options in the European Union (EU)
Eligible developers on the alternative business terms in the EU can distribute iOS and iPadOS apps on the App Store, on alternative app marketplaces or their website, or operate an alternative app marketplace in the EU.
Learn more Submitting your apps
Learn how to prepare your iPhone, iPad, Mac, Apple TV, Apple Vision Pro, and Apple Watch apps for submission to App Review.
Learn more Promoting your apps
Get marketing assets to help promote your apps, and learn about getting featured on the App Store.
Learn more Badges and marketing resources
Let customers know that your product uses or is designed for Apple technologies.
Learn more Apple Developer ProgramOne membership.
All platforms.

---

url: https://developer.apple.com/distribute/
title: App Store
description: 

Join the Apple Developer Program to reach customers around the world on the App Store for iPhone, iPad, Mac, Apple TV, Apple Watch, Apple Vision Pro, and iMessage.
You’ll also get access to advanced app capabilities, extensive beta testing tools, and app analytics.
Learn about membership

---

url: https://developer.apple.com/security/
title: Security
description: 

See what’s new in security Security
Apple devices, platforms, and services provide world-class security and privacy to our users, with powerful APIs for you to leverage in your own apps.
Authentication Face ID and Touch ID
These secure ways to unlock, authenticate, and pay let users quickly access your app with just a glance or a touch of their finger.
The Secure Enclave, a hardware-based security processor isolated from the rest of the system, encrypts and protects the user’s data.
Learn more
Apple Pay
Apple Pay provides an easy and secure way to pay using Face ID or Touch ID, or by double-clicking Apple Watch.
Users can quickly provide their payment, shipping, and contact information to check out.
And because you don’t receive any credit or debit card numbers, you don't need to handle sensitive data when customers use Apple Pay.
Learn more
Sign in with Apple
Your users can easily sign in to your apps and websites using their Apple Account.
Instead of filling out forms, verifying email addresses, and choosing new passwords, they can use Sign in with Apple to set up an account and start using your app right away.
Learn more Automatic strong passwords
Password AutoFill simplifies login and account creation tasks for iOS and iPadOS apps, as well as websites.
With just a few taps, your users can create and save unique, strong passwords or log in to an existing account.

---

url: https://developer.apple.com/security/
title: Security
description: 

They don’t even need to know their password — the system handles everything.
Learn more
Passkeys
Based on industry standards for account authentication, passkeys replace passwords with cryptographic key pairs, making them easier to use and far more secure.
Adopt passkeys to give people a simple, secure way to sign in to your apps and websites across platforms — with no passwords required.
Learn more Making secure connections
A range of APIs on Apple platforms enables your apps to employ secure network connections and to benefit from OS-level security policies.
App Transport Security (ATS)
ATS establishes best-practice policies for secure network communications using Apple platforms, employing Transport Layer Security (TLS) version 1.2, forward secrecy, and strong cryptography.
NSAppTransportSecurity Secure Transport API
Use Apple’s secure transport API to employ current versions of the Secure Sockets Layer (SSL), Transport Layer Security (TLS), and Datagram Transport Layer Security (DTLS) cryptographic protocols for network communications.
Secure Transport Reference Supported algorithms
Starting with iOS 10 and macOS 10.12, the RC4 cipher suite is disabled by default.
In addition, Apple recommends that your servers use certificates signed with the SHA-2 cryptographic function.

---

url: https://developer.apple.com/security/
title: Security
description: 

What’s New in Security DeviceCheck and the App Attest API
Protect against security threats to your iOS, iPadOS, and tvOS apps and reduce fraudulent use of your services by managing device states and asserting app integrity.
The DeviceCheck services provide information that you can integrate into an overall antifraud strategy for your app and risk assessment for a given device.
Using the DeviceCheck service, a token on your server can set and query two binary digits of data per device — for example, to flag a device you‘ve determined to be fraudulent — while maintaining user privacy.
And with App Attest, you can generate a special cryptographic key on a device running iOS 14, iPadOS 14, and tvOS 15 or later, and use that key to validate the integrity of your app before your server provides access to sensitive data.
DeviceCheck Framework Certificate Trust APIs and Certificate Transparency
Strong encryption for your network connections is not enough.
To help ensure your app is connecting to the right server, employ Apple’s Certificate Trust APIs and Certificate Transparency.
Certificate, Key, and Trust Services
Certificate Transparency website
iOS trusted root certificates Protecting user data
Apple platforms provide a variety of features for protecting user data.
Purpose strings
Purpose strings let you statically declare the sensitive data and resources your app employs.

---

url: https://developer.apple.com/security/
title: Security
description: 

API guidance for using purpose strings
Information Property List Key Reference Copying and pasting sensitive data
Take advantage of privacy options when allowing users to copy and paste sensitive data in your apps on iPhone or iPad.
UIPasteboard Class Reference Keychain and iCloud Keychain
Keychain and iCloud Keychain provide a secure repository for sensitive user data, such as certificates, keys, passwords, and notes.
Keychain Services
Configuring Keychain Sharing App sandboxing
Protect Mac systems and users by limiting the privileges of an app to its intended functionality, increasing the difficulty for malicious software to compromise users’ systems.
App Sandbox Executing code securely
Apple platforms protect users with secure code execution.
Xcode, Apple’s integrated development environment (IDE), directly provides code signing for iOS, iPadOS, macOS, tvOS, and watchOS apps that you distribute on the App Store.
Sign your apps with Developer ID
Gatekeeper on macOS helps protect users from downloading and installing malicious software distributed outside the Mac App Store by checking for a Developer ID certificate.
Developer ID and Gatekeeper
Code Signing Guide
macOS Code Signing In Depth Notarize your apps
If distributing your Mac app outside of the Mac App Store, sign and upload your app to Apple to be notarized to certify your app is genuine and to perform a security check.

---

url: https://developer.apple.com/security/
title: Security
description: 

Notarizing macOS Software Before Distribution
Xcode Help: Distribute outside the Mac App Store Cryptographic interfaces
Apple platforms offer a comprehensive set of low-level APIs for developing cryptographic solutions within your apps.
Apple CryptoKit
Perform cryptographic operations securely and efficiently in your app.
CryptoKit Common Crypto library
The Common Crypto library supports symmetric encryption, hash-based message authentication codes, and digests.
Cryptographic Services Guide
Common Crypto on Apple Open Source SecKey API for asymmetric keys
SecKey provides a unified asymmetric key API across Apple platforms.
Certificate, Key, and Trust Services: Keys CryptoTokenKit for smart card support
The CryptoTokenKit framework provides first-class access for working with smart cards and other cryptographic devices in macOS.
CryptoTokenKit Security fundamentals and resources
These resources provide background information and support for security on Apple platforms.
Guides Apple Platform Security
Apple Product Security Programs Apple Security Research Device Program
Apple Security Bounty
Apple Root Certificate Program corecrypto
Both the Security framework and Common Crypto rely on the corecrypto library to provide implementations of low-level cryptographic primitives.
This is also the library submitted for validation of compliance with U.S.
Federal Information Processing Standards (FIPS) 140-2/-3.

---

url: https://developer.apple.com/security/
title: Security
description: 

Visit Apple Platform Certifications for up-to-date information on corecrypto validations.
Although corecrypto does not directly provide programming interfaces for developers and should not be used by iOS, iPadOS, or macOS apps, the source code is available to allow for verification of its security characteristics and correct functioning.
Download corecrypto source (2024 OS Releases)

---

url: https://developer.apple.com/maps/
title: Unlock the power of Apple Maps
description: 

Unlock the power of Apple Maps
Apple Maps is the best way to navigate and explore the world.
MapKit lets you bring the world’s most detailed city experiences from Apple Maps to your apps and websites, all with a focus on privacy.
The Maps Server API enables you to create more functional experiences across platforms, and SwiftUI lets you easily integrate Maps into your apps.
What’s new
MapKit and MapKit JS offer powerful new ways for you to integrate Maps into your apps and websites.
Showcase the places your users care about most with the all-new Place Card API.
Quickly and easily access the places that are relevant to your app or website with Place ID.
Integrate Maps into your websites with no coding required with the new Embed API.
Get more robust and relevant results than ever with the improved Search capability, which includes search pagination, bounding box filters, and more.
Watch the latest videos about Maps MapKit
Use MapKit to give your apps a sense of place.
Load Apple Maps directly into app windows and views, add annotations and overlays to call out points of interest, and offer text-completion to make it easier for people to search for a destination.
View documentation Snapshots
Create stunning map views for your app by taking advantage of optimized camera and pitch controls.
Geocoding
Convert human-readable addresses to geographic coordinates and vice versa.

---

url: https://developer.apple.com/maps/
title: Unlock the power of Apple Maps
description: 

Look Around
Include interactive panoramas to provide street-level views.
Annotations
Create custom annotations to call out a place, add user-friendly descriptions, and cluster groups of places.
Overlays
Add overlays and blend modes to highlight geographic regions or paths.
Search
Search the map for relevant locations nearby and provide automatic search completions based on users’ queries.
Places
Display beautiful place cards including helpful place details directly in your app or website.
Directions
Offer directions and travel times based on start and end points that users provide.
MapKit JS
MapKit JS lets you embed interactive maps directly into your websites across platforms and operating systems, including macOS, Windows, and Android.
Like MapKit for apps, you can also add annotations and overlays to the map to call out points of interest or user destinations.
View documentation
View sample code Maps Server API
Create efficiencies across platforms for a variety of Apple Maps features, such as geocoding, search, and estimated time of arrival.
The Maps Server API uses REST principles to increase performance, lower data usage, and improve battery life.
View documentation
Try Maps Server API Resources
Find the tools, documentation, and resources you need to integrate Apple Maps into your apps and websites.
View all resources

---

url: https://developer.apple.com/machine-learning/
title: Machine learning
description: 

Machine learning sessions, documentation, and sample code — all in one place Machine learning
Create intelligent features and enable new experiences for your apps by leveraging powerful on-device machine learning.
Learn how to build, train, and deploy machine learning and AI models into your iPhone, iPad, Vision Pro, Mac, and Apple Watch apps.
Core ML
Core ML delivers blazingly fast performance on Apple devices with easy integration of machine learning and AI models into your apps.
Convert models from popular training libraries using Core ML Tools or download ready-to-use Core ML models.
Easily preview models and understand their performance right in Xcode.
Learn more Machine learning-powered APIs
Bring intelligent on-device machine learning powered features, object detection in images and video, language analysis, and sound classification, to your app with just a few lines of code.
Learn more Vision
Build features that can process and analyze images and video using computer vision.
Natural Language
Process and make sense of text in different ways, like embedding or classifying words.
Speech
Take advantage of speech recognition and saliency features for a variety of languages.
Sound
Analyze audio and recognize it as a particular type, such as laughter or applause.
Translation
Translate text into the language your users prefer.

---

url: https://developer.apple.com/machine-learning/
title: Machine learning
description: 

Create ML
The Create ML app lets you quickly build and train Core ML models right on your Mac with no code.
The easy-to-use app interface and ability to customize built-in system models make the process easier than ever, so all you need to get started is your training data.
You can even take control of the training process with features like snapshots and previewing to help you visualize model training and accuracy.
Dive deeper, and gain more control, and enable model creation from within your app using the Create ML and Create ML Components frameworks.
Learn more Models
Download models that have been converted to the Core ML format and are ready to be integrated into your app.
Browse models Resources
Access tools, like Core ML Tools, that let you convert a model to Core ML from another format.
View resources

---

url: https://developer.apple.com/discover/
title: Infinite possibilities
description: 

Infinite possibilities
Developing for Apple platforms puts the cutting-edge technology of iOS, iPadOS, macOS, tvOS, visionOS, and watchOS at your fingertips, giving you limitless ways to bring incredible apps to users around the world.
These powerful platforms each offer unique capabilities and user experiences, yet integrate tightly to form a true ecosystem.
Hardware, software, and services are designed from the ground up to work together so you can build intuitive, multi-faceted experiences that are genuinely seamless.
What’s new for Apple developers
Explore new and updated technologies across Apple platforms, so you can create your best apps yet.
Learn more New to Apple platforms?
Get familiar with the tools and technologies you’ll use to build apps and games.
The Apple development ecosystem provides everything you need to bring incredible experiences to people around the world.
iOS iPadOS macOS tvOS visionOS watchOS iOS
iOS provides personalization features, intelligence, and seamless ways to communicate and share.
Take advantage of Live Activities to help people stay on top of what’s happening live in your app, right from the Lock Screen and the Dynamic Island on iPhone 14 Pro.
Use App Intents to help people quickly accomplish tasks related to your app by voice or tap.
Get the most out of the latest enhancements in MapKit, ARKit, Core ML, and more.

---

url: https://developer.apple.com/discover/
title: Infinite possibilities
description: 

Explore what’s new in iOS iPadOS
iPadOS provides productivity features that let you deliver compelling collaboration experiences and build capable, intuitive apps and powerful pro workflows.
You can bring desktop-class features to your iPad app, and offer widgets and Live Activities.
Metal helps your games and pro apps tap into the full potential of Apple silicon on the latest generations of iPad Pro and iPad Air.
And more.
Explore what’s new in iPadOS macOS
macOS helps you provide powerful and personal ways for people to share, collaborate, get more done, and even take advantage of their other devices.
And with the latest resources, it’s easier than ever to offer next-generation Mac games that run effortlessly, thanks to Apple silicon.
Explore what’s new in macOS watchOS
Implement powerful communication features in your app and deliver timely information in ways that are dynamic, colorful, and glanceable.
The exciting capabilities of watchOS let you bring the best of your app to the wrist by focusing on the content users care about most.
Explore what’s new in watchOS visionOS
Create cutting-edge spatial computing apps for the infinite canvas of Apple Vision Pro, featuring visionOS — the world’s first spatial operating system.

---

url: https://developer.apple.com/discover/
title: Infinite possibilities
description: 

Build apps that scale beyond the boundaries of a traditional display and take advantage of a fully three-dimensional interface controlled by a user’s eyes, hands, and voice.
Explore what’s new in visionOS tvOS
Deliver amazing experiences with stunning picture quality and immersive sound.
You can create rich apps and games that look amazing on the big screen, take advantage of Continuity Camera to make the living room a stage, customize your app’s interface, provide great functionality, and more.
Explore what’s new in tvOS Xcode
The Xcode toolset includes everything you need to create great apps for Apple platforms.
It provides a unified workflow for user interface design, coding, testing, and debugging.
The Xcode IDE combined with the Swift programming language make developing apps easy and fun.
Learn about Xcode
Learn about Swift App Store
The App Store makes it easy for people on iPhone, iPad, Mac, Apple TV, and Apple Watch to discover and download your apps and games.
And with a customer base that confidently purchases content through the safe, seamless buying experience of the App Store in 175 regions worldwide, you can turn your apps into incredible opportunities.

---

url: https://developer.apple.com/discover/
title: Infinite possibilities
description: 

Learn about the App Store Apple Developer Program
Membership includes all the tools, resources, and support you need to develop and distribute apps, including access to beta software, app services, testing tools, app analytics, and more.
Learn about membership

---

url: https://developer.apple.com/swiftui/
title: SwiftUI
description: 

SwiftUI and UI frameworks sessions, documentation, and sample code — all in one place SwiftUI
SwiftUI helps you build great-looking apps across all Apple platforms with the power of Swift — and surprisingly little code.
You can bring even better experiences to everyone, on any Apple device, using just one set of tools and APIs.
What’s new
SwiftUI is the best way to build apps across Apple platforms.
Discover new capabilities to customize the look and feel of your apps, as well as improved interoperability with UIKit and AppKit when building animations and gestures.
You can also take advantage of new text animations, plot functions in charts, take greater control of volumes and spaces in visionOS, and more.
Watch the latest video
Download the SwiftUI one-sheet Declarative syntax
SwiftUI uses a declarative syntax, so you can simply state what your user interface should do.
For example, you can write that you want a list of items consisting of text fields, then describe alignment, font, and color for each field.
Your code is simpler and easier to read than ever before, saving you time and maintenance.

---

url: https://developer.apple.com/swiftui/
title: SwiftUI
description: 

import SwiftUI struct AlbumDetail: View { var album: Album var body: some View { List(album.songs) { song in HStack { Image(album.cover) VStack(alignment: .leading) { Text(song.title) Text(song.artist.name) .foregroundStyle(.secondary) } } } }
} This declarative style even applies to complex concepts like animation.
Easily add animation to almost any control and choose a collection of ready-to-use effects with only a few lines of code.
At runtime, the system handles all of the steps needed to create a smooth movement, even dealing with user interaction and state changes mid-animation.
With animation this easy, you’ll be looking for new ways to make your app come alive.
Design tools
Xcode includes intuitive design tools that make it easy to build interfaces with SwiftUI.
As you work in the design canvas, everything you edit is completely in sync with the code in the adjoining editor.
Code is instantly visible as a preview as you type and you can even view your UI in multiple configurations, such as light and dark appearance.
Live updates.
Xcode automatically builds, runs, and displays changes to your app as soon as you make them.
The design canvas isn’t an approximation of your interface — it’s your app, running live.
Previews.
You can create previews of any SwiftUI view to see how it looks with sample data, and configure almost anything your users might see, such as large fonts, localizations, or Dark Mode.

---

url: https://developer.apple.com/swiftui/
title: SwiftUI
description: 

Previews can also display your UI in any device and any orientation.
Works with UIKit and AppKit
SwiftUI is designed to work alongside UIKit and AppKit, so you can adopt it incrementally in your existing apps.
When it’s time to construct a new part of your user interface or rebuild an existing one, you can use SwiftUI while keeping the rest of your codebase.
And if you want to use an interface element that isn’t offered in SwiftUI, you can mix and match SwiftUI with UIKit and AppKit to take advantage of the best of all worlds.
Get started
Download Xcode and use these resources to build apps with SwiftUI for all Apple platforms.
Download Xcode

---

url: https://developer.apple.com/security-bounty/
title: Apple Security Bounty
description: Your security research may be eligible for a reward through the Apple Security Bounty. We welcome reports from anyone.

Apple Security BountyIf you submit research for a security or privacy vulnerability, your report may be eligible for a reward.
The Apple Security Bounty program is designed to recognize your work in helping us protect the security and privacy of our users.Submit your research.If you believe you’ve discovered a security or privacy vulnerability that affects Apple devices, software, or services, please report it directly to us.
We review all eligible research for Apple Security Bounty rewards.
And with our online tools, submitting and tracking your reports is easier than ever.Easily send reports on the web.Sign in with your Apple ID to securely submit a report.
Reports should include a thorough technical description of the behavior you observed, the steps required to reproduce the issue, and a proof-of-concept or exploit.
View all your reports in one place.When you sign in, you can see all your reports at a glance and track the progress of individual reports while they’re being reviewed.Communicate with us.Apple engineers review and investigate every submission.

---

url: https://developer.apple.com/security-bounty/
title: Apple Security Bounty
description: Your security research may be eligible for a reward through the Apple Security Bounty. We welcome reports from anyone.

You can interact directly with us, and ask or respond to questions about your research.Get notified along the way.If your report results in a system or software update, you’ll see information about when and how we’ll acknowledge your work.
We’ll also automatically let you know if you receive a reward through the Apple Security Bounty program.Submit a reportApple Security Bounty CategoriesLearn moreTerms and
ConditionsLearn more

---

url: https://developer.apple.com/safari/
title: Safari for developers
description: 

Watch the latest videos about Safari Safari for developers
Safari is the best way to experience the internet on iPhone, iPad, and Mac.
Thanks to blazing-fast performance and industry-leading energy efficiency, millions of users enjoy exploring the web with Safari.
Take advantage of powerful new features, advanced developer tools, and cutting-edge technologies in Safari to deliver best-in-class websites and apps.
Safari web extensions
Safari web extensions use HTML, CSS, and JavaScript to offer powerful browser customizations — and now you can create them for every device that supports Safari.
Learn how to build a Safari web extension that works for all devices, and how to convert an existing extension to Safari through Xcode and the Safari Web Extension Converter.
Learn about Safari web extensions SharePlay in Safari
Create SharePlay experiences that people can enjoy on the web and in your app.
Learn how to use the Group Activities framework in combination with your website to bring SharePlay to Safari, connecting people through shared interactions — even if they haven’t yet downloaded your app from the App Store.
Learn about Group Activities in Safari Compact tab bar
In the compact tab bar view, the browser interface yields to the content.
Safari blends the tab bar into each website by matching its background color.

---

url: https://developer.apple.com/safari/
title: Safari for developers
description: 

As a web designer or developer, you can choose the color and code it into your HTML.
The entire interface is on one line, and elements naturally appear when needed, making your content feel more expansive as each web page or web app extends to all four edges of the window.
Learn about design in Safari Verification codes
Easily create more secure logins for users in iOS 15, iPadOS 15, and macOS Monterey, or later using the new iCloud Keychain verification codes.
Take advantage of verification codes, AutoFill, iCloud Keychain sync, and two-tap setup to simplify the multistep sign-in process.
Learn more
Passkeys with WebAuthn
With the Passkeys Technology Preview, you can try a new type of credential that’s intended to replace passwords.
A passkey is a phishing-resistant WebAuthn credential that’s backed up and synced across devices with iCloud Keychain.
Enable the technology preview using Enable Syncing Platform Authenticator in the Develop menu.
Learn more
Split View in Safari on iPad
People can view two websites at once on their iPad using split view.
Responsive Design Mode makes it easy to see how your websites will render in this view — just tap the iPad preview until it turns into a split view.
Learn more Apple Pay on the Web
Provide an easy and secure way to make purchases in Safari 10 or later.

---

url: https://developer.apple.com/safari/
title: Safari for developers
description: 

Apple Pay lets people quickly pay without entering payment, shipping, or contact information on supported websites from their Mac, iPhone, or iPad.
Because card numbers aren’t used and each transaction is confirmed with a fingerprint or passcode, Apple Pay is more secure than accepting credit and debit cards.
Learn more
Web Push in Safari
Send notifications to people who use your website or web app in Safari 16 on macOS 13 — even when Safari isn’t running.
Fully interoperable, Web Push’s standards-based implementation relies on the Push API, Notification API, and Service Workers.
If you’ve already coded Web Push using industry best practices, it will automatically work on Safari.
And you don’t need to be an Apple Developer Program member to implement this feature.
Learn more Safari Technology Preview
Download Safari Technology Preview to get a sneak peek at upcoming web technologies in iOS, iPadOS, and macOS, and experiment with them in your websites and extensions.
Learn more

---

url: https://developer.apple.com/support/articles/
title: Articles
description: 

Articles
Get details on membership, development, and distribution. Membership
Find out more about enrolling in a developer program and managing your account. Account Management Agreements and Guidelines D-U-N-S® Number Enrollment Fee Waivers Identity Verification Memberships Renewal Role Transfer Development
Get additional information on the tools and resources you need to develop apps on Apple platforms. App Capabilities BIMI support in Apple Mail Beta Software Installation Certificates Code-level Support Deprecated Kernel Extensions Developer ID Forums Intermediate Certificate Expiration IPv6-Only Networks macOS Server Service Migration Guide Preparing for Strong Customer Authentication Technotes Xcode Distribution
View details and documentation on distributing your apps on the App Store, in-house, and more. App Review App Store App Store Connect Help App Store Improvements Apple Business Manager and Apple School Manager Apple Platform Deployment Protecting Users from Suspicious Software Required Device Capabilities Universal Purchase Unlisted app distribution Update on apps distributed in the European Union

---

url: https://developer.apple.com/
title: Apple Developer
description: 

A week of technology and creativity
June 9-13, 2025. All online and at no cost. Hello Developer
Catch up on the latest stories, activities, and resources. Meet with Apple
Explore worldwide activities. SwiftUI
Build great-looking apps across all Apple platforms with the power of Swift — and surprisingly little code. Xcode 16
Transform your ideas into code. Introducing Pathways
Your first step toward developing for Apple platforms. visionOS 2 iOS 18 iPadOS 18 macOS Sequoia watchOS 11 tvOS 18 What’s new for Apple developers
Discover even more new and updated technologies across Apple platforms, so you can create your best apps yet. Apple Developer Program
Join the Apple Developer Program to reach customers around the world on the App Store for iPhone, iPad, Mac, Apple Watch, Apple TV, and Apple Vision Pro. You’ll also get access to beta software, advanced app capabilities, extensive beta testing tools, and app analytics.

---

url: https://developer.apple.com/documentation/swiftui/immersive-spaces
title: This page requires JavaScript.
description: Display unbounded content in a person’s surroundings.

Collection SwiftUI Immersive spaces API CollectionImmersive spacesDisplay unbounded content in a person’s surroundings.OverviewUse an immersive space in visionOS to present SwiftUI views outside of any containers.
You can include any views in a space, although you typically use a RealityView to present RealityKit content.You can request one of three styles of spaces with the immersionStyle(selection:in:) scene modifier:The mixed style blends your content with passthrough.
This enables you to place virtual objects in a person’s surroundings.The full style displays only your content, with passthrough turned off.
This enables you to completely control the visual experience, like when you want to transport people to a new world.The progressive style completely replaces passthrough in a portion of the display.
You might use this style to keep people grounded in the real world while displaying a view into another world.When you open an immersive space, the system continues to display all of your app’s windows, but hides windows from other apps.

---

url: https://developer.apple.com/documentation/swiftui/immersive-spaces
title: This page requires JavaScript.
description: Display unbounded content in a person’s surroundings.

The system supports displaying only one space at a time across all apps, so your app can only open a space if one isn’t already open.TopicsCreating an immersive spacestruct ImmersiveSpaceA scene that presents its content in an unbounded space.struct ImmersiveSpaceContentBuilderA result builder for composing a collection of immersive space elements.func immersionStyle(selection: Binding<any ImmersionStyle>, in: any ImmersionStyle...) -> some SceneSets the style for an immersive space.protocol ImmersionStyleThe styles that an immersive space can have.var immersiveSpaceDisplacement: Pose3DThe displacement that the system applies to the immersive space when moving the space away from its default position, in meters.Opening an immersive spacevar openImmersiveSpace: OpenImmersiveSpaceActionAn action that presents an immersive space.struct OpenImmersiveSpaceActionAn action that presents an immersive space.Closing the immersive spacevar dismissImmersiveSpace: DismissImmersiveSpaceActionAn immersive space dismissal action stored in a view’s environment.struct DismissImmersiveSpaceActionAn action that dismisses an immersive space.Hiding upper limbs during immersionfunc upperLimbVisibility(Visibility) -> some SceneSets the preferred visibility of the user’s upper limbs, while an ImmersiveSpace scene is presented.func upperLimbVisibility(Visibility) -> some ViewSets the preferred visibility of the user’s upper limbs, while an ImmersiveSpace scene is presented.Adjusting content brightnessfunc immersiveContentBrightness(ImmersiveContentBrightness) -> some SceneSets the content brightness of an immersive space.struct ImmersiveContentBrightnessThe content brightness of an immersive space.Responding to immersion changesfunc onImmersionChange(initial: Bool, (ImmersionChangeContext, ImmersionChangeContext) -> Void) -> some ViewPerforms an action when the immersion state of your app changes.struct ImmersionChangeContextA structure that represents a state of immersion of your app.Adding menu items to an immersive spacefunc immersiveEnvironmentPicker<Content>(content: () -> Content) -> some ViewAdd menu items to open immersive spaces from a media player’s environment picker.See AlsoApp structureAPI ReferenceApp organizationDefine the entry point and top-level structure of your app.API ReferenceScenesDeclare the user interface groupings that make up the parts of your app.API ReferenceWindowsDisplay user interface content in a window or a collection of windows.API ReferenceDocumentsEnable people to open and manage documents.API ReferenceNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.API ReferenceModal presentationsPresent content in a separate view that offers focused interaction.API ReferenceToolbarsProvide immediate access to frequently used commands and controls.API ReferenceSearchEnable people to search for text or other content within your app.API ReferenceApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.

---

url: https://developer.apple.com/wwdc/
title: A week of technology and creativity
description: 

A week of technology and creativity
June 9-13, 2025
Be there for the reveal of the latest Apple tools, frameworks, and features. Learn to elevate your apps and games through video sessions hosted by Apple engineers and designers. Engage with Apple experts in labs and connect with the worldwide developer community. All online and at no cost.
Add to calendar Experience WWDC25
Join us on the Apple Developer app, website, and YouTube channel.
Download the app
Subscribe to the YouTube channel Kick off WWDC25 at Apple Park
Apply to join us in person to celebrate the first day of WWDC25 on Monday, June 9.
Learn more Customize your account
Apple Developer profiles give you a new way to tailor your Apple Developer and WWDC experience. Complete your profile to get personalized Apple updates, activity announcements, and Forums experiences based on your interests and preferences.
Get started
Learn more about profiles To receive WWDC25 emails before and during the conference, check your Apple Developer account settings.
To get WWDC25 push notifications, visit the Account tab in the Apple Developer app. #WWDC25

---

url: https://developer.apple.com/events/developer-centers/
title: Apple Developer Centers
description: 

Apple Developer Centers
Learn directly from Apple experts in an incredible environment.
Apple Developer Centers are the home for in-person Apple developer sessions, labs, workshops, and appointments across a wide variety of categories.
“We felt so encouraged after meeting so many outstanding female developers around the world.
It gave us the adrenaline to keep working to bring Goal Map to the wider world.” Liu Chenpei
Goal Map developer “We’re definitely encouraged to produce better apps for a better and richer Apple ecosystem.
I want to do it well, and I want to do it for the rest of my life.” Larry Li
Money Cats developer “The Apple team has been incredibly supportive in my journey.
Tasks is our most successful product yet and incorporates a lot of the design and technical consultation they provided.

---

url: https://developer.apple.com/events/developer-centers/
title: Apple Developer Centers
description: 

Really grateful for the people and the opportunities!” Mustafa Yusuf
Tasks developer “Now there’s a step change in my ability to develop, write quality code, and design good user experiences.” David Smith
Widgetsmith developer “Having direct access to Apple improved our abilities and helped us enhance our app’s user experience.” Michael Simmons
Fantastical and Cardhop developer Bengaluru Explore activities
Get directions Cupertino Explore activities
Get directions Singapore Explore activities
Get directions Shanghai Explore activities
Get directions Discover moredeveloper programs Swift Student Challenge
An opportunity for student developers to showcase their creativity and coding capabilities through app playgrounds.
Learn more Apple Developer Program
Join the Apple Developer Program to reach customers around the world.
Learn more

---

url: https://developer.apple.com/ipados/
title: Build for iPadOS 18
description: 

iPadOS 18 sessions, documentation, and sample code — all in one place Build for iPadOS 18
Make navigating easier and more responsive by designing for the distinct iPad experience.
Create more customized apps that appear in more places across the system with controls, widgets, and Live Activities.
And with Apple Intelligence, you can bring personal intelligence into your apps to deliver new capabilities — all with great performance and built-in privacy.
Want the highlights?
Download the iPadOS one-sheet Apple Intelligence
Apple Intelligence is the personal intelligence system that puts powerful generative models right at the core of your iPhone, iPad, and Mac.
It powers incredible new features to help people communicate, work, and express themselves.
Writing Tools are available system-wide, and help users rewrite, proofread, and summarize text.
The Image Playground API delivers an easy-to-use experience where people can create fun, playful images right in your app.
Genmoji bring fun new ways to communicate by providing the ability to create an emoji for any occasion.
And Siri will be able to access text displayed in your app, and take hundreds of new actions in and across apps using the App Intents you make available.

---

url: https://developer.apple.com/ipados/
title: Build for iPadOS 18
description: 

Learn about Apple Intelligence Get started with Writing Tools Bring expression to your app with Genmoji Watch more of the latest videos App Intents
New orchestration capabilities provided by Apple Intelligence and significant enhancements to App Intents will enable Siri to take hundreds of new actions in and across apps.
Using the Transferable API, File Representations, Item Providers, Spotlight Index, and more, you can make your entities more meaningful to the platform.
Plus, you can provide powerful functionality in Siri and Spotlight.
You can also explore new APIs for error handling, deferred properties, and associated enums.
Bring your app to Siri What’s new in App Intents Watch more of the latest videos Controls
Now it’s faster and easier for people to complete frequent tasks from your apps with new controls in Control Center and on the Lock Screen.
Controls can toggle a setting, execute an action, or deep link right to a specific experience — and you can create them with just a few lines of code and the new Controls API.
Extend your app’s controls across the system Design for iPad Redesigned tab bar
Floating at the top of your app, the redesigned tab bar makes it easy for people to jump to their favorite tabs.
And it turns into a sidebar for moments when they want to dive deeper.
It’s now even simpler to build important interactions, like customization, menus, and drag and drop.

---

url: https://developer.apple.com/ipados/
title: Build for iPadOS 18
description: 

So you can accomplish more, with less code.
Watch the latest video
Refined animations
Your apps can take advantage of the latest refined animations — like the zoom transition in Photos, which is precisely controlled by touch and can even be interrupted as it’s happening to keep your app feeling responsive.
Watch the latest video
Updated document launch view
Create a bespoke look for your app and connect your launch experience to your brand.
You can customize actions, change the background, and add fun animated assets to bring the header to life.
Watch the latest video Machine learning
Core ML
Updates to Core ML will help you optimize and run advanced generative machine learning and AI models on device faster and more efficiently.
Core ML Tools offer more granular and composable weight compression techniques to help you bring your large language models and diffusion models to Apple silicon.
Models can now hold multiple functions and efficiently manage state, enabling more flexible and efficient execution of large language models and adapters.
The Core ML framework also adds a new MLTensor type that provides an efficient, simple, and familiar API for expressing operations on multi-dimensional arrays.
And Core ML performance reports in Xcode have been updated to provide more insight into support and estimated cost of each operation in your model.

---

url: https://developer.apple.com/ipados/
title: Build for iPadOS 18
description: 

Create ML
Object tracking, the first spatial computing template, is designed to help you track real world objects in your visionOS app.
Enhance your customized model training workflow with the new data preview functionality in the Create ML app and new Swift APIs from Create ML Components that help you create time series models directly within your app.
Machine learning APIs
The new Translation framework allows you to translate text across different languages in your app.
The Vision framework API has been redesigned to leverage modern Swift features, and also supports two new features: image aesthetics and holistic body pose.
And the Natural Language framework offers extended language support with multilingual contextual embedding.
Learn about machine learning
Watch the latest videos RealityKit 4
RealityKit 4 aligns its rich feature set across iPhone, iPad, Mac, and Apple Vision Pro.
Reality Composer Pro, a new tool that launched with Apple Vision Pro, enables development of spatial apps on all these platforms.
Portals, particles, shaders built with MaterialX, and many other features can now be used with RealityView on all four platforms.
This includes APIs for adding materials, shader-based hover effects, and virtual lighting, as well as new features — like blend shapes, inverse kinematics, skeletal poses, and animation timelines — that expand character animation capabilities.

---

url: https://developer.apple.com/ipados/
title: Build for iPadOS 18
description: 

RealityKit 4 also provides more direct access to rendering with new APIs for low-level mesh and textures, which work with Metal compute shaders.
And because Xcode view debugging now supports inspecting 3D scene content, it’s easier than ever to inspect and debug your RealityKit content.
Learn about RealityKit
Watch the latest videos Home Screen
App icons and widgets can now appear Light, Dark, or with a Tint.
And no matter how your icon is rendered, you can make sure it always looks great by customizing each version.
Learn about icons Passkeys
Passkeys are a replacement for passwords that are more secure, easier to use, and can’t be phished.
They offer faster sign-in, fewer password resets, and reduced support costs.
Use the new automatic passkey upgrade API to create a passkey when someone signs in to your app and let them know that the passkey was saved — all without interrupting their flow.
Learn about passkeys
Watch the latest video App Store and StoreKit
Find out how to nominate your apps for featuring on the App Store, share exciting moments (like a version launch) with marketing assets generated for you, and deep link to specific content in your app from custom product pages.
Enhancements to StoreKit views give you more flexibility and customization options when building your merchandising experiences.

---

url: https://developer.apple.com/ipados/
title: Build for iPadOS 18
description: 

Improvements to StoreKit testing in Xcode and the Apple Sandbox environment help you test additional purchase scenarios.
And win-back offers give you a new way to re-engage previous subscribers.
Learn about what’s new on the App Store
Watch the latest videos Apple Pay
Bring great Apple Pay experiences to even more people with third-party browser support and use new API updates to integrate Apple Pay into even more purchasing flows.
Learn about what’s new in Apple Pay
Watch the latest video Get started
Download Xcode to start building apps for all Apple platforms.
Download Xcode

---

url: https://developer.apple.com/localization/
title: Expanding your app to new markets
description: 

Learn about new App Store pricing upgrades Expanding your app to new markets
The App Store is available in 175 regions and 40 languages to make it easy for users around the world to discover and download your app.
Localizing your app helps make it relevant to a variety of cultures and languages, and provides an opportunity to grow your business.
Learn how to prepare your app for a global audience and understand considerations for expanding into new markets.
Structure for Localization Prepare for a global audience Localize your app Prepare for launch Evaluate success Structure your app for localization
Internationalization, the process of structuring your app’s code and UI for localization, is a fundamental first step in building apps for a global audience.
With Apple’s powerful tools and technologies, including Xcode, Foundation APIs, Auto Layout, and Unicode support, it’s easy to prepare your apps to support multiple languages and regions, even before you know which languages you’d like to add.
Xcode automatically separates user-visible text and images are separated from executable code.
When you translate these elements into other languages, you can integrate the content back into your app as separate localized resource files stored within the app bundle.

---

url: https://developer.apple.com/localization/
title: Expanding your app to new markets
description: 

Images — including image sets, Apple Watch complications, Apple TV image stacks, Sprite Atlases, and symbol sets — can be localized directly in your Asset Catalog.
You can also use localized SF system symbols and set the directionality for custom symbols — for example, for right-to-left languages like Arabic and Hebrew.
Use Foundation APIs to correctly express user-visible or dynamically-generated values, such as dates, lengths, weights, prices, and currency symbols, across different locales.
Ensure your app accepts user-generated text in any language and in multiple languages at once, independent of the user interface language.
This allows app content to appear in the user’s preferred language and format.
SwiftUI makes it easy to create localized apps.
User-visible text is automatically extracted by Xcode and default layout behaviors are localization-ready.
You can also take advantage of Auto Layout to automatically adjust the dimensions and layouts of views, extensive Unicode support to work with text from any language, the powerful text handling technologies of Cocoa and Cocoa Touch to display, lay out, and edit text in many languages, and much more.
With iOS and iPadOS, users can select their preferred language for your app independent of their device language, making it easy for multilingual users to switch between languages in your app.

---

url: https://developer.apple.com/localization/
title: Expanding your app to new markets
description: 

On macOS, users can set the language of an app in the Language & Region section of System Preferences.
Localize your SwiftUI app
Localizing your app Prepare for a global audience
Investigate market factors
Market-specific demographics, such as population, language, and purchasing power, can help you better understand areas that might have an affinity or need for your app.
Every market has its own preferences for the types of apps or categories customers most enjoy.
For example, games are popular worldwide, however strategy games may be more popular in a particular region.
Consider selecting markets with similar attributes to those in which you have already established success, such as strong app downloads, sales, usage, or retention metrics, as this may make for easier growth.
When selecting a market, assess how your app might fit in and how its value and functionality aligns with that market’s needs.
You may even identify a need in the market that is not yet filled, allowing you to bring unique value to users with your app.
Use App Analytics to determine potential markets
If you offer your app worldwide but haven’t localized for particular regions, you can look at key performance metrics, such as Product Page Views, App Units, Sales, and Active Devices, filtered by territory.

---

url: https://developer.apple.com/localization/
title: Expanding your app to new markets
description: 

This can help you determine if your app is attracting users in a particular territory that might benefit from localization.
For example, if your app is primarily in English and you see lower than average retention or Sessions per Active Device in Germany, you might consider adding German language support.
Keep in mind that some markets may have greater proficiency with your app’s primary language, while others may require more significant localization work.
Usage data such as active devices, sessions, and retention include only users who have agreed to share their diagnostics and usage information with you.
For more information on using App Analytics, view Gain insights with analytics.
Consider local culture and customs
While your app and product page should each provide a consistent experience across all markets, it’s sometimes valuable to refine certain elements for cultural relevance.
For example, you might try incorporating market-specific content or cultural moments, such as special holiday content or regional art styles.
You may want to consider any local policies and market regulations, as well as any political or religious sensitivities, to increase the likelihood that your app is well received.

---

url: https://developer.apple.com/localization/
title: Expanding your app to new markets
description: 

Localize your app
Translate user-visible content
Use the Xcode Export For Localization feature to automatically extract all localizable content, including localized strings referenced from code, stringsdict files, and Interface Builder files, as well as any localized assets.
This process shouldn’t require modifications to your source code, making it easy to work on translations in-house or with an external localization service.
Be sure to also localize purpose strings for a consistent app experience, and consider localizing your privacy policy so that all users have a clear understanding of how their data may be handled.
Apple services.
Use Apple APIs to automatically present localized buttons, payment sheets, errors, and more for Apple Pay, Apple Wallet, and Sign in with Apple.
Audiovisual media.
You can also provide localized support for audiovisual media in your app using AVKit and AVFoundation.
These frameworks provide built-in support for easily presenting subtitles and closed captions, and for selecting alternative audio and video tracks.
Localization services.
If choosing an external localization service to help translate content, find out if they specialize in localizing for particular languages, cultures, or categories, and confirm the levels of quality assurance they provide.

---

url: https://developer.apple.com/localization/
title: Expanding your app to new markets
description: 

Providing the service with context about your app and content can help increase efficiency and minimize translation errors.
Consider creating a guide with important details — for example, a playbook with character names and personalities, explanations of jokes or humor, a glossary of frequently used terms, and screenshots that show where the translations will be used.
Avoid machine translation as your only translation method, since this can lead to inaccurate and low-quality translation because it does not account for context, cultural sensitivities or language nuances.
For example, the “book” button in a hotel app might be incorrectly translated to be “novel” rather than “reserve”.
Xcode documentation: Localization Test your localization
Configure test plans in Xcode to easily run tests with different settings and define your testing variants in one place.
This helps flag any instances of clipping, truncation, layout overlapping, or issues with right-to-left formatting for the devices and languages you support.
You can use the Localization Screenshots feature to generate localized screenshots from successful tests and export these screenshots for use in tutorials, marketing materials, or your App Store product page.
Once your app is localized, use TestFlight to share your app with a group of users in the market to get feedback and gather opportunities for improvement.

---

url: https://developer.apple.com/localization/
title: Expanding your app to new markets
description: 

Previewing localizations
Testing localizations when running your app Prepare for launch Localize your product page
Localize your App Store metadata in App Store Connect — such as your app description, keywords, app previews, and screenshots — for each of the regions in which you offer your app.
You can also translate your app’s name and tailor your keywords to reflect the values of each market so your app might better resonate with the local audience.
You can use the App Store Connect API to automate your metadata upload and management for multiple localizations.
Localize App Store information
Creating your product page
Automate your workflow with the App Store Connect API International payment methods and pricing
The App Store handles payment processing, so it’s easy to offer your content to users around the world.
Users pay for your apps and in-app purchases with credit or debit cards, carrier billing, digital wallets, or App Store and iTunes gift cards, depending on regional availability.
When pricing your apps and in-app purchases, you’ll choose a price tier in App Store Connect that contains prices already adjusted appropriately for the market in each region.

---

url: https://developer.apple.com/localization/
title: Expanding your app to new markets
description: 

For auto-renewable subscriptions, you can choose from 800 price points across all available currencies and price tiers to offer appropriate pricing for each storefront, with an additional 100 higher price points available upon request.
Set in-app purchase pricing
Pricing subscriptions for each territory Adapt your marketing strategy
When launching your app in a new market, adapt your marketing strategy to the region to help your audience easily learn about your app and the value it provides.
Research which social networks or other channels are most popular with local audiences, as these may vary significantly across markets, and use them to spread the word about your app.
Localize any materials you use in your marketing and user acquisition efforts, such as screenshots, banners, and advertisements.
App Store badges.
Use the Download on the App Store badge in your communications as a clear call to action to download your app.
Localized badges are available to let your international audience know that your app is tailored for them.
Download badges from the App Store Marketing Guidelines.
App Store marketing tools.
Generate short links or embeddable code that lead to your App Store product page and display your app icon, a QR code, or an App Store badge.

---

url: https://developer.apple.com/localization/
title: Expanding your app to new markets
description: 

You can also create custom marketing assets — such as banners and images — and add preset messages in multiple languages to promote your apps in your regional advertising efforts.
View App Store marketing tools.
Apple Ads.
Promote your app across the App Store.
Reach people on the Today tab, on the Search tab, at the top of search results, and at the bottom of product pages.
Available in 91 countries and regions.
Try it for free with a 100 USD credit.* Learn more and read developer success stories.
*Eligible developers who sign up for Apple Ads will have a 100 USD credit applied to their new account.
Full terms and conditions apply.
Evaluate success Use App Analytics in App Store Connect to find out how customers discover and engage with your app, and filter this data by the territories in which you’ve expanded.
See how many users discover your app while searching or browsing on the App Store and measure the percentage of views that result in a first-time download.
Find out if users continue to use your app, and see the number of installations, sessions, and active devices.
Compare this data to that of other markets where your app has been available longer.
You may find you need to adjust your marketing strategy or better localize your app to improve performance.

---

url: https://developer.apple.com/localization/
title: Expanding your app to new markets
description: 

Once you’ve found success in your chosen markets, you can identify new markets and add additional localizations to provide a great user experience for even more customers.
Learn about measuring app performance Resources
Find tools, documentation, and resources you need to localize your app and product page.
Learn more

---

url: https://developer.apple.com/sf-symbols/
title: SF Symbols 6
description: 

Watch the latest videos about SF Symbols SF Symbols 6
SF Symbols is a library of over 6,000 symbols that are designed to integrate seamlessly with San Francisco, the system font for Apple platforms.
Symbols come in nine weights and three scales, automatically align with text, and can be exported and edited using vector graphics editing tools to create custom symbols with shared design characteristics and accessibility features.
SF Symbols 6 brings new and enhanced animations, updated annotation tools, and over 800 new symbols.
New animations
New, configurable animations make symbols even more expressive.
Wiggle, rotate, and breathe provide new ways for symbols to respond to user input, convey status changes, and signal ongoing activity.
These animated effects leverage existing symbol layer structures enabling compatibility with custom symbols.
Magic replace
The updated replace animation allows symbols to more intelligently transition between related variants.
Slashes can now draw on and off, and badges can appear, disappear, or be replaced independently of the base symbol.
Custom symbols can take advantage of these new behaviors by using components in the SF Symbols app.
Enhanced annotation
Updated annotation tools for custom symbols allow you to specify preferred animation directions for wiggle and rotate, as well as custom anchor points for rotation.

---

url: https://developer.apple.com/sf-symbols/
title: SF Symbols 6
description: 

Symbols supporting variable color can now be annotated to optimize closed loop designs for seamless continuous playback.
Over 800 new symbols
New symbols include devices, automotive indicators, health and fitness symbols, formatting controls, and more.
New localized symbols include variants across Latin, Greek, Cyrillic, Hebrew, Arabic, Chinese, Japanese, Korean, Thai, Devanagari, as well as several Indic numeral systems.
These new symbols are available in apps running iOS 18, iPadOS 18, macOS Sequoia, tvOS 18, watchOS 11 and visionOS 2.
Download SF Symbols 6 Download
Requires macOS Ventura or later.
Explore the Human Interface Guidelines
Get details on how to use SF Symbols in your apps.
Learn more

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

Send us your feedback and report bugs
Developer feedback is vital to making the Apple ecosystem even better.
With Feedback Assistant available on iPhone, iPad, Mac, and the web, it’s easy to report issues you encounter and request enhancements to APIs, tools, and services.
Getting started Feedback Assistant app Writing your feedback Including attachments Team collaboration Submission & status Workarounds Inactive reports Related programs Resources Getting started Feedback from our developer community helps us address issues, refine features, and update documentation.
Please let us know when you encounter an issue with Apple software or hardware, have an SDK feature request, find code-level bugs and problems with Apple-provided APIs, or notice errors or omissions in developer documentation.
Start your feedback as soon as you can.
When you send new feedback, the Feedback Assistant app automatically collects time-sensitive information that’s important in helping diagnose the issue.
If you use the Feedback Assistant website, you can collect this information manually.
Once this is done, you can upload the information directly to Feedback Assistant.
If you plan to send feedback later or through the website, make note of key information, such as the date and time the issue happened, and collect any files or logs as soon as the issue occurs.

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

You can start feedback on one device, save it, then switch to a different device to add more details and submit later.
File reports against beta software early.
Beta software can sometimes introduce changes to APIs or new issues in your app that need to be addressed.
If you encounter an issue during the beta release cycle, submit feedback right away to increase the likelihood that the issue will be addressed by the public release.
Submit feedback for every issue.
Even if you think an issue is obvious and are sure others have reported it, you should still submit feedback.
The more feedback we receive about an issue, the better we understand how many people are impacted by it.
Using the Feedback Assistant app The Feedback Assistant app offers several helpful features:
Automatic on-device diagnostics.
There’s no need to manually collect and attach a sysdiagnose (diagnostic information from various parts of the operating system and all recent crash logs) for each issue.
With your permission, Feedback Assistant can execute area-specific diagnostics, allowing you to send information beyond the scope of a sysdiagnose.
Remote filing.
With Feedback Assistant on iPhone and iPad, you can submit feedback about your connected Apple TV, HomePod, or Apple Watch, with support for collecting device diagnostics directly on those devices.
Detailed forms.

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

Provide detailed information by answering specific, conditional questions through a simple filing process.
Opening the app
iPhone and iPad.
On beta versions of iOS and iPadOS, the app is available by default on the Home Screen.
On publicly released versions of iOS and iPadOS, you can enable the app by installing a beta profile.
The app can also be launched via the applefeedback:// URL scheme.
Mac.
The app is included in the CoreServices folder in all versions of macOS, and can be launched via the applefeedback:// URL scheme or by searching for Feedback Assistant in Spotlight.
You can also open a Finder window and select Go to Folder from the Go menu, then enter this path: /System/Library/CoreServices/Applications.
Writing your feedback Select an appropriate starting topic.
There are several places in Feedback Assistant to start your feedback.
Developer Technologies & SDKs: Select this topic for feedback related to a specific framework or API, then select the specific technology (for example, CoreBluetooth) and OS (for example, iOS).
Developer Tools & Resources: Select this topic for feedback related to Xcode, App Store Connect, or other developer tools and resources, then select the specific tool or resource (for example, Reality Composer Pro).

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

Relevant OS (iOS & iPadOS, macOS, tvOS, watchOS, or HomePod): Select the relevant OS for feedback related to general use of a system, then select the specific area (for example, Messages).
File one issue per report.
To ensure accurate processing, make sure your report only addresses one issue or request.
Reports that discuss multiple issues aren’t actionable and may be returned for resubmission as separate reports.
Title.
Your report title should be concise, while clearly describing the issue and any factors that could influence the issue you’ve encountered.
Summarize and include key details, such as technology, platform, and version.
For example, “Calendar events on iOS 15.2 beta are missing after creating a quick event” provides more actionable detail than “Calendar events are missing.” If the issue is related to your app, make sure to also include your app’s name and version.
Description.
Your report should include instructions on how to reproduce the issue, with detailed descriptions of each step.
For instance, you could write: Click Quick Event in the Calendar app.
Fill out an event with any title.
Press Return.
Actual results: The event appears in the right place in my calendar, but then disappears.
Expected results: The event should appear and stay on my calendar.

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

After you fill in the steps and expected results, consider any additional factors that could influence the problem.
For example, are you signed into iCloud?
Do you have any Accessibility settings turned on?
Can you reproduce the issue elsewhere in the operating system?
The more information you include, the more effectively we can diagnose the issue.
Including attachments Sysdiagnose.
Since the Feedback Assistant app automatically attaches a sysdiagnose for each issue, we recommend submitting reports directly from the app on your iPhone, iPad, or Mac.
A sysdiagnose contains valuable information about the state of your system and all recent crash logs, and should be included with all reports, even if you think one is not needed.
Alternatively, you can use the website to manually upload relevant files and folders as compressed ZIP files.
You may be asked to supply additional files after your report has been reviewed.
Debug profiles and logs.
You may be asked to install a debug profile so you can provide extra reporting and logging details to further diagnose your report.
Debug profiles can capture specific details about a technology or framework to help us diagnose the problem.
To install a debug profile, download it to your device from the Profiles and Logs page.

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

Then follow the instructions to capture the requested information, and make sure to include any related logs to expedite the investigation.
Mac System Information Report.
When you encounter crashes, kernel panics, hardware bugs, or printing issues, you must include a Mac System Information Report with your feedback.
Builds and sample code.
If the problem appears in your app, consider recreating it in a smaller project so it’s easier to demonstrate.
This helps narrow down the specific bug you’re dealing with and is one of the easiest ways for us to identify the problem.
If you can’t produce a full project that complies, code examples are also helpful.
Screenshots or screen recordings.
If an issue appears in a user interface, make sure to include visuals with your feedback.
A screenshot or screen recording of the reproduced bug can provide valuable clues and details you may not have thought to include in the description field.
Collaborating with your team We recommend submitting feedback from your team inbox in Feedback Assistant, where you can view all reports filed by your team, reply to comments, and send new messages to Apple.
The assignee of a team report will receive a notification if there’s a request from Apple and can download any attachments or close the report at their discretion.
By default, a report is assigned to the team member who submitted it.

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

However, it can be reassigned to any other team member.
Reports from your team inbox belong to the organization rather than the people who submitted them.
If an assignee leaves the organization, the report stays with the team.
In addition to your team inbox, you also have a personal inbox for separate submissions.
You can move reports from your personal inbox to your team inbox at any time.
What to expect after submission Your feedback will be assigned a Feedback Assistant ID, which you can use to check for updates or resolutions on feedback you’ve filed.
We may also email you asking for additional information or files to investigate the issue.
While we can’t reply to every submission, we review each one and monitor the amount of feedback submitted so we can better understand the scope of the problem.
Please note, as an issue is being worked on, we can’t provide intermediate status updates until a fix is available in a beta software update for everyone, or a different resolution has been identified after completing the investigation of the issue.
Understanding feedback status Recent Similar Reports.
Find out how many similar reports have been grouped with your report within the last year.
This status will be set to None, Less than 10, or More than 10.
As we refine our understanding of your feedback and as more feedback is received from others, this value may change.

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

Any reports created in the last year are considered recent, since as reports age they’re often less reproducible and less likely to be similar to new reports, even if the symptoms seem similar.
Open.
The report is being investigated by Apple.
It may also have been returned to you with a request for additional information to continue the investigation.
Potential Fix Identified – For a Future OS Update.
A potential fix for the reported issue may appear in a future OS update, which will usually be released within the next year.
This resolution also includes the platform version and build number when it becomes available in a beta release.
Your report may be grouped with similar reports that initially seem to have the same root cause.
However, similar reports may have multiple causes.
If you find that the fix doesn’t fully resolve your report even though it resolves similar reports, file a new report.
Investigation Complete – Change Required by a Third Party.
The reported issue requires changes in non-Apple software, hardware, or services in order to be resolved.
Investigation Complete – Works as Designed.
The report describes behavior that occurs as designed.
Investigation Complete - Unable to Diagnose with Current Information.
The reported issue requires additional information to continue the investigation.

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

You may need to supply additional log files, steps to reproduce, or other clarifying details.
Closed.
You’ve marked your report as closed.
You can mark a report as closed at any time if you’re no longer experiencing the issue.
If you encounter the same issue after closing your report, submit a new report.
Working around known issues If you continue to experience an issue with Apple software or services after filing a report with Feedback Assistant, workarounds may be available while the issue is being investigated.
To determine whether a solve or workaround exists, start by checking the following resources:
Release notes.
Review the latest release notes for recent software updates to verify if an issue from a previous update has been resolved or if there’s a workaround.
The latest release notes can be found in your Feedback Assistant inbox or on the Software Releases page.
Forums.
Check if the issue you’re experiencing has been discussed and resolved on the Apple Developer Forums.
Code-level support.
Members of the Apple Developer Program or Apple Developer Enterprise Program can ask for code-level support on the forums, or by filling out the Code-Level Support Request form.
Be sure to include the information you provided in your Feedback Assistant report, along with any pertinent files or logs.

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

Your Feedback Assistant ID can also be helpful in diagnosing your issue, and we encourage you to include it as well.
Incidents are assigned to technical support engineers who can investigate any possible workarounds.
Removing data from inactive reports As part of our commitment to privacy and in accordance with the European Union’s General Data Protection Regulation (GDPR), we’ve removed developer data from certain reports as of late fall 2018.
Data removed from inactive issues.
Developer data is removed from issues that have been closed for at least five years, haven’t been updated for 60 days, and aren’t duplicates of other issues.
Developer-originated sysdiagnoses and related attachments will be deleted, and any reference to the developer who submitted the original feedback will be redacted.
In addition, these issues will no longer be displayed.
Duplicate issues will remain available for a limited time.
If an issue is marked as a duplicate, developer data will be removed once the original bug has been closed for five years and hasn’t been updated for 60 days.
Until then, you can continue to follow the state of the original issue until it’s closed, and engineering can still reach out to you until the issue is resolved.

---

url: https://developer.apple.com/bug-reporting/
title: Send us your feedback and report bugs
description: 

Related programs Apple Security Bounty
If you believe you’ve discovered a security or privacy vulnerability that affects Apple devices, software, services, or web servers, please report it to the Apple security team.
We welcome reports from anyone, including security experts, developers, and customers.
All reports are reviewed and evaluated for a payout.
Learn more
Apple Beta Software Program
The Apple Beta Software Program collects feedback on prerelease Apple software.
As a member of the Apple Beta Software Program, you’ll be able to enroll your devices to access the public betas, try out the latest features, and provide feedback directly to Apple using the Feedback Assistant app.
Learn more Resources Feedback Assistant User Guide
Profiles and Logs
Downloads and release notes
Developer Technical Support
Developer Forums

---

url: https://developer.apple.com/documentation/
title: This page requires JavaScript.
description: Browse the latest sample code, articles, tutorials, and API reference.

Apple Developer DocumentationBrowse the latest sample code, articles, tutorials, and API reference.Create compelling apps with Swift and Apple Intelligence.
Making onscreen content available to Siri and Apple Intelligence Classifying images for categorization and search Previewing widgets and Live Activities in Xcode Apple Intelligence updates Integrating actions with Siri and Apple Intelligence Making camera actions available to Siri and Apple Intelligence Getting motion-activity data from headphones Image Playground Release notesRead the latest news for platform SDKs and developer tools.
iOS/iPadOS macOS tvOS watchOS visionOS Safari Xcode Dive into WWDC24 New sample app RealityKit across platforms Build an exciting multiplatform game experience using new features from RealityKit and more.
View sample code New sample app Enhancements in SwiftUI Make your app shine with SwiftUI updates and create a beautiful new navigation experience for iPad.
View sample code Learn about new features in Swift, tools, and technologies.

---

url: https://developer.apple.com/documentation/
title: This page requires JavaScript.
description: Browse the latest sample code, articles, tutorials, and API reference.

Adopting unified Maps URLs FSKit App Shortcuts AVCam: Building a camera app Adding synthesized speech to calls Enhancing your app’s content with tab navigation Unifying your app’s animations Enhancing your app experience with the Camera Control New documentation Updates and highlights from WWDC24 Browse new and updated documentation for technologies, frameworks, and APIs.
Read documentation New samples Sample code from WWDC24 Browse a list of example projects that show best practices for new frameworks and technologies.
View sample code Design documentation Human Interface Guidelines Check out design recommendations for controls, games, and augmented reality.
Now available to read in Korean.
Read design guidance Elevate your apps Creating a camera experience for the Lock Screen Creating controls to perform actions across the system Customizing window styles and state-restoration behavior in macOS Configuring the PencilKit tool picker Translating text within your app Fetching and filtering time-based model changes Performing accessibility testing for your app Setting up broadcast push notifications Build compelling games Design guidance Designing for games Read design guidelines to help you create great immersive and interactive games.

---

url: https://developer.apple.com/documentation/
title: This page requires JavaScript.
description: Browse the latest sample code, articles, tutorials, and API reference.

View design guidelines New sample app Creating tabletop games Make an immersive spatial board game where multiple players interact with pieces on a table.
View sample code Discover next-level features Enabling the double-tap gesture on Apple Watch Creating a tvOS media catalog app in SwiftUI FinanceKit Adding support for Tap to Pay on iPhone to your app Discovering and configuring accessories Communicating with human interface devices Authorizing a Bluetooth accessory to share a dice roll Development essentials Introducing SwiftUI SwiftUI is a modern way to declare user interfaces for any Apple platform.
Create beautiful, dynamic apps faster than ever before.
Read article View fundamentals Define the visual elements of your app using a hierarchy of views.
Read article Adding and editing persistent data in your app Create a data entry form for collecting and changing data managed by SwiftData.
View sample code Accessibility Make your apps accessible to everyone who uses Apple devices.
View API collection Creating your first visionOS app Build a new visionOS app using SwiftUI and add platform-specific features.
Read article Metal developer workflows Locate and fix issues related to your app’s use of the Metal API and GPU functions.

---

url: https://developer.apple.com/documentation/
title: This page requires JavaScript.
description: Browse the latest sample code, articles, tutorials, and API reference.

Read article Supporting multiple languages in your app Internationalize your app’s strings, images, and other resource types to prepare for the translation process.
Read article Developing a WidgetKit strategy Explore features, tasks, related frameworks, and constraints as you make a plan to implement widgets, watch complications, and Live Activities.
Read article watchOS apps Build watchOS apps that combine complications, notifications, and Siri to create a personal experience on Apple Watch.
View API collection DownloadsGet the latest SDKs and beta operating systems for all Apple platforms.
Download resources Documentation ArchiveAccess archived documentation and sample code that’s no longer updated.
Visit archive VideosLearn about the latest technologies presented at Apple developer events.
Watch videos Discussion ForumsAsk questions and discuss development with Apple engineers and other developers.
View forums

---

url: https://developer.apple.com/documentation/swiftui/app-extensions
title: This page requires JavaScript.
description: Extend your app’s basic functionality to other parts of the system, like by adding a Widget.

Collection SwiftUI App extensions API CollectionApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.OverviewUse SwiftUI along with WidgetKit to add widgets to your app.Widgets provide quick access to relevant content from your app.
Define a structure that conforms to the Widget protocol, and declare a view hierarchy for the widget.

---

url: https://developer.apple.com/documentation/swiftui/app-extensions
title: This page requires JavaScript.
description: Extend your app’s basic functionality to other parts of the system, like by adding a Widget.

Configure the views inside the widget as you do other SwiftUI views, using view modifiers, including a few widget-specific modifiers.For design guidance, see Widgets in the Human Interface Guidelines.TopicsCreating widgetsBuilding Widgets Using WidgetKit and SwiftUICreate widgets to show your app’s content on the Home screen, with custom intents for user-customizable settings.Creating a widget extensionDisplay your app’s content in a convenient, informative widget on various devices.Keeping a widget up to datePlan your widget’s timeline to show timely, relevant information using dynamic views, and update the timeline when things change.Making a configurable widgetGive people the option to customize their widgets by adding a custom app intent to your project.protocol WidgetThe configuration and content of a widget to display on the Home screen or in Notification Center.protocol WidgetBundleA container used to expose multiple widgets from a single widget extension.struct LimitedAvailabilityConfigurationA type-erased widget configuration.protocol WidgetConfigurationA type that describes a widget’s content.struct EmptyWidgetConfigurationAn empty widget configuration.Composing control widgetsprotocol ControlWidgetThe configuration and content of a control widget to display in system spaces such as Control Center, the Lock Screen, and the Action Button.protocol ControlWidgetConfigurationA type that describes a control widget’s content.struct EmptyControlWidgetConfigurationAn empty control widget configuration.struct ControlWidgetConfigurationBuilderA custom attribute that constructs a control widget’s body.protocol ControlWidgetTemplateA type that describes a control widget’s content.struct EmptyControlWidgetTemplateAn empty control widget template.struct ControlWidgetTemplateBuilderA custom attribute that constructs a control widget template’s body.func controlWidgetActionHint(_:)The action hint of the control described by the modified label.func controlWidgetStatus(_:)The status of the control described by the modified label.Labeling a widgetfunc widgetLabel(_:)Returns a localized text label that displays additional content outside the accessory family widget’s main SwiftUI view.func widgetLabel<Label>(label: () -> Label) -> some ViewCreates a label for displaying additional content outside an accessory family widget’s main SwiftUI view.Stying a widget groupfunc accessoryWidgetGroupStyle(AccessoryWidgetGroupStyle) -> some ViewThe view modifier that can be applied to AccessoryWidgetGroup to specify the shape the three content views will be masked with.

---

url: https://developer.apple.com/documentation/swiftui/app-extensions
title: This page requires JavaScript.
description: Extend your app’s basic functionality to other parts of the system, like by adding a Widget.

The value of style is set to .automatic, which is .circular by default.Controlling the accented groupfunc widgetAccentable(Bool) -> some ViewAdds the view and all of its subviews to the accented group.Managing placement in the Dynamic Islandfunc dynamicIsland(verticalPlacement: DynamicIslandExpandedRegionVerticalPlacement) -> some ViewSpecifies the vertical placement for a view of an expanded Live Activity that appears in the Dynamic Island.See AlsoApp structureAPI ReferenceApp organizationDefine the entry point and top-level structure of your app.API ReferenceScenesDeclare the user interface groupings that make up the parts of your app.API ReferenceWindowsDisplay user interface content in a window or a collection of windows.API ReferenceImmersive spacesDisplay unbounded content in a person’s surroundings.API ReferenceDocumentsEnable people to open and manage documents.API ReferenceNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.API ReferenceModal presentationsPresent content in a separate view that offers focused interaction.API ReferenceToolbarsProvide immediate access to frequently used commands and controls.API ReferenceSearchEnable people to search for text or other content within your app.

---

url: https://developer.apple.com/develop/
title: Bring your ideas to life
description: 

Find out what’s new for Apple developers Bring your ideas to life
With the power of Xcode, the ease of Swift, and the revolutionary features of cutting-edge Apple technologies, you have the freedom to create your most innovative apps ever.
Xcode
The Xcode developer tools include everything you need to create apps for iOS, iPadOS, macOS, tvOS, visionOS, and watchOS.
What’s new in Xcode Xcode Cloud
Xcode Cloud is a continuous integration and delivery service built into Xcode.
What’s new in Xcode Cloud Swift
This robust yet intuitive programming language for Apple platforms makes it easier than ever to write great code.
What’s new in Swift SwiftUI
SwiftUI helps you build great looking apps across all Apple platforms with the power of Swift — and as little code as possible.
Learn about SwiftUI Apple platforms
Develop apps that integrate seamlessly with the latest advancements in Apple platforms.
iOS iPadOS macOS tvOS visionOS watchOS Technologies
Find tools and resources for creating apps and accessories for Apple platforms.

---

url: https://developer.apple.com/develop/
title: Bring your ideas to life
description: 

Frameworks 5G Networks
Accessories
App Clips
App Extensions
Apple Intelligence New
Apple Pay
Bonjour
CarPlay
Core ML
Developer ID
Education
Health and Fitness
HomeKit
iBeacon
iCloud and CloudKit
iMessage
In-App Purchase
Localization
Mac Catalyst
Machine Learning
Maps
Nearby Interaction
Notifications
Security
SharePlay
Shortcuts
Sign in with Apple
Siri
StoreKit
TipKit
UIKit
Wallet
Widgets Media and web AirPlay
AirPrint
Apple News Format
Audio
AVFoundation
HTTP Live Streaming (HLS)
Live Photos
MusicKit
Passkeys
Safari
Safari Extensions
ShazamKit
WeatherKit
WebKit Graphics and games Accelerate
Apple Arcade
Augmented Reality
Games
Game Center
Metal
SceneKit
SpriteKit Developer tools App Store Connect
CloudKit Console
Command Line Tools
Create ML
C++ Support
Feedback Assistant
Game Porting Toolkit
Maps Tools
Metal Developer Tools
Push Notifications Console
Reality Composer Pro
Reality Converter
SF Symbols
Swift
Swift Testing New
SwiftData
SwiftUI
Swift Playground
TestFlight
Transporter
Xcode
Xcode Cloud Test your apps with TestFlight
TestFlight makes it easy to invite users to test your apps and collect valuable feedback before releasing your apps on the App Store.
You can invite up to 10,000 testers using just their email address or by sharing a public link.
Learn more about TestFlight

---

url: https://developer.apple.com/documentation/swiftui
title: This page requires JavaScript.
description: Declare the user interface and behavior for your app on every platform.

FrameworkSwiftUIDeclare the user interface and behavior for your app on every platform.iOS 13.0+iPadOS 13.0+Mac Catalyst 13.0+macOS 10.15+tvOS 13.0+visionOS 1.0+watchOS 6.0+OverviewSwiftUI provides views, controls, and layout structures for declaring your app’s user interface.
The framework provides event handlers for delivering taps, gestures, and other types of input to your app, and tools to manage the flow of data from your app’s models down to the views and controls that users see and interact with.Define your app structure using the App protocol, and populate it with scenes that contain the views that make up your app’s user interface.
Create your own custom views that conform to the View protocol, and compose them with SwiftUI views for displaying text, images, and custom shapes using stacks, lists, and more.
Apply powerful modifiers to built-in views and your own views to customize their rendering and interactivity.
Share code between apps on multiple platforms with views and controls that adapt to their context and presentation.You can integrate SwiftUI views with objects from the UIKit, AppKit, and WatchKit frameworks to take further advantage of platform-specific functionality.

---

url: https://developer.apple.com/documentation/swiftui
title: This page requires JavaScript.
description: Declare the user interface and behavior for your app on every platform.

You can also customize accessibility support in SwiftUI, and localize your app’s interface for different languages, countries, or cultural regions.Featured samples Destination Video Leverage SwiftUI to build an immersive media experience in a multiplatform app.
View sample code BOT-anist Build a multiplatform app that uses windows, volumes, and animations to create a robot botanist’s greenhouse.
View sample code Hello World Use windows, volumes, and immersive spaces to teach people about the Earth.
View sample code Building a document-based app with SwiftUI Create, save, and open documents in a multiplatform app.
View sample code TopicsEssentialsIntroducing SwiftUISwiftUI is a modern way to declare user interfaces for any Apple platform.

---

url: https://developer.apple.com/documentation/swiftui
title: This page requires JavaScript.
description: Declare the user interface and behavior for your app on every platform.

Create beautiful, dynamic apps faster than ever before.Learning SwiftUIDiscover tips and techniques for building multiplatform apps with this set of conceptual articles and sample code.Exploring SwiftUI Sample AppsExplore these SwiftUI samples using Swift Playgrounds on iPad or in Xcode to learn about defining user interfaces, responding to user interactions, and managing data flow.SwiftUI updatesLearn about important changes to SwiftUI.App structureAPI ReferenceApp organizationDefine the entry point and top-level structure of your app.API ReferenceScenesDeclare the user interface groupings that make up the parts of your app.API ReferenceWindowsDisplay user interface content in a window or a collection of windows.API ReferenceImmersive spacesDisplay unbounded content in a person’s surroundings.API ReferenceDocumentsEnable people to open and manage documents.API ReferenceNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.API ReferenceModal presentationsPresent content in a separate view that offers focused interaction.API ReferenceToolbarsProvide immediate access to frequently used commands and controls.API ReferenceSearchEnable people to search for text or other content within your app.API ReferenceApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.Data and storageAPI ReferenceModel dataManage the data that your app uses to drive its interface.API ReferenceEnvironment valuesShare data throughout a view hierarchy using the environment.API ReferencePreferencesIndicate configuration preferences from views to their container views.API ReferencePersistent storageStore data for use across sessions of your app.ViewsAPI ReferenceView fundamentalsDefine the visual elements of your app using a hierarchy of views.API ReferenceView configurationAdjust the characteristics of views in a hierarchy.API ReferenceView stylesApply built-in and custom appearances and behaviors to different types of views.API ReferenceAnimationsCreate smooth visual updates in response to state changes.API ReferenceText input and outputDisplay formatted text and get text input from the user.API ReferenceImagesAdd images and symbols to your app’s user interface.API ReferenceControls and indicatorsDisplay values and get user selections.API ReferenceMenus and commandsProvide space-efficient, context-dependent access to commands and controls.API ReferenceShapesTrace and fill built-in and custom shapes with a color, gradient, or other pattern.API ReferenceDrawing and graphicsEnhance your views with graphical effects and customized drawings.View layoutAPI ReferenceLayout fundamentalsArrange views inside built-in layout containers like stacks and grids.API ReferenceLayout adjustmentsMake fine adjustments to alignment, spacing, padding, and other layout parameters.API ReferenceCustom layoutPlace views in custom arrangements and create animated transitions between layout types.API ReferenceListsDisplay a structured, scrollable column of information.API ReferenceTablesDisplay selectable, sortable data arranged in rows and columns.API ReferenceView groupingsPresent views in different kinds of purpose-driven containers, like forms or control groups.API ReferenceScroll viewsEnable people to scroll to content that doesn’t fit in the current display.Event handlingAPI ReferenceGesturesDefine interactions from taps, clicks, and swipes to fine-grained gestures.API ReferenceInput eventsRespond to input from a hardware device, like a keyboard or a Touch Bar.API ReferenceClipboardEnable people to move or duplicate items by issuing Copy and Paste commands.API ReferenceDrag and dropEnable people to move or duplicate items by dragging them from one location to another.API ReferenceFocusIdentify and control which visible object responds to user interaction.API ReferenceSystem eventsReact to system events, like opening a URL.AccessibilityAPI ReferenceAccessibility fundamentalsMake your SwiftUI apps accessible to everyone, including people with disabilities.API ReferenceAccessible appearanceEnhance the legibility of content in your app’s interface.API ReferenceAccessible controlsImprove access to actions that your app can undertake.API ReferenceAccessible descriptionsDescribe interface elements to help people understand what they represent.API ReferenceAccessible navigationEnable users to navigate to specific user interface elements using rotors.Framework integrationAPI ReferenceAppKit integrationAdd AppKit views to your SwiftUI app, or use SwiftUI views in your AppKit app.API ReferenceUIKit integrationAdd UIKit views to your SwiftUI app, or use SwiftUI views in your UIKit app.API ReferenceWatchKit integrationAdd WatchKit views to your SwiftUI app, or use SwiftUI views in your WatchKit app.API ReferenceTechnology-specific viewsUse SwiftUI views that other Apple frameworks provide.Tool supportAPI ReferencePreviews in XcodeGenerate dynamic, interactive previews of your custom views.API ReferenceXcode library customizationExpose custom views and modifiers in the Xcode library.Protocolsprotocol GlassBackgroundEffectA specification for the appearance of a glass background.Structuresstruct AutomaticGlassBackgroundEffectThe automatic glass background effect.struct ContentToolbarPlacementstruct FeatheredGlassBackgroundEffectThe feathered glass background effect.struct GlassBackgroundEffectConfigurationA configuration used to build a custom effect.struct PlateGlassBackgroundEffectThe plate glass background effect.struct ScrollTargetBehaviorPropertiesProperties influencing the scroll view a scroll target behavior applies to.struct ScrollTargetBehaviorPropertiesContextThe context in which a scroll target behavior can decide its properties.

---

url: https://developer.apple.com/documentation/swiftui/documents
title: This page requires JavaScript.
description: Enable people to open and manage documents.

Collection SwiftUI Documents API CollectionDocumentsEnable people to open and manage documents.OverviewCreate a user interface for opening and editing documents using the DocumentGroup scene type.You initialize the scene with a model that describes the organization of the document’s data, and a view hierarchy that SwiftUI uses to display the document’s contents to the user.
You can use either a value type model, which you typically store as a structure, that conforms to the FileDocument protocol, or a reference type model you store in a class instance that conforms to the ReferenceFileDocument protocol.
You can also use SwiftData-backed documents using an initializer like init(editing:contentType:editor:prepareDocument:).SwiftUI supports standard behaviors that users expect from a document-based app, appropriate for each platform, like multiwindow support, open and save panels, drag and drop, and so on.

---

url: https://developer.apple.com/documentation/swiftui/documents
title: This page requires JavaScript.
description: Enable people to open and manage documents.

For related design guidance, see Patterns in the Human Interface Guidelines.TopicsCreating a documentBuilding a document-based app with SwiftUICreate, save, and open documents in a multiplatform app.Building a document-based app using SwiftDataCode along with the WWDC presenter to transform an app with SwiftData.struct DocumentGroupA scene that enables support for opening, creating, and saving documents.Storing document data in a structure instanceprotocol FileDocumentA type that you use to serialize documents to and from file.struct FileDocumentConfigurationThe properties of an open file document.Storing document data in a class instanceprotocol ReferenceFileDocumentA type that you use to serialize reference type documents to and from file.struct ReferenceFileDocumentConfigurationThe properties of an open reference file document.var undoManager: UndoManager?The undo manager used to register a view’s undo operations.Accessing document configurationvar documentConfiguration: DocumentConfiguration?The configuration of a document in a DocumentGroup.struct DocumentConfigurationReading and writing documentsstruct FileDocumentReadConfigurationThe configuration for reading file contents.struct FileDocumentWriteConfigurationThe configuration for serializing file contents.Opening a document programmaticallyvar newDocument: NewDocumentActionAn action in the environment that presents a new document.struct NewDocumentActionAn action that presents a new document.var openDocument: OpenDocumentActionAn action in the environment that presents an existing document.struct OpenDocumentActionAn action that presents an existing document.Configuring the document launch experiencestruct DocumentGroupLaunchSceneA launch scene for document-based applications.struct DocumentLaunchViewA view to present when launching document-related user experience.struct DocumentLaunchGeometryProxyA proxy for access to the frame of the scene and its title view.struct DefaultDocumentGroupLaunchActionsThe default actions for the document group launch scene and the document launch view.struct NewDocumentButtonA button that creates and opens new documents.protocol DocumentBaseBoxA Box that allows setting its Document base not requiring the caller to know the exact types of the box and its base.Renaming a documentstruct RenameButtonA button that triggers a standard rename action.func renameAction(_:)Sets a closure to run for the rename action.var rename: RenameAction?An action that activates the standard rename interaction.struct RenameActionAn action that activates a standard rename interaction.See AlsoApp structureAPI ReferenceApp organizationDefine the entry point and top-level structure of your app.API ReferenceScenesDeclare the user interface groupings that make up the parts of your app.API ReferenceWindowsDisplay user interface content in a window or a collection of windows.API ReferenceImmersive spacesDisplay unbounded content in a person’s surroundings.API ReferenceNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.API ReferenceModal presentationsPresent content in a separate view that offers focused interaction.API ReferenceToolbarsProvide immediate access to frequently used commands and controls.API ReferenceSearchEnable people to search for text or other content within your app.API ReferenceApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.

---

url: https://developer.apple.com/games/
title: Create games for Apple devices
description: 

Game sessions, documentation, and sample code — all in one place Create games for Apple devices
Deliver fantastic experiences to millions of players worldwide.
Apple provides the hardware, graphics, audio, social gaming, and distribution tools you need to create the next generation of games.
Bring your creativity to life through captivating gameplay, keep players engaged, and get your game discovered.
Want the highlights?
Download the games one-sheet Unified gaming platform
Thanks to the incredible pace of innovation in Metal and Apple silicon, there’s a fundamental shift taking place.
Every Apple silicon Mac, every iPad with an M-series chip, and even the latest iPhone 15 Pro can play the type of games that previously required dedicated gaming systems with power-hungry discrete GPUs.
These Apple devices create a unified gaming platform across Mac, iPad, and iPhone that’s built with tightly integrated graphics software and a scalable hardware architecture.
And every year, this rapidly growing platform delivers new advancements in Apple silicon and Metal to further improve the gaming experience.
Metal
Metal powers hardware-accelerated graphics on Apple platforms.
Now you can naturally port apps from other platforms with added support for global bindings and extensions to ray tracing.
Residency sets let you quickly and easily group resources and manage residency.

---

url: https://developer.apple.com/games/
title: Create games for Apple devices
description: 

And it’s even simpler to target Mac, iPad, and iPhone with the same code, thanks to a unified API and shader build process.
Learn about Metal Game Center
Help players discover your game and get excited about coming back to play.
Keep players engaged with a variety of capabilities, make it easy for friends to find each other, add screen-sharing or game-streaming features, and more.
Learn how to deliver social gaming Bring your advanced game to Apple devices
Accelerate your timeline, whether you’re bringing an existing game or one that’s currently in development.
With the Game Porting Toolkit 2, it’s never been easier to bring advanced games to Mac, iPad, and iPhone — and to deliver great experiences for players.
Learn more about the Game Porting Toolkit 2 Port advanced games to Apple platforms Design advanced games for Apple platforms Developer stories
Learn about the developers behind award-winning games.
Blackbox Resident Evil Village Marvel Future Revolution Afterplace Resources
Dive into learning how to build your first game — or deliver incredible advanced features — with guides, documentation, videos, and more.
View resources

---

url: https://developer.apple.com/visionos/
title: Discover visionOS
description: 

visionOS sessions, documentation, and sample code — all in one place Discover visionOS
All-new platform.
Familiar frameworks and tools.
Get ready to design and build an entirely new universe of apps and games for Apple Vision Pro.
What’s new Create Apple Immersive Video
Apple Immersive Video offers unique features developed specifically for Apple Vision Pro — like real-life acuity and incredible fidelity of presence — that are powered by custom-made projections and metadata captured in-camera.
Capture and edit Apple Immersive experiences for your own stories and apps.
Apple Immersive-enabled tools
Apple Immersive Video Utility for macOS and visionOS enables media management, review, and metadata organization for Apple Immersive files and supported applications.
Download Apple Immersive Video Utility
Blackmagic Design’s URSA Cine Immersive camera and supporting DaVinci Resolve Studio software offer creators a powerful end-to-end workflow designed to produce amazing Apple Immersive experiences.
Find out more from Blackmagic Design Volumetric APIs
Create apps with richer spatial experiences that take full advantage of depth and space and can run side by side with other apps in the Shared Space.
Now you can resize volumes by using the SwiftUI scene modifier windowResizability.

---

url: https://developer.apple.com/visionos/
title: Discover visionOS
description: 

Volumes can now have a fixed or dynamic scale, so when the 3D object moves away from the user it either appears constant in size or gets smaller as it moves away.
And ornaments can now be affixed to volumes.
TabletopKit
This new framework allows for easy development of collaborative experiences centered around a table by handling the manipulation of cards and pieces, establishing placement and layout, and defining game boards.
Enterprise APIs
New APIs for visionOS grant enhanced sensor access and increased control, so you can create more powerful enterprise solutions and spatial experiences.
Access the main camera, spatial barcode and QR code scanning, the Apple Neural Engine, and more.
Inputs
Updates to inputs on Apple Vision Pro let you decide if you want the user’s hands to appear in front of or behind the digital content.
Additional features
Capabilities for fidelity of scene understanding have been greatly extended.
Planes can now be detected in all orientations and allow anchoring objects on surfaces in your surroundings.
Room Anchors consider the user’s surroundings on a per-room basis.
And the new Object Tracking API for visionOS lets you attach content to individual objects around the user.

---

url: https://developer.apple.com/visionos/
title: Discover visionOS
description: 

Download the visionOS one-sheet A spectrum of immersion
Apple Vision Pro offers an infinite spatial canvas to explore, experiment, and play, giving you the freedom to completely rethink your experience in 3D.
People can interact with your app while staying connected to their surroundings, or immerse themselves completely in a world of your creation.
And your experiences can be fluid: start in a window, bring in 3D content, transition to a fully immersive scene, and come right back.
The choice is yours, and it all starts with the building blocks of spatial computing in visionOS.
Windows
You can create one or more windows in your visionOS app.
They’re built with SwiftUI and contain traditional views and controls, and you can add depth to your experience by adding 3D content.
Volumes
Add depth to your app with a 3D volume.
Volumes are SwiftUI scenes that can showcase 3D content using RealityKit or Unity, creating experiences that are viewable from any angle in the Shared Space or an app’s Full Space.
Spaces
By default, apps launch into the Shared Space, where they exist side by side — much like multiple apps on a Mac desktop.
Apps can use windows and volumes to show content, and the user can reposition these elements wherever they like.
For a more immersive experience, an app can open a dedicated Full Space where only that app’s content will appear.

---

url: https://developer.apple.com/visionos/
title: Discover visionOS
description: 

Inside a Full Space, an app can use windows and volumes, create unbounded 3D content, open a portal to a different world, or even fully immerse people in an environment.
Apple frameworks — extended for spatial computing SwiftUI
Whether you’re creating windows, volumes, or spatial experiences, SwiftUI is the best way to build a new visionOS app or bring your existing iPadOS or iOS app to the platform.
With all-new 3D capabilities and support for depth, gestures, effects, and immersive scene types, SwiftUI can help you build beautiful and compelling apps for Apple Vision Pro.
RealityKit is also deeply integrated with SwiftUI to help you build sharp, responsive, and volumetric interfaces.
SwiftUI also works seamlessly with UIKit to help you build apps for visionOS.
RealityKit
Present 3D content, animations, and visual effects in your app with RealityKit, Apple’s 3D rendering engine.
RealityKit can automatically adjust to physical lighting conditions and cast shadows, open portals to a different world, build stunning visual effects, and so much more.
And for authoring your materials, RealityKit has adopted MaterialX, an open standard for specifying surface and geometry shaders used by leading film, visual effects, entertainment, and gaming companies.
ARKit
On Apple Vision Pro, ARKit can fully understand a person’s surroundings, giving your apps new ways to interact with the space around them.

---

url: https://developer.apple.com/visionos/
title: Discover visionOS
description: 

By default, ARKit powers core system capabilities that your apps automatically benefit from when they’re in the Shared Space — but when your app moves to a Full Space and asks permission, you can take advantage of powerful ARKit APIs, like Plane Estimation, Scene Reconstruction, Image Anchoring, World Tracking, and Skeletal Hand Tracking.
So splash water on a wall.
Bounce a ball off the floor.
Make experiences that wow people by blending the real world with your content.
Accessibility
visionOS is designed with accessibility in mind for people who want to interact with their device entirely with their eyes, voice, or a combination of both.
And for people who prefer a different way to navigate content, Pointer Control lets them select their index finger, wrist, or head as an alternative pointer.
You can create accessible apps for visionOS using the same techniques and tools you already use on other Apple platforms and help make Apple Vision Pro a great experience for everyone.
All the tools you need Xcode
Development for visionOS starts with Xcode, which supports the visionOS SDK.
Add a visionOS target to your existing project or build an entirely new app.
Iterate on your app in Xcode Previews.
Interact with your app in the all-new visionOS simulator and explore various room layouts and lighting conditions.

---

url: https://developer.apple.com/visionos/
title: Discover visionOS
description: 

Create tests and visualizations to explore collisions, occlusions, and scene understanding for your spatial content.
Download the latest version of Xcode Reality Composer Pro
Discover the all-new Reality Composer Pro, designed to make it easy to preview and prepare 3D content for your visionOS apps.
Available with Xcode, Reality Composer Pro can help you import and organize assets, such as 3D models, materials, and sounds.
Best of all, it integrates tightly with the Xcode build process to preview and optimize your visionOS assets.
Unity
Now you can use Unity’s robust and familiar authoring tools to create new apps and games or reimagine your existing Unity-created projects for visionOS.
Your apps get access to all the benefits of visionOS, like passthrough and Dynamically Foveated Rendering, in addition to familiar Unity features, like AR Foundation.
By combining Unity’s authoring and simulation capabilities with RealityKit-managed app rendering, content created with Unity looks and feels at home in visionOS.
Learn more Your visionOS journey begins here
Start developing with the visionOS SDK, Xcode, Simulator, Reality Composer Pro, documentation, sample code, design guidance, and more.
visionOS Pathway
Pathways are simple and easy-to-navigate collections of the videos, documentation, and resources you’ll need to start building great apps and games.

---

url: https://developer.apple.com/visionos/
title: Discover visionOS
description: 

Get started Submit your app
Whether you’ve created a new visionOS app or are making your existing iPad or iPhone app available on Apple Vision Pro, here’s everything you need to know to prepare and submit your app to the App Store.
Submit your app Work with Apple
Get direct support from Apple as you develop your apps and games for visionOS.
Learn about upcoming events, testing opportunities, and other programs to support you as you create incredible experiences for this platform.
Learn about working with Apple Featured articles Blackbox: Rebooting an inventive puzzle game for visionOS
The incredible puzzler comes to the infinite canvas.
Learn more “The full impact of fruit destruction”
How Halfbrick cultivated Super Fruit Ninja on Apple Vision Pro.
Learn more Realizing their vision: How djay designed for visionOS
The team behind djay reveals why Apple Vision Pro represents “the culmination of everything” for their app.
Learn more Q&A: Building apps for visionOS
Get advice directly from Apple experts on creating incredible apps and games for Apple Vision Pro.
Learn more

---

url: https://developer.apple.com/documentation/swiftui/modal-presentations
title: This page requires JavaScript.
description: Present content in a separate view that offers focused interaction.

Collection SwiftUI Modal presentations API CollectionModal presentationsPresent content in a separate view that offers focused interaction.OverviewTo draw attention to an important, narrowly scoped task, you display a modal presentation, like an alert, popover, sheet, or confirmation dialog.In SwiftUI, you create a modal presentation using a view modifier that defines how the presentation looks and the condition under which SwiftUI presents it.
SwiftUI detects when the condition changes and makes the presentation for you.

---

url: https://developer.apple.com/documentation/swiftui/modal-presentations
title: This page requires JavaScript.
description: Present content in a separate view that offers focused interaction.

Because you provide a Binding to the condition that initiates the presentation, SwiftUI can reset the underlying value when the user dismisses the presentation.For design guidance, see Modality in the Human Interface Guidelines.TopicsConfiguring a dialogstruct DialogSeverityThe severity of an alert or confirmation dialog.Showing a sheet, cover, or popoverfunc sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some ViewPresents a sheet when a binding to a Boolean value that you provide is true.func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some ViewPresents a sheet using the given item as a data source for the sheet’s content.func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some ViewPresents a modal view that covers as much of the screen as possible when binding to a Boolean value you provide is true.func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some ViewPresents a modal view that covers as much of the screen as possible using the binding you provide as a data source for the sheet’s content.func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: (Item) -> Content) -> some ViewPresents a popover using the given item as a data source for the popover’s content.func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge?, content: () -> Content) -> some ViewPresents a popover when a given condition is true.enum PopoverAttachmentAnchorAn attachment anchor for a popover.Adapting a presentation sizefunc presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some ViewSpecifies how to adapt a presentation to horizontally and vertically compact size classes.func presentationCompactAdaptation(PresentationAdaptation) -> some ViewSpecifies how to adapt a presentation to compact size classes.struct PresentationAdaptationStrategies for adapting a presentation to a different size class.func presentationSizing(some PresentationSizing) -> some ViewSets the sizing of the containing presentation.protocol PresentationSizingA type that defines the size of the presentation content and how the presentation size adjusts to its content’s size changing.struct PresentationSizingRootA proxy to a view provided to the presentation with a defined presentation size.struct PresentationSizingContextContextual information about a presentation.Configuring a sheet’s heightfunc presentationDetents(Set<PresentationDetent>) -> some ViewSets the available detents for the enclosing sheet.func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some ViewSets the available detents for the enclosing sheet, giving you programmatic control of the currently selected detent.func presentationContentInteraction(PresentationContentInteraction) -> some ViewConfigures the behavior of swipe gestures on a presentation.func presentationDragIndicator(Visibility) -> some ViewSets the visibility of the drag indicator on top of a sheet.struct PresentationDetentA type that represents a height where a sheet naturally rests.protocol CustomPresentationDetentThe definition of a custom detent with a calculated height.struct PresentationContentInteractionA behavior that you can use to influence how a presentation responds to swipe gestures.Styling a sheet and its backgroundfunc presentationCornerRadius(CGFloat?) -> some ViewRequests that the presentation have a specific corner radius.func presentationBackground<S>(S) -> some ViewSets the presentation background of the enclosing sheet using a shape style.func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some ViewSets the presentation background of the enclosing sheet to a custom view.func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some ViewControls whether people can interact with the view behind a presentation.struct PresentationBackgroundInteractionThe kinds of interaction available to views behind a presentation.Presenting an alertstruct AlertSceneA scene that renders itself as a standalone alert dialog.func alert(_:isPresented:actions:)Presents an alert when a given condition is true, using a text view for the title.func alert(_:isPresented:presenting:actions:)Presents an alert using the given data to produce the alert’s content and a text view as a title.func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some ViewPresents an alert when an error is present.func alert(_:isPresented:actions:message:)Presents an alert with a message when a given condition is true using a text view as a title.func alert(_:isPresented:presenting:actions:message:)Presents an alert with a message using the given data to produce the alert’s content and a text view for a title.func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some ViewPresents an alert with a message when an error is present.Getting confirmation for an actionfunc confirmationDialog(_:isPresented:titleVisibility:actions:)Presents a confirmation dialog when a given condition is true, using a text view for the title.func confirmationDialog(_:isPresented:titleVisibility:presenting:actions:)Presents a confirmation dialog using data to produce the dialog’s content and a text view for the title.func dismissalConfirmationDialog(_:shouldPresent:actions:)Presents a confirmation dialog when a dismiss action has been triggered.Showing a confirmation dialog with a messagefunc confirmationDialog(_:isPresented:titleVisibility:actions:message:)Presents a confirmation dialog with a message when a given condition is true, using a text view for the title.func confirmationDialog(_:isPresented:titleVisibility:presenting:actions:message:)Presents a confirmation dialog with a message using data to produce the dialog’s content and a text view for the message.func dismissalConfirmationDialog(_:shouldPresent:actions:message:)Presents a confirmation dialog when a dismiss action has been triggered.Configuring a dialogfunc dialogIcon(Image?) -> some ViewConfigures the icon used by dialogs within this view.func dialogIcon(Image?) -> some SceneConfigures the icon used by alerts.func dialogSeverity(DialogSeverity) -> some Viewfunc dialogSeverity(DialogSeverity) -> some SceneSets the severity for alerts.func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some ViewEnables user suppression of dialogs and alerts presented within self, with a default suppression message on macOS.

---

url: https://developer.apple.com/documentation/swiftui/modal-presentations
title: This page requires JavaScript.
description: Present content in a separate view that offers focused interaction.

Unused on other platforms.func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some SceneEnables user suppression of an alert with a custom suppression message.func dialogSuppressionToggle(_:isSuppressed:)Enables user suppression of dialogs and alerts presented within self, with a custom suppression message on macOS.

---

url: https://developer.apple.com/documentation/swiftui/modal-presentations
title: This page requires JavaScript.
description: Present content in a separate view that offers focused interaction.

Unused on other platforms.Exporting to filefunc fileExporter(isPresented:document:contentType:defaultFilename:onCompletion:)Presents a system interface for exporting a document that’s stored in a value type, like a structure, to a file on disk.func fileExporter(isPresented:documents:contentType:onCompletion:)Presents a system interface for exporting a collection of value type documents to files on disk.func fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:)Presents a system interface for allowing the user to export a FileDocument to a file on disk.func fileExporter(isPresented:documents:contentTypes:onCompletion:onCancellation:)Presents a system dialog for allowing the user to export a collection of documents that conform to FileDocument to files on disk.func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some ViewPresents a system interface allowing the user to export a Transferable item to file on disk.func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some ViewPresents a system interface allowing the user to export a collection of items to files on disk.func fileExporterFilenameLabel(_:)On macOS, configures the fileExporter with a text to use as a label for the file name field.Importing from filefunc fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some ViewPresents a system interface for allowing the user to import multiple files.func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some ViewPresents a system interface for allowing the user to import an existing file.func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some ViewPresents a system dialog for allowing the user to import multiple files.Moving a filefunc fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some ViewPresents a system interface for allowing the user to move an existing file to a new location.func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some ViewPresents a system interface for allowing the user to move a collection of existing files to a new location.func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some ViewPresents a system dialog for allowing the user to move an existing file to a new location.func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some ViewPresents a system dialog for allowing the user to move a collection of existing files to a new location.Configuring a file dialogfunc fileDialogBrowserOptions(FileDialogBrowserOptions) -> some ViewOn macOS, configures the fileExporter, fileImporter, or fileMover to provide a refined URL search experience: include or exclude hidden files, allow searching by tag, etc.func fileDialogConfirmationLabel(_:)On macOS, configures the the fileExporter, fileImporter, or fileMover with custom text as a confirmation button label.func fileDialogCustomizationID(String) -> some ViewOn macOS, configures the fileExporter, fileImporter, or fileMover to persist and restore the file dialog configuration.func fileDialogDefaultDirectory(URL?) -> some ViewConfigures the fileExporter, fileImporter, or fileMover to open with the specified default directory.func fileDialogImportsUnresolvedAliases(Bool) -> some ViewOn macOS, configures the fileExporter, fileImporter, or fileMover behavior when a user chooses an alias.func fileDialogMessage(_:)On macOS, configures the the fileExporter, fileImporter, or fileMover with a custom text that is presented to the user, similar to a title.func fileDialogURLEnabled(Predicate<URL>) -> some ViewOn macOS, configures the the fileImporter or fileMover to conditionally disable presented URLs.struct FileDialogBrowserOptionsThe way that file dialogs present the file system.Presenting an inspectorfunc inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some ViewInserts an inspector at the applied position in the view hierarchy.func inspectorColumnWidth(CGFloat) -> some ViewSets a fixed, preferred width for the inspector containing this view when presented as a trailing column.func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some ViewSets a flexible, preferred width for the inspector in a trailing-column presentation.Dismissing a presentationvar isPresented: BoolA Boolean value that indicates whether the view associated with this environment is currently presented.var dismiss: DismissActionAn action that dismisses the current presentation.struct DismissActionAn action that dismisses a presentation.func interactiveDismissDisabled(Bool) -> some ViewConditionally prevents interactive dismissal of presentations like popovers, sheets, and inspectors.Deprecated modal presentationsstruct AlertA representation of an alert presentation.Deprecatedstruct ActionSheetA representation of an action sheet presentation.DeprecatedSee AlsoApp structureAPI ReferenceApp organizationDefine the entry point and top-level structure of your app.API ReferenceScenesDeclare the user interface groupings that make up the parts of your app.API ReferenceWindowsDisplay user interface content in a window or a collection of windows.API ReferenceImmersive spacesDisplay unbounded content in a person’s surroundings.API ReferenceDocumentsEnable people to open and manage documents.API ReferenceNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.API ReferenceToolbarsProvide immediate access to frequently used commands and controls.API ReferenceSearchEnable people to search for text or other content within your app.API ReferenceApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.

---

url: https://developer.apple.com/system-status/
title: System Status
description: 

System StatusGreen Circle: AvailableAccount : availableAccount - (Opens in new window)Apple Pay Production Instance : availableApple Pay Production Instance - (Opens in new window)APNS : availableAPNS - (Opens in new window)Apple Pay Sandbox Instance : availableApple Pay Sandbox Instance - (Opens in new window)APNS Sandbox : availableAPNS Sandbox - (Opens in new window)Apple Podcasts Connect : availableApp Attest : availableApp Attest - (Opens in new window)Certificates, Identifiers & Profiles : availableCertificates, Identifiers & Profiles - (Opens in new window)App Store - Advanced Commerce API : availableApp Store - Advanced Commerce API - (Opens in new window)CloudKit Console : availableCloudKit Console - (Opens in new window)App Store - In-App Purchases : availableCloudKit Database : availableCloudKit Database - (Opens in new window)App Store - Receipt Verification : availableApp Store - Receipt Verification - (Opens in new window)Code-level Support : availableCode-level Support - (Opens in new window)App Store - Sandbox : availableApp Store - Sandbox - (Opens in new window)Contact Us : availableContact Us - (Opens in new window)App Store - Server APIs : availableApp Store - Server APIs - (Opens in new window)Developer Documentation : availableDeveloper Documentation - (Opens in new window)App Store - Server Notifications : availableApp Store - Server Notifications - (Opens in new window)Developer ID Notary Service : availableApp Store Automatic App Updates : availableApp Store Automatic App Updates - (Opens in new window)Device Enrollment Program : availableApp Store Connect - Resolved OutageApp Store Connect - Resolved OutageToday, 11:31 AM - 11:32 AMSome users were affectedAffected Services: App Store Connect, App Store Connect - App Processing Users experienced a problem with this service.App Store Connect - (Opens in new window)Feedback Assistant : availableFeedback Assistant - (Opens in new window)App Store Connect - Analytics : availableApp Store Connect - Analytics - (Opens in new window)MapKit JS Dashboard : availableMapKit JS Dashboard - (Opens in new window)App Store Connect - App Processing - Resolved OutageApp Store Connect - App Processing - Resolved OutageToday, 11:31 AM - 11:32 AMSome users were affectedAffected Services: App Store Connect, App Store Connect - App Processing Users experienced a problem with this service.MFi Portal : availableApp Store Connect - App Upload : availableNews Publisher : availableNews Publisher - (Opens in new window)App Store Connect - Sales and Trends : availableApp Store Connect - Sales and Trends - (Opens in new window)NFC & SE Platform : availableNFC & SE Platform - (Opens in new window)App Store Connect - TestFlight : availableApp Store Connect - TestFlight - (Opens in new window)Program Enrollment and Renewals : availableProgram Enrollment and Renewals - (Opens in new window)App Store Connect API : availableApp Store Connect API - (Opens in new window)SKAdNetwork : availableApple Developer Forums : availableApple Developer Forums - (Opens in new window)Software Downloads : availableSoftware Downloads - (Opens in new window)Apple Maps API : availableApple Maps API - (Opens in new window)Tap to Pay on iPhone : availableApple Music API : availableApple Music API - (Opens in new window)Videos : availableVideos - (Opens in new window)Apple Music for Artists : availableWeatherKit : availableWeatherKit - (Opens in new window)Apple News API : availableXcode Automatic Configuration : availableXcode Automatic Configuration - (Opens in new window)Apple Pay Developer | Apple Pay Demo : availableApple Pay Developer | Apple Pay Demo - (Opens in new window)Xcode Cloud : availableXcode Cloud - (Opens in new window)Looking for statuses of other Apple services and stores?

---

url: https://developer.apple.com/system-status/
title: System Status
description: 

Status of other Apple services and stores -Find them here.Last updated 2025-04-25T22:57:25.399ZLast updated today, 3:57 PM Pacific Daylight Time.

---

url: https://developer.apple.com/fonts/
title: Fonts for Apple platforms
description: 

Watch the latest videos about fonts Fonts for Apple platforms
Get the typefaces you need to design interfaces for your apps on Apple platforms.
These typefaces are designed to optimally display text at a variety of sizes and in a wide range of languages across multiple interfaces.
San Francisco San Francisco is an Apple designed typeface that provides a consistent, legible, and friendly typographic voice.
Across all Apple products, the size-specific outlines and dynamic tracking ensure optimal legibility at every point size and screen resolution.
Numbers have proportional widths by default, so they feel harmonious and naturally spaced within the time and data-centric interfaces people use every day.
Nine weights, including italics — and features like small caps, fractions, inferior and superior numerals, indices, arrows, and more — offer breadth and depth for precision typesetting.
San Francisco also adapts intelligently to different contexts.
When indicating time, for example, the colon in San Francisco switches to a vertically centered form.
And each operating system works with the typeface to apply size-specific font features automatically.
SF Pro
This neutral, flexible, sans-serif typeface is the system font for iOS, iPadOS, macOS and tvOS.
SF Pro features nine weights, variable optical sizes for optimal legibility, four widths, and includes a rounded variant.

---

url: https://developer.apple.com/fonts/
title: Fonts for Apple platforms
description: 

SF Pro supports over 150 languages across Latin, Greek, and Cyrillic scripts.
Download SF Pro SF Compact
Sharing many features with SF Pro, SF Compact features an efficient, compact design that is optimized for small sizes and narrow columns.
SF Compact is the system font for watchOS and includes a rounded variant.
Download SF Compact SF Mono
This monospaced variant of San Francisco enables alignment between rows and columns of text, and is used in coding environments like Xcode.
SF Mono features six weights and supports Latin, Greek, and Cyrillic scripts.
Download SF Mono New York
A companion to San Francisco, this serif typeface is based on essential aspects of historical type styles.
New York features six weights, supports Latin, Greek, and Cyrillic scripts, and features variable optical sizes allowing it to perform as a traditional reading face at small sizes and a graphic display face at larger sizes.
Download New York SF Script Extensions
Like San Francisco, these extensions to the Apple system font feature nine weights, a rounded variant, and variable optical sizes that automatically adjust spacing and proportion based on the point size.
Each script extension has been designed to fit with SF Pro for multilingual typesetting, while respecting the natural proportions for each script by adjusting weight, contrast, and vertical metrics.

---

url: https://developer.apple.com/fonts/
title: Fonts for Apple platforms
description: 

SF Arabic
A contemporary interpretation of the Naskh style with a rational and flexible design.
Download SF Arabic SF Armenian
Designed with proportions that have been adjusted for a better visual balance in multilingual typesetting.
Download SF Armenian SF Georgian
Supports modern Georgian, Mkhedruli, and Mtavruli uppercase forms.
Download SF Georgian SF Hebrew
With full support of the Niqqud diacritical marks.
Download SF Hebrew Human Interface Guidelines
Read the Human Interface Guidelines to learn how to use these fonts in your apps on Apple platforms.
Explore typography guidelines Videos
Gain insight into typographic principles and how they apply to the San Francisco fonts, the result of a deep collaboration between design and engineering teams.
This typeface defers to the content it displays to give text unmatched legibility, clarity, and consistency.
Watch session videos Frameworks and tools
Use the latest frameworks in Xcode to integrate dynamic text handling and typesetting capabilities into your app.
SwiftUI
SwiftUI provides custom text management across all Apple platforms.
Learn about displaying fonts in SwiftUI UIKit
UIKit provides custom text management and rendering across Apple platforms.
Learn about using UIKit to display fonts AppKit
AppKit provides font selection, text processing, and rendering for macOS.

---

url: https://developer.apple.com/fonts/
title: Fonts for Apple platforms
description: 

Learn about fonts for macOS SF Symbols
SF Symbols 6 brings more than 800 new symbols, updated annotation tools, and new and enhanced configurable animations that make symbols even more expressive.
Learn about SF Symbols Core Text
This text engine and API for Apple platforms provides sophisticated text handling and typesetting capabilities for managing adaptive user interfaces.
Learn about Core Text Apple Font Tool Suite
This suite of command-line tools includes an installer package, tutorial, user documentation, and reference.
Download tools TrueType and AAT
Get specifications for the TrueType font format and the Apple Advanced Typography (AAT) Font Feature Registry for advanced font rendering.
Apple TrueType Reference Manual
AAT Font Feature Registry

---

url: https://developer.apple.com/design/
title: Design - Apple Developer
description: 

Learn how to design great apps and games that integrate seamlessly with Apple platforms.
Want the highlights?
Download the design one-sheet Human Interface Guidelines
Learn essential information about platforms, foundations, patterns, components, inputs, and technologies.
The HIG offers guidance and best practices for designing exceptional user experiences across all Apple platforms.
Explore the Human Interface Guidelines GETTING STARTED
Designing for games
When people play your game on an Apple device, they dive into the world you designed while relying on the platform features they love.
June 10, 2024 COMPONENTS
Controls June 10, 2024 FOUNDATIONS
App icons June 10, 2024 Design sessions
Learn about designing great app and game experiences from Apple experts.
Watch design videos VIDEO
Design great visionOS apps
Find out how to create compelling spatial computing apps by embracing immersion, designing for eyes and hands, and taking advantage of depth, scale, and space.
WWDC24 VIDEO
Add personality to your app through UX writing
Learn how to define your app’s voice and modulate your tone for every situation.
WWDC24 VIDEO
What’s new in SF Symbols 6
Learn how the new Wiggle, Rotate, and Breathe animation presets can bring vitality to your interface.

---

url: https://developer.apple.com/design/
title: Design - Apple Developer
description: 

WWDC24 Design articles BEHIND THE DESIGN
Rooms: Meet an ADA winner that defies description April 8, 2025 BEHIND THE DESIGN
Inside the adorably unorthodox design of Bears Gratitude February 4, 2025 BEHIND THE DESIGN
How Oko leverages AI to make street crossings more accessible January 7, 2025 Apple Design Resources
Design apps quickly and accurately by using Sketch, Photoshop, Figma templates, guides, and other resources.
View Apple Design Resources

---

url: https://developer.apple.com/documentation
title: This page requires JavaScript.
description: Browse the latest sample code, articles, tutorials, and API reference.

Apple Developer DocumentationBrowse the latest sample code, articles, tutorials, and API reference.Create compelling apps with Swift and Apple Intelligence.
Making onscreen content available to Siri and Apple Intelligence Classifying images for categorization and search Previewing widgets and Live Activities in Xcode Apple Intelligence updates Integrating actions with Siri and Apple Intelligence Making camera actions available to Siri and Apple Intelligence Getting motion-activity data from headphones Image Playground Release notesRead the latest news for platform SDKs and developer tools.
iOS/iPadOS macOS tvOS watchOS visionOS Safari Xcode Dive into WWDC24 New sample app RealityKit across platforms Build an exciting multiplatform game experience using new features from RealityKit and more.
View sample code New sample app Enhancements in SwiftUI Make your app shine with SwiftUI updates and create a beautiful new navigation experience for iPad.
View sample code Learn about new features in Swift, tools, and technologies.

---

url: https://developer.apple.com/documentation
title: This page requires JavaScript.
description: Browse the latest sample code, articles, tutorials, and API reference.

Adopting unified Maps URLs FSKit App Shortcuts AVCam: Building a camera app Adding synthesized speech to calls Enhancing your app’s content with tab navigation Unifying your app’s animations Enhancing your app experience with the Camera Control New documentation Updates and highlights from WWDC24 Browse new and updated documentation for technologies, frameworks, and APIs.
Read documentation New samples Sample code from WWDC24 Browse a list of example projects that show best practices for new frameworks and technologies.
View sample code Design documentation Human Interface Guidelines Check out design recommendations for controls, games, and augmented reality.
Now available to read in Korean.
Read design guidance Elevate your apps Creating a camera experience for the Lock Screen Creating controls to perform actions across the system Customizing window styles and state-restoration behavior in macOS Configuring the PencilKit tool picker Translating text within your app Fetching and filtering time-based model changes Performing accessibility testing for your app Setting up broadcast push notifications Build compelling games Design guidance Designing for games Read design guidelines to help you create great immersive and interactive games.

---

url: https://developer.apple.com/documentation
title: This page requires JavaScript.
description: Browse the latest sample code, articles, tutorials, and API reference.

View design guidelines New sample app Creating tabletop games Make an immersive spatial board game where multiple players interact with pieces on a table.
View sample code Discover next-level features Enabling the double-tap gesture on Apple Watch Creating a tvOS media catalog app in SwiftUI FinanceKit Adding support for Tap to Pay on iPhone to your app Discovering and configuring accessories Communicating with human interface devices Authorizing a Bluetooth accessory to share a dice roll Development essentials Introducing SwiftUI SwiftUI is a modern way to declare user interfaces for any Apple platform.
Create beautiful, dynamic apps faster than ever before.
Read article View fundamentals Define the visual elements of your app using a hierarchy of views.
Read article Adding and editing persistent data in your app Create a data entry form for collecting and changing data managed by SwiftData.
View sample code Accessibility Make your apps accessible to everyone who uses Apple devices.
View API collection Creating your first visionOS app Build a new visionOS app using SwiftUI and add platform-specific features.
Read article Metal developer workflows Locate and fix issues related to your app’s use of the Metal API and GPU functions.

---

url: https://developer.apple.com/documentation
title: This page requires JavaScript.
description: Browse the latest sample code, articles, tutorials, and API reference.

Read article Supporting multiple languages in your app Internationalize your app’s strings, images, and other resource types to prepare for the translation process.
Read article Developing a WidgetKit strategy Explore features, tasks, related frameworks, and constraints as you make a plan to implement widgets, watch complications, and Live Activities.
Read article watchOS apps Build watchOS apps that combine complications, notifications, and Siri to create a personal experience on Apple Watch.
View API collection DownloadsGet the latest SDKs and beta operating systems for all Apple platforms.
Download resources Documentation ArchiveAccess archived documentation and sample code that’s no longer updated.
Visit archive VideosLearn about the latest technologies presented at Apple developer events.
Watch videos Discussion ForumsAsk questions and discuss development with Apple engineers and other developers.
View forums

---

url: https://developer.apple.com/accessibility/
title: Building accessible apps
description: 

Watch the latest videos about accessibility Building accessible apps
With built-in accessibility features, accessibility APIs, and developer tools, Apple operating systems provide extraordinary opportunities to deliver high-quality experiences to everyone, including people with disabilities.
Take advantage of VoiceOver — the revolutionary screen reader for blind and low-vision users — Music Haptics, Switch Control, Guided Access, Text to Speech, closed‑captioned or audio‑described video, and more.
What’s new Vision Mobility Hearing Cognitive What’s new
Breakthrough features like Eye Tracking and Hover Typing on iPhone and iPad, along with new accessibility APIs like Music Haptics, can help make your app more inclusive.
And when integrated with existing features like Dynamic Type and VoiceOver, these enhancements make it easier than ever to deliver high-quality experiences to everyone.
Vision
Apple devices include a wide variety of features and assistive technologies to support users who are blind or have low vision, such as display and text settings, screen and cursor magnification, a full-featured screen reader, and much more.
Learn more about Vision VoiceOver
VoiceOver is a screen reader that enables people to experience an app’s interface without having to see the screen.

---

url: https://developer.apple.com/accessibility/
title: Building accessible apps
description: 

With touch gestures on iOS and iPadOS, keyboard buttons on macOS, and remote buttons on tvOS, VoiceOver users can move through your app’s UI in reading order, from the top of the screen to the bottom, and receive descriptions in over 60 languages and locales of UI controls, text, and images audibly or in braille.
Learn more about VoiceOver
Supporting VoiceOver in your app
Challenge: VoiceOver maze
Human Interface Guidelines iOS, iPadOS, macOS, tvOS, visionOS, watchOS Dim Flashing Lights
Dim Flashing Lights is a setting that allows people to indicate that they want to avoid bright, frequent flashes of light in video.
When someone enables this setting on an Apple device, the device automatically dims video when flashes or strobe effects are detected.
Use the Media Accessibility API to check if someone has chosen to dim flashing lights on their Apple device.
If you work with media content outside of Apple platforms, learn about the science behind reducing flashing lights in video content to create an enjoyable media-viewing experience for everyone.

---

url: https://developer.apple.com/accessibility/
title: Building accessible apps
description: 

Video flashing reduction technical summary (EPUB)
Video flashing reduction technical summary (PDF)
Flashing lights API
Sample code: Detection of flashing lights in video content
Sample code: Responding to changes in the flashing lights setting iOS, iPadOS, macOS, tvOS, visionOS Speech
Apple’s devices can read selected text from your app out loud in over 60 languages and locales, and you can adjust the voice’s dialect and speaking rate.
The AVSpeechSynthesizer class produces synthesized speech from text on a device, and provides methods for controlling or monitoring the progress of ongoing speech.
Learn more about Speech Speech Synthesis
Create a seamless speech experience in your apps
Create custom speech synthesizers iOS, iPadOS, macOS, tvOS, visionOS, watchOS Dynamic Type
Dynamic Type allows users to choose the text size of content displayed on the screen for better readability.
It also accommodates those who can read smaller text, allowing more information to appear on the screen.
Apps that support Dynamic Type also provide a more consistent reading experience.

---

url: https://developer.apple.com/accessibility/
title: Building accessible apps
description: 

Get started with Dynamic Type
Scaling fonts automatically
Applying custom fonts to text
Human Interface Guidelines iOS, iPadOS, visionOS, watchOS Display customization
There are a range of features to customize the display, including Bold Text, Increase Contrast, Reduce Transparency, Smart Invert, Differentiate Without Color, On/Off Labels, Button Shapes, Dark Mode, and Reduce Motion.
Use UIAccessibility APIs to detect when these settings are enabled so that your app behaves correctly.
Make your app visually accessible
Human Interface Guidelines iOS, iPadOS, macOS, tvOS, visionOS, watchOS Audio descriptions and captions
Let people watch movies with detailed audio descriptions of every scene on iPhone, iPad, Mac, Apple TV, or iPod touch.
Use AVFoundation with built-in support for captioning and audio descriptions during media playback in your apps.
Selecting subtitles and alternative audio tracks
Caption authoring
Media accessibility iOS, iPadOS, macOS, tvOS, visionOS Mobility
Apple has multiple solutions that help users with limited physical or motor abilities use your apps.
Both Voice Control and Switch Control use the accessibility hierarchy to interact with elements within your app.
Learn more about Mobility Voice Control
If your app uses accessibility APIs, Voice Control users can navigate your app’s interface using just their voice.

---

url: https://developer.apple.com/accessibility/
title: Building accessible apps
description: 

Commands like “click,” “swipe,” and “tap” allow them to interact with elements within your app through the APIs.
Learn more about Voice Control Challenge: Voice Control synonyms iOS, iPadOS, macOS, visionOS Switch Control
With Switch Control, users can navigate your app’s interface using a variety of adaptive devices, such as a switch, joystick, keyboard Space bar, or trackpad.
They can navigate your app by scanning through each UI item, either by manually activating their switch or auto scanning the interface.
Once the desired item is reached, users can perform the appropriate action with their device.
To provide a great experience, make sure to use accessibility APIs.
Learn more about Switch Control App accessibility for Switch Control iOS, iPadOS, macOS, tvOS, visionOS Keyboard support
Provide keyboard shortcuts so that people who don’t navigate using a mouse due to limited motor skills can still fully access your app’s features.
Mouse, keyboard, and trackpad
Human Interface Guidelines
Support Full Keyboard Access in your iOS app
Support hardware keyboards in your app
Adding hardware keyboard support to your app iOS, iPadOS, macOS, visionOS Haptics
Haptic feedback on Apple Watch can provide valuable information to everyone, but it can be particularly useful to those with a range of disabilities.
With access to the Taptic Engine, you can add haptic feedback in your apps.

---

url: https://developer.apple.com/accessibility/
title: Building accessible apps
description: 

Preparing your app to play haptics
Core Haptics
Human Interface Guidelines iOS, iPadOS, macOS, tvOS, watchOS Quick Actions
Quick Actions in watchOS 9 let people quickly perform common tasks within your app.
When your app uses the Quick Actions API, people can assign an action and activate that action with a double-pinch gesture.
For example, with Quick Actions built into Apple Watch, users can: Answer and end a phone call.
Dismiss a notification.
Take a photo.
Pause and resume an active workout.
Learn about Quick Actions watchOS Hearing
Apple accessibility technologies contain multiple features to accommodate people who are deaf or hard of hearing, including captions, system translation, Made For iPhone (MFi) hearing aid support, sound recognition, and background sounds.
Learn more about Hearing Captions
Let people watch movies with closed captions or subtitles for the deaf and hard of hearing (SDH) for all audio in every scene on iPhone, iPad, Mac, and Apple TV.
Use AVFoundation with built-in support for captioning during media playback in your apps.
Caption authoring
Media accessibility iOS, iPadOS, macOS, tvOS, visionOS Hearing devices
Top manufacturers have created hearing aids and sound processors designed specifically for iPhone and iPad.

---

url: https://developer.apple.com/accessibility/
title: Building accessible apps
description: 

These advanced hearing devices provide outstanding sound quality, offer many helpful features, and are as easy to set up and use as any other Bluetooth device.
People can instantly apply their audiologist’s suggested environmental presets as they go outdoors or enter noisy locations, such as restaurants, without having to rely on additional remotes.
If you’re a hearing aid manufacturer and want to make your devices compatible with Apple devices, consult the resources below.
Learn about the MFi Program
Hearing device support iOS, iPadOS, macOS, visionOS Music Haptics
Allows people who are deaf or hard of hearing to enjoy music through tactile feedback on iOS.
If you play music in your app, you can support haptic feedback for known songs.
Music Haptics iOS Cognitive
Apple products contain many technologies that can fit the different ways users learn or communicate, including Guided Access, captions, and word prediction.
Learn more about Cognitive Assistive Access
Assistive Access, a game-changing new feature, makes technology — and your apps — more accessible to users with cognitive disabilities on iPhone and iPad.
Cutting-edge advancements in speech synthesis let you create even more custom experiences.
Learn more about Assistive Access iOS, iPadOS Guided Access
Guided Access helps people with autism or other attention and sensory challenges stay focused on the task at hand.

---

url: https://developer.apple.com/accessibility/
title: Building accessible apps
description: 

Implementing the Guided Access protocol in your app lets you specify which parts of your apps are functional, depending on the user’s needs.
UIGuidedAccessRestrictionDelegate protocol Create accessible Single App Mode experiences iOS, iPadOS, visionOS Resources
Learn how to build accessible apps with Apple developer tools, documentation, videos, and sample code.
View resources

---

url: https://developer.apple.com/events/
title: Meet with Apple - Apple Developer
description: 

Join us around the world for a variety of sessions, labs, and workshops — tailored for you.
Browse the full schedule Featured Browse by location
Find out what’s happening near you.
Bangkok
Beijing
Bengaluru
Cupertino
Delhi
Ho Chi Minh City
London
Mexico City
Miami
Munich New York
Paris
São Paulo
Seoul
Shanghai
Singapore
Sydney
Tel Aviv
Tokyo
Toronto Browse by language
Search for activities in your preferred languages.
Brazilian Portuguese
English
French
Japanese
Korean
Mandarin
Spanish
Thai
Vietnamese Browse the full schedule.
See all Activities
Apple developer activities are for everyone, no matter where you are on your development journey.
Activities take place all year long, both online and in person around the world.
Whether you’re looking to enhance your existing app or game, refine your design, or launch a new project, there’s something for you.
Sessions
Sessions are presentations that explore the latest in Apple tools, technologies, features, and best practices.
Appointments
Appointments are one-on-one meetings with Apple experts for guidance on your app or game.
Labs
Labs provide hands-on opportunities to test and optimize your apps for Apple platforms.
Workshops
Workshops are interactive experiences that allow you to dive into new features and technologies in small group settings.

---

url: https://developer.apple.com/events/
title: Meet with Apple - Apple Developer
description: 

Special events
Special events include a variety of activities designed to inspire, guide, and connect the Apple developer community.
Latest stories Inside the Apple Vision Pro labs Spotlight on: Developing for visionOS Discover more Workshop: Code Your First App Code and create as a family with Swift Playground at an Apple Store near you.
View times and locations Apple Developer Academies Sharpen your development skills with a full, free curriculum for future professional developers at the Apple Developer Academies.
Learn more

---

url: https://developer.apple.com/xcode/
title: Xcode
description: 

Xcode sessions, documentation, and sample code — all in one place Xcode
Xcode enables you to develop, test, and distribute apps for all Apple platforms.
Code and design your apps faster with predictive code completion, interactive previews, and live animations.
Use Git staging to craft your next commit without leaving your code.
Explore and diagnose your test results with redesigned test reports with video recording.
And start deploying seamlessly to TestFlight and the App Store from Xcode Cloud.
Creating amazing apps has never been easier.
What’s new in Xcode 16
Transform your ideas into code with predictive code completion and faster previews.
Supercharge your builds with explicit modules.
Get deeper insight into your app’s performance with improved diagnostics and the flame graph view in Instruments.
And bring your app to even more people around the world with enhancements to localization Catalogs.
Learn more about Xcode 16
Download the Developer Tools one‑sheet Ready, set, code.
Xcode is available on the Mac App Store, with downloadable simulator runtimes for all platforms.
Predictive code completion helps you write safer code faster, with an on-device machine learning model trained for Swift and Apple SDKs.
And projects build faster thanks to improvements in the compiler and a linker, optimized for the multicore architecture of Apple silicon.

---

url: https://developer.apple.com/xcode/
title: Xcode
description: 

Stay organized
The Bookmark navigator helps you keep track of landmarks in your code and organize your tasks.
Localization assets are streamlined in the String Catalog, giving you a centralized way to review and update them.
And documentation really shines in Xcode with a beautiful design, and real-time preview.
Swift and SwiftUI
Swift, SwiftUI, and Xcode work together as one.
Powered by Swift macros, Xcode Previews are easy to use and work across SwiftUI, UIKit, and AppKit.
The interactive timeline helps you develop and design your widgets.
And working with different platforms and devices is easy: you can choose them right in the preview canvas to make sure your views look great everywhere.
Learn more about Swift
Learn more about SwiftUI Beyond debugging
Use the power of macros in the source editor, setting breakpoints and stepping into the generated code.
Access debug output with ease using the structured console.
Xcode Cloud
Xcode and Xcode Cloud work seamlessly together.
Xcode Cloud is a continuous integration and delivery service built into Xcode and designed expressly for Apple developers.
Start building your app in just a few minutes, with live build status, beautiful reports, and automatic distribution to your testers and users.
Learn more Get started
Download Xcode and use these resources to build apps for all Apple platforms.
Download Xcode

---

url: https://developer.apple.com/audio/
title: Working with Audio
description: 

Working with Audio
Apple platforms provide a comprehensive set of audio frameworks and technologies that are essential to creating a rich app experience.
Use them to immerse your users in multichannel audio with spatial rendering, process sound in realtime using AVAudioEngine, and engage the creativity of enthusiasts and professionals through Audio Unit Extensions.
Session Videos
See the latest in audio technologies for Apple platforms presented at WWDC.
Watch the videos Documentation and Sample Code Audio Session
Communicate to the system how you intend to use audio in your app.
Documentation Audio Session Programming Guide
AVAudioSessionMediaServicesWereResetNotification Playing Audio
Play audio files in your apps with APIs such as Media Player and AVPlayer.
Documentation Media Player Framework
AVPlayer Framework Audio Files and Format Conversion
Open, read, and write to audio files.
Convert between different sample rates from your app.
Sample Code Encoding and Decoding Audio
Audio Toolbox Convert File
Extended Audio File Conversion Test Recording and Processing Audio
Record and process audio in real-time or offline with AVFoundation APIs.

---

url: https://developer.apple.com/audio/
title: Working with Audio
description: 

Documentation AVFoundation Framework
AVAudioEngine Documentation
How do I set the volume of audio media for playback with AVPlayer on iOS Sample Code Capturing Stereo Audio from Built-In Microphones
Using AVAudioEngine for Playback, Mixing and Recording
AVAudioEngine 3D Audio Example
Performing Offline Audio Processing
Building a Signal Generator
Using Voice Processing Core Audio
Use the Core Audio framework to interact with device’s audio hardware.
Sample Code Creating an Audio Server Driver Plug-in
Building an Audio Server Plug-in and Driver Extension Performance
How to fine tune and achieve the best performance in your audio applications.
Documentation Understanding Audio Workgroups Audio Unit (AU) Plug-ins
Create audio effects, instruments, and utilities that can be used as a plug-in within other apps or hosted by digital audio workstations (DAW).
Documentation Audio Toolbox Framework
Audio Unit Framework
Creating an audio unit extension
Debugging Out-of-Process Audio Units
Hosting Audio Unit Extensions Using the AUv2 API
Migrating Your Audio Unit Host to the AUv3 API Sample Code Audio Unit Examples
Incorporating Audio Effects and Instruments
Creating Custom Audio Effects Utilities Audio Unit SDK MIDI
Communicate with MIDI (Musical Instrument Digital Interface) devices such as hardware keyboards and synthesizers.

---

url: https://developer.apple.com/audio/
title: Working with Audio
description: 

Documentation Core MIDI APIs
Adding Bluetooth LE MIDI Support
Bluetooth LE MIDI Specification
MIDI Bluetooth Sample Code Publishing and Discovering MIDI Capabilities
Incorporating MIDI 2 into your apps Immersive Audio
Create dynamic audio experiences for music, games, and apps that incorporate 3D space, react to events, or vary in response to environmental cues.
Documentation PHASE Related articles Explore Spatial Audio
Spotlight on: Spatial Audio Designing Audio Experiences
Whether sound is a primary aspect of your app’s experience or an embellishment, learn how people expect sound to behave and meet those expectations.
Documentation Human Interface Guidelines Privacy, Code Signing, and Notarization
Follow the latest Apple privacy and security standards with your Mac apps and extensions.
Documentation Microphone Access on macOS
Code Signing Guide
Notarizing macOS Software Before Distribution
Resolving Common Notarization Issues
Audio Unit Host Sandboxing Guide
Audio Components and the Application Sandbox

---

url: https://developer.apple.com/app-store/
title: Making the Most of the App Store
description: 

Making the Most of the App Store
The App Store is a safe and trusted place for customers to discover apps, and a great opportunity for developers to deliver apps and services across iPhone, iPad, Mac, Apple TV, Apple Vision Pro, and Apple Watch in 175 regions.
Find articles, guidelines, and other resources to help you design incredible apps, reach more users, and grow your business.
Learn more about the App Store Articles
Learn about App Store business models and features, creating a great product page, localizing your app, offering in-app purchases, measuring your app’s success, and more.
View articles Take action on peer group benchmarks
Put your app’s performance into context by comparing it to that of similar apps on the App Store.
Read more Updated Auto-renewable subscriptions
Implement auto-renewable subscriptions in your apps using in-app purchase APIs.
Read more In-App Events
Encourage engagement by offering new ways of interacting with your game.
Read more Custom product pages
Create additional versions of your app’s product page to highlight specific features or content, discoverable through unique URLs.
Read more Product page optimization
Try out alternate versions of your app’s product page to find out which one gets the best results.
Read more Localization
Prepare your app for a global audience, and help users around the world easily discover and download your app.

---

url: https://developer.apple.com/app-store/
title: Making the Most of the App Store
description: 

Read more Videos
Watch session videos on App Store distribution and marketing, presented at WWDC and other events.
View videos Guidelines
Learn about requirements for app design, App Review submission, using Apple product images in your marketing materials, and more.
View guidelines Submitting your apps
Learn how to prepare your iPhone, iPad, Mac, Apple TV, Apple Vision Pro, and Apple Watch apps for submission to App Review.
Learn more Promoting your app
Get marketing assets to help promote your app, and learn about getting featured on the App Store.
Learn more

---

url: https://developer.apple.com/programs/enterprise/
title: Apple Developer Enterprise Program
description: 

Apple Developer Enterprise Program
The Apple Developer Enterprise Program allows large organizations to develop and deploy proprietary, internal-use apps to their employees.
This program is for specific use cases that require private distribution directly to employees using secure internal systems or through a Mobile Device Management solution.
Eligibility
The Apple Developer Enterprise Program is only for the internal use and distribution of proprietary apps in specific use cases that are not adequately addressed with public apps on the App Store, custom apps through Apple Business Manager or Ad Hoc distribution, or beta testing through TestFlight.
Your proprietary app must be developed by you for use on Apple platforms.
In addition, the following eligibility requirements apply.
Your organization must: Have 100 or more employees.
Be a legal entity.
We do not accept DBAs, fictitious businesses, trade names, or branches.
Use the program only to create proprietary, in-house apps for internal use, and to distribute these apps privately and securely to employees within the organization.
Have systems in place to ensure only employees can download your internal-use apps, and to protect membership credentials and assets.
Participate in and pass Apple’s verification interview and continuous evaluation process.

---

url: https://developer.apple.com/programs/enterprise/
title: Apple Developer Enterprise Program
description: 

Applying
Application
As the person applying to the Apple Developer Enterprise Program on behalf of your organization, you must have the legal authority to bind your organization to legal agreements.
You must be the organization’s owner/founder, executive team member, senior project lead, or have legal authority granted to you by a senior employee.
To start your application, sign in with your Apple Account with two-factor authentication turned on.
If you’re already enrolled in the Apple Developer Program for distributing apps on the App Store, or have an iTunes Connect account for distributing another media type (music, TV, movies, or books), you will need to use a different Apple Account.
Verification
Verification is conducted to authenticate your organization’s information, to validate your intended use of the program, and to ensure that the App Store, Apple Business Manager, Ad Hoc distribution, or TestFlight would not adequately meet your needs.
Your organization must have a D-U-N-S Number, which is a unique nine-digit number assigned by Dun & Bradstreet and widely used as a standard business identifier.
You can check to see if your organization already has a D-U-N-S Number and request one if necessary.
They are free in most jurisdictions.
Your organization must also have a publicly available website with a domain name that’s associated with your organization.

---

url: https://developer.apple.com/programs/enterprise/
title: Apple Developer Enterprise Program
description: 

In addition, we may contact your organization to verify other details and continue to evaluate your use of the program.
If you choose to renew your membership, your organization will be verified again.
Apple reserves the right to reject your application at its sole discretion.
Agreement and Payment
If your organization is approved for membership in the Apple Developer Enterprise Program, you will receive the enterprise program license agreement for review and acceptance.
The Apple Developer Enterprise Program is 299 USD per membership year or in local currency where available.
Getting Started
The Apple Developer Program allows you to distribute public apps on the App Store, beta versions of apps through TestFlight, and custom apps to specific businesses, including your organization, through Apple Business Manager or Ad Hoc distribution.
The Apple Developer Enterprise Program is only for specific use cases that are not addressed with these options.
Before applying, use the drop down below to find out which program is best for you.
What types of apps will you distribute?
Select an option
Apps for the public (including non-custom business apps)
Custom apps for specific business clients
Proprietary apps for internal use within my organization Please enroll in the Apple Developer Program instead.

---

url: https://developer.apple.com/programs/enterprise/
title: Apple Developer Enterprise Program
description: 

You’ll get access to resources for public app distribution on the App Store, distribution through Apple Business Manager, Ad Hoc distribution, and beta testing through TestFlight.
Learn about the Apple Developer Program Please enroll in the Apple Developer Program instead.
You’ll get access to resources for custom app distribution through Apple Business Manager, Ad Hoc distribution, beta testing through TestFlight, and public app distribution.
Your customer can use Apple Business Manager or redemption codes to privately distribute custom apps.
(Note: If you’re an organization purchasing an app that has been customized for you, simply create an account to access the app on Apple Business Manager.
You do not need to join a developer program.)
Learn about the Apple Developer Program Please learn about the Apple Developer Program first.
The Apple Developer Program is the right option for most organizations that want to distribute proprietary, internal-use apps.
It allows you to use Apple Business Manager, Ad Hoc distribution, or redemption codes to privately distribute custom apps to employees, and TestFlight to test beta versions of your apps.
The Apple Developer Enterprise Program is only for specific use cases that cannot be addressed using these methods.

---

url: https://developer.apple.com/programs/enterprise/
title: Apple Developer Enterprise Program
description: 

Before applying for the Apple Developer Enterprise Program, learn more about the Apple Developer Program to see if it addresses your use case.
If not, you can start your application.
Start your application

---

url: https://developer.apple.com/education/
title: Building Apps for Education
description: 

See what’s new in education Building Apps for Education
Learn how to use the latest features on Apple platforms to build and optimize your apps for the classroom.
Development
Reporting student progress with ClassKit
With the ClassKit framework, you can help teachers easily discover specific learning activities in your app, take students directly to the right activity with a single tap, and securely and privately share progress data to help teachers personalize instruction.
Learn more about ClassKit
Customizing experiences for Shared iPads
Your app can deliver personalized experiences for each student, even when they share iPads in class.
Optimize your app for the Shared iPad feature to save login credentials and states to the keychain, so students can automatically sign in to your app and pick up right where they left off.
Find out how to optimize your app and how to let schools know about it.
Learn about Shared iPad Tools for teaching
Learn how apps and tools on Apple platforms make it easy for teachers to manage devices and educational apps in the classroom, and provide valuable insight into each student’s progress.
Learn more Creating coding experiences with Swift Playground
Education and robotics developers interested in offering text-based coding experiences can create Swift Playground Books for iPad.

---

url: https://developer.apple.com/education/
title: Building Apps for Education
description: 

The Swift Playground app was launched with iOS 10 and is recommended for students 12 years of age or older.
Learn more about Swift Playground Playground Book Format Reference Tell us about your playground subscription
If you’ve created playgrounds and set up a subscription feed, we’d like to hear from you.
Submissions will be considered for promotion in Swift Playground.
Submit your subscription Securing iPads used for assessments
Assessment developers can easily lock down an iPad using the Automatic Assessment Configuration entitlement, with no device management required.
Find out how to apply for and implement this entitlement.
What’s new in assessment
Set up your iPad to give tests and assessments Management
Making it easy to set preferences
Most schools use Mobile Device Management to manage their iPads.
Your app can work with Mobile Device Management services to allow school administrators to easily set preferences for your app across many devices.
What’s New in Managing Apple Devices
Managed App Configuration Sample Code
AppConfig Community IT and deployment
It’s never been easier to put Apple products in the hands of students and teachers.
We’ve simplified the set up process so you can enroll everyone in your school quickly, configure devices automatically, and seamlessly buy and distribute apps and books.

---

url: https://developer.apple.com/education/
title: Building Apps for Education
description: 

Learn about deployment Distribution
Apple School Manager
All apps on the App Store are automatically available for volume purchase in Apple School Manager, which is where educational institutions download apps for volume distribution.
You can offer your apps to educational institutions for a reduced price or identify specific organizations you’d like to let download your app.
Learn about Apple School Manager
Offer custom apps
You can meet the unique needs of educational institutions by privately offering apps you’ve customized just for them on Apple School Manager.
Educational institutions can also use this feature to distribute proprietary apps for internal use.
Learn about distributing apps on Apple School Manager Offering an education discount
You can enable a 50% discount for educational institutions that purchase 20 or more copies of your iOS app or Mac app.
Opt your apps in or out of special pricing at any time in App Store Connect.
Learn more

---

url: https://developer.apple.com/programs/video-partner/
title: Apple Video Partner Program
description: 

Apple Video Partner Program
Since 2016, the Apple Video Partner Program has enabled premium subscription video providers to participate in a new TV watching experience on the Apple TV app, helping customers discover the world’s best premium video content in one app, across all their devices.
How it works
This program is designed for apps that deliver premium subscription video entertainment services.
Participating apps are required to integrate with a number of Apple technologies, such as Universal Search, Siri, AirPlay, and single sign-on or zero sign-on, to ensure a seamless experience for customers.
As a result of this integration, these apps are featured on the Apple TV app and throughout tvOS, and their content is discoverable through Universal Search and Siri.
As a program member, you earn 85% of sales from customers who sign up using Apple’s in-app purchase system.
You may also allow customers who subscribe using your payment method outside of the app to use that payment method for additional video transactions within the app.
You must enable in-app purchase to enjoy these economic benefits.

---

url: https://developer.apple.com/programs/video-partner/
title: Apple Video Partner Program
description: 

Participants
As of fall 2020, over 130 premium subscription video entertainment providers around the world have signed on to participate in this program, such as Amazon Prime Video, Binge, Canadian Broadcasting Corporation (CBC), Claro Video, C More, DAZN, Disney+, Globo, HBO Max, Joyn, Molotov, MUBI, myCanal, STARZ, and Viaplay.
Eligibility and requirements
To be eligible for the Apple Video Partner Program: The primary function of your app must be to deliver your own subscription service for premium video entertainment content.
Your app must: Be available on both iOS and tvOS.
Support Live Tune-In for your live content.
Integrate with Universal Search, Siri, and the Apple TV app in all regions where those features and your service are available.
Support AirPlay.
If customers are able to access your app’s content by authenticating with credentials from a pay TV provider, or if a pay TV provider distributes Apple TV 4K or Apple TV HD as a set-top box, your app must support single sign-on and zero sign-on, as applicable.
To participate in the economic benefits, your app must allow users to purchase through Apple’s in-app purchase system.
You must agree to a separate addendum to the standard Developer Program License Agreement.

---

url: https://developer.apple.com/programs/video-partner/
title: Apple Video Partner Program
description: 

The program is currently available to Apple Developer Program members who are distributing a subscription premium video entertainment app in any of the following regions: Argentina
Australia
Austria
Belgium
Bolivia
Brazil
Bulgaria
Canada
Chile
Colombia
Costa Rica
Czech Republic
Denmark
Dominican Republic
Ecuador
Egypt
El Salvador
Estonia
Finland
France
Germany
Greece
Guatemala
Honduras
Hong Kong
Ireland
Italy
Japan
Jordan
Lithuania
Latvia
Malta
Mexico
Netherlands
New Zealand
Nicaragua
Norway
Oman
Panama
Paraguay
Peru
Portugal
Qatar
Russia
Saudi Arabia Singapore
Slovakia
Slovenia
South Korea
Spain
Sweden
Switzerland
Taiwan
United Arab Emirates
United Kingdom
United States
Venezuela Tell us about your app
If you're a premium subscription video entertainment provider and you think your app qualifies, or if you have questions, let us know.
Contact us

---

url: https://developer.apple.com/testflight/
title: Beta testing made simple with TestFlight
description: 

Beta testing made simple with TestFlight
TestFlight makes it easy for testers to give feedback on your apps, games, and App Clips across Apple platforms before you publish.
Share your beta with just your team, or the public.
Learn how to get started with TestFlight.
Get started
To get started with TestFlight, go to the Apps section of App Store Connect and select the app, game, or App Clip you want to test.
You’ll then select the TestFlight tab and add test information that lets people know what you’d like them to test, along with any other relevant information they should know.
You’ll also need to provide an email address so you can monitor and respond to any tester feedback.
Keep in mind your beta app description and beta app review information are required in order to share your beta with external testers.
Next, upload a beta build of your app, game, or App Clip to App Store Connect.
You can share up to 100 builds, and start testing multiple builds at once.
Once your build is uploaded, you can invite internal and external testers.
Learn about getting started with TestFlight Get started with TestFlight Find testers
With TestFlight, it’s easy to find and manage testers.
You don’t need to keep track of UDIDs, or provision tester profiles.
Testers use the TestFlight app to view your invite and install your beta.

---

url: https://developer.apple.com/testflight/
title: Beta testing made simple with TestFlight
description: 

Your invite includes your beta app description that highlights new features and content your app or game offers.
Apps and games with an approved version that’s ready for distribution can also include their screenshots and app category in their invite.
And if they don’t accept your invite, people can leave feedback to let you know why.
Testers can access all available beta builds you’ve shared with them, on up to 30 devices for comprehensive testing.
Create tester groups
Groups are how you organize and distribute builds to testers.
You can create multiple groups and add different builds to each one.
For example, you might want a specific group to focus on testing on a new platform.
Additionally, you can view tester metrics to better evaluate tester engagement and manage participation.
Add internal testers
Designate up to 100 members of your development team who hold the Account Holder, Admin, App Manager, Developer, or Marketing role as beta testers.
You can also choose to automatically distribute new builds to internal testers, so they’re always testing the latest updates.
Invite external testers
You can also invite up to 10,000 external testers to join your beta program.
To invite external testers, you’ll first create a group in App Store Connect, add the builds you’d like them to test, and have your first build already approved by App Review for TestFlight.

---

url: https://developer.apple.com/testflight/
title: Beta testing made simple with TestFlight
description: 

Your builds are automatically sent for review once they’re added to a group.
Invite external testers using your choice of: Email.
Send people an invitation with a link to install your beta and start testing.
This can be an effective way to enroll testers if you have a specific people and know their email addresses.
Public links.
Include a public link in your marketing communications — such as email, social media, and more — to invite people to test your beta build.
If you’re new to beta testing, public links can be a great way to establish a group of testers since you don’t need to have anyone’s contact information to invite them.
To more easily enroll qualified testers and get more relevant feedback, you can set criteria, such as device type and OS version, for those who enroll via your public link.
To ensure a good user experience, be thoughtful about where you share your public link and when it may be appropriate to remove it.
For example, if you’ve reached your tester limit, be sure to disable your link so people who try and join your beta will know it’s no longer accepting new testers.
You can view how many testers viewed and installed your beta from a public link, as well as how many people met any criteria you’ve selected in App Store Connect.
Get feedback
Feedback is a key part of using TestFlight and helps you understand how to improve your app experience.

---

url: https://developer.apple.com/testflight/
title: Beta testing made simple with TestFlight
description: 

Testers can take a screenshot from your app or game and easily share feedback.
They can even mark up the image with relevant feedback or suggestions.
If they experience a crash, you’ll receive a crash report and testers have the option of sharing additional context to help you troubleshoot the issue.
You can view feedback in the TestFlight section of App Store Connect, including screenshots, comments related to crashes, and any additional written feedback.
Filter feedback by platform or OS version to get additional insight about potential improvements.
You can find out how successful your public link is at enrolling testers for your app as well as understand how many testers viewed and accepted your invite.
If you’ve chosen to set criteria for the public link, you can also view how many testers didn’t meet the criteria.
Submit and publish
When you’ve finished testing, be sure to incorporate any feedback before you distribute your app, game, or App Clip.
Any builds you’ve already added in TestFlight will appear in App Store Connect.
Simply select the build you wish to publish and submit it for review.

---

url: https://developer.apple.com/documentation/swiftui/environment-values
title: This page requires JavaScript.
description: Share data throughout a view hierarchy using the environment.

Collection SwiftUI Environment values API CollectionEnvironment valuesShare data throughout a view hierarchy using the environment.OverviewViews in SwiftUI can react to configuration information that they read from the environment using an Environment property wrapper.A view inherits its environment from its container view, subject to explicit changes from an environment(_:_:) view modifier, or by implicit changes from one of the many modifiers that operate on environment values.
As a result, you can configure a entire hierarchy of views by modifying the environment of the group’s container.You can find many built-in environment values in the EnvironmentValues structure.

---

url: https://developer.apple.com/documentation/swiftui/environment-values
title: This page requires JavaScript.
description: Share data throughout a view hierarchy using the environment.

You can also create a custom EnvironmentValues property by defining a new property in an extension to the environment values structure and applying the Entry() macro to the variable declaration.TopicsAccessing environment valuesstruct EnvironmentA property wrapper that reads a value from a view’s environment.struct EnvironmentValuesA collection of environment values propagated through a view hierarchy.Creating custom environment valuesmacro Entry()Creates an environment values, transaction, container values, or focused values entry.protocol EnvironmentKeyA key for accessing values in the environment.Modifying the environment of a viewfunc environment<T>(T?) -> some ViewPlaces an observable object in the view’s environment.func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some ViewSets the environment value of the specified key path to the given value.func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some ViewTransforms the environment value of the specified key path with the given function.Modifying the environment of a scenefunc environment<T>(T?) -> some ScenePlaces an observable object in the scene’s environment.func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some SceneSets the environment value of the specified key path to the given value.func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some SceneTransforms the environment value of the specified key path with the given function.See AlsoData and storageAPI ReferenceModel dataManage the data that your app uses to drive its interface.API ReferencePreferencesIndicate configuration preferences from views to their container views.API ReferencePersistent storageStore data for use across sessions of your app.

---

url: https://developer.apple.com/tvos/
title: Build for tvOS 18
description: 

Watch the latest videos about tvOS Build for tvOS 18
Elevate the living room experience with new features that entertain, engage, and connect you with the people who matter most.
Sidebar support lets you supercharge your video app with a powerful navigation experience that’s easily customized to your brand and catalog content.
Continuity Camera connections can be made persistent, so your app will be ready to do everything — from capturing the latest dance moves to building video conference rooms.
And you can easily port and customize your app’s interface with updates to SwiftUI and UIKit.
Get the most out of Apple TV 4K
Your tvOS apps can deliver amazing experiences with stunning picture quality through 4K resolution, Dolby Vision, and HDR10+ — and immersive sound through Dolby Atmos.
The A15 Bionic chip in Apple TV 4K includes a 5-core CPU with 2 performance and 3 efficiency cores and a 5-core GPU, to further enhance the realism and capabilities of your apps and games.
Build with the tvOS SDK and SwiftUI
With the tvOS SDK, you can leverage frameworks, such as UIKit, AVKit, and Metal, to create rich games and apps that look amazing on the big screen.
Take advantage of system features, including AVPlayer, Sidebar, and User Management, to get the most out of your streaming media apps.
And you can use SwiftUI to easily port over your iOS or iPadOS apps to tvOS.

---

url: https://developer.apple.com/tvos/
title: Build for tvOS 18
description: 

Migrate your TVML app to SwiftUI Get started
Download Xcode to start building apps for all Apple platforms.
Download Xcode

---

url: https://developer.apple.com/tutorials/sample-apps
title: This page requires JavaScript.
description: Explore these SwiftUI samples using Swift Playgrounds on iPad or in Xcode to learn about defining user interfaces, responding to user interactions, and managing data flow.

Exploring SwiftUI Sample AppsExplore these SwiftUI samples using Swift Playgrounds on iPad or in Xcode to learn about defining user interfaces, responding to user interactions, and managing data flow.

---

url: https://developer.apple.com/tutorials/sample-apps
title: This page requires JavaScript.
description: Explore these SwiftUI samples using Swift Playgrounds on iPad or in Xcode to learn about defining user interfaces, responding to user interactions, and managing data flow.

Get started Chapter 1 Navigating AppsLearn SwiftUI fundamentals, such as navigating between views and providing data to those views.About MeChoose Your Own StoryDate Planner Chapter 2 Presenting ContentOrganize your visual content in a resizable grid layout, from arranging rectangles to managing a dynamic collection of images from a photo library.Organizing with GridsEditing GridsImage GalleryLaying Out Views Chapter 3 Retrieving Content from a ServerKeep your app responsive while fetching and displaying data from a server.Meme Creator Chapter 4 Responding to User InputTap into device capabilities, such as motion sensors and Multi-Touch gestures, to bring your app to life.Bubble LevelSeismometerRecognizing GesturesAnimating Shapes Chapter 5 Capturing and Displaying PhotosTake photos with the camera, add them to your photo library, and display them.Previewing the Camera OutputCapturing and Saving a PhotoBrowsing Your Photos Chapter 6 Get Started with Machine LearningWalk through the fundamentals of machine learning.Recognizing Gestures with Machine LearningDebugging Your Machine Learning ModelCreating Your Own Machine Learning Dataset

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

Simple and safe In-App Purchases
The App Store provides a powerful commerce system that makes it simple to offer your content and services across Apple platforms to people around the world.
Facilitating billions of transactions annually, it handles end-to-end payment processing — so you can focus on creating great apps and games that people will love.
Learn how to leverage world-class App Store commerce and payment features to grow your business as you offer In-App Purchases (including subscriptions).
Checkout and payment support Simple set-up Marketing and engagement features Analytics and reporting Trust and safety Checkout and payment support
Developers have earned more than $300 billion through the App Store commerce system since its launch in 2008.
And the App Store receives more than half a billion visitors every week, making it a great place to promote your In-App Purchases.
Effortless checkout
The App Store In-App Purchase system makes it simple for customers to purchase your digital goods and services on the App Store and in your apps.
When creating an Apple Account, customers add a payment method that can be used to make purchases.
And with secure authentication using Face ID, Optic ID, or Touch ID, customers can make purchases within your app in just a few taps — minimizing abandoned purchases.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

When a purchase is initiated, an App Store payment sheet displays relevant details that help customers easily understand the transaction (like the type of good or service, price, and subscription duration) before confirming their purchase.
Global payment reach
Apple handles worldwide end-to-end payment processing — from decrypting payments, to validating tokens, to receiving payments — so you don’t have to coordinate with multiple payment providers.
Customers can pay with their preferred regional method with support for more than 200 payment methods, including credit and debit cards, carrier billing, digital wallets, and more.
To help you reach as many customers as possible in 175 regions, we continuously add support for new payment methods.
Customer
Transacts in the App Store or in your app using secure biometric authentication.
App Store
Using payment methods already collected from customers, aggregates purchases securely.
Payment Service Provider
Authenticates transactions and when relevant routes transactions over various card networks.
Bank Issuer
Receives payment request and will approve or decline based on customers balance or credit line.
Powerful pricing tools
App Store tools make it convenient to manage In-App Purchase pricing across international markets, so you can easily offer content and expand your business worldwide.
Regional availability options.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

Choose the storefronts where you want to make your In-App Purchases (including subscriptions) available, so you can deliver content and services customized for each market.
Flexible pricing.
Choose from 900 price points, ranging from United States $0.29 to $10,000, with similar prices in each currency.
Options follow the most common pricing conventions in each country or region to make sure your pricing is relevant to customers.
You can also offer a custom price point option in each storefront for an In-App Purchase, and set up custom prices for a limited time period or indefinitely.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

United States Dollar (USD)
China (CNY)
Japan (JPY)
Korea (KRW) Price steps
Lowest supported price
Highest supported price $0.10
$0.29
$9.99 $0.50
$0.49
$49.99 $1.00
$0.99
$199.99 $5.00
$4.99
$499.99 $10.00
$9.99
$9,999.99 Supported Conventions X.99
$0.99
$9,999.99 X.00
$1.00
$10,000 X.90
$0.90
$99.90 X.95
$0.95
$49.95 Price steps
Lowest supported price
Highest supported price CN¥0.50
1
10 CN¥1
1
200 CN¥5
3
498 CN¥10
8
998 CN¥50
48
3,998 CN¥100
98
7,998 CN¥500
498
29,999 CN¥1000
998
74,999 Supported Conventions X9
9
74,999 X8
8
9,998 X0
10
500 X.80
1.80
99.80 X9.90
9.90
99.90 Price steps
Lowest supported price
Highest supported price ¥10
50
2,000 ¥100
100
15,000 ¥500
400
49,800 ¥1,000
800
99,800 ¥5000
4,800
158,800 ¥10,000
9,800
800,000 ¥50,000
48,800
1,600,000 Supported Conventions X0
50
160,000 X,800
800
1,598,800 X80
80
99,980 X90
90
9,990 Price steps
Lowest supported price
Highest supported price ₩100
400
20,000 ₩500
500
100,000 ₩1,000
1,000
200,000 ₩5,000
5,000
500,000 ₩10,000
10,000
1,600,000 ₩100,000
90,000
7,590,000 ₩500,000
490,000
15,900,000 Supported Conventions Double first digit
440
9,900,000 X00
400
16,000,000 X,900 / X9,000 / X90,000 / X900,000
900
15,900,000 Easy-to-set-pricing worldwide.
Specify a country or region you’re familiar with as the basis for automatically generated prices across the other 174 regions in 43 currencies.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

Automatically generated prices are globally equalized, accounting for taxes and foreign currency rates.
Prices of apps and In‑App Purchases (excluding auto-renewable subscriptions) are automatically updated as taxes or foreign currency change.
Prices in your base region and any region with a custom price will never be adjusted by Apple.
Taxes handled for you
Apple provides an automated system that handles the calculation, collection, and remittance of transactional taxes (such as value added tax) and compliance requirements in more than 80 regions, including most major markets, for your app and In-App Purchases on the App Store.
This makes it easy to sell your digital goods and services globally.
The system applies the correct tax rates and regulations for each region based on the tax category assigned to your apps, such as videos, books, or news publications.
We seamlessly adapt tax changes into our commerce system.
Payment collection
Customers are encouraged to provide multiple payment methods and if a billing issue occurs with a given payment method, Apple attempts to collect using the other methods.
Further, Apple automatically updates payment instruments whenever possible and when not possible, uses messaging and follow-ups to encourage customers to resolve.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

If there’s a billing issue with an auto-renewable subscription, the App Store will recover the vast majority of the subscription for you.
In addition, StoreKit displays a Billing Problem message sheet (either when your app launches or when you’ve configured your app to display it) that lets subscribers fix their billing issue without leaving your app.
Apple also notifies them of the issue via push notifications and in-app messaging.
When you enable Billing Grace Period in App Store Connect, subscribers can continue to access your app’s paid content for a period of time, all while Apple attempts to resolve the billing issue.
And if Apple recovers the subscription within the grace period, there’s no lost revenue and no interruption to the subscriber's days of paid service.
Learn more about offering subscriptions.
Simple set-up
You can offer one or more types of In-App Purchases: consumable, non-consumable, auto-renewable subscription, and non-renewing subscription.
Set up your In-App Purchases using App Store Connect, the StoreKit framework, and In-App Purchase APIs to retrieve product information, process payments, and deliver the product.
Quick paywall creation
It’s easy to build intuitive payment experiences for In-App Purchases and subscriptions using StoreKit views.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

With as little as one line of code, StoreKit views clearly present the description, price, and duration for each level of service.
And with built-in localization support, In-App Purchase details are displayed in the relevant language and currency, without any extra development work.
You can also customize StoreKit views to match the look and feel of your app.
Configure In-App Purchases
StoreKit essentials
StoreKit documentation
StoreKit views documentation
Human Interface Guidelines: In-App Purchase
App Review Guidelines: In-App Purchase Up-to-date transaction statuses
Near-real time status updates for refunds, subscription state, Family Sharing access, and more, are available through App Store Server Notifications.
Use this information to update your transaction records and create customized user experiences.
For example, if someone has turned off auto-renew, you might display a promotional offer to encourage them to resubscribe.
To enable App Store Server Notifications, configure your server’s HTTPS URL in App Store Connect.
And you can get the latest product entitlements and transaction updates using the App Store Server API.
Find out the latest status and history for In-App Purchase transactions, including status changes that take place outside your app.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

App Store Server Notifications documentation
App Store Server API documentation Tools to help you test
Take advantage of testing tools throughout the development process so your app and server can properly handle common purchase scenarios, like subscription offers, interrupted purchases, and refunds.
During early development, you can simulate and test in‑app purchases using Xcode.
After you configure your in‑app purchases in App Store Connect, use the sandbox environment or StoreKit Testing in Xcode to test using real product information.
When you’re ready for more people to help you test, TestFlight lets you gain valuable feedback from internal and external testers.
Invite up to 10,000 external testers using just their email addresses or by sharing a public link.
In‑app purchases in TestFlight use the sandbox environment, so they’re free to testers and don’t carry over into production once your app is released on the App Store.
Once you’re done testing, submit your In-App Purchases for review.
Testing at all stages of development Marketing and engagement features
Once your In-App Purchases are published, you can promote them and encourage engagement in different ways.
Learn more about promoting your apps.
Promotion on the App Store
In iOS and iPadOS, people can browse In-App Purchases directly on the App Store and start a purchase even before downloading your app.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

Promoted In-App Purchases appear on your product page, can display in search results, and may be featured on the Today, Games, and Apps tabs, helping you showcase your content to a wide audience.
Learn more Subscription offers
Attract subscribers and keep them engaged with a discounted price or free access for a specific duration of an auto-renewable subscription.
Transactions on the App Store are authenticated, so fraud opportunities — like multiple free trials from a single account — are minimized.
Learn more In-App Events on the App Store
People can discover your events on the App Store in iOS and iPadOS, giving you another way to expand their reach.
If your event requires an In-App Purchase or subscription to participate, it’s noted on the event details page.
Learn more Promo codes
Give press and influencers early access to your app or In-App Purchases with promo codes.
You can give away up to 100 promo codes for each version of your app per platform and up to 100 promo codes per In-App Purchase.
Learn more App bundles
You can create app bundles for paid apps or free apps that offer auto-renewable subscriptions.
If an app offers a subscription, users can access it across all apps included in the bundle.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

Learn more Family Sharing
Apps that offer auto-renewable subscriptions or non-consumable In-App Purchases can offer Family Sharing to let people share access with up to five family members.
Streamlined and convenient, Family Sharing can help you attract subscribers, encourage paid subscriptions, increase engagement, and improve retention.
Learn more Analytics and reporting
Get a wide range of helpful metrics related to each of your In-App Purchases, including sales, number of paying users, average proceeds per paying user, and more.
View your final proceeds for each month, earnings by location and currency, rates used to convert your earnings from local currencies (when available), as well as any applied taxes and adjustments.
You can also download detailed reports of all transactions for each month, including the number of units sold per app or In-App Purchase.
Analytics and reporting overview
View payments and proceeds in Payments and Financial Reports
Download financial reports Data insights only available from Apple
Measure your app’s performance and grow your business on the App Store with unique data insights that only Apple provides.
Each month, Apple collects billions of data points to give you valuable information, including: Unified sales data across iOS, iPadOS, macOS, tvOS, visionOS, and watchOS.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

In-App Purchase proceeds by source, including App Store browse, App Store search, app referrers, and web referrers.
Proceeds related to App Store features you use, including in-app events, custom product pages, pre-orders, and more.
Peer group benchmark data to help you identify how successful your monetization efforts are compared to a relevant peer group.
Subscription data, including the subscription state (trial, paid, and churned), subscription offer performance metrics, and subscription retention data.
Subscriber churn data, such as cancellation events and renewals resulting from billing retry.
Learn about viewing analytics
Learn about measuring app performance
Benchmark your performance
With peer group benchmarks in App Analytics, you can view how your app ranks across key metrics compared to similar apps on the App Store.
One of these metrics is average proceeds per paying user, which can help you understand how well your In-App Purchases are performing.
Differential privacy techniques are applied to peer groups to preserve privacy, so no sensitive developer information is revealed and your data remains yours.
Learn about peer group benchmarks in App Analytics
Learn about taking action on peer group benchmarks
Payments and financial reports
View your final proceeds for each month, with earnings broken out by territory and currency.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

View the rates used to convert your earnings from local currencies (when available) and any taxes and adjustments applied.
Trust and safety
Secure transactions and fraud detection
The App Store is a safe and trusted place for customers and developers, and we work to keep it that way.
From 2020 through 2023, Apple prevented a combined total of over $7 billion in potentially fraudulent transactions.
We continually invest significant resources in building more secure payment technologies, like Apple Pay and StoreKit.
For example, with Apple Pay, credit card numbers are never shared with merchants — eliminating a risk factor in the payment transaction process.
And purchases are verified through password and biometric security in order to prevent unauthorized use.
These protections are an essential part of keeping customers safe.
But customers may not realize that when their credit card information is breached or stolen from another source, fraudsters may turn to online marketplaces like the App Store to attempt to purchase digital goods and services that can be laundered or used for illicit purposes.
Apple focuses relentlessly on this kind of fraud as well, with a fusion of sophisticated technology and human review to prevent stolen cards from being used to make fraudulent purchases.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

And Apple also takes action against fraudulent customer accounts, disabling those associated with abusive activity and blocking fraudulent new accounts before they can even be created.
Customer support features
Thoughtful support helps you build trust with your users and can lead to higher retention, improved engagement, and better ratings and reviews.
StoreKit and the App Store Server API help you provide more seamless support options and resolve in‑app purchase issues quickly and efficiently.
Refund requests
Let people request refunds directly within your app by using the beginRefundRequest API and providing a dedicated place in your app for these requests.
You can also provide other options — such as technical support or in-app credits — before the option to request a refund.
If youʼve enabled App Store Server Notifications, youʼll receive a notification when someone receives a refund.
You can use this information to take action — for example, updating the account balance based on the refund or restricting access to content unlocked by the In‑App Purchase.
If you choose to take action, inform the user of any changes and let them know if there’s anything they need to do.
You can also identify if someone previously received refunds for any In‑App Purchases made in your app using the Get Refund History endpoint.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

Apple uses a variety of factors to determine whether a refund request is approved or denied.
To help inform and improve the refund process, you can send information about a user’s In‑App Purchase (including auto-renewable subscriptions) to Apple via the Consumption API when they request a refund (for example, if they used the In-App Purchase or you were unable to deliver the purchase).
Data is incorporated into our refund logic, to help ensure flexible, accurate, and informed decision making.
Refund request UI best practices
Enabling App Store Server Notifications
Handling refund notifications
Providing subscriber support Purchase management
If someone redownloads your app or switches to a new device, be sure to immediately provide access to the content or functionality from their past In‑App Purchases.
Use the currentEntitlements property in StoreKit to understand a user’s entitlements and provide access accordingly.
Your app must also include a restore mechanism for any restorable In‑App Purchases, per App Review Guideline 3.1.1.
If someone requests support for an In‑App Purchase, you can use the Look Up Order ID endpoint to make sure you’re taking action on the right purchase.

---

url: https://developer.apple.com/in-app-purchase/
title: Simple and safe In-App Purchases
description: 

Simply ask the user for the Order ID included on their email receipt from Apple, then use the endpoint to confirm the invoice and any associated information — for example, whether the user has already received a refund for their purchase — or to match the date and time of the purchase with your records.
Tools for families
Apple provides tools to help developers and parents deliver safe experiences for children.
With Ask to Buy, kids can send a request to the family organizer when they want to buy or download a new app or In-App Purchase.
And parents can use Screen Time to prevent unintentional or unauthorized purchases from the App Store, including In-App Purchases across all apps.
Help from Apple
Apple provides world-class customer support to help efficiently resolve billing issues.
Customers can use Report a Problem at any time to get support for In-App Purchases made within your app or on the App Store.
And because our support team is located worldwide, we can respond quickly.
Customers receive email receipts from Apple for any purchases they’ve made, and they can view their purchase history in their Apple Account.
You can contact us at any time with questions about your Apple Developer Program membership, App Store Connect, implementing technologies and features, and more.
Learn about distributing on the App Store

---

url: https://developer.apple.com/tutorials/swiftui
title: This page requires JavaScript.
description: SwiftUI is a modern way to declare user interfaces for any Apple platform. Create beautiful, dynamic apps faster than ever before.

Introducing SwiftUISwiftUI is a modern way to declare user interfaces for any Apple platform.

---

url: https://developer.apple.com/tutorials/swiftui
title: This page requires JavaScript.
description: SwiftUI is a modern way to declare user interfaces for any Apple platform. Create beautiful, dynamic apps faster than ever before.

Create beautiful, dynamic apps faster than ever before.4hr 25min Estimated Time Get started Chapter 1 SwiftUI essentialsLearn how to use SwiftUI to compose rich views out of simple ones, set up data flow, and build the navigation while watching it unfold in Xcode’s preview.Creating and combining views40minBuilding lists and navigation35minHandling user input20min Chapter 2 Drawing and animationDiscover how to draw shapes and paths to create a badge that you’ll animate, while also creating seamless transitions between views.Drawing paths and shapes25minAnimating views and transitions20min Chapter 3 App design and layoutExplore the structure and layout of more complex interfaces built with SwiftUI.Composing complex interfaces20minWorking with UI controls25min Chapter 4 Framework integrationUse SwiftUI views together with the views and view controllers from platform-specific UI frameworks.Interfacing with UIKit25minCreating a watchOS app25minCreating a macOS app30min Resources Explore more resources for learning about creating amazing apps with SwiftUI.DocumentationBrowse and search detailed API documentation.View fundamentalsApp organizationModel data View more VideosWatch WWDC sessions about SwiftUI.Introduction to SwiftUIWhat’s New in SwiftUIApp Essentials in SwiftUI Watch videos ForumsDiscuss SwiftUI with Apple engineers and other developers.

---

url: https://developer.apple.com/tutorials/swiftui
title: This page requires JavaScript.
description: SwiftUI is a modern way to declare user interfaces for any Apple platform. Create beautiful, dynamic apps faster than ever before.

View forums Sample CodeDownload and explore sample code projects to get to know SwiftUI.Hello WorldBackyard Birds: Building an app with SwiftData and widgetsAdd Rich Graphics to Your SwiftUI AppCreating Accessible ViewsXcode and SDKsDownload Xcode 15 or later for the latest tools and SDKs.
View downloads

---

url: https://developer.apple.com/swift/
title: Swift
description: 

Swift sessions, documentation, and sample code — all in one place Swift
The powerful programming language that’s also easy to learn.
Swift is a powerful and intuitive programming language for all Apple platforms.
It’s easy to get started using Swift, with a concise-yet-expressive syntax and modern features you’ll love.
Swift code is safe by design and produces software that runs lightning‑fast.
Modern Designed for safety Fast and powerful Great first language Open source Playgrounds and Read-Eval-Print-Loop (REPL) Package manager Objective-C and C++ interoperability What’s new
Swift 6 makes it easier to write concurrent code correctly with a new, optional language mode that analyzes your code at compile-time and diagnoses possible data races.
This release also brings other enhancements to concurrency and generics, as well as improved support for source editors that use the Language Server Protocol.
Watch the latest video
Download the Swift one-sheet Modern
Swift is the result of the latest research on programming languages, combined with decades of experience building software that runs on billions of devices.
Named parameters are expressed in a clean syntax that makes APIs in Swift easy to read and maintain.
Even better, you don’t even need to type semi-colons.
Inferred types make code cleaner and less prone to mistakes, while modules eliminate headers and provide namespaces.

---

url: https://developer.apple.com/swift/
title: Swift
description: 

To best support international languages and emoji, strings are Unicode-correct and use a UTF-8-based encoding to optimize performance for a wide variety of use cases.
Memory is managed automatically using tight, deterministic reference counting, keeping memory usage to a minimum without the overhead of garbage collection.
You can even write concurrent code with simple, built-in keywords that define asynchronous behavior, making your code more readable and less error prone.
struct Player { var name: String var highScore: Int = 0 var history: [Int] = [] init(_ name: String) { self.name = name }
} var player = Player("Tomas")
Declare new types with modern, straightforward syntax.
Provide default values for instance properties and define custom initializers.
extension Player { mutating func updateScore(_ newScore: Int) { history.append(newScore) if highScore < newScore { print("\(newScore)!
A new high score for \(name)!
🎉") highScore = newScore } }
} player.updateScore(50)
// Prints "50!
A new high score for Tomas!
🎉"
// player.highScore == 50
Add functionality to existing types using extensions, and cut down on boilerplate code with custom string interpolations.

---

url: https://developer.apple.com/swift/
title: Swift
description: 

extension Player: Codable, Equatable {} import Foundation
let encoder = JSONEncoder()
try encoder.encode(player) print(player)
// Prints "Player(name: "Tomas", highScore: 50, history: [50])”
Quickly extend your custom types to take advantage of powerful language features, such as automatic JSON encoding and decoding.
let players = getPlayers() // Sort players, with best high scores first
let ranked = players.sorted(by: { player1, player2 in player1.highScore > player2.highScore
}) // Create an array with only the players’ names
let rankedNames = ranked.map { $0.name }
// ["Erin", "Rosana", "Tomas"]
Perform powerful custom transformations using streamlined closures.
These forward-thinking concepts result in a language that’s fun and easy to use.
Swift has many other features to make your code more expressive: Generics that are powerful and simple to use
Protocol extensions that make writing generic code even easier
First-class functions and a lightweight closure syntax
Fast and concise iteration over a range or collection
Tuples and multiple return values
Structs that support methods, extensions, and protocols
Enums can have payloads and support pattern matching
Functional programming patterns, e.g., map and filter
Macros that help reduce boilerplate code
Built-in error handling using try / catch / throw Designed for safety
Swift eliminates entire classes of unsafe code.

---

url: https://developer.apple.com/swift/
title: Swift
description: 

Variables are always initialized before use, arrays and integers are checked for overflow, memory is automatically managed, and potential data races can be spotted at compile-time.
Syntax is tuned to make it easy to define your intent — for example, simple three-character keywords define a variable ( var ) or constant ( let ).
And Swift heavily leverages value types, especially for commonly used types like Arrays and Dictionaries.
This means that when you make a copy of something with that type, you know it won’t be modified elsewhere.
Another safety feature is that by default Swift objects can never be nil.
In fact, the Swift compiler will stop you from trying to make or use a nil object with a compile-time error.
This makes writing code much cleaner and safer, and prevents a huge category of runtime crashes in your apps.
However, there are cases where nil is valid and appropriate.
For these situations Swift has an innovative feature known as optionals.
An optional may contain nil, but Swift syntax ensures you to safely deal with it using the ?
syntax to indicate to the compiler you understand the behavior and will handle it safely.
extension Collection where Element == Player { // Returns the highest score of all the players, // or `nil` if the collection is empty.
func highestScoringPlayer() -> Player?

---

url: https://developer.apple.com/swift/
title: Swift
description: 

{ return self.max(by: { $0.highScore < $1.highScore }) }
}
Use optionals when you might have an instance to return from a function, or you might not.
if let bestPlayer = players.highestScoringPlayer() { recordHolder = """ The record holder is \(bestPlayer.name),\ with a high score of \(bestPlayer.highScore)!
"""
} else { recordHolder = "No games have been played yet."
}
print(recordHolder)
// The record holder is Erin, with a high score of 271!
let highestScore = players.highestScoringPlayer()?.highScore ??
0
// highestScore == 271
Features such as optional binding, optional chaining, and nil coalescing let you work safely and efficiently with optional values.
Fast and powerful
From its earliest conception, Swift was built to be fast.
Using the incredibly high-performance LLVM compiler technology, Swift code is transformed into optimized machine code that gets the most out of modern hardware.
The syntax and standard library have also been tuned to make the most obvious way to write your code also perform the best whether it runs in the watch on your wrist or across a cluster of servers.
Swift is a successor to the C, C++, and Objective-C languages.
It includes low-level primitives such as types, flow control, and operators.
It also provides object-oriented features such as classes, protocols, and generics.
Great first language
Swift can open doors to the world of coding.

---

url: https://developer.apple.com/swift/
title: Swift
description: 

In fact, it was designed to be anyone’s first programming language, whether you’re still in school or exploring new career paths.
For educators, Apple created free curriculum to teach Swift both in and out of the classroom.
First-time coders can download Swift Playground — an app for iPad and Mac that makes getting started with Swift code interactive and fun.
Aspiring app developers can access free courses to learn to build their first apps in Xcode.
And Apple Stores around the world host Today at Apple Coding & Apps sessions where you can get practical experience with Swift code.
Learn more about Swift education resources from Apple Open source
Swift is developed in the open at Swift.org, with source code, a bug tracker, forums, and regular development builds available for everyone.
This broad community of developers, both inside Apple as well as hundreds of outside contributors, work together to make Swift even more amazing.
There is an even broader range of blogs, podcasts, conferences, and meetups where developers in the community share their experiences of how best to use Swift.
Cross-platform
Swift already supports all Apple platforms, Linux, and Windows, with community members actively working to port to even more platforms.
With SourceKit-LSP, the community has integrated Swift support into a wide-variety of developer tools.

---

url: https://developer.apple.com/swift/
title: Swift
description: 

We’re excited to see more ways in which Swift makes software safer and faster, while also making programming more fun.
Swift for server
Swift is also being used for a new class of modern server applications.
It’s perfect for use in server apps that need runtime safety, compiled performance, and a small memory footprint.
To steer the direction of Swift for developing and deploying server applications, the community formed the Swift Server work group.
The first product of this effort was SwiftNIO, a cross-platform asynchronous event-driven network application framework for high performance protocol servers and clients.
It serves as the foundation for additional server-oriented tools and technologies, including logging, metrics, and database drivers.
To learn more about the open source Swift community and the Swift Server work group, visit Swift.org.
Playgrounds and Read-Eval-Print-Loop (REPL)
Much like Swift Playground for iPad and Mac, playgrounds in Xcode make writing Swift code incredibly simple and fun.
Type a line of code and the result appears immediately.
You can then Quick Look the result from the side of your code, or pin that result directly below.
The result view can display graphics, lists of results, or graphs of a value over time.

---

url: https://developer.apple.com/swift/
title: Swift
description: 

You can open the Timeline Assistant to watch a complex view evolve and animate, great for experimenting with new UI code, or to play an animated SpriteKit scene as you code it.
When you’ve perfected your code in the playground, simply move that code into your project.
Swift is also interactive when you use it in Terminal or to the Xcode LLDB debugging console.
Package manager
Swift Package Manager is a cross-platform tool for building, running, testing, and packaging your Swift libraries and executables.
Swift packages are the best way to distribute libraries and source code to the Swift community.
Configuration of packages is written in Swift itself, making it easy to configure targets, declare products, and manage package dependencies.
Swift packages can also include custom commands that help build your projects and provide additional tooling.
Swift Package Manager itself is actually built with Swift and included in the Swift open source project as a package.
Objective-C and C++ interoperability
You can create an entirely new application with Swift today, or begin using Swift code to implement new features and functionality in your app.
Swift code coexists along side your existing Objective-C and C++ files in the same project, with access to your Objective-C and C++ APIs, making it easy to adopt.
Get started
Download Xcode and learn how to build apps using Swift with documentation and sample code.

---

url: https://developer.apple.com/swift/
title: Swift
description: 

View resources

---

url: https://developer.apple.com/documentation/updates/swiftui
title: This page requires JavaScript.
description: Learn about important changes to SwiftUI.

Updates SwiftUI updates ArticleSwiftUI updatesLearn about important changes to SwiftUI.OverviewBrowse notable changes in SwiftUI.June 2024VolumesSpecify the alignment of a volume when moved in the world using the volumeWorldAlignment(_:) scene modifier.Specify the default world scaling behavior of your scene using the defaultWorldScaling(_:) scene modifier.Adjust the visibilty of a volume’s baseplate using the volumeBaseplateVisibility(_:) view modifier.Define a custom action to execute when the viewpoint of a volume changes using the onVolumeViewpointChange(updateStrategy:initial:_:) view modifier.WindowsChange the default initial size and position of a window using the defaultWindowPlacement(_:) modifier.Change the default behavior for how windows behave when performing a zoom using WindowIdealSize and provide the placement for the zoomed window with the windowIdealPlacement(_:) modifier.Create utility windows in SwiftUI using the new UtilityWindow scene type and toggle the window’s visibility using the WindowVisibilityToggle.Customize the style of a window using the new window container background placement, the toolbar(removing:) view modifier, and the plain window style.Set the default launch behavior for a scene using the defaultLaunchBehavior(_:) modifier.Replace one scene with another using the pushWindow method.Immersive spacesAdd an action to perform when the state of the immersion changes using the onImmersionChange(_:) modifier.Define the minimum, maximum, and initial amount of immersion using new initializers by applying doc://com.apple.documentation/documentation/SwiftUI/ImmersionStyle/progressive(_:initialAmount:)-7gp0e as the immersion style of an immersive space.Apply a custom color or dim a passthrough video in an immersive space using the colorMultiply(_:) and dim(intensity:) initializers.DocumentsCustomize the launch experience of document-based applications using DocumentGroupLaunchScene and NewDocumentButton.NavigationSpecify the appearance and interaction of TabView with the tabViewStyle(_:) modifier using values like sidebarAdaptable, tabBarOnly, and grouped.Build hierarchy by nesting tabs as a tab item within TabSection.Enable people to customize a TabView using the tabViewCustomization(_:) modifier and persist customization state in AppStorage with TabViewCustomization.Improve the search experience in a tab view by using new Tab initializers like doc://com.apple.documentation/documentation/SwiftUI/Tab/init(_:systemImage:role:content:)-3hjer that rely on the new TabRole.Modal presentationsUse built-in presentation sizes for sheets like form or page with the presentationSizing(_:) modifier or create custom sized sheets using the PresentationSizing protocol.ToolbarsSpecify the display mode of toolbars in macOS using the ToolbarLabelStyle type.Configure the foreground style in the toolbar environment in watchOS using the toolbarForegroundStyle(_:for:) view modifier.Anchor ornaments relative to the depth of your volume — in addition to the height and width — using the scene(_:) method that takes a UnitPoint3D.ViewsCreate custom container views like Picker, List, and TabView using new Group and ForEach initializers, like init(subviews:transform:) and init(subviews:content:), respectively.Declare a custom container value by defining a key that conforms to the ContainerValueKey protocol, and set the container value for a view using the containerValue(_:_:) modifier.Create EnvironmentValues, Transaction, ContainerValues, and FocusedValues entries by using the Entry() macro to the variable declaration.AnimationCustomize the transition when pushing a view onto a navigation stack or presenting a view with the navigationTransition(_:) view modifier.Add new symbols effects and configurations like wiggle, rotate, and breathe using the symbolEffect(_:options:value:) modifier.Text input and outputAdd text suggestions support to any text field using textInputSuggestions(_:) and textInputCompletion(_:) view modifiers.Access and modify selected text using a new TextSelection binding for TextField and TextEditor.Bind to the focus state of an app’s search field using the searchFocused(_:equals:) view modifier.Drawing and graphicsPrecompile shaders at build time using the compile(as:) method.Create mesh gradients with a grid of points and colors using the new MeshGradient type.Extend SwiftUI Text views with custom rendering effects and interaction behaviors using TextAttribute, Text.Layout, and TextRenderer.Create a new Color by mixing two colors using the mix(with:by:in:) method.LayoutEnable custom spacing between views in a ZStack along the depth axis with the init(alignment:spacing:content:) initializer.ScrollingScroll to a view, offset, or edge in a scroll view using the scrollPosition(_:anchor:) view modifier and specifying one of the ScrollPosition values.Limit the number of views that can be scrolled by a single interaction using the limit behavior value alwaysByFew or alwaysByOne.Add an action to be called when a view crosses a provided threshold using the onScrollVisibilityChange(threshold:_:) modifier.Access both the old and new values when a scroll view’s phase changes by using the onScrollPhaseChange(_:) modifier.GesturesConditionally disable a gesture using the isEnabled parameter in a modifier like gesture(_:isEnabled:).Create extra drag areas of a window in macOS when you add a WindowDragGesture gesture.Create a hand gesture shortcut for Double Tap in watchOS using the HandGestureShortcut structure.Enable whether gestures can handle events that activate the containing window using the allowsWindowActivationEvents(_:) view modifier.Input eventsCreate a group of hover effects that activate together using HoverEffectGroup and apply them to a view using the hoverEffect(in:isEnabled:body:) view modifier.Customize the appearance of the system pointer in macOS, iPadOS, and visionOS with new pointer styles using pointerStyle(_:) or the visibility with the pointerVisibility(_:) modifier.Access keyboard modifier flags using the onModifierKeysChanged(mask:initial:_:).Replace the primary view with one or more alternative views when pressing a specified set of modifier keys using the modifierKeyAlternate(_:_:) view modifier.Enable the hand pointer for custom drawing and markup applications using the handPointerBehavior(_:) modifier.Previews in XcodeWrite dynamic properties inline in previews using the new Previewable() macro.Inject shared environment objects, model containers, or other dependencies into previews using the PreviewModifier protocol.AccessibilityAdd accessibility custom actions to interactive widgets or custom controls using new accessibility action modifiers such as doc://com.apple.documentation/documentation/swiftui/view/accessibilityaction(named:intent:)-26k7g.Improve the drag-and-drop experience for accessibility clients such as VoiceOver.

---

url: https://developer.apple.com/documentation/updates/swiftui
title: This page requires JavaScript.
description: Learn about important changes to SwiftUI.

Define the location of a drag or drop point and a textual description of the kind of drag or drop available using doc://com.apple.documentation/documentation/SwiftUI/View/accessibilityDragPoint(_:description:)-81e6u and doc://com.apple.documentation/documentation/SwiftUI/View/accessibilityDropPoint(_:description:)-65k1c.Specify that your accessibility element behaves as a tab bar using the isTabBar accessibility trait with the accessibilityAddTraits(_:) modifier.
In UIKit, use tabBar.Enhance how you structure accessibility labels by appending custom content using accessibilityLabel(content:).Generate a localized description of a color in a string interpolation by adding accessibilityName:, such as "\(accessibilityName: myColor)".
Pass that string to any accessibility modifier.Provide accessibility information conditionally with new modifiers such as doc://com.apple.documentation/documentation/swiftui/view/accessibilitylabel(_:isenabled:)-83vyj.Framework interoperabilityUse SwiftUI animations from AppKit and UIKit to create a consistent animation experience across apps that use multiple UI frameworks.
In UIKit, use animate(with:changes:completion:).
In AppKit, use animate(with:changes:completion:).Reuse existing UIKit gesture recognizer code in SwiftUI.

---

url: https://developer.apple.com/documentation/updates/swiftui
title: This page requires JavaScript.
description: Learn about important changes to SwiftUI.

In SwiftUI, create UIKit gesture recognizers using UIGestureRecognizerRepresentable.
In UIKit, refer to SwiftUI gestures by name using name.Share menu content definitions between SwiftUI and AppKit by using the NSHostingMenu in your AppKit view hierarchy.June 2023, visionOSScenesCreate a volume that can display 3D models by applying the volumetric window style to an app’s window.Make use of a Full Space by opening an ImmersiveSpace scene.

---

url: https://developer.apple.com/documentation/updates/swiftui
title: This page requires JavaScript.
description: Learn about important changes to SwiftUI.

You can use the mixed immersion style to place objects in a person’s surroundings, or the full style to completely control the visual experience.Display 3D models in a volume or a Full Space using RealityKit entities that you load with that framework’s Model3D or RealityView structure.Toolbars and ornamentsDisplay a toolbar item in an ornament using the bottomOrnament toolbar item placement.Add an ornament to a window directly using the ornament(visibility:attachmentAnchor:contentAlignment:ornament:) view modifier.Drawing and graphicsDetect view geometry in three dimensions using a GeometryReader3D.Add a 3D visual effect using the visualEffect3D(_:) view modifier.Rotate or scale in three dimensions with view modifiers like rotation3DEffect(_:anchor:) and scaleEffect(x:y:z:anchor:), respectively.Convert between display points and physical distances using a PhysicalMetricsConverter.View configurationAdd a glass background effect to a view using the glassBackgroundEffect(displayMode:) view modifier.Dim passthrough when appropriate by applying a preferredSurroundingsEffect(_:) modifier.View layoutMake 3D adjustments to layout with view modifiers like offset(z:), padding3D(_:), and frame(depth:alignment:).GesturesEnable people to rotate objects in three dimensions when you add a RotateGesture3D gesture.June 2023ScenesClose windows by their identifier using the dismissWindow action stored in the environment.Enable people to open a settings window by presenting a SettingsLink button.NavigationControl views of a navigation split view or stack using a new overload of the navigationDestination(item:destination:) view modifier.Manage column visibility of a navigation split view using new overloads of the view’s initializer, like init(columnVisibility:preferredCompactColumn:sidebar:content:detail:).Modal presentationsUse new overloads of the file export, import, and move modifiers, like fileExporter(isPresented:document:contentTypes:defaultFilename:onCompletion:onCancellation:), to access new file management features.

---

url: https://developer.apple.com/documentation/updates/swiftui
title: This page requires JavaScript.
description: Learn about important changes to SwiftUI.

For example, you can:Configure a file import or export dialog to open on a default directory, enable only certain file types, display hidden files, and so on.Retain file interface configuration that a person chooses from one presentation to the next.Export types that conform to the Transferable protocol.Specify a dialog severity using the dialogSeverity(_:) view modifier.Provide a custom icon for a dialog using the dialogIcon(_:) modifier.Enable people to suppress dialogs using one of the dialog suppression modifiers, like dialogSuppressionToggle(isSuppressed:).ToolbarsConfigure the toolbar title display size using the toolbarTitleDisplayMode(_:) modifier.SearchPresent search programmatically using a binding to a new isPresented parameter available in some searchable view modifiers, like searchable(text:isPresented:placement:prompt:).Create mutable search tokens by providing a binding to the input of the token closure in the applicable searchable view modifiers, like searchable(text:editableTokens:isPresented:placement:prompt:token:).Data and storageBridge between SwiftUI environment keys and UIKit traits more easily using the UITraitBridgedEnvironmentKey protocol.Get better performance when you share data throughout your app by using the new Observable() macro.Access both the old and new values of a value that changes when processing the completion closure of the onChange(of:initial:_:) view modifier.ViewsDisplay a standard interface when a resource, like search results or a network connection, isn’t available using the ContentUnavailableView view type.Display a standard inspector interface with a platform-appropriate appearance by applying the inspector(isPresented:content:) modifier.AnimationPerform an action when an animation completes by specifying a completion closure to the withAnimation(_:completionCriteria:_:completion:) view modifier.Define custom animation behaviors by creating a type that conforms to the CustomAnimation protocol.Perform animations that progress through predefined phases using the PhaseAnimator structure, or according to a set of time-based keyframes by using the Keyframes protocol.Specify information about a change in state — for example, to request a particular animation — using custom TransactionKey instances.Design custom animation curves using UnitCurve.Apply streamlined spring parameters, now standardized across all Apple frameworks, using the new spring(duration:bounce:blendDuration:) animation.

---

url: https://developer.apple.com/documentation/updates/swiftui
title: This page requires JavaScript.
description: Learn about important changes to SwiftUI.

You can also use the Spring structure as a convenience to represent a spring’s motion.Text input and outputIndicate the language that appears in a specific Text view so that SwiftUI can help to avoid clipping and collision of text, and perform proper line breaking and hyphenation using the typesettingLanguage(_:isEnabled:) view modifier.Scale text semantically, for example by labeling it as having a secondary text scale, using the textScale(_:isEnabled:) modifier.ShapesApply more than one fill(_:style:) or stroke(_:style:antialiased:) modifier to a single Shape.Apply Boolean operations to both shapes and paths, like intersection(_:eoFill:) and union(_:eoFill:).Use predefined shape styles, like rect, to simplify your code.Create rounded rectangles with uneven corners using rect(topLeadingRadius:bottomLeadingRadius:bottomTrailingRadius:topTrailingRadius:style:).Create dynamic colors and rendering styles by defining the doc://com.apple.documentation/documentation/SwiftUI/ShapeStyle/resolve(in:)-mq46 method for custom shape styles.Drawing and graphicsCreate fully customizable, high-performance graphics by drawing with Metal shaders inside a SwiftUI app using a Shader structure.Configure an image with a specific dynamic range by applying the allowedDynamicRange(_:) view modifier.Compose effects that you apply to a view based on some aspect of the geometry of the view using the visualEffect(_:) modifier.

---

url: https://developer.apple.com/documentation/updates/swiftui
title: This page requires JavaScript.
description: Learn about important changes to SwiftUI.

For example, you can apply a blur that varies depending on the view’s position in the display.LayoutDefine custom coordinate spaces using the CoordinateSpaceProtocol with new GeometryProxy methods, like bounds(of:) and frame(in:), to get the dimensions of containers.Create a frame for a view that lays out its content based on characteristics of the container view using containerRelativeFrame(_:alignment:).Set the background of a container view using the containerBackground(_:for:) view modifier.Lists and tablesDisable selectability of an item in a List or Table by applying the selectionDisabled(_:) modifier.Collapse or expand a Section of a list or table using the isExpanded binding in the section’s initializer.Configure row or section spacing using the listRowSpacing(_:) and listSectionSpacing(_:) modifiers, respectively.Set the prominence of a badge using the badgeProminence(_:) view modifier.Configure alternating row backgrounds using the alternatingRowBackgrounds(_:) modifier.Customize table column visibility and reordering using the TableColumnCustomization structure.Add hierarchical rows to a table using the DisclosureTableRow structure, or recursively hierarchical rows using the OutlineGroup structure.Hide table column headers using the tableColumnHeaders(_:) modifier.ScrollingRead the position of a scroll view using one of the scroll position modifiers, like scrollPosition(id:anchor:).Flash scroll indicators programmatically using a view modifier, like scrollIndicatorsFlash(onAppear:).Clip scroll views in custom ways after disabling default clipping using the scrollClipDisabled(_:) modifier.Create paged scroll views, aligned to either page or view boundaries, using the scrollTargetBehavior(_:) view modifier.Create custom scroll behaviors using the ScrollTargetBehavior protocol.Control the insets of scrollable views using the safeAreaPadding(_:) and contentMargins(_:_:for:) view modifiers.Add effects to views as they scroll on- and offscreen using one of the scrollTransition(_:axis:transition:) modifiers.Create a TabView that supports vertical paging in watchOS by applying the verticalPage tab view style.GesturesMake smoother transitions between gestures and animations by using a new velocity property on the values associated with certain gestures and a tracksVelocity property on Transaction.Gain access to more information, including both velocity and position, by migrating to the new MagnifyGesture and RotateGesture, which replace the now deprecated MagnificationGesture and RotationGesture.Input eventsEnable a view that’s in focus to react directly to keyboard input by applying one of the onKeyPress(_:action:) view modifiers.Enable people to choose from a compact collection of items in a Menu by styling a Picker with the palette style.Provide haptic or audio feedback in response to an event using one of the sensory feedback modifiers, like sensoryFeedback(_:trigger:).Create buttons and toggles that perform an AppIntent in a widget, Live Activity, and other places using new initializers like init(_:intent:) and init(_:isOn:intent:).FocusDistinguish between views for which focus serves different purposes, such as those that have a primary action like a button and those that take input like a text field, using the new focusable(_:interactions:) view modifier.Manage the effect that receiving focus has on a view using the focusEffectDisabled(_:) modifier.Previews in XcodeReduce the amount of boilerplate that you need to create Xcode previews by using the new Preview(_:traits:_:body:) macro.See AlsoTechnology updatesAccelerate updatesLearn about important changes to Accelerate.Accessibility updatesLearn about important changes to Accessibility.ActivityKit updatesLearn about important changes in ActivityKit.AdAttributionKit UpdatesLearn about important changes to AdAttributionKit.App Intents updatesLearn about important changes in App Intents.AppKit updatesLearn about important changes to AppKit.Apple Intelligence updatesLearn about important changes to Apple Intelligence.Apple Pencil updatesLearn about important changes to Apple Pencil.ARKit updatesLearn about important changes to ARKit.Audio Toolbox updatesLearn about important changes to Audio Toolbox.AuthenticationServices updatesLearn about important changes to AuthenticationServices.AVFAudio updatesLearn about important changes to AVFAudio.AVFoundation updatesLearn about important changes to AVFoundation.Bundle Resources updatesLearn about important changes to Bundle Resources.ContactsUI updatesLearn about important changes to ContactsUI.

---

url: https://developer.apple.com/watchos/
title: Build for watchOS 11
description: 

watchOS 11 sessions, and documentation — all in one place Build for watchOS 11
Take advantage of the increased intelligence and capabilities of the Smart Stack with new relevancy cues, interactivity, Live Activities, and more. Plus, bring the magical experience of double tap to your apps. Want the highlights? Download the watchOS one-sheet Double Tap API
Define a primary action in your app, so people can just double tap to do what matters most. Smart Stack
Use cues, including time, date, location, daily routine (like bedtime), and more to have the Smart Stack suggest your widget at just the right moment.
With the AccessoryWidgetGroup template you can provide three separate views and deep link to different parts of your app. And you can add interactivity to let people perform actions without leaving the widget. Live Activities
iOS Live Activities will automatically display in the Smart Stack on Apple Watch. You can also customize how your Live Activity appears on Apple Watch to provide even more detailed and valuable information at a glance. Get started
Download Xcode to start building apps for all Apple platforms.
Download Xcode

---

url: https://developer.apple.com/app-store/app-store-awards/
title: Meet the winners and finalists
description: 

Meet the winners and finalists
Every year, the App Store Awards celebrate the very best and most impactful apps and games on the App Store — and the developers behind them.
With so much innovation and creativity across the App Store worldwide, selecting just a few apps and games is no easy task.
That’s why this year we’re proud to honor outstanding winners and finalists.
Congratulations to them all!
Apps of the Year
Congratulations to the incredible developers who built this year’s App of the Year winners and finalists.
They helped us discover more ways to explore the world, learn new skills, and tap into creativity through multiple mediums.
iPhone App of the Year Kino Lux Optics Incorporated Finalists Runna RunBuddy Tripsy Tripsy LLC iPad App of the Year Moises Moises Systems, Inc Finalists Bluey: Let's Play!
Budge Studios Procreate Dreams Savage Interactive Pty Ltd Mac App of the Year Adobe Lightroom Adobe Inc.
Finalists OmniFocus 4 The Omni Group Shapr3D Shapr3D Zrt Apple Vision Pro App of the Year What If...?
An Immersive Story Disney Finalists JigSpace JigSpace Inc.
NBA NBA MEDIA VENTURES, LLC Apple Watch App of the Year Lumy Raja V Finalists LookUp Squircle Apps LLP Watch to 5K Spaceman Digital Ltd Apple TV App of the Year F1 TV Formula One Digital Media Limited Finalists Dropout Connected Ventures, LLC.
Zoom Zoom Video Communications, Inc.

---

url: https://developer.apple.com/app-store/app-store-awards/
title: Meet the winners and finalists
description: 

Games of the Year
Spanning blockbusters and indies alike, this year’s Game of the Year winners and finalists did more than entertain.
Through creative twists, touching storytelling, and thrilling competition, they immersed us in worlds that showed off the breadth of the genre’s artistry.
iPhone Game of the Year AFK Journey Farlight Games Finalists The WereCleaner Charlie Heatherly Zenless Zone Zero COGNOSPHERE PTE.
LTD.
iPad Game of the Year Squad Busters Supercell Finalists Assassin's Creed Mirage Ubisoft Disney Speedstorm Gameloft Mac Game of the Year Thank Goodness You’re Here!
Panic, Inc.
Finalists Frostpunk 2 11 bit studios s.a.
Stray Annapurna Interactive Apple Vision Pro Game of the Year Thrasher Puddle, LLC Finalists Loóna Loona Inc Vacation Simulator Owlchemy Labs Cultural Impact
By telling challenging stories with courage and care, helping us bring out our best selves, and celebrating art in all its forms, these winners and finalists made a lasting difference.
Winners DailyArt Zuzanna Stanska Do You Really Want to Know 2 Gamtropy Co., Ltd.
EF Hello Signum International AG NYT Games The New York Times Company Oko AYES BV The Wreck The Pixel Hunt Finalists Arco Panic, Inc.
BetterSleep Ipnos Software Inc.

---

url: https://developer.apple.com/app-store/app-store-awards/
title: Meet the winners and finalists
description: 

Brawl Stars Supercell Partiful Partiful Pinterest Pinterest The Bear Mucks Games Apple Arcade Game of the Year
Apple Arcade delivered endless entertainment this year.
Re-write the rules of poker, build charming towns, and speed through twisted dreamscapes.
Balatro+ Playstack Ltd Finalists Outlanders 2 Pomelo Games Sonic Dream Team SEGA

---

url: https://developer.apple.com/forums/
title: Overview
description: Connect with fellow developers and Apple experts as you give and receive help on a wide variety of development topics, from implementing new technologies to established best practices

Overview At A Glance Topics Selecting any option will automatically load the page Topics Latest Topic: Accessibility & Inclusion RSS for tag Explore best practices for creating inclusive apps for users of Apple accessibility features and users from diverse backgrounds.
SubTopic: General MAS restrictions on file read-write for desktop electron apps 11h Apple is lying about its commitment to accessibility on macOS 3d AVPlayer Visual Accessibility Issues 3d Topic: App & System Services RSS for tag Delve into the world of built-in app and system services available to developers.
Discuss leveraging these services to enhance your app's functionality and user experience.
SubTopic: Wallet Widgets & Live Activities Tap to Pay on iPhone Automation & Scripting Core OS Drivers General Hardware Networking Processes & Concurrency iCloud & Data Health & Fitness Maps & Location Notifications StoreKit Apple Pay Is it possible to use the Matter.xcframework without using the MatterSupport extension for onboarding a device to our ecosystem?
4h CKSyncEngine save existing CKRecord 4h Is it possible to use an additional local ModelContainer in a document based SwiftData app?

---

url: https://developer.apple.com/forums/
title: Overview
description: Connect with fellow developers and Apple experts as you give and receive help on a wide variety of development topics, from implementing new technologies to established best practices

8h Topic: App Store Distribution & Marketing RSS for tag Navigate the App Store landscape.
Share strategies for app submission, distribution, marketing, and user acquisition.
Discuss best practices for getting your app discovered and downloaded.
SubTopic: General TestFlight App Store Connect App Store Connect API App Review Unable to Validate update to existing App for iOS 10m App Stuck in "Waiting for Review" – No Update for Several Days 6h Application Review Process 6h Topic: Business & Education RSS for tag Explore the intersection of business and app development.
Discuss topics like device management, education, and resources for aspiring app developers.
SubTopic: General Device Management Issuing Estimates, Invoices, and Receipts for Apps (Corporate Use) 1d Understanding allowedExternalIntelligenceWorkspaceIDs in MDM Payload – What ID is expected?
2d App Profile Expires Earlier than Provisional Profile 1d Topic: Code Signing RSS for tag Demystify code signing and its importance in app development.
Get help troubleshooting code signing issues and ensure your app is properly signed for distribution.

---

url: https://developer.apple.com/forums/
title: Overview
description: Connect with fellow developers and Apple experts as you give and receive help on a wide variety of development topics, from implementing new technologies to established best practices

SubTopic: General Certificates, Identifiers & Profiles Entitlements Notarization identitylookup needed for ILMessageFilterQueryHandling?
5h Gatekeeper "bundle_id: NOT_A_BUNDLE" rejection 6h MDM profile for a binary with multiple signatures 11h Topic: Community RSS for tag This is a dedicated space for developers to connect, share ideas, collaborate, and ask questions.
Introduce yourself, network with other developers, and join us in fostering a supportive community.
SubTopic: Apple Developers Apple Arcade Swift Student Challenge TestFlight Replying to apple support tickets 11h ios 18.4.1 internet issues 1d Apple Developer Enrollment Delay — No Updates for 24 Days 1d Topic: Developer Tools & Services RSS for tag Dive into the vast array of tools, services, and support available to developers.
SubTopic: General Instruments Swift Playground Xcode Xcode Cloud Developer Forums Apple Developer Program Subscribed Calendar Issue 4h EXC_BAD_ACCESS if Address or Thread Sanitizer is enabled 6h bitcode_strip error in xcode 16.3 5h Topic: Design RSS for tag Explore the art and science of app design.
Discuss user interface (UI) design principles, user experience (UX) best practices, and share design resources and inspiration.

---

url: https://developer.apple.com/forums/
title: Overview
description: Connect with fellow developers and Apple experts as you give and receive help on a wide variety of development topics, from implementing new technologies to established best practices

SubTopic: General Search Function 2d Testing In-App Purchases 1d How to highlight the specific POI in the map on scroll 5d Topic: Graphics & Games RSS for tag Delve into the world of graphics and game development.
Discuss creating stunning visuals, optimizing game mechanics, and share resources for game developers.
SubTopic: TabletopKit General Metal GameKit SceneKit SpriteKit RealityKit How to Enable Game Mode 2h Matchmaking issue on tvOS with GKMatchmakerViewController 11h How do I test a new leaderboard added to a Published app with prior leaderboard?
2h Topic: Machine Learning & AI RSS for tag Explore the power of machine learning and Apple Intelligence within apps.
Discuss integrating features, share best practices, and explore the possibilities for your app here.
SubTopic: Apple Intelligence Core ML Create ML General AppIntentsSampleApp Failed to refresh AppShortcut parameters 1d Why doesn't tensorflow-metal use AMD GPU memory?
10h Looking for a prebuilt TensorFlow Lite C++ library (libtensorflowlite) for macOS M1/M2 2h Topic: Media Technologies RSS for tag Explore the integration of media technologies within your app.
Discuss working with audio, video, camera, and other media functionalities.

---

url: https://developer.apple.com/forums/
title: Overview
description: Connect with fellow developers and Apple experts as you give and receive help on a wide variety of development topics, from implementing new technologies to established best practices

SubTopic: Photos & Camera Audio General Streaming Video AVAssetWriterInputTaggedPixelBufferGroupAdaptor Hanging With Tagged Buffers 1h Apple News Publisher: How To Successfully Apply 6h MusicKit - Skipping Forwards or Backwards does not update 2d Topic: Privacy & Security RSS for tag Prioritize user privacy and data security in your app.
Discuss best practices for data handling, user consent, and security measures to protect user information.
SubTopic: Sign in with Apple General Is it possible to launch a GUI application that is not killable by the logged in user 3h User-Assigned Device Name Entitlement for Multipeer Connectivity 11h Authentication using MSAL library in offline mode 1d Topic: Programming Languages RSS for tag Dive into the world of programming languages used for app development.
SubTopic: Swift General Matchmaking issue on tvOS with GKMatchmakerViewController.Request 1d Apple SDKs should provide libunwind_ext.h on macOS 1w suggestion for the swift programming language 2w Topic: UI Frameworks RSS for tag Explore the various UI frameworks available for building app interfaces.
Discuss the use cases for different frameworks, share best practices, and get help with specific framework-related questions.

---

url: https://developer.apple.com/forums/
title: Overview
description: Connect with fellow developers and Apple experts as you give and receive help on a wide variety of development topics, from implementing new technologies to established best practices

SubTopic: SwiftUI General UIKit AppKit Overriding NSDocument.prepareSavePanel(_:) hides file format popup button 3h Cannot access current path from NavigationPath — need breadcrumb trail like Files app 5h NSOpenPanel fails with NSUserDefaults domain 'nil' under SDL2 with macOS Sequoia .
SDL2 C++ 14h Topic: Safari & Web RSS for tag Explore the integration of web technologies within your app.
Discuss building web-based apps, leveraging Safari functionalities, and integrating with web services.
SubTopic: General The first four tab bars of Safari are hidden 11h WKWebView randomly does not send out cookies from WKWebSiteDataStore to our servers 1d Enable a Developer ID-signed and notarised extension without enabling "allow unsigned extension" 2d Topic: Spatial Computing RSS for tag Discuss spatial computing on Apple platforms and how to design and build an entirely new universe of apps and games for Apple Vision Pro.
SubTopic: Reality Composer Pro General ARKit attenuation map covers over object 1d Transparent Material Turning into Occlusion Material 2d Animation handling on Scene change 3d

---

url: https://developer.apple.com/documentation/swiftui/navigation
title: This page requires JavaScript.
description: Enable people to move between different parts of your app’s view hierarchy within a scene.

Collection SwiftUI Navigation API CollectionNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.OverviewUse navigation containers to provide structure to your app’s user interface, enabling people to easily move among the parts of your app.For example, people can move forward and backward through a stack of views using a NavigationStack, or choose which view to display from a tab bar using a TabView.Configure navigation containers by adding view modifiers like navigationSplitViewStyle(_:) to the container.
Use other modifiers on the views inside the container to affect the container’s behavior when showing that view.

---

url: https://developer.apple.com/documentation/swiftui/navigation
title: This page requires JavaScript.
description: Enable people to move between different parts of your app’s view hierarchy within a scene.

For example, you can use navigationTitle(_:) on a view to provide a toolbar title to display when showing that view.TopicsPresenting views in columnsBringing robust navigation structure to your SwiftUI appUse navigation links, stacks, destinations, and paths to provide a streamlined experience for all platforms, as well as behaviors such as deep linking and state restoration.Migrating to new navigation typesImprove navigation behavior in your app by replacing navigation views with navigation stacks and navigation split views.struct NavigationSplitViewA view that presents views in two or three columns, where selections in leading columns control presentations in subsequent columns.func navigationSplitViewStyle<S>(S) -> some ViewSets the style for navigation split views within this view.func navigationSplitViewColumnWidth(CGFloat) -> some ViewSets a fixed, preferred width for the column containing this view.func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some ViewSets a flexible, preferred width for the column containing this view.struct NavigationSplitViewVisibilityThe visibility of the leading columns in a navigation split view.struct NavigationLinkA view that controls a navigation presentation.Stacking views in one columnstruct NavigationStackA view that displays a root view and enables you to present additional views over the root view.struct NavigationPathA type-erased list of data representing the content of a navigation stack.func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some ViewAssociates a destination view with a presented data type for use within a navigation stack.func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some ViewAssociates a destination view with a binding that can be used to push the view onto a NavigationStack.func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some ViewAssociates a destination view with a bound value for use within a navigation stack or navigation split viewManaging column collapsestruct NavigationSplitViewColumnA view that represents a column in a navigation split view.Setting titles for navigation contentfunc navigationTitle(_:)Configures the view’s title for purposes of navigation, using a string binding.func navigationSubtitle(_:)Configures the view’s subtitle for purposes of navigation.func navigationDocument(_:)Configures the view’s document for purposes of navigation.func navigationDocument(_:preview:)Configures the view’s document for purposes of navigation.Configuring the navigation barfunc navigationBarBackButtonHidden(Bool) -> some ViewHides the navigation bar back button for the view.func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some ViewConfigures the title display mode for this view.struct NavigationBarItemA configuration for a navigation bar that represents a view at the top of a navigation stack.Configuring the sidebarvar sidebarRowSize: SidebarRowSizeThe current size of sidebar rows.enum SidebarRowSizeThe standard sizes of sidebar rows.Presenting views in tabsEnhancing your app’s content with tab navigationKeep your app content front and center while providing quick access to navigation using the tab bar.struct TabViewA view that switches between multiple child views using interactive user interface elements.struct TabThe content for a tab and the tab’s associated tab item in a tab view.struct TabRoleA value that defines the purpose of the tab.struct TabSectionA container that you can use to add hierarchy within a tab view.func tabViewStyle<S>(S) -> some ViewSets the style for the tab view within the current environment.Configuring a tab barfunc tabViewSidebarHeader<Content>(content: () -> Content) -> some ViewAdds a custom header to the sidebar of a tab view.func tabViewSidebarFooter<Content>(content: () -> Content) -> some ViewAdds a custom footer to the sidebar of a tab view.func tabViewSidebarBottomBar<Content>(content: () -> Content) -> some ViewAdds a custom bottom bar to the sidebar of a tab view.struct AdaptableTabBarPlacementA placement for tabs in a tab view using the adaptable sidebar style.var tabBarPlacement: TabBarPlacement?The current placement of the tab bar.struct TabBarPlacementA placement for tabs in a tab view.var isTabBarShowingSections: BoolA Boolean value that determines whether a tab view shows the expanded contents of a tab section.Configuring a tabfunc sectionActions<Content>(content: () -> Content) -> some ViewAdds custom actions to a section.struct TabPlacementA place that a tab can appear.struct TabContentBuilderA result builder that constructs tabs for a tab view that supports programmatic selection.

---

url: https://developer.apple.com/documentation/swiftui/navigation
title: This page requires JavaScript.
description: Enable people to move between different parts of your app’s view hierarchy within a scene.

This builder requires that all tabs in the tab view have the same selection type.protocol TabContentA type that provides content for programmatically selectable tabs in a tab view.struct AnyTabContentType erased tab content.Enabling tab customizationfunc tabViewCustomization(Binding<TabViewCustomization>?) -> some ViewSpecifies the customizations to apply to the sidebar representation of the tab view.struct TabViewCustomizationThe customizations a person makes to an adaptable sidebar tab view.struct TabCustomizationBehaviorThe customization behavior of customizable tab view content.Displaying views in multiple panesstruct HSplitViewA layout container that arranges its children in a horizontal line and allows the user to resize them using dividers placed between them.struct VSplitViewA layout container that arranges its children in a vertical line and allows the user to resize them using dividers placed between them.Deprecated Typesstruct NavigationViewA view for presenting a stack of views that represents a visible path in a navigation hierarchy.Deprecatedfunc tabItem<V>(() -> V) -> some ViewSets the tab bar item associated with this view.DeprecatedSee AlsoApp structureAPI ReferenceApp organizationDefine the entry point and top-level structure of your app.API ReferenceScenesDeclare the user interface groupings that make up the parts of your app.API ReferenceWindowsDisplay user interface content in a window or a collection of windows.API ReferenceImmersive spacesDisplay unbounded content in a person’s surroundings.API ReferenceDocumentsEnable people to open and manage documents.API ReferenceModal presentationsPresent content in a separate view that offers focused interaction.API ReferenceToolbarsProvide immediate access to frequently used commands and controls.API ReferenceSearchEnable people to search for text or other content within your app.API ReferenceApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.

---

url: https://developer.apple.com/macos/
title: Build for macOS Sequoia
description: 

Game development sessions, documentation, and sample code — all in one place Build for macOS Sequoia Apple Intelligence
Apple Intelligence is the personal intelligence system that puts powerful generative models right at the core of your iPhone, iPad, and Mac.
It powers incredible new features to help people communicate, work, and express themselves.
Writing Tools are available system-wide, and help users rewrite, proofread, and summarize text.
The Image Playground API delivers an easy-to-use experience where people can create fun, playful images right in your app.
Genmoji bring fun new ways to communicate by providing the ability to create an emoji for any occasion.
And Siri will be able to access text displayed in your app, and take hundreds of new actions in and across apps using the App Intents you make available.
Learn about Apple Intelligence Get started with Writing Tools Bring expression to your app with Genmoji Watch more of the latest videos Bring your advanced games to Mac
Accelerate your timeline, whether you’re bringing an existing game or one that’s currently in development.
With the Game Porting Toolkit 2, it’s never been easier to bring advanced games to Mac, iPad, and iPhone — and to deliver great experiences for players.

---

url: https://developer.apple.com/macos/
title: Build for macOS Sequoia
description: 

Learn more about the Game Porting Toolkit 2 Port advanced games to Apple platforms Design advanced games for Apple platforms Watch more of the latest videos Metal
Metal powers hardware-accelerated graphics on Apple platforms.
Now you can naturally port apps from other platforms with added support for global bindings and extensions to ray tracing.
Residency sets let you quickly and easily group resources to manage residency.
And it’s even simpler to target Mac, iPad, and iPhone with the same code, thanks to a unified API and shader build process.
Learn about Metal
Watch the latest videos App Intents
New orchestration capabilities provided by Apple Intelligence and significant enhancements to App Intents will enable Siri to take hundreds of new actions in and across apps.
Using the Transferable API, File Representations, Item Providers, Spotlight Index, and more, you can make your entities more meaningful to the platform.
Plus, you can provide powerful functionality in Siri and Spotlight.
You can also explore new APIs for error handling, deferred properties, and associated enums.
Watch the latest videos Machine learning
Core ML
Updates to Core ML will help you optimize and run advanced generative machine learning and AI models on device faster and more efficiently.

---

url: https://developer.apple.com/macos/
title: Build for macOS Sequoia
description: 

Core ML Tools offer more granular and composable weight compression techniques to help you bring your large language models and diffusion models to Apple silicon.
Models can now hold multiple functions and efficiently manage state, enabling more flexible and efficient execution of large language models and adapters.
The Core ML framework also adds a new MLTensor type that provides an efficient, simple, and familiar API for expressing operations on multi-dimensional arrays.
And Core ML performance reports in Xcode have been updated to provide more insight into support and estimated cost of each operation in your model.
Create ML
Object tracking, the first spatial computing template, is designed to help you track real world objects in your visionOS app.
Enhance your customized model training workflow with the new data preview functionality in the Create ML app and new Swift APIs from Create ML Components that help you create time series models directly within your app.
Machine learning APIs
The new Translation framework allows you to translate text across different languages in your app.
The Vision framework API has been redesigned to leverage modern Swift features, and also supports two new features: image aesthetics and holistic body pose.
And the Natural Language framework offers extended language support with multilingual contextual embedding.

---

url: https://developer.apple.com/macos/
title: Build for macOS Sequoia
description: 

Learn about machine learning
Watch the latest videos RealityKit 4
RealityKit 4 aligns its rich feature set across iPhone, iPad, Mac, and Apple Vision Pro.
Reality Composer Pro, a new tool that launched with Apple Vision Pro, enables development of spatial apps on all these platforms.
Shaders built with MaterialX, portals, particles, and many other features can now be used with RealityView on all four platforms.
This includes APIs for adding materials, shader-based hover effects, and virtual lighting, as well as new features — like blend shapes, inverse kinematics, skeletal poses, and animation timelines — that expand character animation capabilities.
RealityKit 4 also provides more direct access to rendering with new APIs for low-level mesh and textures, which work with Metal compute shaders.
And because Xcode view debugging now supports inspecting 3D scene content, it’s easier than ever to inspect and debug your RealityKit content.
Learn about RealityKit
Watch the latest videos Passkeys
Passkeys are a replacement for passwords that are more secure, easier to use, and can’t be phished.
They offer faster sign-in, fewer password resets, and reduced support costs.
Use the new automatic passkey upgrade API to create a passkey when someone signs in to your app and let them know that the passkey was saved — all without interrupting their flow.

---

url: https://developer.apple.com/macos/
title: Build for macOS Sequoia
description: 

Learn about passkeys
Watch the latest video App Store and StoreKit
Find out how to nominate your apps for featuring on the App Store and share exciting moments (like a version launch) with marketing assets generated for you.
Enhancements to StoreKit views give you more flexibility and customization options when building your merchandising experiences.
Improvements to StoreKit testing in Xcode and the Apple Sandbox environment help you test additional purchase scenarios.
Offer codes for macOS apps let you provide discounted or free subscriptions for a period of time.
And win-back offers give you a new way to re-engage previous subscribers.
Learn about what’s new on the App Store
Watch the latest videos Get started
Download Xcode to start building apps for all Apple platforms.
Download Xcode

---

url: https://developer.apple.com/documentation/swiftui/scenes
title: This page requires JavaScript.
description: Declare the user interface groupings that make up the parts of your app.

Collection SwiftUI Scenes API CollectionScenesDeclare the user interface groupings that make up the parts of your app.OverviewA scene represents a part of your app’s user interface that has a life cycle that the system manages.
An App instance presents the scenes it contains, while each Scene acts as the root element of a View hierarchy.The system presents scenes in different ways depending on the type of scene, the platform, and the context.
A scene might fill the entire display, part of the display, a window, a tab in a window, or something else.
In some cases, your app might also be able to display more than one instance of the scene at a time, like when a user simultaneously opens multiple windows based on a single WindowGroup declaration in your app.
For more information about the primary built-in scene types, see Windows and Documents.You configure scenes using modifiers, similar to how you configure views.
For example, you can adjust the appearance of the window that contains a scene — if the scene happens to appear in a window — using the windowStyle(_:) modifier.

---

url: https://developer.apple.com/documentation/swiftui/scenes
title: This page requires JavaScript.
description: Declare the user interface groupings that make up the parts of your app.

Similarly, you can add menu commands that become available when the scene is in the foreground on certain platforms using the commands(content:) modifier.TopicsCreating scenesprotocol SceneA part of an app’s user interface with a life cycle managed by the system.struct SceneBuilderA result builder for composing a collection of scenes into a single composite scene.Monitoring scene life cyclevar scenePhase: ScenePhaseThe current phase of the scene.enum ScenePhaseAn indication of a scene’s operational state.Managing a settings windowstruct SettingsA scene that presents an interface for viewing and modifying an app’s settings.struct SettingsLinkA view that opens the Settings scene defined by an app.struct OpenSettingsActionAn action that presents the settings scene for an app.var openSettings: OpenSettingsActionA Settings presentation action stored in a view’s environment.Creating a menu bar extrastruct MenuBarExtraA scene that renders itself as a persistent control in the system menu bar.func menuBarExtraStyle<S>(S) -> some SceneSets the style for menu bar extra created by this scene.protocol MenuBarExtraStyleA specification for the appearance and behavior of a menu bar extra scene.Creating watch notificationsstruct WKNotificationSceneA scene which appears in response to receiving the specified category of remote or local notifications.See AlsoApp structureAPI ReferenceApp organizationDefine the entry point and top-level structure of your app.API ReferenceWindowsDisplay user interface content in a window or a collection of windows.API ReferenceImmersive spacesDisplay unbounded content in a person’s surroundings.API ReferenceDocumentsEnable people to open and manage documents.API ReferenceNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.API ReferenceModal presentationsPresent content in a separate view that offers focused interaction.API ReferenceToolbarsProvide immediate access to frequently used commands and controls.API ReferenceSearchEnable people to search for text or other content within your app.API ReferenceApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.

---

url: https://developer.apple.com/programs/news-partner/
title: Introducing the News Partner Program
description: 

Introducing the News Partner Program
At Apple, we believe all people should have access to reliable and trusted news and information.
We support a thriving news ecosystem through Apple News, the App Store, and now the News Partner Program.
Apple News and Apple News Format
The goal of Apple News is to provide customers access to trusted news and information from many of the world’s top publishers.
At the heart of Apple News is Apple News Format, which provides the best mobile reading experience for news and scales seamlessly across iPhone, iPad, and Mac.
Apple News Format also supports advertising, and publishers keep 100% of the revenue from ads they sell within Apple News.
The News Partner Program
The News Partner Program is designed for subscription news publications that provide their content to Apple News in Apple News Format.
Publishers that work with Apple News may qualify for a commission rate of 15% on qualifying in-app purchase subscriptions from day one.
In addition, the News Partner Program will help support, fund, and collaborate with leading organizations globally that educate news consumers on media literacy and that further efforts to diversify newsrooms and news coverage.

---

url: https://developer.apple.com/programs/news-partner/
title: Introducing the News Partner Program
description: 

Eligibility and requirements
To be eligible for the News Partner Program: You must maintain a robust Apple News channel in Australia, Canada, the United States, and the United Kingdom, and publish all content to that channel in Apple News Format.
If you’re based outside of these regions and do not publish in Apple News Format, you must share content via an RSS feed.
The primary function of your app must be to deliver original, professionally-authored news content.
Your app must be available on the App Store and allow users to purchase auto-renewable subscriptions through Apple’s in-app purchase system.
The Account Holder of an Apple Developer Program membership must agree to a separate addendum to the Apple Developer Program License Agreement.
The program is available to Apple Developer Program members globally.
Tell us about your app
If you’re an eligible news publisher interested in joining the program, let us know.
Contact us

---

url: https://developer.apple.com/xcode-cloud/
title: Xcode Cloud
description: 

Xcode Cloud
Xcode Cloud is a continuous integration and delivery service built into Xcode and designed expressly for Apple developers.
It accelerates the development and delivery of high-quality apps by bringing together cloud-based tools that help you build apps, run automated tests in parallel, deliver apps to testers, and view and manage user feedback.
Automated workflows
Configure workflows to suit your development process or use the built-in workflow to get started and customize it as your process evolves.
You can build every committed code change and your team will be instantly alerted if a change introduces any issues — potentially saving days of wasted time before bugs are found by your users.
Parallel testing
Configure Xcode Cloud to test one or two device types for a quick check on your project’s health, or test a wide range of device configurations less frequently for edge cases.
Xcode Cloud allocates resources in parallel to quickly complete the testing job while you and your Mac keep coding.
Built into Xcode
Results for your builds and tests — and even feedback on crashes from users — are presented right inside Xcode.
As builds happen in the cloud, Xcode shows live status indicators and lets you filter by the build tasks you want to monitor.
Built into App Store Connect
The App Store Connect web dashboard shows critical information about your builds and testing results.

---

url: https://developer.apple.com/xcode-cloud/
title: Xcode Cloud
description: 

You can also edit your workflows and launch builds directly from the web.
Works with TestFlight
Xcode Cloud and TestFlight work together to install new builds for your team so that everyone can immediately start testing, or to send specific branches of your app with unique in-development features to select external testers as you experiment with new ideas.
You can also create and share tester notes, helping keep all of your users up to date on your latest improvements.
Secured and private
Xcode Cloud is designed to protect your projects and privacy, with all data encrypted at rest and access protected by two-factor authentication.
Source code is only accessed for builds and the ephemeral build environments are destroyed when your build completes.
Track and manage usage
Track the usage and trends of projects, products, and workflows across your team in App Store Connect.
Get started for free with Xcode
To get started, configure a workflow in Xcode and start building your app in Xcode Cloud in just a few minutes.1 The build status is displayed in Xcode and reports show the resultes immediately after the build finishes.
25 compute hours/month Included with Apple Developer Program membership Get started Need more compute hours?
Apple Developer Program membership includes 25 compute hours2 per month.
If you need more compute hours, additional Xcode Cloud monthly subscriptions are available.

---

url: https://developer.apple.com/xcode-cloud/
title: Xcode Cloud
description: 

Upgrade or downgrade your subscription at any time.
100 compute hours/month US$49.99/month 250 compute hours/month US$99.99/month 1,000 compute hours/month US$399.99/month 10,000 compute hours/month US$3,999.99/month

---

url: https://developer.apple.com/ios/
title: Build for iOS 18
description: 

iOS 18 sessions, documentation, and sample code — all in one place Build for iOS 18
Create more customized apps that feel great on iOS and appear in more places across the system with controls, widgets, and Live Activities.
And with Apple Intelligence, you can bring personal intelligence into your apps to deliver new capabilities — all with great performance and built-in privacy.
Want the highlights?
Download the iOS one-sheet Apple Intelligence
Apple Intelligence is the personal intelligence system that puts powerful generative models right at the core of your iPhone, iPad, and Mac.
It powers incredible new features to help people communicate, work, and express themselves.
Writing Tools are available system-wide, and help users rewrite, proofread, and summarize text.
The Image Playground API delivers an easy-to-use experience where people can create fun, playful images right in your app.
Genmoji bring fun new ways to communicate by providing the ability to create an emoji for any occasion.
And Siri will be able to access text displayed in your app, and take hundreds of new actions in and across apps using the App Intents you make available.

---

url: https://developer.apple.com/ios/
title: Build for iOS 18
description: 

Learn about Apple Intelligence Get started with Writing Tools Bring expression to your app with Genmoji Watch more of the latest videos App Intents
New orchestration capabilities provided by Apple Intelligence and significant enhancements to App Intents will enable Siri to take hundreds of new actions in and across apps.
Using the Transferable API, File Representations, Item Providers, Spotlight Index, and more, you can make your entities more meaningful to the platform.
Plus, you can provide powerful functionality in Siri and Spotlight.
You can also explore new APIs for error handling, deferred properties, and associated enums.
Bring your app to Siri What’s new in App Intents Watch more of the latest videos Controls
Now it’s faster and easier for people to complete frequent tasks from your apps with new controls in Control Center and on the Lock Screen.
Controls can toggle a setting, execute an action, or deep link right to a specific experience — and you can create them with just a few lines of code and the new Controls API.
Learn about widgets Extend your app’s controls across the system Machine learning
Core ML
Updates to Core ML will help you optimize and run advanced generative machine learning and AI models on device faster and more efficiently.

---

url: https://developer.apple.com/ios/
title: Build for iOS 18
description: 

Core ML Tools offer more granular and composable weight compression techniques to help you bring your large language models and diffusion models to Apple silicon.
Models can now hold multiple functions and efficiently manage state, enabling more flexible and efficient execution of large language models and adapters.
The Core ML framework also adds a new MLTensor type that provides an efficient, simple, and familiar API for expressing operations on multi-dimensional arrays.
And Core ML performance reports in Xcode have been updated to provide more insight into support and estimated cost of each operation in your model.
Create ML
Object tracking, the first spatial computing template, is designed to help you track real world objects in your visionOS app.
Enhance your customized model training workflow with the new data preview functionality in the Create ML app and new Swift APIs from Create ML Components that help you create time series models directly within your app.
Machine learning APIs
The new Translation framework allows you to translate text across different languages in your app.
The Vision framework API has been redesigned to leverage modern Swift features, and also supports two new features: image aesthetics and holistic body pose.
And the Natural Language framework offers extended language support with multilingual contextual embedding.

---

url: https://developer.apple.com/ios/
title: Build for iOS 18
description: 

Learn about machine learning
Watch the latest videos RealityKit 4
RealityKit 4 aligns its rich feature set across iPhone, iPad, Mac, and Apple Vision Pro.
Reality Composer Pro, a new tool that launched with Apple Vision Pro, enables development of spatial apps on all these platforms.
Portals, particles, shaders built with MaterialX, and many other features can now be used with RealityView on all four platforms.
This includes APIs for adding materials, shader-based hover effects, and virtual lighting, as well as new features — like blend shapes, inverse kinematics, skeletal poses, and animation timelines — that expand character animation capabilities.
RealityKit 4 also provides more direct access to rendering with new APIs for low-level mesh and textures, which work with Metal compute shaders.
And because Xcode view debugging now supports inspecting 3D scene content, it’s easier than ever to inspect and debug your RealityKit content.
Learn about RealityKit
Watch the latest videos Home Screen
App icons and widgets can now appear Light, Dark, or with a Tint.
And no matter how your icon is rendered, you can make sure it always looks great by customizing each version.
Learn about icons Passkeys
Passkeys are a replacement for passwords that are more secure, easier to use, and can’t be phished.
They offer faster sign-in, fewer password resets, and reduced support costs.

---

url: https://developer.apple.com/ios/
title: Build for iOS 18
description: 

Use the new automatic passkey upgrade API to create a passkey when someone signs in to your app and let them know that the passkey was saved — all without interrupting their flow.
Learn about passkeys
Watch the latest video App Store and StoreKit
Find out how to nominate your apps for featuring on the App Store, share exciting moments (like a version launch) with marketing assets generated for you, and deep link to specific content in your app from custom product pages.
Enhancements to StoreKit views give you more flexibility and customization options when building your merchandising experiences.
Improvements to StoreKit Testing in Xcode and the Apple sandbox environment help you test additional purchase scenarios.
And win-back offers give you a new way to re-engage previous subscribers.
Learn about what’s new on the App Store
Watch the latest videos Wallet and Apple Pay
Make your event tickets shine with rich pass designs in Wallet, bring great Apple Pay experiences to even more people with third-party browser support, and use new API updates to integrate Apple Pay into even more purchasing flows.
Learn about Wallet
Learn about Apple Pay
Watch the latest video Get started
Download Xcode to start building apps for all Apple platforms.
Download Xcode

---

url: https://developer.apple.com/health-fitness/
title: HealthKit
description: 

HealthKit
HealthKit is now available on Apple Vision Pro, giving you new ways to create innovative health and fitness experiences that take advantage of the infinite canvas in visionOS.
And new APIs for mental health and wellbeing let you help your users track their emotions and moods, as well as understand their risk for depression or anxiety.
Watch the latest videos View design guidelines Read API documentation Watch videos Works with Apple Health
Use the Works with Apple Health badge to promote your HealthKit-enabled apps.
Download the badge and review the guidelines for using the badge on marketing communications.
Learn more Add to Apple Wallet & Health
The Add to Apple Wallet & Health button provides users a visual cue that they can securely download and store their COVID-19 vaccination information in the Apple Health app and save their vaccination card in Apple Wallet.
This feature is available in iOS 15.1 or later.
Learn more ResearchKit and CareKit
With ResearchKit and CareKit you can develop an app that can drive health science through research at scale.
Discover how your app could take your work further and join a global community that is transforming health through technology.

---

url: https://developer.apple.com/health-fitness/
title: HealthKit
description: 

Learn more Exposure Notification
Apple and Google have jointly created the ExposureNotification framework to help governments and public health authorities reduce the spread of COVID-19 through contact tracing, with user privacy and security core to the design.
Learn more

---

url: https://developer.apple.com/support/
title: Get help with tools and technologies, connect with Apple experts, and more.
description: 

Get help with tools and technologies, connect with Apple experts, and more. Find guides & documentation Xcode Documentation
Support article App Store Connect Help guide
App Review Developer Account Help guide Apple Developer Documentation
Find details and instructions on how to use Apple APIs, software, and services. Documentation and sample code
Support articles
Release notes
Technotes Tell us how we can help Contact us by phone or email
If you have questions about membership, your account, or app management, we can help.
Get started Developer forums
Post questions or share information with other developers and Apple engineers. View forums Code-level support
Get help implementing Apple frameworks and APIs in your app.* Learn more Feedback Assistant
Report bugs and request enhancements to APIs and developer tools. Get started
Learn more System status
If you’re experiencing an issue with a developer tool or service, find out if it’s a known issue or if there’s maintenance in progress. View system status

---

url: https://developer.apple.com/accessories/
title: Working with Accessories
description: 

Working with Accessories
Learn about the requirements for building accessories that work well with Apple devices.
Discover technologies you can use in your apps to interact with accessories built for Apple devices.
Designing Accessories
Well-designed cases, covers, screen overlays, watch bands, camera attachments, and Bluetooth accessories, complement Apple devices without interfering with their operation.
As you create accessories for Apple products, follow the design guidelines and test your prototypes to make sure they meet the necessary requirements.
Accessory Design Guidelinesfor Apple Devices Updated March 17, 2025 Accessory Technologies
Apple platforms provides several services used to interact with Apple devices and a wide range of accessories.
Learn how to build apps and accessories that deliver the best experience using the latest Apple technologies and industry standards.
What’s new
AccessorySetupKit
The new AccessorySetupKit framework allows your apps to seamlessly and securely pair Bluetooth accessories without relying on access to all nearby Bluetooth accessories, keeping other devices private.
Learn more HomeKit and Matter
Allow users to communicate with and control connected accessories in their home using your app.
With the HomeKit or Matter framework, you can provide ways to configure accessories and create actions to control them.

---

url: https://developer.apple.com/accessories/
title: Working with Accessories
description: 

Users can even group actions together and trigger them using Siri.
Learn more HealthKit
Integrate HealthKit into your health and fitness apps for iOS and watchOS to create a more seamless user experience.
When a customer provides permission for your app to read and write health and activity data to their Health app, your app can deliver deeply informed health and fitness solutions.
Learn more AirPlay
AirPlay allows users to wirelessly stream content from their Apple device.
Using Media Player APIs that support AirPlay, you can enrich your apps by allowing users to extend content from their Apple device to Apple TV, HomePod, or AirPlay-compatible speakers.
Learn more AirPrint
It’s easy to deliver photo and document printing in your apps without the need to download or install drivers.
AirPrint is built into most popular printer models and offers a complete set of features, including full-quality output, automatic media selection, and enterprise-class finishing options.
Learn more Find My network
Let users locate your products with the Find My network.
With hundreds of millions of Apple devices around the world, advanced end-to-end encryption, and industry leading security, the Find My network lets users easily locate their belongings in the Find My app with the peace of mind that their privacy is protected.

---

url: https://developer.apple.com/accessories/
title: Working with Accessories
description: 

Learn more Nearby Interactions with UWB
Build apps that interact with accessories simply by being in close proximity to an Apple device that includes Ultra Wideband (UWB) chipset.
Taking advantage of UWB technology lets you create more precise, directionally aware app experiences.
Learn more iBeacon
From welcoming people as they arrive at a sporting event to providing information about a nearby museum exhibit, iBeacon opens a new world of possibilities for location awareness, and countless opportunities for interactivity between devices and iBeacon hardware.
Learn more Bluetooth
Create an engaging and connected user experience by integrating Bluetooth® wireless technology in your apps and hardware accessories.
And with Core Bluetooth framework, it’s easy for your apps to interact with the growing number of Bluetooth Low Energy (BLE) devices.
Learn more Game Controllers
The Game Controller framework supports a wide variety of popular controllers, such as the Xbox Series X|S Wireless Controller or the Sony PS5 DualSense Wireless Controller.
Adding controller support to your game is an easy way to provide a unified experience across iPhone, iPad, Mac, and Apple TV.
Learn more CarPlay
CarPlay is the smarter, safer way for people to use iPhone in the car.
CarPlay apps can provide audio, communication, and route guidance features, and help the user locate nearby services.

---

url: https://developer.apple.com/accessories/
title: Working with Accessories
description: 

Vehicles can integrate support for CarPlay on their primary display and show route information in their instrument cluster.
Learn more Get Started
Find resources and programs needed to develop and distribute apps and manufacture accessories that interact with Apple devices.
Which best describes you?
Select an option
Accessory developer
App developer
Accessory manufacturer
Educator
Hobbyist/maker Which best describes the product you’re creating or work with?
Select an option
AirPlay speaker
Apple Watch band
Bluetooth accessory
Case
Find My Network accessory
Game controller
Headset and headphone
Lightning charge and sync accessory
MagSafe Attach accessory
MagSafe charger
Smart home device
Vehicle infotainment Which Apple technology do you plan to integrate into your app?
Select an option
AirPlay
AirPrint
Bluetooth
CarPlay
External Accessory Framework
Game Controller
HomeKit
HealthKit
iBeacon
Nearby Interaction Which type of case are you producing?
Select an option
Battery case for Apple Device
MagSafe Attach
MagSafe case module
Non-electronic See if the MFi Program is right for you.
This program provides access to the technical specifications, hardware components, certification tools, and badge artwork needed to develop and manufacture electronic accessories that connect to Apple products using licensed technologies.
Learn about the MFi Program
View specs for designing accessories.

---

url: https://developer.apple.com/accessories/
title: Working with Accessories
description: 

If you’re designing accessories, download the Accessory Design Guidelines for specifications on using Bluetooth technologies, creating watch bands, designing cases, and more.
Download the Apple Accessory Design Guidelines See if the MFi Program is right for you.
This program provides access to the technical specifications, hardware components, certification tools, and badge artwork needed to develop and manufacture electronic accessories that connect to Apple products using licensed technologies.
Learn about the MFi Program View specs for designing accessories.
If you’re designing accessories, download the Accessory Design Guidelines for specifications on using Bluetooth technologies, creating watch bands, designing cases, and more.
Download the Apple Accessory Design Guidelines See if the MFi Program is right for you.
This program provides access to the technical specifications, hardware components, certification tools, and badge artwork needed to develop and manufacture electronic accessories that connect to Apple products using licensed technologies.
Learn about the MFi Program
View specs for designing accessories.
If you’re designing accessories, download the Accessory Design Guidelines for specifications on using Bluetooth technologies, creating watch bands, designing cases, and more.

---

url: https://developer.apple.com/accessories/
title: Working with Accessories
description: 

Download the Apple Accessory Design Guidelines View the HomeKit Accessory Protocol Specification (Noncommercial Version) Designing accessories
View the Accessory Design Guidelines to get specifications on using Bluetooth technologies, creating watch bands, designing cases, and more.
Download the Apple Accessory Design Guidelines View the HomeKit Accessory Protocol Specification (Noncommercial Version) Developing apps
Apple provides everything that faculty and students need to dive into designing and coding.
With Mac — as well as Swift, Xcode, and other free developer tools — you’ll have everything you need to build incredible apps.
The Develop in Swift curriculum provides faculty with the flexibility to support a variety of learners.
Learn more
Explore Swift Playground Take advantage of free resources.
Explore Apple technologies to find technical documentation, code samples, and other resources to learn how to utilize and implement unique features that can be leveraged in an application or accessory.
If you’re designing accessories, download the Accessory Design Guidelines for specifications on developing watch bands, cases, and other Apple accessories.
Learn about Apple technologies Download the Apple Accessory Design Guidelines Take advantage of documentation.
To design and manufacture Apple Watch bands, view the Accessory Design Guidelines for Apple Devices.

---

url: https://developer.apple.com/accessories/
title: Working with Accessories
description: 

Follow the guidelines and test your prototypes to make sure they meet requirements.
Download the Apple Accessory Design Guidelines Take advantage of documentation.
Read Bluetooth documentation and download the Accessory Design Guidelines for specifications on using Bluetooth technologies.
Follow the guidelines and test your prototypes to make sure they meet requirements.
Learn about Bluetooth
Download the Apple Accessory Design Guidelines
See if the MFi Program is right for you.
Membership in the MFi Program is required for creating certain types of Bluetooth accessories — for example, accessories leveraging the iPod Accessory Protocol over Bluetooth Classic or accessories using HomeKit over Bluetooth Low Energy.
Learn about the MFi Program Take advantage of documentation.
Read the Bluetooth documentation and download the Accessory Design Guidelines to get specifications on using Bluetooth technologies.
Follow the guidelines and test your prototypes to make sure they meet requirements.
Learn about Bluetooth
Download the Apple Accessory Design Guidelines Designing accessories
Download the Accessory Design Guidelines for specifications on using Bluetooth technologies, creating watch bands, designing cases, and more.

---

url: https://developer.apple.com/accessories/
title: Working with Accessories
description: 

Download the Apple Accessory Design Guidelines View the HomeKit Accessory Protocol Specification (Noncommercial Version) Developing apps
Discover valuable resources you can use to improve your coding skills, as well as ways to connect with Apple experts for technical and design guidance.
Learn more Take advantage of documentation.
With Media Player APIs that support AirPlay 2, you can wirelessly send your content from any Apple device to a speaker enabled with AirPlay or Apple TV.
Learn about AirPlay Take advantage of documentation.
AirPrint is built into most popular printer models and offers a complete set of features, including full-quality output, automatic media selection, and enterprise-class finishing options.
Learn how to easily to deliver photo and document printing in your apps without the need to download or install drivers.
Learn about AirPrint Take advantage of documentation.
Apps that use the CarPlay framework can provide audio, communication, and route guidance features, and help people locate nearby services.
Vehicles can integrate support for CarPlay on their primary display and show route information in their instrument cluster.
Learn about CarPlay Take advantage of documentation.
The Game Controller framework supports a wide variety of popular controllers, such as the Xbox Series X|S Wireless Controller or the Sony PS5 DualSense Wireless Controller.

---

url: https://developer.apple.com/accessories/
title: Working with Accessories
description: 

Adding controller support to your game is an easy way to provide a unified experience across iPhone, iPad, Mac, and Apple TV.
Learn about Game Controller Take advantage of documentation.
The HomeKit framework is used to build apps that coordinate and control home automation accessories from multiple vendors to present a seamless, user-focused interface.
Learn about HomeKit Take advantage of documentation.
The HealthKit framework provides a central repository for health and fitness data on iPhone and Apple Watch.
With the user’s permission, apps communicate with the HealthKit store to access and share this data.
Learn about HealthKit Take advantage of documentation.
iBeacon technologies enable location awareness possibilities for apps.
Leveraging Bluetooth Low Energy, a device with iBeacon technology can be used to establish a region around an object.
This allows a device to determine when it has entered or left the region, along with an estimation of proximity to a beacon.
Learn about iBeacon Take advantage of documentation.
The External Accessory framework enables apps to communicate with an MFi accessory that connects to an Apple device through an Apple Lightning connector or Bluetooth Classic.
Make sure to first consult with the accessory developer or manufacturer to determine if they plan to authorize specific third-party apps to communicate with their MFi accessories.

---

url: https://developer.apple.com/accessories/
title: Working with Accessories
description: 

Learn about External Accessory Take advantage of documentation.
The Nearby Interaction framework is used to build apps that interact with accessories that are within close proximity to an Apple device that includes the U1 chip.
Learn about Nearby Interaction

---

url: https://developer.apple.com/learn/
title: Build apps. Build your future.
description: 

Build apps.
Build your future.
With Swift, anyone can code like the pros.
Whether you’re working on a project for school, earning an industry-recognized credential, or just looking to build your skills, Swift makes it easy to create great apps for all Apple platforms — no coding experience necessary.
Jia Chen is an Information Technology student, Apple Developer Academy mentor, and two-time Swift Student Challenge winner who uses Mac and Apple developer tools to power his creative ideas.
Get updates about student developer events and programming.
Notify me Develop in Swift Tutorials
Develop in Swift Tutorials are a great first step toward a career in app development.
You'll learn how to build amazing apps for Apple platforms with easy-to-follow instructions using Xcode, Apple’s integrated development environment, and Swift, the powerful programming language that’s easy to learn.
Foundations
Start your app development journey by getting to know Xcode, Swift, and SwiftUI.
Get started Data modeling
Practice building relational data models with SwiftData.
Get started Spatial computing
Build app experiences for spatial computing.
Get started If you’re an educator and would like to bring app development with Swift into your classroom, check out the Develop in Swift Tutorials Educator Guide.
Do more together.
Start a Swift Coding Club.

---

url: https://developer.apple.com/learn/
title: Build apps. Build your future.
description: 

Whether you’re just starting out or taking your learning further, Swift Coding Clubs are a great way to expand your app development skills as you design, prototype, build meaningful apps, and get ready for the Swift Student Challenge.
Learn more Explore the tools Swift Playground
If you’re new to app development, try Swift Playground, which includes everything you need to go from your first line of code to building your first app.
Download Swift Playground for iPad
Download Swift Playground for Mac Xcode
If you’re already familiar with app development, try Xcode, Apple’s powerful, integrated development environment, used by professionals around the world to develop, test, and distribute their apps.
Download from the Mac App Store
Learn more about Xcode 16 Get recognized Swift Student Challenge
Showcase your creativity and build real-world skills to prepare for your career and beyond.
Learn more App Development with Swift certification
Accelerate your future career with App Development with Swift certification.
Learn more Get to know Apple platforms iOS iPadOS macOS tvOS watchOS visionOS Games Discover more Apple Developer Academies
Sharpen your development skills with a full, free curriculum for future professional developers at the Apple Developer Academies.
Learn more WWDC24 highlights
Browse the biggest moments from an incredible week of sessions.

---

url: https://developer.apple.com/learn/
title: Build apps. Build your future.
description: 

Learn more Meet with Apple
Join us around the world for a variety of sessions, appointments, labs, and more — tailored for you.
Learn more Apple Developer Program
Membership provides the tools, resources, and support you need to develop and distribute apps and games.
Learn more

---

url: https://developer.apple.com/documentation/swiftui/windows
title: This page requires JavaScript.
description: Display user interface content in a window or a collection of windows.

Collection SwiftUI Windows API CollectionWindowsDisplay user interface content in a window or a collection of windows.OverviewThe most common way to present a view hierarchy in your app’s interface is with a WindowGroup, which produces a platform-specific behavior and appearance.On platforms that support it, people can open multiple windows from the group simultaneously.
Each window relies on the same root view definition, but retains its own view state.
On some platforms, you can also supplement your app’s user interface with a single-instance window using the Window scene type.Configure windows using scene modifiers that you add to the window declaration, like windowStyle(_:) or defaultPosition(_:).

---

url: https://developer.apple.com/documentation/swiftui/windows
title: This page requires JavaScript.
description: Display user interface content in a window or a collection of windows.

You can also indicate how to configure new windows that you present from a view hierarchy by adding the presentedWindowStyle(_:) view modifier to a view in the hierarchy.For design guidance, see Windows in the Human Interface Guidelines.TopicsEssentialsCustomizing window styles and state-restoration behavior in macOSConfigure how your app’s windows look and function in macOS to provide an engaging and more coherent experience.Bringing multiple windows to your SwiftUI appCompose rich views by reacting to state changes and customize your app’s scene presentation and behavior on iPadOS and macOS.Creating windowsstruct WindowGroupA scene that presents a group of identically structured windows.struct WindowA scene that presents its content in a single, unique window.struct UtilityWindowA specialized window scene that provides secondary utility to the content of the main scenes of an application.protocol WindowStyleA specification for the appearance and interaction of a window.func windowStyle<S>(S) -> some SceneSets the style for windows created by this scene.Styling the associated toolbarfunc windowToolbarStyle<S>(S) -> some SceneSets the style for the toolbar defined within this scene.func windowToolbarLabelStyle(Binding<ToolbarLabelStyle>) -> some SceneSets the label style of items in a toolbar and enables user customization.func windowToolbarLabelStyle(fixed: ToolbarLabelStyle) -> some SceneSets the label style of items in a toolbar.protocol WindowToolbarStyleA specification for the appearance and behavior of a window’s toolbar.Opening windowsPresenting windows and spacesOpen and close the scenes that make up your app’s interface.var supportsMultipleWindows: BoolA Boolean value that indicates whether the current platform supports opening multiple windows.var openWindow: OpenWindowActionA window presentation action stored in a view’s environment.struct OpenWindowActionAn action that presents a window.struct PushWindowActionAn action that opens the requested window in place of the window the action is called from.Closing windowsvar dismissWindow: DismissWindowActionA window dismissal action stored in a view’s environment.struct DismissWindowActionAn action that dismisses a window associated to a particular scene.var dismiss: DismissActionAn action that dismisses the current presentation.struct DismissActionAn action that dismisses a presentation.struct DismissBehaviorProgrammatic window dismissal behaviors.Sizing a windowPositioning and sizing windowsInfluence the initial geometry of windows that your app presents.func defaultSize(_:)Sets a default size for a window.func defaultSize(width: CGFloat, height: CGFloat) -> some SceneSets a default width and height for a window.func defaultSize(width: CGFloat, height: CGFloat, depth: CGFloat) -> some SceneSets a default size for a volumetric window.func defaultSize(Size3D, in: UnitLength) -> some SceneSets a default size for a volumetric window.func defaultSize(width: CGFloat, height: CGFloat, depth: CGFloat, in: UnitLength) -> some SceneSets a default size for a volumetric window.func windowResizability(WindowResizability) -> some SceneSets the kind of resizability to use for a window.struct WindowResizabilityThe resizability of a window.func windowIdealSize(WindowIdealSize) -> some SceneSpecifies how windows derived form this scene should determine their size when zooming.struct WindowIdealSizeA type which defines the size a window should use when zooming.Positioning a windowfunc defaultPosition(UnitPoint) -> some SceneSets a default position for a window.struct WindowLevelThe level of a window.func windowLevel(WindowLevel) -> some SceneSets the window level of this scene.struct WindowLayoutRootA proxy which represents the root contents of a window.struct WindowPlacementA type which represents a preferred size and position for a window.func defaultWindowPlacement((WindowLayoutRoot, WindowPlacementContext) -> WindowPlacement) -> some SceneDefines a function used for determining the default placement of windows.func windowIdealPlacement((WindowLayoutRoot, WindowPlacementContext) -> WindowPlacement) -> some SceneProvides a function which determines a placement to use when windows of a scene zoom.struct WindowPlacementContextA type which represents contextual information used for sizing and positioning windows.struct WindowProxyThe proxy for an open window in the app.struct DisplayProxyA type which provides information about display hardware.Configuring window visibilitystruct WindowVisibilityToggleA specialized button for toggling the visibility of a window.func defaultLaunchBehavior(SceneLaunchBehavior) -> some SceneSets the default launch behavior for this scene.func restorationBehavior(SceneRestorationBehavior) -> some SceneSets the restoration behavior for this scene.struct SceneLaunchBehaviorThe launch behavior for a scene.struct SceneRestorationBehaviorThe restoration behavior for a scene.func persistentSystemOverlays(Visibility) -> some SceneSets the preferred visibility of the non-transient system views overlaying the app.func windowToolbarFullScreenVisibility(WindowToolbarFullScreenVisibility) -> some ViewConfigures the visibility of the window toolbar when the window enters full screen mode.struct WindowToolbarFullScreenVisibilityThe visibility of the window toolbar with respect to full screen mode.Managing window behaviorstruct WindowManagerRoleOptions for defining how a scene’s windows behave when used within a managed window context, such as full screen mode and Stage Manager.func windowManagerRole(WindowManagerRole) -> some SceneConfigures the role for windows derived from self when participating in a managed window context, such as full screen or Stage Manager.struct WindowInteractionBehaviorOptions for enabling and disabling window interaction behaviors.func windowDismissBehavior(WindowInteractionBehavior) -> some ViewConfigures the dismiss functionality for the window enclosing self.func windowFullScreenBehavior(WindowInteractionBehavior) -> some ViewConfigures the full screen functionality for the window enclosing self.func windowMinimizeBehavior(WindowInteractionBehavior) -> some ViewConfigures the minimize functionality for the window enclosing self.func windowResizeBehavior(WindowInteractionBehavior) -> some ViewConfigures the resize functionality for the window enclosing self.func windowBackgroundDragBehavior(WindowInteractionBehavior) -> some SceneConfigures the behavior of dragging a window by its background.Interacting with volumesfunc onVolumeViewpointChange(updateStrategy: VolumeViewpointUpdateStrategy, initial: Bool, (Viewpoint3D, Viewpoint3D) -> Void) -> some ViewAdds an action to perform when the viewpoint of the volume changes.func supportedVolumeViewpoints(SquareAzimuth.Set) -> some ViewSpecifies which viewpoints are supported for the window bar and ornaments in a volume.struct VolumeViewpointUpdateStrategyA type describing when the action provided to onVolumeViewpointChange(updateStrategy:initial:_:) should be called.struct Viewpoint3DA type describing what direction something is being viewed from.enum SquareAzimuthA type describing what direction something is being viewed from along the horizontal plane and snapped to 4 directions.struct WorldAlignmentBehaviorA type representing the world alignment behavior for a scene.func volumeWorldAlignment(WorldAlignmentBehavior) -> some SceneSpecifies how a volume should be aligned when moved in the world.struct WorldScalingBehaviorSpecifies the scaling behavior a window should have within the world.func defaultWorldScaling(WorldScalingBehavior) -> some SceneSpecify the world scaling behavior for the window.struct WorldScalingCompensationIndicates whether returned metrics will take dynamic scaling into account.var worldTrackingLimitations: Set<WorldTrackingLimitation>The current limitations of the device tracking the user’s surroundings.struct WorldTrackingLimitationA structure to represent limitations of tracking the user’s surroundings.Deprecated Typesenum ControlActiveStateThe active appearance expected of controls in a window.DeprecatedSee AlsoApp structureAPI ReferenceApp organizationDefine the entry point and top-level structure of your app.API ReferenceScenesDeclare the user interface groupings that make up the parts of your app.API ReferenceImmersive spacesDisplay unbounded content in a person’s surroundings.API ReferenceDocumentsEnable people to open and manage documents.API ReferenceNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.API ReferenceModal presentationsPresent content in a separate view that offers focused interaction.API ReferenceToolbarsProvide immediate access to frequently used commands and controls.API ReferenceSearchEnable people to search for text or other content within your app.API ReferenceApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.

---

url: https://developer.apple.com/academies/
title: Apple Developer Academies - Apple Developer
description: 

Apple Developer Academies
Sharpen your development skills with a full, free curriculum for future professional developers at the Apple Developer Academies. Students complete the app development cycle several times in order to learn to code and design great apps, as well as practice their collaboration and presentation skills, over a period of 30 days to 2 years depending on the program. They identify problems in their communities and solve them with apps that truly enrich people’s lives.
Read more about the academies Brazil*
Brasília
Campinas
Curitiba
Fortaleza
Manaus
Porto Alegre
Recife
Rio de Janeiro
São Paulo (Mackenzie)
São Paulo (Senac) Indonesia
Batam
Jakarta
Surabaya
Bali (Coming in 2025) Italy
Naples Saudi Arabia
Riyadh South Korea
Pohang United States
Detroit *University or technical school enrollment required.

---

url: https://developer.apple.com/documentation/swiftui/persistent-storage
title: This page requires JavaScript.
description: Store data for use across sessions of your app.

Collection SwiftUI Persistent storage API CollectionPersistent storageStore data for use across sessions of your app.OverviewThe operating system provides ways to store data when your app closes, so that when people open your app again later, they can continue working without interruption.
The mechanism that you use depends on factors like what and how much you need to store, whether you need serialized or random access to the data, and so on.You use the same kinds of storage in a SwiftUI app that you use in any other app.
For example, you can access files on disk using the FileManager interface.
However, SwiftUI also provides conveniences that make it easier to use certain kinds of persistent storage in a declarative environment.

---

url: https://developer.apple.com/documentation/swiftui/persistent-storage
title: This page requires JavaScript.
description: Store data for use across sessions of your app.

For example, you can use FetchRequest and FetchedResults to interact with a Core Data model.TopicsSaving state across app launchesRestoring Your App’s State with SwiftUIProvide app continuity for users by preserving their current activities.func defaultAppStorage(UserDefaults) -> some ViewThe default store used by AppStorage contained within the view.struct AppStorageA property wrapper type that reflects a value from UserDefaults and invalidates a view on a change in value in that user default.struct SceneStorageA property wrapper type that reads and writes to persisted, per-scene storage.Accessing Core DataLoading and Displaying a Large Data FeedConsume data in the background, and lower memory use by batching imports and preventing duplicate records.var managedObjectContext: NSManagedObjectContextstruct FetchRequestA property wrapper type that retrieves entities from a Core Data persistent store.struct FetchedResultsA collection of results retrieved from a Core Data store.struct SectionedFetchRequestA property wrapper type that retrieves entities, grouped into sections, from a Core Data persistent store.struct SectionedFetchResultsA collection of results retrieved from a Core Data persistent store, grouped into sections.See AlsoData and storageAPI ReferenceModel dataManage the data that your app uses to drive its interface.API ReferenceEnvironment valuesShare data throughout a view hierarchy using the environment.API ReferencePreferencesIndicate configuration preferences from views to their container views.

---

url: https://developer.apple.com/augmented-reality/
title: Dive into the world of augmented reality.
description: 

Dive into the world of augmented reality.
Build unparalleled augmented reality experiences for hundreds of millions of users on iOS and iPadOS, the biggest AR platforms in the world.
With powerful frameworks like ARKit and RealityKit, and creative tools like Reality Composer and Reality Converter, it’s never been easier to bring your ideas to life in AR.
RealityKit
RealityKit gives you more control and customization over the AR experiences you create.
With APIs like Custom Rendering, Metal Shaders, and Post Processing, you have more control over the rendering pipeline and more flexibility to create entirely new worlds in AR.
And with the Object Capture API, you can create unique 3D objects that are optimized for AR in minutes using state-of-the-art photogrammetry algorithms.
Learn more about RealityKit 4 beta AR creation tools
Reality Composer is a powerful tool that makes it easy for you to create interactive augmented reality experiences with no prior 3D experience.
Reality Converter quickly converts your existing 3D models to USDZ so it works seamlessly in our tools and on all AR-enabled iPhone and iPad devices.
Learn more AR Quick Look
Place 3D objects in the real world using AR Quick Look, powered by ARKit.

---

url: https://developer.apple.com/augmented-reality/
title: Dive into the world of augmented reality.
description: 

AR Quick Look also supports models and scenes created in Reality Composer, so you can easily create interactive experiences to be shared and viewed on iPhone and iPad.
View the Quick Look Gallery AR on the App Store
Discover the unique apps and games that other developers have created with ARKit.
If you’re creating an amazing experience with ARKit and would like to share it with us, let us know.
View on the App Store Resources
Find the tools and documentation you need to create AR experiences.
View resources

---

url: https://developer.apple.com/programs/security-research-device/
title: Apple Security Research Device Program
description: Get an iPhone dedicated to security research through the Apple Security Research Device program. Learn how to apply.

Apple Security Research Device ProgramiPhone is the world's most secure consumer mobile device, which can make it challenging for even skilled security researchers to get started.
We created the Apple Security Research Device Program to help new and experienced researchers accelerate their work with iOS.This year’s application period ended October 31, 2024.How it works.The Security Research Device (SRD) is a specially fused iPhone that allows you to perform iOS security research without having to bypass its security features.
You also benefit from access to software previews, security beta projects, the SRD research community, and special tooling to augment research and vulnerability discovery.
Shell access is available, and you can run any tools, choose your own entitlements, and even customize the kernel.All iOS and iPhone components are eligible for SRD Program research, except Apple Pay and third-party apps.
Using the SRD allows you to confidently report all your findings to Apple without the risk of losing access to the inner layers of iOS security.

---

url: https://developer.apple.com/programs/security-research-device/
title: Apple Security Research Device Program
description: Get an iPhone dedicated to security research through the Apple Security Research Device program. Learn how to apply.

Plus, any vulnerabilities that you discover with the SRD are automatically considered for Apple Security Bounty — including bonus awards for preview and beta software programs.Guidelines.The SRD is intended for use in a controlled setting for security research only.
If your application is approved, we will provide you an SRD as a 12-month renewable loan.
During this time, the device remains the property of Apple.The SRD isn't meant for personal use or daily carry, and must remain on the premises of program participants at all times.
Access to and use of the SRD must be limited to people authorized by Apple.If you use the SRD to find, test, validate, verify, or confirm a vulnerability, you must promptly report it to us and, if the bug is in third-party code, to the appropriate third party.Our ultimate goal is to protect users, so if you find a vulnerability without using the SRD for any aspect of your work, we'd still like to receive your report.

---

url: https://developer.apple.com/programs/security-research-device/
title: Apple Security Research Device Program
description: Get an iPhone dedicated to security research through the Apple Security Research Device program. Learn how to apply.

We review all research that's submitted to us and consider all eligible reports for rewards through Apple Security Bounty.Eligibility.Participation in the Security Research Device Program is subject to review of your application.To be eligible for the Security Research Device program, you must:Have a proven track record of success in finding security issues on Apple platforms, or other modern operating systems and platforms.Be based in an eligible country or region.*Be the legal age of majority in the jurisdiction in which you reside (18 years of age in many countries).Not be employed by Apple currently or in the last 12 months.How to apply for a Security Research Device.A limited number of Apple Security Research Devices are available each year.Applications are now closed.

---

url: https://developer.apple.com/documentation/swiftui/toolbars
title: This page requires JavaScript.
description: Provide immediate access to frequently used commands and controls.

Collection SwiftUI Toolbars API CollectionToolbarsProvide immediate access to frequently used commands and controls.OverviewThe system might present toolbars above or below your app’s content, depending on the platform and the context.Add items to a toolbar by applying the toolbar(content:) view modifier to a view in your app.
You can also configure the toolbar using view modifiers.

---

url: https://developer.apple.com/documentation/swiftui/toolbars
title: This page requires JavaScript.
description: Provide immediate access to frequently used commands and controls.

For example, you can set the visibility of a toolbar with the toolbar(_:for:) modifier.For design guidance, see Toolbars in the Human Interface Guidelines.TopicsPopulating a toolbarfunc toolbar(content:)Populates the toolbar or navigation bar with the specified items.struct ToolbarItemA model that represents an item which can be placed in the toolbar or navigation bar.struct ToolbarItemGroupA model that represents a group of ToolbarItems which can be placed in the toolbar or navigation bar.struct ToolbarItemPlacementA structure that defines the placement of a toolbar item.protocol ToolbarContentConforming types represent items that can be placed in various locations in a toolbar.struct ToolbarContentBuilderConstructs a toolbar item set from multi-expression closures.Populating a customizable toolbarfunc toolbar<Content>(id: String, content: () -> Content) -> some ViewPopulates the toolbar or navigation bar with the specified items, allowing for user customization.protocol CustomizableToolbarContentConforming types represent items that can be placed in various locations in a customizable toolbar.struct ToolbarCustomizationBehaviorThe customization behavior of customizable toolbar content.struct ToolbarCustomizationOptionsOptions that influence the default customization behavior of customizable toolbar content.Removing default itemsfunc toolbar(removing: ToolbarDefaultItemKind?) -> some ViewRemove a toolbar item present by defaultstruct ToolbarDefaultItemKindA kind of toolbar item a View adds by default.Setting toolbar visibilityfunc toolbar(Visibility, for: ToolbarPlacement...) -> some ViewSpecifies the visibility of a bar managed by SwiftUI.func toolbarVisibility(Visibility, for: ToolbarPlacement...) -> some ViewSpecifies the visibility of a bar managed by SwiftUI.func toolbarBackgroundVisibility(Visibility, for: ToolbarPlacement...) -> some ViewSpecifies the preferred visibility of backgrounds on a bar managed by SwiftUI.struct ToolbarPlacementThe placement of a toolbar.Specifying the role of toolbar contentfunc toolbarRole(ToolbarRole) -> some ViewConfigures the semantic role for the content populating the toolbar.struct ToolbarRoleThe purpose of content that populates the toolbar.Styling a toolbarfunc toolbarBackground(_:for:)Specifies the preferred shape style of the background of a bar managed by SwiftUI.func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some ViewSpecifies the preferred color scheme of a bar managed by SwiftUI.func toolbarForegroundStyle<S>(S, for: ToolbarPlacement...) -> some ViewSpecifies the preferred foreground style of bars managed by SwiftUI.func windowToolbarStyle<S>(S) -> some SceneSets the style for the toolbar defined within this scene.protocol WindowToolbarStyleA specification for the appearance and behavior of a window’s toolbar.var toolbarLabelStyle: ToolbarLabelStyle?The label style to apply to controls within a toolbar.struct ToolbarLabelStyleThe label style of a toolbar.Configuring the toolbar title display modefunc toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some ViewConfigures the toolbar title display mode for this view.struct ToolbarTitleDisplayModeA type that defines the behavior of title of a toolbar.Setting the toolbar title menufunc toolbarTitleMenu<C>(content: () -> C) -> some ViewConfigure the title menu of a toolbar.struct ToolbarTitleMenuThe title menu of a toolbar.Creating an ornamentfunc ornament<Content>(visibility: Visibility, attachmentAnchor: OrnamentAttachmentAnchor, contentAlignment: Alignment, ornament: () -> Content) -> some ViewPresents an ornament.struct OrnamentAttachmentAnchorAn attachment anchor for an ornament.See AlsoApp structureAPI ReferenceApp organizationDefine the entry point and top-level structure of your app.API ReferenceScenesDeclare the user interface groupings that make up the parts of your app.API ReferenceWindowsDisplay user interface content in a window or a collection of windows.API ReferenceImmersive spacesDisplay unbounded content in a person’s surroundings.API ReferenceDocumentsEnable people to open and manage documents.API ReferenceNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.API ReferenceModal presentationsPresent content in a separate view that offers focused interaction.API ReferenceSearchEnable people to search for text or other content within your app.API ReferenceApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.

---

url: https://developer.apple.com/documentation/swiftui/app-organization
title: This page requires JavaScript.
description: Define the entry point and top-level structure of your app.

Collection SwiftUI App organization API CollectionApp organizationDefine the entry point and top-level structure of your app.OverviewDescribe your app’s structure declaratively, much like you declare a view’s appearance.
Create a type that conforms to the App protocol and use it to enumerate the Scenes that represent aspects of your app’s user interface.SwiftUI enables you to write code that works across all of Apple’s platforms.
However, it also enables you to tailor your app to the specific capabilities of each platform.

---

url: https://developer.apple.com/documentation/swiftui/app-organization
title: This page requires JavaScript.
description: Define the entry point and top-level structure of your app.

For example, if you need to respond to the callbacks that the system traditionally makes on a UIKit, AppKit, or WatchKit app’s delegate, define a delegate object and instantiate it in your app structure using an appropriate delegate adaptor property wrapper, like UIApplicationDelegateAdaptor.For platform-specific design guidance, see Getting started in the Human Interface Guidelines.TopicsCreating an appDestination VideoLeverage SwiftUI to build an immersive media experience in a multiplatform app.Hello WorldUse windows, volumes, and immersive spaces to teach people about the Earth.Backyard Birds: Building an app with SwiftData and widgetsCreate an app with persistent data, interactive widgets, and an all new in-app purchase experience.Food Truck: Building a SwiftUI multiplatform appCreate a single codebase and app target for Mac, iPad, and iPhone.Fruta: Building a Feature-Rich App with SwiftUICreate a shared codebase to build a multiplatform app that offers widgets and an App Clip.Migrating to the SwiftUI life cycleUse a scene-based life cycle in SwiftUI while keeping your existing codebase.protocol AppA type that represents the structure and behavior of an app.Targeting iOS and iPadOSUILaunchScreenThe user interface to show while an app launches.UILaunchScreensThe user interfaces to show while an app launches in response to different URL schemes.struct UIApplicationDelegateAdaptorA property wrapper type that you use to create a UIKit app delegate.Targeting macOSstruct NSApplicationDelegateAdaptorA property wrapper type that you use to create an AppKit app delegate.Targeting watchOSstruct WKApplicationDelegateAdaptorA property wrapper that is used in App to provide a delegate from WatchKit.struct WKExtensionDelegateAdaptorA property wrapper type that you use to create a WatchKit extension delegate.Targeting tvOSCreating a tvOS media catalog app in SwiftUIBuild standard content lockups and rows of content shelves for your tvOS app.See AlsoApp structureAPI ReferenceScenesDeclare the user interface groupings that make up the parts of your app.API ReferenceWindowsDisplay user interface content in a window or a collection of windows.API ReferenceImmersive spacesDisplay unbounded content in a person’s surroundings.API ReferenceDocumentsEnable people to open and manage documents.API ReferenceNavigationEnable people to move between different parts of your app’s view hierarchy within a scene.API ReferenceModal presentationsPresent content in a separate view that offers focused interaction.API ReferenceToolbarsProvide immediate access to frequently used commands and controls.API ReferenceSearchEnable people to search for text or other content within your app.API ReferenceApp extensionsExtend your app’s basic functionality to other parts of the system, like by adding a Widget.

---

url: https://developer.apple.com/swift-playground/
title: Learn to code with Swift Playground
description: 

Learn to code with Swift Playground
Swift Playground is a revolutionary app for iPad and Mac that helps you learn to code and build apps using Swift, the same powerful language used to create world-class apps for the App Store.
Engaging lessons and walkthroughs demonstrate the core concepts of coding and building apps as you write real Swift code in an interactive environment.
Learn and explore
In Swift Playground, a single line of code can make amazing things happen.
You’ll start with small programs called “playgrounds” to learn the basics.
Interactive lessons teach key coding concepts, and additional challenges encourage you to explore code in exciting new ways.
When you’re ready, you can start coding with SwiftUI, a modern, powerful framework for making great-looking apps.
The results of your code appear instantly as you type, making learning to code even easier.
And when you’re done, it’s easy to share your creations with friends, or even submit your app to App Store Connect.
Coding concepts
Swift Playground includes interactive lessons that use puzzles and experimentation to teach the following core coding concepts, and more: Commands Loops Operators Functions Conditional statements Parameters Types Variables Initialization Real Swift.
Real frameworks.
The Swift programming language was designed to be approachable enough to be your very first programming language.

---

url: https://developer.apple.com/swift-playground/
title: Learn to code with Swift Playground
description: 

Swift is also incredibly powerful, used by professional developers to create over half a million apps on the App Store.
Using Swift Playground, you’ll be coding within minutes.
Even as you become more proficient, you’ll never outgrow Swift.
With Swift Playground you build apps using SwiftUI, the powerful, modern user interface framework used by developers worldwide to power their app experiences.
SwiftUI makes it easy to quickly create elegant app experiences and express your ideas.
You can also access key frameworks, such as SpriteKit, Bluetooth, and Metal.
Your code can interact directly with the iPad or Mac on which it runs.
For instance, on iPad your playgrounds respond to touch gestures and interact with hardware, such as the accelerometer, gyroscope, and camera.
With support for Swift Packages, Swift Playground makes it easier than ever to code your creations.
Packages are bundles of reusable code that can be created by you or other developers and included in your projects.
With the power of packages, you can quickly write code which formats data, queries databases, communicates over a network, and so much more.
Experiment with code
Sometimes the best way to learn is to explore on your own, and Swift Playground is a great place to let your imagination run wild.

---

url: https://developer.apple.com/swift-playground/
title: Learn to code with Swift Playground
description: 

In addition to the guided Get Started with Code lessons, Swift Playground includes many challenges so you can keep coming back to try something new.
Some challenges encourage you to play with code to create interesting effects, while others include engrossing puzzles that require all of your coding skills to solve.
Additional starting points included in Swift Playground help you create playgrounds from scratch.
With access to thousands of APIs in the iOS and macOS SDKs, you can create amazing playgrounds that explore the web, generate 3D worlds, experiment with physics, and much more.
Swift Playground includes the App Gallery to demonstrate common app concepts such as tabbed navigation and downloading data.
Guided walkthroughs show you interesting and relevant areas of code and help you learn about the powerful SDKs involved.
You can also create your own apps with multiple Swift files, along with image and audio assets, and leverage the ecosystem of thousands of existing Swift packages.
Send your app projects to friends and collaborate to bring your creations to life.
Built for touch
Swift Playground offers tools to make coding easier and reduce mistakes.
On iPad, you can take advantage of touch to create entire programs with only a few taps on the screen.

---

url: https://developer.apple.com/swift-playground/
title: Learn to code with Swift Playground
description: 

Swift Playground helps you write correct code by identifying mistakes as you type and offering suggestions to help correct the errors.
Item 1 Item 2 Item 3 1 2 3 Coding keyboard.
When the time comes for typing, enter numbers and symbols commonly used in Swift coding by dragging your finger across a key to select one of the alternate symbols.
Inline code completion.
Suggestions intelligently present the most likely next commands or values based on context.
It’s easy to write entire lines of code with just a few keystrokes.
Touch to edit.
Tap a color value to display a color picker or tap an image value to choose a photo from your library.
You can even restructure your code by simply dragging a brace to wrap around the surrounding code.
Share across devices
Swift Playground for Mac is built with Mac Catalyst, giving you the ability to edit the exact same code on iPad and Mac.
iCloud Drive seamlessly shares your files, and the changes you make on either iPad or Mac immediately appear on your other devices.
It’s easy to start a project on iPad and open the file on Mac to keep coding.
You can also open app projects in Xcode on Mac for a more advanced editing experience.

---

url: https://developer.apple.com/programs/
title: From code to customer
description: 

From code to customer
Join the Apple Developer Program to reach customers around the world on the App Store for all Apple platforms.
Membership provides the tools, resources, and support you need to develop and distribute apps and games, including access to app services, testing tools, app analytics, and more.
Get the latest betas
Be ready for what’s coming next.
Apple customers adopt new software rapidly, so you can keep innovating.
Integrate the latest Apple technologies in your apps to deliver incredible experiences on Apple platforms as soon as they’re released.
View the latest releases Access comprehensive services and capabilities
Leverage Apple’s tightly integrated hardware, software, services, and capabilities to create useful and engaging experiences.
Offer special content and services with In‑App Purchase, new ways to experience your app through spatial computing, intelligent features with on-device machine learning, a quick way to purchase items using Apple Pay, and much more.
View tools and services Test your apps
Collect valuable feedback before releasing your apps and App Clips.
With TestFlight, you can invite up to 10,000 external users to try out your beta builds using just their email address or by sharing a public link.

---

url: https://developer.apple.com/programs/
title: From code to customer
description: 

Learn more about TestFlight Distribute apps worldwide
When you join the Apple Developer Program, you’re eligible to reach customers around the world on all Apple platforms.
The App Store makes it easy for users in 175 regions to discover and download your apps, games, and extensions across Apple platforms.
Apple handles worldwide payment processing, offers unlimited hosting and bandwidth — even for free apps — verifies user accounts, and much more.
With Apple School Manager and Apple Business Manager, you can offer your app in volume or custom apps only to organizations you specify.
You can even choose to distribute your Mac apps outside the Mac App Store using your Developer ID certificate and Apple’s notarization process, reassuring users that you’re a trusted developer.
Learn more about distribution Dive deep into analytics
Measure user engagement, marketing campaign performance, monetization, and more in App Store Connect.
You’ll get information only Apple provides and no technical implementation is required.
Learn more about App Analytics Get help from Apple experts
Join a variety of sessions, appointments, labs, and more — tailored for you.
Meet with Apple activities take place in person and online all over the world, offering you an opportunity to connect directly with Apple engineers and designers — and create your best apps and games yet.
Learn more about Meet with Apple

---

url: https://developer.apple.com/app-extensions/
title: App extensions
description: 

App extensions
App extensions let you extend custom functionality and content beyond your app and make it available to users while they’re interacting with other apps or the system.
For example, your app can appear as a widget on the Home Screen, add new buttons in the action sheet, offer photo filters within the Photos app, or automatically upgrade users’ accounts to use strong passwords or Sign in with Apple.
Use extensions to place the power of your app wherever your users need it most.
Types of app extensions
iOS, iPadOS, macOS, tvOS, visionOS, and watchOS support several types of extensions, each of which is tied to a single, well-scoped area of the system — such as sharing, Notification Center, or Safari.
Extension Point
Description
iOS/iPadOS
macOS
tvOS
visionOS
watchOS Extension Point
Description
iOS/iPadOS
macOS
tvOS
visionOS
watchOS Action
Add custom actions to the share sheet to invoke your app’s functionality from any app.
●
● ● Audio Unit
Create and modify audio in any app that uses sound, including music production apps such as GarageBand or Logic Pro X.
●
● ● Authentication Services
Streamline authentication for users by enabling single sign-on.
●
● ● Account Authentication Modification
Automatically upgrade user passwords to strong passwords, or convert accounts to use Sign in with Apple.

---

url: https://developer.apple.com/app-extensions/
title: App extensions
description: 

● AutoFill Credential Provider
Surface credentials from your app in Password Autofill and pull your app’s password data into the Password AutoFill workflow.
●
● ● Call Directory
Display caller identification from your appʼs custom contact list so users know who’s calling.
● ● ClassKit Content Provider
Update the status of your appʼs activities so that status is visible in the Schoolwork app.
●
● ● Contact Provider
Provide contact items to the system-wide Contacts ecosystem.
● Content Blocker
Provide rules for hiding elements, blocking loads, and stripping cookies from Safari requests.
●
● ● Custom Keyboard
Provide systemwide customized text input for unique input methods or specific languages.
● File Provider
Let other apps access the documents and directories stored and managed by your app.
●
● ● File Provider UI
Add custom actions to the document browserʼs context menu for documents that your app manages.
● Finder Sync
Keep files in sync with a back-end storage service.
● iMessage
Allow users to send text, stickers, media files, and interactive messages.
● Intents
Let users interact with your app using Siri.
●
●
●
●
● Intents UI
Customize the interface for interactions with your app in Siri conversations or Maps.
● ● Live Caller ID Lookup
Provide caller ID and call-blocking services from a server you maintain.
Available in iOS only.

---

url: https://developer.apple.com/app-extensions/
title: App extensions
description: 

● Location Push Service
Enables a location sharing app, with a user’s authorization, to query a user’s location in response to a push from Apple Push Notification service (APNs).
● Mail
Enhance Mail by adding custom actions, blocking content, signing and encoding messages, and more.
● ● Message Filter
Identify and filter unwanted SMS and MMS messages.
● ● Network
Provide system-level networking services such as VPN, proxies, or content filtering.
●
● ● Notification Center
Customize the appearance of your app’s notification alerts.
●
● ● Notification Service
Modify the payload of a remote notification before it’s displayed on the user’s device.
●
● ●
● Persistent Token
Grant access to user accounts and the keychain using a token.
●
● ● Photo Editing
Allow your app to edit assets directly within the Photos app.
●
● Photo Project
Augment the macOS Photos app with extensions that support project creation.
● Quick Look Preview
Provide previews of documents your app owns so they can be viewed in any app.
●
● Safari Services
Extend the web-browsing experience in Safari by leveraging web technologies and native code.
● ● Share
Let users post to your social-network service from any app.
●
● ● Smart Card Token
Grant access to user accounts and the keychain using a hardware-based token.
● Spotlight Import
Make content in your app searchable in Spotlight, Safari, Siri, and more.

---

url: https://developer.apple.com/app-extensions/
title: App extensions
description: 

●
● ● Sticker Pack
Add custom stickers to Messages.
● Thumbnail
Display thumbnails of your custom document types in all apps.
●
● ● TV Top Shelf
Help users discover your app by providing Top Shelf content and a description of your tvOS app.
● Unwanted Communication
Block incoming phone calls using your app’s custom unsolicited caller database.
● Virtual Conference
Integrate your video conferencing service directly into events on user’s calendars.
●
● ● Widgets
Show relevant, glanceable content from your app on the iOS Home Screen and Lock Screen, macOS Notification Center, and as complications in watchOS.
●
● ● Xcode Source Editor
Provide custom editing features directly inside Xcode’s source editor.
● Tools and resources
Use Xcode and these resources to build your app extensions.
Download Xcode

---

url: https://developer.apple.com/videos/
title: Design and Development Videos - Apple Developer
description: 

WWDC24 WWDC24 Special Events WWDC24 Special Events 104:04 Keynote
WWDC24 104:04 Keynote (ASL)
WWDC24 66:31 Platforms State of the Union
WWDC24 66:31 Platforms State of the Union (ASL)
WWDC24 2:43 18 things from WWDC24
WWDC24 More videos
View the WWDC23 collection
View the WWDC22 collection
View the WWDC21 collection
View the WWDC20 collection
View the WWDC19 collection
View the WWDC18 collection
View the complete collection

---

url: https://developer.apple.com/tutorials/swiftui-concepts
title: This page requires JavaScript.
description: Discover tips and techniques for building multiplatform apps with this set of conceptual articles and sample code.

Learning SwiftUIDiscover tips and techniques for building multiplatform apps with this set of conceptual articles and sample code.

---

url: https://developer.apple.com/tutorials/swiftui-concepts
title: This page requires JavaScript.
description: Discover tips and techniques for building multiplatform apps with this set of conceptual articles and sample code.

Get started Chapter 1 App principlesWalk through the building blocks of a SwiftUI app.Exploring the structure of a SwiftUI appSpecifying the view hierarchy of an app using a scene Chapter 2 View layoutDisplay content in views that adapt to their environment.Maintaining the adaptable sizes of built-in viewsScaling views to complement textLayering contentChoosing the right way to hide a viewOrganizing and aligning content with stacksAdjusting the space between views Chapter 3 State and data flowDelve into the principles of managing app state and data flow.Driving changes in your UI with state and bindingsCreating a custom input control that binds to a valueDefining the source of truth using a custom binding Resources Explore other resources to learn more about creating amazing apps with SwiftUI.DocumentationBrowse and search detailed API documentation.App organizationModel dataView fundamentalsLayout fundamentals View more Sample CodeMore ready-made code samples to build and learn from.Introducing SwiftUIExploring SwiftUI Sample AppsFood Truck: Building a SwiftUI multiplatform appFruta: Building a Feature-Rich App with SwiftUIXcode and SDKsDownload Xcode 14 or later for the latest tools and SDKs.

---

url: https://developer.apple.com/tutorials/swiftui-concepts
title: This page requires JavaScript.
description: Discover tips and techniques for building multiplatform apps with this set of conceptual articles and sample code.

View downloads VideosWatch presentations about SwiftUI from WWDC and other events.Demystify SwiftUIApp Essentials in SwiftUIData Essentials in SwiftUI Watch videos ForumsDiscuss SwiftUI with Apple engineers and other developers.
View forums

---

url: https://developer.apple.com/hello/
title: Hello Developer
description: 

Hello Developer
A monthly guide to the latest developer activities, stories, and news.
April 2025
Revisit foundational sessions, join us to dive into SwiftUI, and meet Rooms, an Apple Design Award winner that defies description.
April 2025
Revisit foundational sessions, join us to dive into SwiftUI, and meet Rooms, an Apple Design Award winner that defies description.
Recent editions March 2025
An incredible AAA game comes to Mac.
Plus, the latest on International Women’s Day activities, WeChat, and much more.
February 2025
Catch up on the latest developer activities, learn how to participate in the Swift Student Challenge, and more.
January 2025
Get ready for an incredible new year in the Apple Developer community.
December 2024
Take a look back at highlights from an incredible year for the Apple Developer community — and get ready for what’s next.
November 2024
The Swift Pathway, new developer activities around the world, and an interview with the creator of recipe app Crouton.
October 2024
Get your app up to speed, meet the team behind Lies of P, explore new student resources, and more.
September 2024
Get ready for Apple Intelligence and go behind the design with Rytmos.
August 2024
Bring your app to new markets and go behind the design with Lost in Play.
July 2024
Dive deep into the big announcements from WWDC24 and check out the first installment of the 2024 Behind the Design series.

---

url: https://developer.apple.com/hello/
title: Hello Developer
description: 

June 2024
Meet the 2024 Apple Design Award winners and get ready for WWDC24.
May 2024
Meet Pathways, Swift Student Challenge winners, and the rising developer of Tide Guide.
April 2024
WWDC season has arrived.
Plus: The new Develop in Swift Tutorials and Knotwords.
March 2024
Step inside the Apple Developer Centers, meet the team behind Finding Hannah, and get macOS security tips.
February 2024
Explore International Women’s Day activities, meet the team behind Fantastical on visionOS, and get UX writing tips.
January 2024
The first edition of 2024 is all about Apple Vision Pro.
December 2023
Check out new videos on Game Center and the journaling API, and read a Q&A with the spatial design team.
November 2023
Explore the Swift Student Challenge 2024, Apple Vision Pro apps for enterprise, and new games videos.
October 2023
Go behind the scenes with Plex and catch up on the latest developer news.

---

url: https://developer.apple.com/news/upcoming-requirements/
title: Upcoming Requirements - Apple Developer
description: 

SDK minimum requirements Since April 24, 2025
Apps uploaded to App Store Connect must be built with Xcode 16 or later using an SDK for iOS 18, iPadOS 18, tvOS 18, visionOS 2, or watchOS 11.Learn about submitting apps APNs Certificate Update Since February 24, 2025
The Apple Push Notification service (APNs) will be updated with a new server certificate in production on February 24, 2025.
Update your application’s Trust Store to include the new server certificate: SHA-2 Root : USERTrust RSA Certification Authority certificate.
Quarantine attribute in macOS apps uploaded to App Store Connect Since February 18, 2025
macOS apps distributed on TestFlight and the App Store shouldn’t include the quarantine extended file attribute com.apple.quarantine.
Starting February 18, you must remove this attribute from all files within macOS apps in order to upload to App Store Connect.
DSA trader status required for apps in the EU Since February 17, 2025
Apps without trader status will be removed from the App Store in the European Union (EU) until trader status is provided and verified in order to comply with the Digital Services Act.
App Store Receipt Signing Intermediate Certificate Since January 24, 2025
The SHA-1 intermediate certificate used for signing App Store receipts expires on January 24, 2025.

---

url: https://developer.apple.com/news/upcoming-requirements/
title: Upcoming Requirements - Apple Developer
description: 

If your app performs on-device receipt validation, make sure it supports the SHA-256 algorithm; alternatively, use the AppTransaction and Transaction APIs to verify App Store transactions.For more details, view TN3138: Handling App Store receipt signing certificate change.
APNs Certificate Update Since January 20, 2025
The Apple Push Notification service (APNs) will be updated with a new server certificate in sandbox on January 20, 2025.
Update your application’s Trust Store to include the new server certificate: SHA-2 Root : USERTrust RSA Certification Authority certificate.
DSA trader status required for app updates in the EU Since October 16, 2024
Your trader status is required to submit app updates for apps distributed on the App Store in the European Union (EU), in order to comply with the Digital Services Act.
Transition from XML to the App Store Connect API Since July 15, 2024
Game Center management will no longer be supported by the XML feed as of July 15, 2024.Support for in-app purchases, subscriptions, metadata, and app pricing ended on November 9, 2022.You can manage this content via the App Store Connect REST API, which makes it easy to customize and automate your workflows.

---

url: https://developer.apple.com/news/upcoming-requirements/
title: Upcoming Requirements - Apple Developer
description: 

Approved reasons for APIs Since May 1, 2024
You’ll need to include approved reasons for the listed APIs used by your app’s code (including from third-party SDKs) to upload a new or updated app to App Store Connect.
Xcode 15 Since April 29, 2024
Apps uploaded to App Store Connect must be built with Xcode 15 for iOS 17, iPadOS 17, tvOS 17, or watchOS 10 starting April 29, 2024.Learn about submitting your apps Apple notary service update Since November 1, 2023
If you notarize Mac software with the Apple notary service using the altool command-line utility or Xcode 13 or earlier, you’ll need to transition to the notarytool command-utility or upgrade to Xcode 14 or later.
Starting November 1, 2023, the Apple notary service will no longer accept uploads from altool or Xcode 13 or earlier.

---

url: https://developer.apple.com/news/upcoming-requirements/
title: Upcoming Requirements - Apple Developer
description: 

Existing notarized software will continue to function properly.Learn about notarizing software Game Center entitlement and configuration requirement Since August 16, 2023
New apps and app updates for iOS, iPadOS, or tvOS offering Game Center features need to include the Game Center entitlement in the entitlements plist and have Game Center features configured in App Store Connect before you can submit them to the App Store.Learn about configuring Game Center in XcodeLearn about configuring Game Center in App Store ConnectView capability and entitlement updates Intermediate certificate update Since August 16, 2023
Receipts in new apps and app updates submitted to the App Store, as well as all apps in sandbox, will be signed with the SHA‑256 intermediate certificate.
If your app verifies App Store transactions using the AppTransaction and Transaction APIs, or the verifyReceipt web service endpoint, no action is required.If your app validates App Store receipts on device, make sure your app will support the SHA-256 version of this certificate.
New apps and app updates that don’t support the SHA-256 version of this certificate will no longer be accepted by the App Store starting August 16, 2023.

---

url: https://developer.apple.com/news/upcoming-requirements/
title: Upcoming Requirements - Apple Developer
description: 

tvOS 16.1 SDK Since July 31, 2023
All tvOS apps submitted to the App Store must be built with Xcode 14.1 and tvOS 16.1 SDK or later.Learn about submitting apps App Store global pricing update in May Since May 9, 2023
Pricing for existing apps and one-time in-app purchases will be updated with enhanced global prices across App Store storefronts using your current price in the United States as the basis—unless you’ve made relevant updates after March 8, 2023.
This update has been deferred to later this year for the App Store in Türkye.Learn more Xcode 14.1 Since April 25, 2023
iOS and iPadOS apps submitted to the App Store must be built with Xcode 14.1 and the iOS 16.1 SDK or later.
And watchOS apps submitted to the App Store must be built with Xcode 14.1 and the watchOS 9.1 SDK or later.Learn about submitting apps Transition from subscription reports version 1.2 to 1.3 Since March 1, 2023
Subscription reports version 1.2 will no longer be available as of March 1, 2023.
If you automatically download subscription reports using the App Store Connect API or Reporter, please update your query parameter to version 1.3 if you haven’t already.
Transition from XML to App Store Connect API Since November 9, 2022
The XML feed will no longer support in-app purchases, subscriptions, metadata, or app pricing as of November 9, 2022.

---

url: https://developer.apple.com/news/upcoming-requirements/
title: Upcoming Requirements - Apple Developer
description: 

You can manage this content via the App Store Connect REST API, which makes it easy to customize and automate your workflows.
The XML feed will continue to support existing Game Center management functionality.Learn more about the API Online group event in-app purchases Since June 30, 2022
App Store Review Guideline 3.11 requires apps offering paid online group services to do so via in-app purchase.
Given the recent resurgence of COVID and its continued impact on in-person services, we’ve extended the most recent deadline to June 30, 2022.Learn more Account deletion within apps Since June 30, 2022
App Store Review Guideline 5.1.1 provides people with greater control over their personal data by stating that all apps that allow for account creation must also allow users to initiate deletion of their account from within the app.
Due to the complexity of implementing this requirement we’ve extended the deadline to June 30, 2022.Learn more 32-bit app support has been discontinued in Xcode 14 Since June 6, 2022
Starting with Xcode 14, the ability to build a single binary with both 32-bit and 64-bit code has been removed.
Xcode 14 will only build 64-bit apps.
iOS 10, which was released in 2016, was the last version of iOS to run 32-bit apps.

---

url: https://developer.apple.com/news/upcoming-requirements/
title: Upcoming Requirements - Apple Developer
description: 

As of iOS 11, all 32-bit apps installed on device will not launch.Learn more about Xcode Xcode 13 Since April 25, 2022
iOS and iPadOS apps submitted to the App Store must be built with Xcode 13 and the iOS 15 SDK.
And watchOS apps submitted to the App Store must be built with Xcode 13 and the watchOS 8 SDK.Learn more Bank account holder address required in App Store Connect Since October 22, 2021
Bank account holder’s address is required if you have bank account information in App Store Connect.
Account Holders, Admins, and Finance roles can now provide a valid address in the Agreements, Tax, and Banking section.Learn more TLS 1.0 and 1.1 deprecation Since September 30, 2021
TLS 1.0 and 1.1 has been deprecated on Apple platforms as of iOS 15, iPadOS 15, macOS 12, watchOS 8, and tvOS 15, and support will be removed in future releases.
If your app has enabled App Transport Security (ATS) on all connections, no changes are required.
If your app continues to use legacy TLS 1.0 or 1.1, please make plans to transition to TLS 1.2 or later.
We recommend supporting TLS 1.3, as it’s faster and more secure.Learn more Game Center authentication certificate Since August 4, 2021
A new certificate for server-based Game Center verification will be available via the publicKeyUrl.
The previous certificate will no longer be available after this date.

---

url: https://developer.apple.com/news/upcoming-requirements/
title: Upcoming Requirements - Apple Developer
description: 

As a reminder, make sure your app always retrieves and uses the current publicKeyUrl value so it automatically uses the new certificate.
Learn more

---

url: https://developer.apple.com/news/releases/
title: Releases - Apple Developer
description: 

RSS iOS 18.5 beta 3 (22F5053j) April 21, 2025
View downloadsView release notes iPadOS 18.5 beta 3 (22F5053j) April 21, 2025
View downloadsView release notes macOS 15.5 beta 3 (24F5053j) April 21, 2025
View downloadsView release notes tvOS 18.5 beta 3 (22L5559d) April 21, 2025
View downloadsView release notes visionOS 2.5 beta 3 (22O5459c) April 21, 2025
View downloadsView release notes watchOS 11.5 beta 3 (22T5559d) April 21, 2025
View downloadsView release notes iOS 18.4.1 (22E252) April 16, 2025
View downloads iPadOS 18.4.1 (22E252) April 16, 2025
View downloads macOS 15.4.1 (24E263) April 16, 2025
View downloads tvOS 18.4.1 (22L261) April 16, 2025
View downloads visionOS 2.4.1 (22O251) April 16, 2025
View downloads TestFlight 3.8.1 April 15, 2025
Download the appView release notes watchOS 11.4 (22T251) April 1, 2025
View downloadsView release notes Xcode 16.3 (16E140) March 31, 2025
View downloadsView release notes iOS 18.4 (22E240) March 31, 2025
View downloadsView release notes iPadOS 18.4 (22E240) March 31, 2025
View downloadsView release notes macOS 15.4 (24E248) March 31, 2025
View downloadsView release notes tvOS 18.4 (22L255) March 31, 2025
View downloadsView release notes visionOS 2.4 (22O238) March 31, 2025
View downloadsView release notes iOS 16.7.11 (20H360) March 31, 2025
View downloads iPadOS 16.7.11 (20H360) March 31, 2025
View downloads iOS 15.8.4 (19H390) March 31, 2025
View downloads iPadOS 15.8.4 (19H390) March 31, 2025
View downloads App Store Connect Update March 25, 2025
View release notes iPadOS 17.7.6 RC(21H423) March 24, 2025
View downloads TestFlight Update March 18, 2025
View release notes App Store Connect API 3.8 February 11, 2025
Download fileView release notes App Store Connect 2.1 January 28, 2025
Download the appView release notes Transporter 1.3.2 November 21, 2024
Download the appView release notes App Store Connect API 3.7 November 12, 2024
Download fileView release notes AirPods Firmware beta (7A5220e) June 12, 2024
View installation instructions iOS 16.7.8 (20H343) May 13, 2024
View downloads iPadOS 16.7.8 (20H343) May 13, 2024
View downloads App Store Connect Update May 9, 2024
You can now submit apps built with Xcode 15.4 RC using the SDK for iOS 17.5 RC, iPadOS 17.5 RC, macOS 14.5 RC, tvOS 17.5 RC, and watchOS 10.5 RC for the App Store, and for internal and external testing through TestFlight.

---

url: https://developer.apple.com/news/site-updates/
title: Site Updates - Apple Developer
description: 

RSS Apple Developer Program License Agreement (Translations) January 3, 2025
View page Adding privacy tracking keys to your privacy manifest December 17, 2024
View Technote TN3182 Adding required reason API entries to your privacy manifest December 17, 2024
View Technote TN3183 Adding data collection details to your privacy manifest December 17, 2024
View Technote TN3184 Debugging an invalid privacy manifest November 12, 2024
View Technote TN3181 Reverting to App Store Server Notifications V1 November 12, 2024
View Technote TN3180 Understanding local network privacy October 31, 2024
View Technote TN3179 Handling App Store receipt signing certificate changes October 31, 2024
View Technote TN3138 Checking for and resolving build UUID problems October 8, 2024
View Technote TN3178 Understanding alternate audio track groups in movie files September 26, 2024
View Technote TN3177 iOS Wi-Fi API overview September 25, 2024
View Technote TN3111 Hello Developer: September 2024 September 3, 2024
View page Behind the Design: The rhythms of Rytmos September 3, 2024
View page Enterprise Program API August 16, 2024
View page NFC & SE Platform for secure contactless transactions August 14, 2024
View page Hello Developer: August 2024 August 6, 2024
View page Behind the Design: Creating the make-believe magic of Lost in Play August 6, 2024
View page Hello Developer: July 2024 July 11, 2024
View page Behind the Design: How Gentler Streak approaches fitness with “humanity” July 11, 2024
View page Troubleshooting Apple Pay payment processing issues June 25, 2024
View Technote TN3176 Diagnosing issues with displaying the Apple Pay button on your website June 25, 2024
View Technote TN3175 Diagnosing issues with the Apple Pay payment sheet on your website June 25, 2024
View Technote TN3174 Create rich previews for Messages June 11, 2024
View Technote TN3156 Troubleshooting issues with your Apple Pay merchant identifier configuration June 11, 2024
View Technote TN3173 What’s new for Apple developers June 10, 2024
View page Apple platforms June 10, 2024
iOS 18iPadOS 18macOS SequoiatvOS 18visionOS 2watchOS 11 Tools and technologies June 10, 2024
Apple IntelligenceXcodeSwiftSwiftUISwiftDataSwift TestingGame Porting Toolkit 2App Store and StoreKit Documentation and sample code June 10, 2024
Updates and highlights from WWDC24WWDC24 sample codeHuman Interface Guidelines Hello Developer: June 2024 June 6, 2024
View page Making your App Clip available in the App Store June 4, 2024
View Technote TN3168 Hello Developer: May 2024 May 9, 2024
View page Welcome to Pathways May 9, 2024
View page Meet with Apple May 9, 2024
View page ‘I taught myself’: Tucker MacDonald and the rise of Tide Guide May 9, 2024
View page Q&A with the SharePlay team May 9, 2024
View page Documentation May 9, 2024
ArticlesLearn more about Apple Pencil ProConvert Pages, Numbers, and Keynote files to PDFWrite ARM64 code for Apple platformsExplore the HIG App Store Server Notifications: ConsumptionRequestReason May 6, 2024
View page App Store Server API: ConsumptionRequest May 6, 2024
View page

---

url: https://developer.apple.com/documentation/swiftui/view/onreceive(_:perform:)
title: This page requires JavaScript.
description: Adds an action to perform when this view detects data emitted by the given publisher.

SwiftUI View onReceive(_:perform:) Instance MethodonReceive(_:perform:)Adds an action to perform when this view detects data emitted by the given publisher.iOS 13.0+iPadOS 13.0+Mac Catalyst 13.0+macOS 10.15+tvOS 13.0+visionOS 1.0+watchOS 6.0+nonisolated
func onReceive<P>( _ publisher: P, perform action: @escaping (P.Output) -> Void
) -> some View where P : Publisher, P.Failure == Never Parameters publisherThe publisher to subscribe to.actionThe action to perform when an event is emitted by publisher. The event emitted by publisher is passed as a parameter to action.Return ValueA view that triggers action when publisher emits an event.See AlsoResponding to data changesfunc onChange(of:initial:_:)Adds a modifier for this view that fires an action when a specific value changes.

---

url: https://developer.apple.com/documentation/swiftui/bindable
title: This page requires JavaScript.
description: A property wrapper type that supports creating bindings to the mutable properties of observable objects.

SwiftUI Bindable StructureBindableA property wrapper type that supports creating bindings to the mutable properties of observable objects.iOS 17.0+iPadOS 17.0+Mac Catalyst 17.0+macOS 14.0+tvOS 17.0+visionOS 1.0+watchOS 10.0+@dynamicMemberLookup @propertyWrapper
struct Bindable<Value>OverviewUse this property wrapper to create bindings to mutable properties of a data model object that conforms to the Observable protocol.
For example, the following code wraps the book input with @Bindable.
Then it uses a TextField to change the title property of a book, and a Toggle to change the isAvailable property, using the $ syntax to pass a binding for each property to those controls.@Observable
class Book: Identifiable { var title = "Sample Book Title" var isAvailable = true
} struct BookEditView: View { @Bindable var book: Book @Environment(\.dismiss) private var dismiss var body: some View { Form { TextField("Title", text: $book.title) Toggle("Book is available", isOn: $book.isAvailable) Button("Close") { dismiss() } } }
}
You can use the Bindable property wrapper on properties and variables to an Observable object.
This includes global variables, properties that exists outside of SwiftUI types, or even local variables.

---

url: https://developer.apple.com/documentation/swiftui/bindable
title: This page requires JavaScript.
description: A property wrapper type that supports creating bindings to the mutable properties of observable objects.

For example, you can create a @Bindable variable within a view’s body:struct LibraryView: View { @State private var books = [Book(), Book(), Book()] var body: some View { List(books) { book in @Bindable var book = book TextField("Title", text: $book.title) } }
}
The @Bindable variable book provides a binding that connects TextField to the title property of a book so that a person can make changes directly to the model data.Use this same approach when you need a binding to a property of an observable object stored in a view’s environment.
For example, the following code uses the Environment property wrapper to retrieve an instance of the observable type Book.

---

url: https://developer.apple.com/documentation/swiftui/bindable
title: This page requires JavaScript.
description: A property wrapper type that supports creating bindings to the mutable properties of observable objects.

Then the code creates a @Bindable variable book and passes a binding for the title property to a TextField using the $ syntax.struct TitleEditView: View { @Environment(Book.self) private var book var body: some View { @Bindable var book = book TextField("Title", text: $book.title) }
}
TopicsCreating a bindable valueinit(Value)Creates a bindable object from an observable object.init(wrappedValue: Value)Creates a bindable object from an observable object.init(projectedValue: Bindable<Value>)Creates a bindable from the value of another bindable.Getting the valuevar wrappedValue: ValueThe wrapped object.var projectedValue: Bindable<Value>The bindable wrapper for the object that creates bindings to its properties using dynamic member lookup.subscript<Subject>(dynamicMember _: ReferenceWritableKeyPath<Value, Subject>) -> Binding<Subject>Returns a binding to the value of a given key path.RelationshipsConforms ToCopyableIdentifiableSendableSee AlsoCreating and sharing view stateManaging user interface stateEncapsulate view-specific data within your app’s view hierarchy to make your views reusable.struct StateA property wrapper type that can read and write a value managed by SwiftUI.struct BindingA property wrapper type that can read and write a value owned by a source of truth.

---

url: https://developer.apple.com/documentation/swiftui/binding
title: This page requires JavaScript.
description: A property wrapper type that can read and write a value owned by a source of truth.

SwiftUI Binding StructureBindingA property wrapper type that can read and write a value owned by a source of truth.iOS 13.0+iPadOS 13.0+Mac Catalyst 13.0+macOS 10.15+tvOS 13.0+visionOS 1.0+watchOS 6.0+@frozen @propertyWrapper @dynamicMemberLookup
struct Binding<Value> Mentioned in Performing a search operation Managing search interface activation Adding a search interface to your app Managing user interface state OverviewUse a binding to create a two-way connection between a property that stores data, and a view that displays and changes the data.
A binding connects a property to a source of truth stored elsewhere, instead of storing data directly.
For example, a button that toggles between play and pause can create a binding to a property of its parent view using the Binding property wrapper.struct PlayButton: View { @Binding var isPlaying: Bool var body: some View { Button(isPlaying ?
"Pause" : "Play") { isPlaying.toggle() } }
}
The parent view declares a property to hold the playing state, using the State property wrapper to indicate that this property is the value’s source of truth.struct PlayerView: View { var episode: Episode @State private var isPlaying: Bool = false var body: some View { VStack { Text(episode.title) .foregroundStyle(isPlaying ?

---

url: https://developer.apple.com/documentation/swiftui/binding
title: This page requires JavaScript.
description: A property wrapper type that can read and write a value owned by a source of truth.

.primary : .secondary) PlayButton(isPlaying: $isPlaying) // Pass a binding.
} }
}
When PlayerView initializes PlayButton, it passes a binding of its state property into the button’s binding property.
Applying the $ prefix to a property wrapped value returns its projectedValue, which for a state property wrapper returns a binding to the value.Whenever the user taps the PlayButton, the PlayerView updates its isPlaying state.A binding conforms to Sendable only if its wrapped value type also conforms to Sendable.
It is always safe to pass a sendable binding between different concurrency domains.
However, reading from or writing to a binding’s wrapped value from a different concurrency domain may or may not be safe, depending on how the binding was created.
SwiftUI will issue a warning at runtime if it detects a binding being used in a way that may compromise data safety.NoteTo create bindings to properties of a type that conforms to the Observable protocol, use the Bindable property wrapper.

---

url: https://developer.apple.com/documentation/swiftui/binding
title: This page requires JavaScript.
description: A property wrapper type that can read and write a value owned by a source of truth.

For more information, see Migrating from the Observable Object protocol to the Observable macro.TopicsCreating a bindinginit(_:)Creates a binding by projecting the base value to a hashable value.init(projectedValue: Binding<Value>)Creates a binding from the value of another binding.init(get:set:)Creates a binding with closures that read and write the binding value.static func constant(Value) -> Binding<Value>Creates a binding with an immutable value.Getting the valuevar wrappedValue: ValueThe underlying value referenced by the binding variable.var projectedValue: Binding<Value>A projection of the binding value that returns a binding.subscript<Subject>(dynamicMember _: WritableKeyPath<Value, Subject>) -> Binding<Subject>Returns a binding to the resulting value of a given key path.Managing changesvar id: Value.IDThe stable identity of the entity associated with this instance, corresponding to the id of the binding’s wrapped value.func animation(Animation?) -> Binding<Value>Specifies an animation to perform when the binding value changes.func transaction(Transaction) -> Binding<Value>Specifies a transaction for the binding.var transaction: TransactionThe binding’s transaction.Default ImplementationsAPI ReferenceIdentifiable ImplementationsRelationshipsConforms ToBidirectionalCollectionCollectionCopyableDynamicPropertyConforms when Value conforms to Copyable and Escapable.IdentifiableRandomAccessCollectionSendableSequenceSee AlsoCreating and sharing view stateManaging user interface stateEncapsulate view-specific data within your app’s view hierarchy to make your views reusable.struct StateA property wrapper type that can read and write a value managed by SwiftUI.struct BindableA property wrapper type that supports creating bindings to the mutable properties of observable objects.

---

url: https://developer.apple.com/documentation/swiftui/monitoring-model-data-changes-in-your-app
title: This page requires JavaScript.
description: Show changes to data in your app’s user interface by using observable objects.

SwiftUI Model data Monitoring data changes in your app Sample CodeMonitoring data changes in your appShow changes to data in your app’s user interface by using observable objects.
Download iOS 16.2+iPadOS 16.2+macOS 13.1+Xcode 14.3+OverviewYou typically store and process data in your app using a data model that’s separate from your app’s user interface (UI) and other logic.
The separation promotes modularity, improves testability, and makes it easier to reason about how your app works.Traditionally, you use a view controller to move data back and forth between the model and the UI, but SwiftUI handles most of this synchronization for you.
To update views when data changes, you make your data model classes observable objects, publish their properties, and declare instances of them using property wrappers.
To ensure user-driven data changes flow back into the model, you bind UI controls to model properties.
Working together, these features help you to maintain a single source of truth for your data.ImportantThis article explains how to observe model data changes in SwiftUI apps that have a minimum deployment target that is prior to iOS 17, iPadOS 17, macOS 14, tvOS 17, or watchOS 10.

---

url: https://developer.apple.com/documentation/swiftui/monitoring-model-data-changes-in-your-app
title: This page requires JavaScript.
description: Show changes to data in your app’s user interface by using observable objects.

To prepare your app for a newer version of one of those operating systems, see Migrating from the Observable Object protocol to the Observable macro.
If your app’s minimum deployment target is iOS 17, iPadOS 17, macOS 14, tvOS 17, or watchOS 10 or later, use the observation approach described in Managing model data in your app.Make model data observableTo make the data changes in your model visible to SwiftUI, adopt the ObservableObject protocol for model classes.
For example, you can create a Book class that’s an observable object:class Book: ObservableObject {
}
The system automatically infers the ObjectWillChangePublisher associated type for the class and synthesizes the required doc://com.apple.documentation/documentation/Combine/ObservableObject/objectWillChange-2oa5v method that emits the changed values of published properties.
To publish a property, add the Published property wrapper to the property’s declaration:class Book: ObservableObject { @Published var title = "Sample Book Title"
}
Avoid the overhead of a published property when you don’t need it.
Only publish properties that both can change and that matter to the UI.

---

url: https://developer.apple.com/documentation/swiftui/monitoring-model-data-changes-in-your-app
title: This page requires JavaScript.
description: Show changes to data in your app’s user interface by using observable objects.

For example, the Book class might have an identifier property that never changes after initialization:class Book: ObservableObject { @Published var title = "Sample Book Title" let identifier = UUID() // A unique identifier that never changes.
}
You can still display the identifier in your user interface, but because it isn’t published, SwiftUI doesn’t watch that particular property for changes.Monitor changes in observable objectsTo tell SwiftUI to monitor an observable object, add the ObservedObject property wrapper to the property’s declaration:struct BookView: View { @ObservedObject var book: Book var body: some View { Text(book.title) }
}
You can pass individual properties of an observed object to child views, as shown above.
When the data changes, like when you load new data from disk, SwiftUI updates all the affected views.
You can also pass an entire observable object to a child view and share model objects across levels of a view hierarchy:struct BookView: View { @ObservedObject var book: Book var body: some View { BookEditView(book: book) }
} struct BookEditView: View { @ObservedObject var book: Book // ...

---

url: https://developer.apple.com/documentation/swiftui/monitoring-model-data-changes-in-your-app
title: This page requires JavaScript.
description: Show changes to data in your app’s user interface by using observable objects.

}
Instantiate a model object in a viewSwiftUI might create or recreate a view at any time, so it’s important that initializing a view with a given set of inputs always results in the same view.
As a result, it’s unsafe to create an observed object inside a view.
Instead, SwiftUI provides the StateObject property wrapper, which creates a single source of truth for a reference type that you store in a view hierarchy.
You can safely create a Book instance inside a view this way:struct LibraryView: View { @StateObject private var book = Book() var body: some View { BookView(book: book) }
}
A state object behaves like an observed object, except that SwiftUI creates and manages a single object instance for a given view instance, regardless of how many times it recreates the view.
You can use the object locally, or pass the state object into another view’s observed object property, as shown in the above example.While SwiftUI doesn’t recreate the state object within a view, it does create a distinct object instance for each view instance.
For example, each LibraryView in the following code gets a unique Book instance:VStack { LibraryView() LibraryView()
}
You can also create a state object in your top level App instance, or in one of your app’s Scene instances.

---

url: https://developer.apple.com/documentation/swiftui/monitoring-model-data-changes-in-your-app
title: This page requires JavaScript.
description: Show changes to data in your app’s user interface by using observable objects.

For example, if you define an observable object called Library to hold a collection of books for a book reader app, you could create a single library instance in the app’s top level structure:@main
struct BookReader: App { @StateObject private var library = Library() // ...
}
Share an object throughout your appIf you have a data model object that you want to use throughout your app, but don’t want to pass it through many layers of hierarchy, you can use the environmentObject(_:) view modifier to put the object into the environment instead:@main
struct BookReader: App { @StateObject private var library = Library() var body: some Scene { WindowGroup { LibraryView() .environmentObject(library) } }
}
Any descendant view of the view to which you apply the modifier can then access the data model instance by declaring a property with the EnvironmentObject property wrapper:struct LibraryView: View { @EnvironmentObject var library: Library // ...
}
If you use an environment object, you might add it to the view at the top of your app’s hierarchy, as shown above.
Alternatively, you might add it to the root view of a subtree in your view hierarchy.

---

url: https://developer.apple.com/documentation/swiftui/monitoring-model-data-changes-in-your-app
title: This page requires JavaScript.
description: Show changes to data in your app’s user interface by using observable objects.

Either way, remember to also add it to the preview provider of any view that uses the object, or that has a descendant that uses the object:struct LibraryView_Previews: PreviewProvider { static var previews: some View { LibraryView() .environmentObject(Library()) }
}
Create a two-way connection using bindingsWhen you allow a person to change the data in the UI, use a binding to the corresponding property.
This ensures that updates flow back into the data model automatically.
You can get a binding to an observed object, state object, or environment object property by prefixing the name of the object with the dollar sign ($).

---

url: https://developer.apple.com/documentation/swiftui/monitoring-model-data-changes-in-your-app
title: This page requires JavaScript.
description: Show changes to data in your app’s user interface by using observable objects.

For example, if you let someone edit the title of a book by adding a TextField to the BookEditView, give the text field a binding to the book’s title property:struct BookEditView: View { @ObservedObject var book: Book var body: some View { TextField("Title", text: $book.title) }
}
The binding connects the view element to the underlying model so that a person makes changes directly to the model data.See AlsoCreating model dataManaging model data in your appCreate connections between your app’s data model and views.Migrating from the Observable Object protocol to the Observable macroUpdate your existing app to leverage the benefits of Observation in Swift.@attached(member, names: named(_$observationRegistrar), named(access), named(withMutation)) @attached(memberAttribute) @attached(extension, conformances: Observable) macro Observable()Defines and implements conformance of the Observable protocol.struct StateObjectA property wrapper type that instantiates an observable object.struct ObservedObjectA property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.protocol ObservableObject : AnyObjectA type of object with a publisher that emits before the object has changed.

---

url: https://developer.apple.com/documentation/swiftui/stateobject
title: This page requires JavaScript.
description: A property wrapper type that instantiates an observable object.

SwiftUI StateObject StructureStateObjectA property wrapper type that instantiates an observable object.iOS 14.0+iPadOS 14.0+Mac Catalyst 14.0+macOS 11.0+tvOS 14.0+visionOS 1.0+watchOS 7.0+@MainActor @frozen @propertyWrapper @preconcurrency
struct StateObject<ObjectType> where ObjectType : ObservableObjectOverviewUse a state object as the single source of truth for a reference type that you store in a view hierarchy.
Create a state object in an App, Scene, or View by applying the @StateObject attribute to a property declaration and providing an initial value that conforms to the ObservableObject protocol.
Declare state objects as private to prevent setting them from a memberwise initializer, which can conflict with the storage management that SwiftUI provides:class DataModel: ObservableObject { @Published var name = "Some Name" @Published var isEnabled = false
} struct MyView: View { @StateObject private var model = DataModel() // Create the state object.
var body: some View { Text(model.name) // Updates when the data model changes.
MySubView() .environmentObject(model) }
}
SwiftUI creates a new instance of the model object only once during the lifetime of the container that declares the state object.

---

url: https://developer.apple.com/documentation/swiftui/stateobject
title: This page requires JavaScript.
description: A property wrapper type that instantiates an observable object.

For example, SwiftUI doesn’t create a new instance if a view’s inputs change, but does create a new instance if the identity of a view changes.
When published properties of the observable object change, SwiftUI updates any view that depends on those properties, like the Text view in the above example.NoteIf you need to store a value type, like a structure, string, or integer, use the State property wrapper instead.
Also use State if you need to store a reference type that conforms to the Observable() protocol.
To learn more about Observation in SwiftUI, see Managing model data in your app.Share state objects with subviewsYou can pass a state object into a subview through a property that has the ObservedObject attribute.
Alternatively, add the object to the environment of a view hierarchy by applying the environmentObject(_:) modifier to a view, like MySubView in the above code.
You can then read the object inside MySubView or any of its descendants using the EnvironmentObject attribute:struct MySubView: View { @EnvironmentObject var model: DataModel var body: some View { Toggle("Enabled", isOn: $model.isEnabled) }
}
Get a Binding to the state object’s properties using the dollar sign ($) operator.
Use a binding when you want to create a two-way connection.

---

url: https://developer.apple.com/documentation/swiftui/stateobject
title: This page requires JavaScript.
description: A property wrapper type that instantiates an observable object.

In the above code, the Toggle controls the model’s isEnabled value through a binding.Initialize state objects using external dataWhen a state object’s initial state depends on data that comes from outside its container, you can call the object’s initializer explicitly from within its container’s initializer.
For example, suppose the data model from the previous example takes a name input during initialization and you want to use a value for that name that comes from outside the view.
You can do this with a call to the state object’s initializer inside an explicit initializer that you create for the view:struct MyInitializableView: View { @StateObject private var model: DataModel init(name: String) { // SwiftUI ensures that the following initialization uses the // closure only once during the lifetime of the view, so // later changes to the view's name input have no effect.
_model = StateObject(wrappedValue: DataModel(name: name)) } var body: some View { VStack { Text("Name: \(model.name)") } }
}
Use caution when doing this.
SwiftUI only initializes a state object the first time you call its initializer in a given view.
This ensures that the object provides stable storage even as the view’s inputs change.

---

url: https://developer.apple.com/documentation/swiftui/stateobject
title: This page requires JavaScript.
description: A property wrapper type that instantiates an observable object.

However, it might result in unexpected behavior or unwanted side effects if you explicitly initialize the state object.In the above example, if the name input to MyInitializableView changes, SwiftUI reruns the view’s initializer with the new value.
However, SwiftUI runs the autoclosure that you provide to the state object’s initializer only the first time you call the state object’s initializer, so the model’s stored name value doesn’t change.Explicit state object initialization works well when the external data that the object depends on doesn’t change for a given instance of the object’s container.
For example, you can create two views with different constant names:var body: some View { VStack { MyInitializableView(name: "Ravi") MyInitializableView(name: "Maria") }
}
ImportantEven for a configurable state object, you still declare it as private.
This ensures that you can’t accidentally set the parameter through a memberwise initializer of the view, because doing so can conflict with the framework’s storage management and produce unexpected results.Force reinitialization by changing view identityIf you want SwiftUI to reinitialize a state object when a view input changes, make sure that the view’s identity changes at the same time.

---

url: https://developer.apple.com/documentation/swiftui/stateobject
title: This page requires JavaScript.
description: A property wrapper type that instantiates an observable object.

One way to do this is to bind the view’s identity to the value that changes using the id(_:) modifier.
For example, you can ensure that the identity of an instance of MyInitializableView changes when its name input changes:MyInitializableView(name: name) .id(name) // Binds the identity of the view to the name property.
NoteIf your view appears inside a ForEach, it implicitly receives an id(_:) modifier that uses the identifier of the corresponding data element.If you need the view to reinitialize state based on changes in more than one value, you can combine the values into a single identifier using a Hasher.
For example, if you want to update the data model in MyInitializableView when the values of either name or isEnabled change, you can combine both variables into a single hash:var hash: Int { var hasher = Hasher() hasher.combine(name) hasher.combine(isEnabled) return hasher.finalize()
}
Then apply the combined hash to the view as an identifier:MyInitializableView(name: name, isEnabled: isEnabled) .id(hash)
Be mindful of the performance cost of reinitializing the state object every time the input changes.
Also, changing view identity can have side effects.
For example, SwiftUI doesn’t automatically animate changes inside the view if the view’s identity changes at the same time.

---

url: https://developer.apple.com/documentation/swiftui/stateobject
title: This page requires JavaScript.
description: A property wrapper type that instantiates an observable object.

Also, changing the identity resets all state held by the view, including values that you manage as State, FocusState, GestureState, and so on.TopicsCreating a state objectinit(wrappedValue: @autoclosure () -> ObjectType)Creates a new state object with an initial wrapped value.Getting the valuevar wrappedValue: ObjectTypeThe underlying value referenced by the state object.var projectedValue: ObservedObject<ObjectType>.WrapperA projection of the state object that creates bindings to its properties.RelationshipsConforms ToDynamicPropertySendableSee AlsoCreating model dataManaging model data in your appCreate connections between your app’s data model and views.Migrating from the Observable Object protocol to the Observable macroUpdate your existing app to leverage the benefits of Observation in Swift.@attached(member, names: named(_$observationRegistrar), named(access), named(withMutation)) @attached(memberAttribute) @attached(extension, conformances: Observable) macro Observable()Defines and implements conformance of the Observable protocol.Monitoring data changes in your appShow changes to data in your app’s user interface by using observable objects.struct ObservedObjectA property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.protocol ObservableObject : AnyObjectA type of object with a publisher that emits before the object has changed.

---

url: https://developer.apple.com/documentation/swiftui/environmentobject
title: This page requires JavaScript.
description: A property wrapper type for an observable object that a parent or ancestor view supplies.

SwiftUI EnvironmentObject StructureEnvironmentObjectA property wrapper type for an observable object that a parent or ancestor view supplies.iOS 13.0+iPadOS 13.0+Mac Catalyst 13.0+macOS 10.15+tvOS 13.0+visionOS 1.0+watchOS 6.0+@MainActor @frozen @propertyWrapper @preconcurrency
struct EnvironmentObject<ObjectType> where ObjectType : ObservableObjectOverviewAn environment object invalidates the current view whenever the observable object that conforms to ObservableObject changes.

---

url: https://developer.apple.com/documentation/swiftui/environmentobject
title: This page requires JavaScript.
description: A property wrapper type for an observable object that a parent or ancestor view supplies.

If you declare a property as an environment object, be sure to set a corresponding model object on an ancestor view by calling its environmentObject(_:) modifier.NoteIf your observable object conforms to the Observable protocol, use Environment instead of EnvironmentObject and set the model object in an ancestor view by calling its environment(_:) or environment(_:_:) modifiers.TopicsCreating an environment objectinit()Creates an environment object.Getting the valuevar wrappedValue: ObjectTypeThe underlying value referenced by the environment object.var projectedValue: EnvironmentObject<ObjectType>.WrapperA projection of the environment object that creates bindings to its properties using dynamic member lookup.struct WrapperA wrapper of the underlying environment object that can create bindings to its properties using dynamic member lookup.RelationshipsConforms ToDynamicPropertySendableSee AlsoDistributing model data throughout your appfunc environmentObject<T>(T) -> some ViewSupplies an observable object to a view’s hierarchy.func environmentObject<T>(T) -> some SceneSupplies an ObservableObject to a view subhierarchy.

---

url: https://developer.apple.com/documentation/swiftui/scene/environmentobject(_:)
title: This page requires JavaScript.
description: Supplies an ObservableObject to a view subhierarchy.

SwiftUI Scene environmentObject(_:) Instance MethodenvironmentObject(_:)Supplies an ObservableObject to a view subhierarchy.iOS 17.0+iPadOS 17.0+Mac Catalyst 17.0+macOS 14.0+tvOS 17.0+visionOS 1.0+watchOS 10.0+nonisolated
func environmentObject<T>(_ object: T) -> some Scene where T : ObservableObject Parameters objectThe object to store and make available to the scene’s subhierarchy.DiscussionThe object can be read by any child by using EnvironmentObject:final class Profile: ObservableObject { ... } @main
struct MyApp: App { var body: some View { WindowGroup { ContentView() } .environment(ProfileService.currentProfile) }
}
You then read the object inside ContentView or one of its descendants using the EnvironmentObject property wrapper:struct ContentView: View { @EnvironmentObject private var currentAccount: Account var body: some View { ... }
}
See AlsoDistributing model data throughout your appfunc environmentObject<T>(T) -> some ViewSupplies an observable object to a view’s hierarchy.struct EnvironmentObjectA property wrapper type for an observable object that a parent or ancestor view supplies.

---

url: https://developer.apple.com/documentation/swiftui/view/environmentobject(_:)
title: This page requires JavaScript.
description: Supplies an observable object to a view’s hierarchy.

SwiftUI View environmentObject(_:) Instance MethodenvironmentObject(_:)Supplies an observable object to a view’s hierarchy.iOS 13.0+iPadOS 13.0+Mac Catalyst 13.0+macOS 10.15+tvOS 13.0+visionOS 1.0+watchOS 6.0+nonisolated
func environmentObject<T>(_ object: T) -> some View where T : ObservableObject Parameters objectThe object to store and make available to the view’s hierarchy.DiscussionUse this modifier to add an observable object to a view’s environment. The object must conform to the ObservableObject protocol.Adding an object to a view’s environment makes the object available to subviews in the view’s hierarchy. To retrieve the object in a subview, use the EnvironmentObject property wrapper.NoteIf the observable object conforms to the Observable protocol, use either environment(_:) or the environment(_:_:) modifier to add the object to the view’s environment.See AlsoDistributing model data throughout your appfunc environmentObject<T>(T) -> some SceneSupplies an ObservableObject to a view subhierarchy.struct EnvironmentObjectA property wrapper type for an observable object that a parent or ancestor view supplies.

---

url: https://developer.apple.com/documentation/swiftui/view/onchange(of:initial:_:)
title: This page requires JavaScript.
description: Adds a modifier for this view that fires an action when a specific value changes.

SwiftUI View onChange(of:initial:_:) Instance MethodonChange(of:initial:_:)Adds a modifier for this view that fires an action when a specific value changes.iOS 17.0+iPadOS 17.0+Mac Catalyst 17.0+macOS 14.0+tvOS 17.0+visionOS 1.0+watchOS 10.0+nonisolated
func onChange<V>( of value: V, initial: Bool = false, _ action: @escaping () -> Void
) -> some View where V : Equatable Show all declarations Parameters valueThe value to check against when determining whether to run the closure.initialWhether the action should be run when this view initially appears.actionA closure to run when the value changes.Return ValueA view that fires an action when the specified value changes.DiscussionYou can use onChange to trigger a side effect as the result of a value changing, such as an Environment key or a Binding.The system may call the action closure on the main actor, so avoid long-running tasks in the closure.
If you need to perform such tasks, detach an asynchronous background task.When the value changes, the new version of the closure will be called, so any captured values will have their values from the time that the observed value has its new value.

---

url: https://developer.apple.com/documentation/swiftui/view/onchange(of:initial:_:)
title: This page requires JavaScript.
description: Adds a modifier for this view that fires an action when a specific value changes.

In the following code example, PlayerView calls into its model when playState changes model.struct PlayerView: View { var episode: Episode @State private var playState: PlayState = .paused var body: some View { VStack { Text(episode.title) Text(episode.showTitle) PlayButton(playState: $playState) } .onChange(of: playState) { model.playStateDidChange(state: playState) } }
}
See AlsoResponding to data changesfunc onReceive<P>(P, perform: (P.Output) -> Void) -> some ViewAdds an action to perform when this view detects data emitted by the given publisher.

---

url: https://developer.apple.com/documentation/swiftui/observedobject
title: This page requires JavaScript.
description: A property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.

SwiftUI ObservedObject StructureObservedObjectA property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.iOS 13.0+iPadOS 13.0+Mac Catalyst 13.0+macOS 10.15+tvOS 13.0+visionOS 1.0+watchOS 6.0+@MainActor @propertyWrapper @preconcurrency @frozen
struct ObservedObject<ObjectType> where ObjectType : ObservableObjectOverviewAdd the @ObservedObject attribute to a parameter of a SwiftUI View when the input is an ObservableObject and you want the view to update when the object’s published properties change.

---

url: https://developer.apple.com/documentation/swiftui/observedobject
title: This page requires JavaScript.
description: A property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.

You typically do this to pass a StateObject into a subview.The following example defines a data model as an observable object, instantiates the model in a view as a state object, and then passes the instance to a subview as an observed object:class DataModel: ObservableObject { @Published var name = "Some Name" @Published var isEnabled = false
} struct MyView: View { @StateObject private var model = DataModel() var body: some View { Text(model.name) MySubView(model: model) }
} struct MySubView: View { @ObservedObject var model: DataModel var body: some View { Toggle("Enabled", isOn: $model.isEnabled) }
}
When any published property of the observable object changes, SwiftUI updates any view that depends on the object.
Subviews can also make updates to the model properties, like the Toggle in the above example, that propagate to other observers throughout the view hierarchy.Don’t specify a default or initial value for the observed object.
Use the attribute only for a property that acts as an input for a view, as in the above example.NoteDon’t wrap objects conforming to the Observable protocol with @ObservedObject.

---

url: https://developer.apple.com/documentation/swiftui/observedobject
title: This page requires JavaScript.
description: A property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.

SwiftUI automatically tracks dependencies to Observable objects used within body and updates dependent views when their data changes.
Attempting to wrap an Observable object with @ObservedObject may cause a compiler error, because it requires that its wrapped object to conform to the ObservableObject protocol.If the view needs a binding to a property of an Observable object in its body, wrap the object with the Bindable property wrapper instead; for example, @Bindable var model: DataModel.

---

url: https://developer.apple.com/documentation/swiftui/observedobject
title: This page requires JavaScript.
description: A property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.

For more information, see Managing model data in your app.TopicsCreating an observed objectinit(wrappedValue: ObjectType)Creates an observed object with an initial wrapped value.init(initialValue: ObjectType)Creates an observed object with an initial value.Getting the valuevar wrappedValue: ObjectTypeThe underlying value that the observed object references.var projectedValue: ObservedObject<ObjectType>.WrapperA projection of the observed object that creates bindings to its properties.struct WrapperA wrapper of the underlying observable object that can create bindings to its properties.RelationshipsConforms ToDynamicPropertySendableSee AlsoCreating model dataManaging model data in your appCreate connections between your app’s data model and views.Migrating from the Observable Object protocol to the Observable macroUpdate your existing app to leverage the benefits of Observation in Swift.@attached(member, names: named(_$observationRegistrar), named(access), named(withMutation)) @attached(memberAttribute) @attached(extension, conformances: Observable) macro Observable()Defines and implements conformance of the Observable protocol.Monitoring data changes in your appShow changes to data in your app’s user interface by using observable objects.struct StateObjectA property wrapper type that instantiates an observable object.protocol ObservableObject : AnyObjectA type of object with a publisher that emits before the object has changed.

---

url: https://developer.apple.com/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro
title: This page requires JavaScript.
description: Update your existing app to leverage the benefits of Observation in Swift.

SwiftUI Model data Migrating from the Observable Object protocol to the Observable macro Sample CodeMigrating from the Observable Object protocol to the Observable macroUpdate your existing app to leverage the benefits of Observation in Swift.
Download iOS 17.0+iPadOS 17.0+macOS 14.0+Xcode 15.0+OverviewStarting with iOS 17, iPadOS 17, macOS 14, tvOS 17, and watchOS 10, SwiftUI provides support for Observation, a Swift-specific implementation of the observer design pattern.
Adopting Observation provides your app with the following benefits:Tracking optionals and collections of objects, which isn’t possible when using ObservableObject.Using existing data flow primitives like State and Environment instead of object-based equivalents such as StateObject and EnvironmentObject.Updating views based on changes to the observable properties that a view’s body reads instead of any property changes that occur to an observable object, which can help improve your app’s performance.To take advantage of these benefits in your app, you’ll discover how to replace existing source code that relies on ObservableObject with code that leverages the Observable() macro.NoteDownload this sample to see the migrated version of the sample app.

---

url: https://developer.apple.com/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro
title: This page requires JavaScript.
description: Update your existing app to leverage the benefits of Observation in Swift.

To see the premigrated version, download the sample available in Monitoring data changes in your app.
You can also use the premigrated version to code along with this article.Use the Observable macroTo adopt Observation in an existing app, begin by replacing ObservableObject in your data model type with the Observable() macro.
The Observable() macro generates source code at compile time that adds observation support to the type.// BEFORE
import SwiftUI class Library: ObservableObject { // ...
}
// AFTER
import SwiftUI @Observable class Library { // ...
}
Then remove the Published property wrapper from observable properties.
Observation doesn’t require a property wrapper to make a property observable.

---

url: https://developer.apple.com/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro
title: This page requires JavaScript.
description: Update your existing app to leverage the benefits of Observation in Swift.

Instead, the accessibility of the property in relationship to an observer, such as a view, determines whether a property is observable.// BEFORE
@Observable class Library { @Published var books: [Book] = [Book(), Book(), Book()]
}
// AFTER
@Observable class Library { var books: [Book] = [Book(), Book(), Book()]
}
If you have properties that are accessible to an observer that you don’t want to track, apply the ObservationIgnored() macro to the property.Migrate incrementallyYou don’t need to make a wholesale replacement of the ObservableObject protocol throughout your app.
Instead, you can make changes incrementally.
Start by changing one data model type to use the Observable() macro.
Your app can mix data model types that use different observation systems.
However, SwiftUI tracks changes differently based on the observation system that a data model type uses, Observable versus ObservableObject.You may notice slight behavioral differences in your app based on the tracking method.
For instance, when tracking as Observable(), SwiftUI updates a view only when an observable property changes and the view’s body reads the property directly.
The view doesn’t update when observable properties not read by body changes.

---

url: https://developer.apple.com/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro
title: This page requires JavaScript.
description: Update your existing app to leverage the benefits of Observation in Swift.

In contrast, a view updates when any published property of an ObservableObject instance changes, even if the view doesn’t read the property that changes, when tracking as ObservableObject.NoteTo learn more about when SwiftUI updates views when observable properties change, see Managing model data in your app.Migrate other source codeThe only change made to the sample app so far is to apply the Observable() macro to Library and remove support for the ObservableObject protocol.
The app still uses the ObservableObject data flow primitive like StateObject to manage an instance of Library.
If you were to build and run the app, SwiftUI still updates the views as expected.
That’s because data flow property wrappers such as StateObject and EnvironmentObject support types that use the Observable() macro.
SwiftUI provides this support so apps can make source code changes incrementally.However, to fully adopt Observation, replace the use of StateObject with State after updating your data model type.
For example, in the following code the main app structure creates an instance of Library and stores it as a StateObject.

---

url: https://developer.apple.com/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro
title: This page requires JavaScript.
description: Update your existing app to leverage the benefits of Observation in Swift.

It also adds the Library instance to the environment using the environmentObject(_:) modifier.// BEFORE
@main
struct BookReaderApp: App { @StateObject private var library = Library() var body: some Scene { WindowGroup { LibraryView() .environmentObject(library) } }
}
Now that Library no longer conforms to ObservableObject, the code can change to use State instead of StateObject and to add library to the environment using the environment(_:) modifier.// AFTER
@main
struct BookReaderApp: App { @State private var library = Library() var body: some Scene { WindowGroup { LibraryView() .environment(library) } }
}
One more change must happen before Library fully adopts Observation.
Previously the view LibraryView retrieved a Library instance from the environment using the EnvironmentObject property wrapper.

---

url: https://developer.apple.com/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro
title: This page requires JavaScript.
description: Update your existing app to leverage the benefits of Observation in Swift.

The new code, however, uses the Environment property wrapper instead.// BEFORE
struct LibraryView: View { @EnvironmentObject var library: Library var body: some View { List(library.books) { book in BookView(book: book) } }
}
// AFTER
struct LibraryView: View { @Environment(Library.self) private var library var body: some View { List(library.books) { book in BookView(book: book) } }
}
Remove the ObservedObject property wrapperTo wrap up the migration of the sample app, change the data model type Book to support Observation by removing ObservableObject from the type declaration and apply the Observable() macro.
Then remove the Published property wrapper from observable properties.// BEFORE
class Book: ObservableObject, Identifiable { @Published var title = "Sample Book Title" let id = UUID() // A unique identifier that never changes.
}
// AFTER
@Observable class Book: Identifiable { var title = "Sample Book Title" let id = UUID() // A unique identifier that never changes.
}
Next, remove the ObservedObject property wrapper from the book variable in the BookView.
This property wrapper isn’t needed when adopting Observation.
That’s because SwiftUI automatically tracks any observable properties that a view’s body reads directly.

---

url: https://developer.apple.com/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro
title: This page requires JavaScript.
description: Update your existing app to leverage the benefits of Observation in Swift.

For example, SwiftUI updates BookView when book.title changes.// BEFORE
struct BookView: View { @ObservedObject var book: Book @State private var isEditorPresented = false var body: some View { HStack { Text(book.title) Spacer() Button("Edit") { isEditorPresented = true } } .sheet(isPresented: $isEditorPresented) { BookEditView(book: book) } }
}
// AFTER
struct BookView: View { var book: Book @State private var isEditorPresented = false var body: some View { HStack { Text(book.title) Spacer() Button("Edit") { isEditorPresented = true } } .sheet(isPresented: $isEditorPresented) { BookEditView(book: book) } }
}
However, if a view needs a binding to an observable type, replace ObservedObject with the Bindable property wrapper.
This property wrapper provides binding support to an observable type so that views that expect a binding can change an observable property.

---

url: https://developer.apple.com/documentation/swiftui/migrating-from-the-observable-object-protocol-to-the-observable-macro
title: This page requires JavaScript.
description: Update your existing app to leverage the benefits of Observation in Swift.

For instance, in the following code TextField receives a binding to book.title:// BEFORE
struct BookEditView: View { @ObservedObject var book: Book @Environment(\.dismiss) private var dismiss var body: some View { VStack() { TextField("Title", text: $book.title) .textFieldStyle(.roundedBorder) .onSubmit { dismiss() } Button("Close") { dismiss() } .buttonStyle(.borderedProminent) } .padding() }
}
// AFTER
struct BookEditView: View { @Bindable var book: Book @Environment(\.dismiss) private var dismiss var body: some View { VStack() { TextField("Title", text: $book.title) .textFieldStyle(.roundedBorder) .onSubmit { dismiss() } Button("Close") { dismiss() } .buttonStyle(.borderedProminent) } .padding() }
}
See AlsoCreating model dataManaging model data in your appCreate connections between your app’s data model and views.@attached(member, names: named(_$observationRegistrar), named(access), named(withMutation)) @attached(memberAttribute) @attached(extension, conformances: Observable) macro Observable()Defines and implements conformance of the Observable protocol.Monitoring data changes in your appShow changes to data in your app’s user interface by using observable objects.struct StateObjectA property wrapper type that instantiates an observable object.struct ObservedObjectA property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.protocol ObservableObject : AnyObjectA type of object with a publisher that emits before the object has changed.

---

url: https://developer.apple.com/documentation/combine/observableobject
title: This page requires JavaScript.
description: A type of object with a publisher that emits before the object has changed.

Combine ObservableObject ProtocolObservableObjectA type of object with a publisher that emits before the object has changed.iOS 13.0+iPadOS 13.0+Mac Catalyst 13.0+macOS 10.15+tvOS 13.0+visionOS 1.0+watchOS 6.0+protocol ObservableObject : AnyObjectOverviewBy default an ObservableObject synthesizes an objectWillChange publisher that emits the changed value before any of its @Published properties changes.class Contact: ObservableObject { @Published var name: String @Published var age: Int init(name: String, age: Int) { self.name = name self.age = age } func haveBirthday() -> Int { age += 1 return age }
} let john = Contact(name: "John Appleseed", age: 24)
cancellable = john.objectWillChange .sink { _ in print("\(john.age) will change")
}
print(john.haveBirthday())
// Prints "24 will change"
// Prints "25"
TopicsPublishing Changesvar objectWillChange: Self.ObjectWillChangePublisherA publisher that emits before the object has changed.Required Default implementation provided. associatedtype ObjectWillChangePublisher : Publisher = ObservableObjectPublisherThe type of publisher that emits before the object has changed.RequiredSee AlsoObservable Objectsclass ObservableObjectPublisherA publisher that publishes changes from observable objects.

---

url: https://developer.apple.com/documentation/swiftui/state
title: This page requires JavaScript.
description: A property wrapper type that can read and write a value managed by SwiftUI.

SwiftUI State StructureStateA property wrapper type that can read and write a value managed by SwiftUI.iOS 13.0+iPadOS 13.0+Mac Catalyst 13.0+macOS 10.15+tvOS 13.0+visionOS 1.0+watchOS 6.0+@frozen @propertyWrapper
struct State<Value> Mentioned in Performing a search operation Managing user interface state OverviewUse state as the single source of truth for a given value type that you store in a view hierarchy.
Create a state value in an App, Scene, or View by applying the @State attribute to a property declaration and providing an initial value.
Declare state as private to prevent setting it in a memberwise initializer, which can conflict with the storage management that SwiftUI provides:struct PlayButton: View { @State private var isPlaying: Bool = false // Create the state.
var body: some View { Button(isPlaying ?
"Pause" : "Play") { // Read the state.
isPlaying.toggle() // Write the state.
} }
}
SwiftUI manages the property’s storage.
When the value changes, SwiftUI updates the parts of the view hierarchy that depend on the value.
To access a state’s underlying value, you use its wrappedValue property.
However, as a shortcut Swift enables you to access the wrapped value by referring directly to the state instance.

---

url: https://developer.apple.com/documentation/swiftui/state
title: This page requires JavaScript.
description: A property wrapper type that can read and write a value managed by SwiftUI.

The above example reads and writes the isPlaying state property’s wrapped value by referring to the property directly.Declare state as private in the highest view in the view hierarchy that needs access to the value.
Then share the state with any subviews that also need access, either directly for read-only access, or as a binding for read-write access.
You can safely mutate state properties from any thread.Share state with subviewsIf you pass a state property to a subview, SwiftUI updates the subview any time the value changes in the container view, but the subview can’t modify the value.
To enable the subview to modify the state’s stored value, pass a Binding instead.For example, you can remove the isPlaying state from the play button in the above example, and instead make the button take a binding:struct PlayButton: View { @Binding var isPlaying: Bool // Play button now receives a binding.
var body: some View { Button(isPlaying ?
"Pause" : "Play") { isPlaying.toggle() } }
}
Then you can define a player view that declares the state and creates a binding to the state.

---

url: https://developer.apple.com/documentation/swiftui/state
title: This page requires JavaScript.
description: A property wrapper type that can read and write a value managed by SwiftUI.

Get the binding to the state value by accessing the state’s projectedValue, which you get by prefixing the property name with a dollar sign ($):struct PlayerView: View { @State private var isPlaying: Bool = false // Create the state here now.
var body: some View { VStack { PlayButton(isPlaying: $isPlaying) // Pass a binding.
// ...
} }
}
Like you do for a StateObject, declare State as private to prevent setting it in a memberwise initializer, which can conflict with the storage management that SwiftUI provides.
Unlike a state object, always initialize state by providing a default value in the state’s declaration, as in the above examples.
Use state only for storage that’s local to a view and its subviews.Store observable objectsYou can also store observable objects that you create with the Observable() macro in State; for example:@Observable
class Library { var name = "My library of books" // ...
} struct ContentView: View { @State private var library = Library() var body: some View { LibraryView(library: library) }
}
A State property always instantiates its default value when SwiftUI instantiates the view.
For this reason, avoid side effects and performance-intensive work when initializing the default value.

---

url: https://developer.apple.com/documentation/swiftui/state
title: This page requires JavaScript.
description: A property wrapper type that can read and write a value managed by SwiftUI.

For example, if a view updates frequently, allocating a new default object each time the view initializes can become expensive.
Instead, you can defer the creation of the object using the task(priority:_:) modifier, which is called only once when the view first appears:struct ContentView: View { @State private var library: Library?
var body: some View { LibraryView(library: library) .task { library = Library() } }
}
Delaying the creation of the observable state object ensures that unnecessary allocations of the object doesn’t happen each time SwiftUI initializes the view.
Using the task(priority:_:) modifier is also an effective way to defer any other kind of work required to create the initial state of the view, such as network calls or file access.NoteIt’s possible to store an object that conforms to the ObservableObject protocol in a State property.
However the view will only update when the reference to the object changes, such as when setting the property with a reference to another object.
The view will not update if any of the object’s published properties change.

---

url: https://developer.apple.com/documentation/swiftui/state
title: This page requires JavaScript.
description: A property wrapper type that can read and write a value managed by SwiftUI.

To track changes to both the reference and the object’s published properties, use StateObject instead of State when storing the object.Share observable state objects with subviewsTo share an Observable object stored in State with a subview, pass the object reference to the subview.
SwiftUI updates the subview anytime an observable property of the object changes, but only when the subview’s body reads the property.
For example, in the following code BookView updates each time title changes but not when isAvailable changes:@Observable
class Book { var title = "A sample book" var isAvailable = true
} struct ContentView: View { @State private var book = Book() var body: some View { BookView(book: book) }
} struct BookView: View { var book: Book var body: some View { Text(book.title) }
}
State properties provide bindings to their value.
When storing an object, you can get a Binding to that object, specifically the reference to the object.
This is useful when you need to change the reference stored in state in some other subview, such as setting the reference to nil:struct ContentView: View { @State private var book: Book?
var body: some View { DeleteBookView(book: $book) .task { book = Book() } }
} struct DeleteBookView: View { @Binding var book: Book?

---

url: https://developer.apple.com/documentation/swiftui/state
title: This page requires JavaScript.
description: A property wrapper type that can read and write a value managed by SwiftUI.

var body: some View { Button("Delete book") { book = nil } }
}
However, passing a Binding to an object stored in State isn’t necessary when you need to change properties of that object.
For example, you can set the properties of the object to new values in a subview by passing the object reference instead of a binding to the reference:struct ContentView: View { @State private var book = Book() var body: some View { BookCheckoutView(book: book) }
} struct BookCheckoutView: View { var book: Book var body: some View { Button(book.isAvailable ?
"Check out book" : "Return book") { book.isAvailable.toggle() } }
}
If you need a binding to a specific property of the object, pass either the binding to the object and extract bindings to specific properties where needed, or pass the object reference and use the Bindable property wrapper to create bindings to specific properties.
For example, in the following code BookEditorView wraps book with @Bindable.

---

url: https://developer.apple.com/documentation/swiftui/state
title: This page requires JavaScript.
description: A property wrapper type that can read and write a value managed by SwiftUI.

Then the view uses the $ syntax to pass to a TextField a binding to title:struct ContentView: View { @State private var book = Book() var body: some View { BookView(book: book) }
} struct BookView: View { let book: Book var body: some View { BookEditorView(book: book) }
} struct BookEditorView: View { @Bindable var book: Book var body: some View { TextField("Title", text: $book.title) }
}
TopicsCreating a stateinit(wrappedValue: Value)Creates a state property that stores an initial wrapped value.init(initialValue: Value)Creates a state property that stores an initial value.init()Creates a state property without an initial value.Getting the valuevar wrappedValue: ValueThe underlying value referenced by the state variable.var projectedValue: Binding<Value>A binding to the state value.RelationshipsConforms ToDynamicPropertySendableSee AlsoCreating and sharing view stateManaging user interface stateEncapsulate view-specific data within your app’s view hierarchy to make your views reusable.struct BindableA property wrapper type that supports creating bindings to the mutable properties of observable objects.struct BindingA property wrapper type that can read and write a value owned by a source of truth.

---

url: https://developer.apple.com/documentation/swiftui/managing-user-interface-state
title: This page requires JavaScript.
description: Encapsulate view-specific data within your app’s view hierarchy to make your views reusable.

SwiftUI Model data Managing user interface state ArticleManaging user interface stateEncapsulate view-specific data within your app’s view hierarchy to make your views reusable.OverviewStore data as state in the least common ancestor of the views that need the data to establish a single source of truth that’s shared across views.
Provide the data as read-only through a Swift property, or create a two-way connection to the state with a binding.
SwiftUI watches for changes in the data, and updates any affected views as needed.Don’t use state properties for persistent storage because the life cycle of state variables mirrors the view life cycle.
Instead, use them to manage transient state that only affects the user interface, like the highlight state of a button, filter settings, or the currently selected list item.
You might also find this kind of storage convenient while you prototype, before you’re ready to make changes to your app’s data model.Manage mutable values as stateIf a view needs to store data that it can modify, declare a variable with the State property wrapper.

---

url: https://developer.apple.com/documentation/swiftui/managing-user-interface-state
title: This page requires JavaScript.
description: Encapsulate view-specific data within your app’s view hierarchy to make your views reusable.

For example, you can create an isPlaying Boolean inside a podcast player view to keep track of when a podcast is running:struct PlayerView: View { @State private var isPlaying: Bool = false var body: some View { // ...
}
}
Marking the property as state tells the framework to manage the underlying storage.
Your view reads and writes the data, found in the state’s wrappedValue property, by using the property name.
When you change the value, SwiftUI updates the affected parts of the view.
For example, you can add a button to the PlayerView that toggles the stored value when tapped, and that displays a different image depending on the stored value:Button(action: { self.isPlaying.toggle()
}) { Image(systemName: isPlaying ?
"pause.circle" : "play.circle")
}
Limit the scope of state variables by declaring them as private.
This ensures that the variables remain encapsulated in the view hierarchy that declares them.Declare Swift properties to store immutable valuesTo provide a view with data that the view doesn’t modify, declare a standard Swift property.
For example, you can extend the podcast player to have an input structure that contains strings for the episode title and the show name:struct PlayerView: View { let episode: Episode // The queued episode.

---

url: https://developer.apple.com/documentation/swiftui/managing-user-interface-state
title: This page requires JavaScript.
description: Encapsulate view-specific data within your app’s view hierarchy to make your views reusable.

@State private var isPlaying: Bool = false var body: some View { VStack { // Display information about the episode.
Text(episode.title) Text(episode.showTitle) Button(action: { self.isPlaying.toggle() }) { Image(systemName: isPlaying ?
"pause.circle" : "play.circle") } } }
}
While the value of the episode property is a constant for PlayerView, it doesn’t need to be constant in this view’s parent view.
When the user selects a different episode in the parent, SwiftUI detects the state change and recreates the PlayerView with a new input.Share access to state with bindingsIf a view needs to share control of state with a child view, declare a property in the child with the Binding property wrapper.
A binding represents a reference to existing storage, preserving a single source of truth for the underlying data.
For example, if you refactor the podcast player view’s button into a child view called PlayButton, you can give it a binding to the isPlaying property:struct PlayButton: View { @Binding var isPlaying: Bool var body: some View { Button(action: { self.isPlaying.toggle() }) { Image(systemName: isPlaying ?

---

url: https://developer.apple.com/documentation/swiftui/managing-user-interface-state
title: This page requires JavaScript.
description: Encapsulate view-specific data within your app’s view hierarchy to make your views reusable.

"pause.circle" : "play.circle") } }
}
As shown above, you read and write the binding’s wrapped value by referring directly to the property, just like state.
But unlike a state property, the binding doesn’t have its own storage.
Instead, it references a state property stored somewhere else, and provides a two-way connection to that storage.When you instantiate PlayButton, provide a binding to the corresponding state variable declared in the parent view by prefixing it with the dollar sign ($):struct PlayerView: View { var episode: Episode @State private var isPlaying: Bool = false var body: some View { VStack { Text(episode.title) Text(episode.showTitle) PlayButton(isPlaying: $isPlaying) // Pass a binding.
} }
}
The $ prefix asks a wrapped property for its projectedValue, which for state is a binding to the underlying storage.
Similarly, you can get a binding from a binding using the $ prefix, allowing you to pass a binding through an arbitrary number of levels of view hierarchy.You can also get a binding to a scoped value within a state variable.

---

url: https://developer.apple.com/documentation/swiftui/managing-user-interface-state
title: This page requires JavaScript.
description: Encapsulate view-specific data within your app’s view hierarchy to make your views reusable.

For example, if you declare episode as a state variable in the player’s parent view, and the episode structure also contains an isFavorite Boolean that you want to control with a toggle, then you can refer to $episode.isFavorite to get a binding to the episode’s favorite status:struct Podcaster: View { @State private var episode = Episode(title: "Some Episode", showTitle: "Great Show", isFavorite: false) var body: some View { VStack { Toggle("Favorite", isOn: $episode.isFavorite) // Bind to the Boolean.
PlayerView(episode: episode) } }
}
Animate state transitionsWhen the view state changes, SwiftUI updates affected views right away.
If you want to smooth visual transitions, you can tell SwiftUI to animate them by wrapping the state change that triggers them in a call to the withAnimation(_:_:) function.
For example, you can animate changes controlled by the isPlaying Boolean:withAnimation(.easeInOut(duration: 1)) { self.isPlaying.toggle()
}
By changing isPlaying inside the animation function’s trailing closure, you tell SwiftUI to animate anything that depends on the wrapped value, like a scale effect on the button’s image:Image(systemName: isPlaying ?
"pause.circle" : "play.circle") .scaleEffect(isPlaying ?

---

url: https://developer.apple.com/documentation/swiftui/managing-user-interface-state
title: This page requires JavaScript.
description: Encapsulate view-specific data within your app’s view hierarchy to make your views reusable.

1 : 1.5)
SwiftUI transitions the scale effect input over time between the given values of 1 and 1.5, using the curve and duration that you specify, or reasonable default values if you provide none.
On the other hand, the image content isn’t affected by the animation, even though the same Boolean dictates which system image to display.
That’s because SwiftUI can’t incrementally transition in a meaningful way between the two strings pause.circle and play.circle.You can add animation to a state property, or as in the above example, to a binding.
Either way, SwiftUI animates any view changes that happen when the underlying stored value changes.
For example, if you add a background color to the PlayerView — at a level of view hierarchy above the location of the animation block — SwiftUI animates that as well:VStack { Text(episode.title) Text(episode.showTitle) PlayButton(isPlaying: $isPlaying)
}
.background(isPlaying ?
Color.green : Color.red) // Transitions with animation.

---

url: https://developer.apple.com/documentation/swiftui/managing-user-interface-state
title: This page requires JavaScript.
description: Encapsulate view-specific data within your app’s view hierarchy to make your views reusable.

When you want to apply animations to specific views, rather than across all views triggered by a change in state, use the animation(_:value:) view modifier instead.See AlsoCreating and sharing view statestruct StateA property wrapper type that can read and write a value managed by SwiftUI.struct BindableA property wrapper type that supports creating bindings to the mutable properties of observable objects.struct BindingA property wrapper type that can read and write a value owned by a source of truth.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

SwiftUI Model data Managing model data in your app Sample CodeManaging model data in your appCreate connections between your app’s data model and views.
Download iOS 17.0+iPadOS 17.0+macOS 14.0+Xcode 15.0+OverviewA SwiftUI app can display data that people can change using the app’s user interface (UI).
To manage that data, an app creates a data model, which is a custom type that represents the data.
A data model provides separation between the data and the views that interact with the data.
This separation promotes modularity, improves testability, and helps make it easier to reason about how the app works.Keeping the model data (that is, an instance of a data model) in sync with what appears on the screen can be challenging, especially when the data appears in multiple views of the UI at the same time.SwiftUI helps keep your app’s UI up to date with changes made to the data thanks to Observation.
With Observation, a view in SwiftUI can form dependencies on observable data models and update the UI when data changes.NoteObservation support in SwiftUI is available starting with iOS 17, iPadOS 17, macOS 14, tvOS 17, and watchOS 10.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

For information about adopting Observation in existing apps, see Migrating from the Observable Object protocol to the Observable macro.Make model data observableTo make data changes visible to SwiftUI, apply the Observable() macro to your data model.
This macro generates code that adds observation support to your data model at compile time, keeping your data model code focused on the properties that store data.
For example, the following code defines a data model for books:@Observable class Book: Identifiable { var title = "Sample Book Title" var author = Author() var isAvailable = true
}
ImportantThe Observable() macro, in addition to adding observation functionality, also conforms your data model type to the Observable protocol, which serves as a signal to other APIs that your type supports observation.
Don’t apply the Observable protocol by itself to your data model type, since that alone doesn’t add any observation functionality.
Instead, always use the Observable macro when adding observation support to your type.Observe model data in a viewIn SwiftUI, a view forms a dependency on an observable data model object, such as an instance of Book, when the view’s body property reads a property of the object.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

If body doesn’t read any properties of an observable data model object, the view doesn’t track any dependencies.When a tracked property changes, SwiftUI updates the view.
If other properties change that body doesn’t read, the view is unaffected and avoids unnecessary updates.
For example, the view in the following code updates only when a book’s title changes but not when author or isAvailable changes:struct BookView: View { var book: Book var body: some View { Text(book.title) }
}
SwiftUI establishes this dependency tracking even if the view doesn’t store the observable type, such as when using a global property or singleton:var globalBook: Book = Book() struct BookView: View { var body: some View { Text(globalBook.title) }
}
Observation also supports tracking of computed properties when the computed property makes use of an observable property.
For instance, the view in the following code updates when the number of available books changes:@Observable class Library { var books: [Book] = [Book(), Book(), Book()] var availableBooksCount: Int { books.filter(\.isAvailable).count }
} struct LibraryView: View { @Environment(Library.self) private var library var body: some View { NavigationStack { List(library.books) { book in // ...

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

} .navigationTitle("Books available: \(library.availableBooksCount)") } }
}
When a view forms a dependency on a collection of objects, of any collection type, the view tracks changes made to the collection itself.
For instance, the view in the following code forms a dependency on books because body reads it.
As changes occur to books, such as inserting, deleting, moving, or replacing items in the collection, SwiftUI updates the view.struct LibraryView: View { @State private var books = [Book(), Book(), Book()] var body: some View { List(books) { book in Text(book.title) } }
}
However, LibraryView doesn’t form a dependency on the property title because the view’s body doesn’t read it directly.
The view stores the List content closure as an @escaping closure that SwiftUI calls when lazily creating list items before they appear on the screen.
This means that instead of LibraryView depending on a book’s title, each Text item of the list depends on title.
Any changes to a title updates only the individual Text representing the book and not the others.NoteObservation tracks changes to any observable property that appears in the execution scope of a view’s body property.You can also share an observable model data object with another view.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

The receiving view forms a dependency if it reads any properties of the object in the its body.
For example, in the following code LibraryView shares an instance of Book with BookView, and BookView displays the book’s title.
If the book’s title changes, SwiftUI updates only BookView, and not LibraryView, because only BookView reads the title property.struct LibraryView: View { @State private var books = [Book(), Book(), Book()] var body: some View { List(books) { book in BookView(book: book) } }
} struct BookView: View { var book: Book var body: some View { Text(book.title) }
}
If a view doesn’t have any dependencies, SwiftUI doesn’t update the view when data changes.
This approach allows an observable model data object to pass through multiple layers of a view hierarchy without each intermediate view forming a dependency.// Will not update when any property of `book` changes.
struct LibraryView: View { @State private var books = [Book(), Book(), Book()] var body: some View { LibraryItemView(book: book) }
} // Will not update when any property of `book` changes.
struct LibraryItemView: View { var book: Book var body: some View { BookView(book: book) }
} // Will update when `book.title` changes.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

struct BookView: View { var book: Book var body: some View { Text(book.title) }
}
However, a view that stores a reference to the observable object updates if the reference changes.
This happens because the stored reference is part of the view’s value and not because the object is observable.
For example, if the reference to book in the follow code changes, SwiftUI updates the view:struct BookView: View { var book: Book var body: some View { // ...
}
}
A view can also form a dependency on an observable data model object accessed through another object.
For example, the view in the following code updates when the author’s name changes:struct LibraryItemView: View { var book: Book var body: some View { VStack(alignment: .leading) { Text(book.title) Text("Written by: \(book.author.name)") .font(.caption) } }
}
Create the source of truth for model dataTo create and store the source of truth for model data, declare a private variable and initialize it with a instance of an observable data model type.
Then wrap it with a State property wrapper.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

For example, the following code stores an instance of the data model type Book in the state variable book:struct BookView: View { @State private var book = Book() var body: some View { Text(book.title) }
}
By wrapping the book with State, you’re telling SwiftUI to manage the storage of the instance.
Each time SwiftUI re-creates BookView, it connects the book variable to the managed instance, providing the view a single source of truth for the model data.You can also create a state object in your top-level App instance or in one of your app’s Scene instances.
For example, the following code creates an instance of Library in the app’s top-level structure:@main
struct BookReaderApp: App { @State private var library = Library() var body: some Scene { WindowGroup { LibraryView() .environment(library) } }
}
Share model data throughout a view hierarchyIf you have a data model object, like Library, that you want to share throughout your app, you can either:pass the data model object to each view in the view hierarchy; oradd the data model object to the view’s environmentPassing model data to each view is convenient when you have a shallow view hierarchy; for example, when a view doesn’t share the object with its subviews.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

However, you usually don’t know if a view needs to pass the object to subviews, and you may not know if a subview deep inside the layers of the hierarchy needs the model data.To share model data throughout a view hierarchy without needing to pass it to each view, add the model data to the view’s environment.
You can add the data to the environment using either environment(_:_:) or the environment(_:) modifier, passing in the model data.Before you can use the environment(_:_:) modifier, you need to create a custom EnvironmentKey.
Then extend EnvironmentValues to include a custom environment property that gets and sets the value for the custom key.
For instance, the following code creates an environment key and property for library:extension EnvironmentValues { var library: Library { get { self[LibraryKey.self] } set { self[LibraryKey.self] = newValue } }
} private struct LibraryKey: EnvironmentKey { static let defaultValue: Library = Library()
}
With the custom environment key and property in place, a view can add model data to its environment.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

For example, LibraryView adds the source of truth for a Library instance to its environment using the environment(_:_:) modifier:@main
struct BookReaderApp: App { @State private var library = Library() var body: some Scene { WindowGroup { LibraryView() .environment(\.library, library) } }
}
To retrieve the Library instance from the environment, a view defines a local variable that stores a reference to the instance, and then wraps the variable with the Environment property wrapper, passing in the key path to the custom environment value.struct LibraryView: View { @Environment(\.library) private var library var body: some View { // ...
}
}
You can also store model data directly in the environment without defining a custom environment value by using the environment(_:) modifier.
For instance, the following code adds a Library instance to the environment using this modifier:@main
struct BookReaderApp: App { @State private var library = Library() var body: some Scene { WindowGroup { LibraryView() .environment(library) } }
}
To retrieve the instance from the environment, another view defines a local variable to store the instance and wraps it with the Environment property wrapper.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

But instead of providing a key path to the environment value, you can provide the model data type, as shown in the following code:struct LibraryView: View { @Environment(Library.self) private var library var body: some View { // ...
}
}
By default, reading an object from the environment returns a non-optional object when using the object type as the key.
This default behavior assumes that a view in the current hierarchy previously stored a non-optional instance of the type using the environment(_:) modifier.
If a view attempts to retrieve an object using its type and that object isn’t in the environment, SwiftUI throws exception.In cases where there is no guarantee that an object is in the environment, retrieve an optional version of the object as shown in the following code.
If the object isn’t available the environment, SwiftUI returns nil instead of throwing an exception.@Environment(Library.self) private var library: Library?
Change model data in a viewIn most apps, people can change data that the app presents.
When data changes, any views that display the data should update to reflect the changed data.
With Observation in SwiftUI, a view can support data changes without using property wrappers or bindings.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

For example, the following toggles the isAvailable property of a book in the action closure of a button:struct BookView: View { var book: Book var body: some View { List { Text(book.title) HStack { Text(book.isAvailable ?
"Available for checkout" : "Waiting for return") Spacer() Button(book.isAvailable ?
"Check out" : "Return") { book.isAvailable.toggle() } } } }
}
However, there may be times when a view expects a binding before it can change the value of a mutable property.
To provide a binding, wrap the model data with the Bindable property wrapper.
For example, the following code wraps the book variable with @Bindable.
Then it uses a TextField to change the title property of a book, and a Toggle to change the isAvailable property, using the $ syntax to pass a binding to each property.struct BookEditView: View { @Bindable var book: Book @Environment(\.dismiss) private var dismiss var body: some View { VStack() { HStack { Text("Title") TextField("Title", text: $book.title) .textFieldStyle(.roundedBorder) .onSubmit { dismiss() } } Toggle(isOn: $book.isAvailable) { Text("Book is available") } Button("Close") { dismiss() } .buttonStyle(.borderedProminent) } .padding() }
}
You can use the Bindable property wrapper on properties and variables to an Observable object.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

This includes global variables, properties that exists outside of SwiftUI types, or even local variables.

---

url: https://developer.apple.com/documentation/swiftui/managing-model-data-in-your-app
title: This page requires JavaScript.
description: Create connections between your app’s data model and views.

For example, you can create a @Bindable variable within a view’s body:struct LibraryView: View { @State private var books = [Book(), Book(), Book()] var body: some View { List(books) { book in @Bindable var book = book TextField("Title", text: $book.title) } }
}
The @Bindable variable book provides a binding that connects TextField to the title property of a book so that a person can make changes directly to the model data.See AlsoCreating model dataMigrating from the Observable Object protocol to the Observable macroUpdate your existing app to leverage the benefits of Observation in Swift.@attached(member, names: named(_$observationRegistrar), named(access), named(withMutation)) @attached(memberAttribute) @attached(extension, conformances: Observable) macro Observable()Defines and implements conformance of the Observable protocol.Monitoring data changes in your appShow changes to data in your app’s user interface by using observable objects.struct StateObjectA property wrapper type that instantiates an observable object.struct ObservedObjectA property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.protocol ObservableObject : AnyObjectA type of object with a publisher that emits before the object has changed.

---

url: https://developer.apple.com/documentation/observation/observable()
title: This page requires JavaScript.
description: Defines and implements conformance of the Observable protocol.

Observation Observable() MacroObservable()Defines and implements conformance of the Observable protocol.iOS 17.0+iPadOS 17.0+Mac Catalyst 17.0+macOS 14.0+tvOS 17.0+visionOS 1.0+watchOS 10.0+@attached(member, names: named(_$observationRegistrar), named(access), named(withMutation)) @attached(memberAttribute) @attached(extension, conformances: Observable) macro Observable() Mentioned in Applying Macros OverviewThis macro adds observation support to a custom type and conforms the type to the Observable protocol. For example, the following code applies the Observable macro to the type Car making it observable:@Observable class Car { var name: String = "" var needsRepairs: Bool = false init(name: String, needsRepairs: Bool = false) { self.name = name self.needsRepairs = needsRepairs }
}
See AlsoObservable conformanceprotocol ObservableA type that emits notifications to observers when underlying data changes.

---

url: https://developer.apple.com/design/awards/2023/
title: 2023 winners and finalists
description: 

2023 winners and finalists
The Apple Design Awards honor excellence in innovation, ingenuity, and technical achievement in app and game design.
Streaming is available in most browsers, and in the Apple Developer app.
Inclusivity Winners
Winners in this category provide a great experience for all by supporting people from a diversity of backgrounds, abilities, and languages.
APP
Universe — Website Builder
Universe Exploration Company
Universe - Website Builder champions the idea of making website building accessible to everyone.
With its innovative block-centric design system and support for creating websites on all Apple platforms, the app empowers people to create their perfect online storefront, artist home, community group page, personal web presence, and anything in between.
The app has integrated many of Apple’s accessibility features, including a fantastic implementation of Dynamic Type and VoiceOver, and supports building websites in more than 17 languages.
By consistently reducing complexity and removing barriers to entry, Universe - Website Builder enables people to create their own space on the web through inclusive, thoughtful design.
Available on iPhone, iPad, and Mac View on the App Store Behind the Design: Universe — Website Builder GAME
stitch.
Lykke Studios
The warm and approachable stitch.

---

url: https://developer.apple.com/design/awards/2023/
title: 2023 winners and finalists
description: 

is more than a casual game — it’s a relaxing exercise with cross-generational appeal.
A puzzle game, relaxation technique, and afternoon craft project in one, stitch.
encourages players to proceed at their own pace with lovingly crafted puzzles, soothing music, and a gentle vibe.
And with its fun onboarding, support for multiple languages, and custom accessibility options for those with color blindness, low vision, and motion sensitivities, it’s designed for as many people as possible.
Available on iPhone, iPad, Mac, and Apple TV View on the App Store Behind the Design: stitch.
Finalists Anne
Alessandro Di Maio Passenger Assistance
TRANSREPORT
Available only in the UK Ancient Board Game Collection
Klemens Strasser Finding Hannah
Fein Games GmbH With Ancient Board Game Collection, Klemens Strasser goes back in time Delight and Fun Winners
Winners in this category provide memorable, engaging, and satisfying experiences that are enhanced by Apple technologies.
APP
Duolingo
Duolingo, Inc.
As anyone who’s crossed paths with Duolingo’s endearingly tenacious mascot can attest, delight and fun have always been central to the app’s success.
This past year, the Duolingo team embarked on a comprehensive redesign of both interface and content, making it even easier and more enjoyable to start learning a new language.

---

url: https://developer.apple.com/design/awards/2023/
title: 2023 winners and finalists
description: 

Quests, challenges, and leaderboards help gamify an already fantastic experience, and a consistent stream of app updates and new language programs — including courses for endangered and indigenous languages — help keep people engaged, exploring, and committed to their learning streak.
Available on iPhone and iPad View on the App Store Behind the Design: Duolingo GAME
Afterplace
Evan Kice
A vintage pixel adventure with a contemporary twist, Evan Kice’s Afterplace is a warm and welcoming RPG set in a fabulously expansive open world.
A beautifully crafted environment greets players at every turn, balancing winks to the past with a wry, modern personality.
Afterplace’s dark forest is a place of adventure, full of quirky mysteries, hidden rewards, and sarcastic vending machines — yet it’s designed to be accessible.
The game’s clever onboarding grounds players in the world, and its intuitive one-handed control system makes it easy and fun to discover Afterplace’s many surprises.
Available on iPhone and iPad View on the App Store Behind the Design: Afterplace Finalists CREME
The CREME Group Inc.
Chantlings
IORAMA Pocket Card Jockey: Ride On!
GAME FREAK Inc.
Knotwords
Zach Gage and Jack Schlesinger Interaction Winners
Winners in this category deliver intuitive interfaces and effortless controls that are perfectly tailored to their platform.

---

url: https://developer.apple.com/design/awards/2023/
title: 2023 winners and finalists
description: 

APP
Flighty
Flighty LLC
Flighty is a beautifully designed flight tracker, travel planner, airport navigator, and concierge.
And with incredible Live Activities and Dynamic Island integration, it’s a friendly companion for every leg of your journey.
With key information where you need it most, an intuitive interface, comprehensive live maps, and a look that mirrors time-honored airport design conventions, Flighty might be the easiest part of your whole trip.
It’s an incredible example of thorough and thoughtful use of Apple technologies, with best-in-class support for widgets, Siri shortcuts, Apple Maps, and Calendar integration.
iCloud sync means it’s available on every device in your carry-on, and you can live-share your flight path and ETA with anyone, whether they have the app installed or not.
Available on iPhone, iPad, and Mac View on the App Store Behind the Design: Flighty GAME
Railbound
Afterburn
Railbound may feel drawn and designed for kids, but this puzzler — in which you work to arrange train cars in their proper order — is for conductors of all ages.
The tap-and-drag mechanic for laying track is so simple you could almost discover it by accident, and the game makes it incredibly easy to change direction, add switches, or undo your mistakes.

---

url: https://developer.apple.com/design/awards/2023/
title: 2023 winners and finalists
description: 

And it’s full of clever design flourishes, like the scribbled frustration cloud that appears over a misplaced car and adorable characters that pop up along the way.
With pristine animation and colorful visuals, Railbound is a polished puzzler that’s easy to pick up and difficult to put down — especially once you’re going full steam.
Available on iPhone and iPad View on the App Store Behind the Design: Railbound Finalists Shuffles by Pinterest
Pinterest, Inc.
Tide Guide: Charts & Tables
Condor Digital LLC Automatoys
Idle Friday LTD Kimono Cats
HumaNature Studios Inc.
The gorgeous gadgets of Automatoys
The “sweet, creative” world of Kimono Cats Social Impact Winners
Winners in this category improve lives in a meaningful way and shine a light on crucial issues.
APP
Headspace
Headspace
Few apps have brought mindfulness to the masses more successfully than Headspace.
More than a decade into its tenure, the app continues to set the standard for meditation and mental health apps through thoughtful design decisions, an incredible UI, and a recognizable, comfortable illustration style.
Headspace is remarkably easy to navigate (collections are clearly labeled with understandable purposes), whether you’re looking for lengthy guided sessions or a five-minute clarity break.
Wonderful Apple Watch integration brings a moment of mindfulness to your wrist at any time.

---

url: https://developer.apple.com/design/awards/2023/
title: 2023 winners and finalists
description: 

And the app’s ever-growing number of diverse contributors and staff help ensure a focus on representing everyone.
Available on iPhone, iPad, and Apple Watch View on the App Store Behind the Design: Headspace GAME
Endling
HandyGames
In the gorgeous side-scroller Endling, you play as a fox fighting to navigate a land charred by environmental disaster and human impact.
Endling casts you as the animal lead to build an immediate sense of empathy and connection — one that only grows when you’re forced to begin defending your tiny offspring against all manner of man-made dangers.
And the game’s simple controls ensure that you focus on the powerful storyline rather than the interactions.
Endling isn’t always an easy story to experience, but its mix of medium and message has never felt more timely.
Available on iPhone and iPad View on the App Store Behind the Design: Endling Finalists Duolingo
Duolingo, Inc.
Sago Mini First Words
Sago Mini Hindsight
Team Hindsight Beecarbonize
Charles Games s.r.o.
Visuals and Graphics Winners
Winners in this category feature stunning imagery, skillfully drawn interfaces, and high-quality animations that lend to a distinctive and cohesive theme.
APP
Any Distance
Any Distance Inc.

---

url: https://developer.apple.com/design/awards/2023/
title: 2023 winners and finalists
description: 

Any Distance is a design-forward fitness tracker that delivers workout stats in a variety of eye-popping and easily shareable formats: dynamic charts and graphs, rotating 3D maps complete with elevation reports, even AR.
Any Distance takes full advantage of Live Activities and Apple Watch integration to collect and present data, which can include traditional workouts like running and cycling, as well as wheelchair exercise, stroller runs and walks, and recumbent bike rides.
And its in-app collectibles provide a fun incentive to go that extra mile.
Any Distance raises the bar for the fitness-tracking genre.
Available on iPhone and Apple Watch View on the App Store Behind the Design: Any Distance GAME
Resident Evil Village
CAPCOM Co., Ltd.
Resident Evil Village is an absolute powerhouse and the new standard of Mac gaming.
This horror adventure takes full advantage of the combined powers of Apple silicon, ProMotion, and Metal 3 to serve up all the character, lighting, and motion achievements that fans of the series could hope for.
From its creepy castle to its decrepit factories to its magnificently hideous villains, Resident Evil Village offers some of the most realistic graphics ever seen on Apple devices.
(Players can enable the MetalFX Upscaling feature to make being hunted by monsters extra terrifying.) It’s an incredible example of what Mac games can be.

---

url: https://developer.apple.com/design/awards/2023/
title: 2023 winners and finalists
description: 

Available on Mac View on the App Store Behind the Design: Resident Evil Village Finalists Gentler Streak Health Fitness
Gentler Stories LLC Riveo
Forge and Form GmbH Diablo Immortal
Blizzard/NetEase Endling
HandyGames Innovation Winners
Winners in this category provide a state-of-the-art experience through novel use of Apple technologies that set them apart in their genre.
APP
SwingVision: A.I.
Tennis App
SwingVision Inc.
By using the combined powers of AI and Neural Engine, SwingVision serves as a tennis coach that can help with every aspect of your game.
Point your camera at the court, and SwingVision’s advanced video-tracking capabilities evaluate your form, highlight your strengths, and suggest areas of improvement.
Data is drawn from the camera and through best-in-class Apple Watch integration.
Remarkably, all this technical achievement came from humble beginnings; SwingVision was built by two developers who taught themselves Swift.
Available on iPhone, iPad, Mac, and Apple Watch View on the App Store Behind the Design: SwingVision: A.I.
Tennis App GAME
MARVEL SNAP
Second Dinner
MARVEL SNAP has it all: brisk gameplay, unbelievable artwork, and an incredible stickiness that keeps you coming back — and rewards you for doing so.

---

url: https://developer.apple.com/design/awards/2023/
title: 2023 winners and finalists
description: 

But the game’s true innovation is its “snap” mechanic, which instantly doubles the stakes and introduces whole new layers of strategy and good old-fashioned psychological warfare.
The game is a visual feast, awash in 3D parallax graphics, astonishing animations (just watch Hulk smash in 60 fps), and delightfully deployed haptics.
True Marvel believers will be rewarded by a bottomless array of variants and deep-cut characters, while newbies will pick it up in no time at all.
MARVEL SNAP is an incredible achievement that’s redefined the collectible-card-game genre.
Available on iPhone and iPad View on the App Store Behind the Design: MARVEL SNAP Finalists Camo Studio
Reincubate Ltd.
Rise: Energy & Sleep Tracker
Rise Science Inc.
Resident Evil Village
CAPCOM Co., Ltd.
stitch.
Lykke Studios View last year’s winners

---

